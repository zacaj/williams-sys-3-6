0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             displayStrobe: 	.equ $2800
0004   0000             displayBcd: 	.equ $2802
0005   0000             displayStrobeC:	.equ $2801
0006   0000             displayBcdC:	.equ $2803
0007   0000             lampRow:		.equ $2400
0008   0000             lampRowC:		.equ $2401
0009   0000             lampStrobe:		.equ $2402
0010   0000             lampStrobeC:	.equ $2403
0011   0000             switchStrobe:	.equ $3002
0012   0000             switchStrobeC:	.equ $3003
0013   0000             switchRow:		.equ $3000
0014   0000             switchRowC:		.equ $3001
0015   0000             solenoidA:		.equ $2200
0016   0000             solenoidAC		.equ $2201
0017   0000             solenoidB:		.equ $2202
0018   0000             solenoidBC:		.equ $2203
0019   0000             
0020   0000             RAM:			.equ $0000
0021   0000             cRAM:			.equ $0100
0022   0000             temp:			.equ RAM + $00
0023   0000             counter:		.equ RAM + $02
0024   0000             counter2:		.equ RAM + $03
0025   0000             strobe:			.equ RAM + $07
0026   0000             lampRow1:		.equ RAM + $08
0027   0000             lampRow8:		.equ lampRow1 + 7 
0028   0000             displayBcd1:	.equ RAM + $10
0029   0000             displayBcd16:	.equ RAM + $1F
0030   0000             switchRow1:		.equ RAM + $20
0031   0000             switchRow8:		.equ switchRow1 + 7 
0032   0000             solAStatus:		.equ RAM + $28
0033   0000             solBStatus:		.equ RAM + $29
0034   0000             curCol:			.equ RAM + $50
0035   0000             curSwitchRowLsb	.equ RAM + $52
0036   0000             tempX:			.equ RAM + $53
0037   0000             
0038   0000             settleRow1:		.equ cRAM + $00
0039   0000             settleRow8:		.equ settleRow1+  8*8-1
0040   0000             solenoid1:		.equ cRAM + $40
0041   0000             solenoid8:		.equ solenoid1 + 7
0042   0000             solenoid9:		.equ solenoid1 + 8
0043   0000             solenoid16:		.equ solenoid1 + 15
0044   0000             pA_10:			.equ cRAM + $50
0045   0000             pA_1m:			.equ pA_10 + 5
0046   0000             pB_10:			.equ pA_1m + 1
0047   0000             pB_1m:			.equ pB_10 + 5
0048   0000             pC_10:			.equ pB_1m + 1
0049   0000             pC_1m:			.equ pC_10 + 5
0050   0000             pD_10:			.equ pC_1m + 1
0051   0000             pD_1m:			.equ pD_10 + 5  
0052   0000             displayCol:		.equ cRAM + $68
0053   0000             
0054   0000             instant:		.equ 4
0055   0000             debounce:		.equ 1
0056   0000             slow:			.equ 2
0057   0000             
0058   0000             switchSettle:	.equ cRAM + $30
0059   0000             ; through $7F ?
0060   0000             
0061   6100             none:	.org $6000 + 256
0062   6100 39          	rts
0063   6101             	
0064   6101             	.msfirst
0065   6101             #define SW(y,x) .db x \ .dw y 
0066   6101             
0067   6000             switchTable: 	.org $6000
0068   6000 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0068   6002 61 00       
0068   6004 61 00       
0068   6006 61 00       
0068   6008 61 00       
0068   600A 61 00       
0068   600C 61 00       
0068   600E 61 00       
0069   6010 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0069   6012 61 00       
0069   6014 61 00       
0069   6016 61 00       
0069   6018 61 00       
0069   601A 61 00       
0069   601C 61 00       
0069   601E 61 00       
0070   6020 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0070   6022 61 00       
0070   6024 61 00       
0070   6026 61 00       
0070   6028 61 00       
0070   602A 61 00       
0070   602C 61 00       
0070   602E 61 00       
0071   6030 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0071   6032 61 00       
0071   6034 61 00       
0071   6036 61 00       
0071   6038 61 00       
0071   603A 61 00       
0071   603C 61 00       
0071   603E 61 00       
0072   6040 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0072   6042 61 00       
0072   6044 61 00       
0072   6046 61 00       
0072   6048 61 00       
0072   604A 61 00       
0072   604C 61 00       
0072   604E 61 00       
0073   6050 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0073   6052 61 00       
0073   6054 61 00       
0073   6056 61 00       
0073   6058 61 00       
0073   605A 61 00       
0073   605C 61 00       
0073   605E 61 00       
0074   6060 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0074   6062 61 00       
0074   6064 61 00       
0074   6066 61 00       
0074   6068 61 00       
0074   606A 61 00       
0074   606C 61 00       
0074   606E 61 00       
0075   6070 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0075   6072 61 00       
0075   6074 61 00       
0075   6076 61 00       
0075   6078 61 00       
0075   607A 61 00       
0075   607C 61 00       
0075   607E 61 00       
0076   6080             settleTable:
0077   6080 0D          	.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13
0077   6081 0D          
0077   6082 0D          
0077   6083 0D          
0077   6084 0D          
0077   6085 0D          
0077   6086 0D          
0077   6087 0D          
0078   6088 0D          	.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13
0078   6089 0D          
0078   608A 0D          
0078   608B 0D          
0078   608C 0D          
0078   608D 0D          
0078   608E 0D          
0078   608F 0D          
0079   6090 0D          	.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13
0079   6091 0D          
0079   6092 0D          
0079   6093 0D          
0079   6094 0D          
0079   6095 0D          
0079   6096 0D          
0079   6097 0D          
0080   6098 0D          	.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13
0080   6099 0D          
0080   609A 0D          
0080   609B 0D          
0080   609C 0D          
0080   609D 0D          
0080   609E 0D          
0080   609F 0D          
0081   60A0 0D          	.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13
0081   60A1 0D          
0081   60A2 0D          
0081   60A3 0D          
0081   60A4 0D          
0081   60A5 0D          
0081   60A6 0D          
0081   60A7 0D          
0082   60A8 0D          	.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13
0082   60A9 0D          
0082   60AA 0D          
0082   60AB 0D          
0082   60AC 0D          
0082   60AD 0D          
0082   60AE 0D          
0082   60AF 0D          
0083   60B0 0D          	.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13
0083   60B1 0D          
0083   60B2 0D          
0083   60B3 0D          
0083   60B4 0D          
0083   60B5 0D          
0083   60B6 0D          
0083   60B7 0D          
0084   60B8 0D          	.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 13\.db 0
0084   60B9 0D          
0084   60BA 0D          
0084   60BB 0D          
0084   60BC 0D          
0084   60BD 0D          
0084   60BE 0D          
0084   60BF 00          
0085   60C0             	
0086   7800             main:		.org $7800
0087   7800             	
0088   7800 86 00       	ldaA 	#0
0089   7802 97 00       	staA	temp
0090   7804 86 FF       	ldaA	#$FF
0091   7806 97 01       	staA	temp + 1
0092   7808 9E 00       	ldS		temp
0093   780A             
0094   780A             test:
0095   780A             	
0096   780A             piaSetup:
0097   780A 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0098   780C B7 28 01    	staA 	displayStrobeC
0099   780F 86 3F       	ldaA 	#00111111b	;set LED pins to outputs
0100   7811 B7 28 00    	staA 	displayStrobe
0101   7814 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0102   7816 B7 28 01    	staA 	displayStrobeC
0103   7819             	
0104   7819 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0105   781B B7 28 03    	staA 	displayBcdC
0106   781E 86 FF       	ldaA 	#11111111b	;set display BCD to output
0107   7820 B7 28 02    	staA 	displayBcd
0108   7823 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0109   7825 B7 28 03    	staA 	displayBcdC
0110   7828             	
0111   7828 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0112   782A B7 24 01    	staA 	lampRowC
0113   782D 86 FF       	ldaA 	#11111111b	;set to output
0114   782F B7 24 00    	staA 	lampRow
0115   7832 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0116   7834 B7 24 01    	staA 	lampRowC
0117   7837             	
0118   7837 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0119   7839 B7 24 03    	staA 	lampStrobeC
0120   783C 86 FF       	ldaA 	#11111111b	;set to output
0121   783E B7 24 02    	staA 	lampStrobe
0122   7841 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0123   7843 B7 24 03    	staA 	lampStrobeC
0124   7846             	
0125   7846 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0126   7848 B7 30 03    	staA 	switchStrobeC
0127   784B 86 FF       	ldaA 	#11111111b	;set to output
0128   784D B7 30 02    	staA 	switchStrobe
0129   7850 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0130   7852 B7 30 03    	staA 	switchStrobeC
0131   7855             	
0132   7855 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0133   7857 B7 30 01    	staA 	switchRowC
0134   785A 86 00       	ldaA 	#00000000b	;set to input
0135   785C B7 30 00    	staA 	switchRow
0136   785F 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0137   7861 B7 30 01    	staA 	switchRowC
0138   7864             	
0139   7864 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0140   7866 B7 22 01    	staA 	solenoidAC
0141   7869 B7 22 03    	staA	solenoidBC
0142   786C 86 FF       	ldaA 	#11111111b	;set to output
0143   786E B7 22 00    	staA 	solenoidA
0144   7871 B7 22 02    	staA 	solenoidB
0145   7874 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0146   7876 B7 22 01    	staA 	solenoidAC
0147   7879 B7 22 03    	staA 	solenoidBC
0148   787C             	
0149   787C             ;
0150   787C             
0151   787C 86 00       	ldaA	#00
0152   787E D7 10       	staB	displayBcd1
0153   7880             	
0154   7880 86 FF       	ldaA	#$FF	
0155   7882 B7 28 00    	staA 	displayStrobe
0156   7885             
0157   7885 86 00       	ldaA	#00
0158   7887 97 07       	staA	strobe
0159   7889 B7 01 68    	staA	displayCol
0160   788C             	
0161   788C CE 00 00    	ldX 	#0
0162   788F DF 50       	stX		curCol
0163   7891             	
0164   7891 86 00       	ldaA	#0
0165   7893 97 52       	staA	curSwitchRowLsb
0166   7895             	
0167   7895             ; fill solenoid status with off
0168   7895 86 FF       	ldaA	#$FF
0169   7897 CE 01 40    	ldX		#solenoid1
0170   789A             lSolDefault:
0171   789A A7 00       	staA	0, X
0172   789C 08          	inX
0173   789D 8C 01 4F    	cpX		#solenoid16
0174   78A0 2F F8       	ble		lSolDefault
0175   78A2             	
0176   78A2             ; empty settle
0177   78A2 86 00       	ldaA	#$00
0178   78A4 CE 01 00    	ldX		#settleRow1
0179   78A7             lSettleDefault:
0180   78A7 A7 00       	staA		0, X
0181   78A9 08          	inX
0182   78AA 8C 08 46    	cpX		#settleRow8 + 7
0183   78AD 2F F8       	ble		lSettleDefault
0184   78AF             	
0185   78AF             ; test numbers
0186   78AF CE 00 11    	ldX		#displayBcd1 + 1
0187   78B2 86 00       	ldaA	#0
0188   78B4             lTestNumbers:
0189   78B4 A7 00       	staA	0, X
0190   78B6 08          	inX
0191   78B7 4C          	incA
0192   78B8 84 07       	andA	#00000111b
0193   78BA 8C 00 1F    	cpX		#displayBcd16
0194   78BD 2F F5       	ble		lTestNumbers
0195   78BF             	
0196   78BF             	
0197   78BF             ; setup complete
0198   78BF 0E          	clI		; enable timer interrupt
0199   78C0             	
0200   78C0             	
0201   78C0             end:
0202   78C0 7E 78 C0    	jmp		end
0203   78C3 00 00       	.dw 0
0204   78C5 00 00       	.dw 0
0205   78C7 00 00       	.dw 0
0206   78C9 00 00       	.dw 0
0207   78CB 00 00       	.dw 0
0208   78CD             		
0209   78CD             interrupt:	
0210   78CD 7C 00 02    	inc		counter
0211   78D0 86 00       	ldaA	#0
0212   78D2 91 02       	cmpA	counter
0213   78D4 26 25       	bne		counterHandled
0214   78D6 7C 00 03    	inc 	counter2
0215   78D9 86 04       	ldaA	#4
0216   78DB 91 03       	cmpA	counter2
0217   78DD 26 1C       	bne		counterHandled
0218   78DF             	
0219   78DF 86 00       	ldaA	#0
0220   78E1 97 03       	staA	counter2
0221   78E3 86 77       	ldaA	#01110111b
0222   78E5 91 10       	cmpA	displayBcd1
0223   78E7 27 0A       	beq		on
0224   78E9             	
0225   78E9 86 F0       	ldaA	#$F0
0226   78EB 97 08       	staA	lampRow1
0227   78ED 86 77       	ldaA	#01110111b
0228   78EF 97 10       	staA	displayBcd1	
0229   78F1 20 08       	bra		counterHandled
0230   78F3             on:
0231   78F3 86 0F       	ldaA	#$0F
0232   78F5 97 08       	staA	lampRow1
0233   78F7 86 33       	ldaA	#00110011b
0234   78F9 97 10       	staA	displayBcd1	
0235   78FB             
0236   78FB             counterHandled:
0237   78FB             ; move switch column
0238   78FB 96 07       	ldaA	strobe
0239   78FD B7 30 02    	staA	switchStrobe
0240   7900             	
0241   7900             ; update display 
0242   7900 DE 50       	ldX		curCol
0243   7902 B6 01 68    	ldaA	displayCol
0244   7905 C6 FF       	ldaB 	#$FF
0245   7907 F7 28 02    	staB	displayBcd
0246   790A B7 28 00    	staA	displayStrobe
0247   790D 85 08       	bitA	#00001000b
0248   790F             	ifeq
0248   790F             
0248   790F 26 FE       
0249   7911 E6 10       		ldaB	displayBcd1, X
0250   7913             	else
0250   7913             
0250   7913             
0250   7913             
0250   7913             
0250   7910             
0250   7910             
0250   7910             
0250   7910~            	else
0250   7910~            	else
0250   7910~            	else
0250   7910~            	else
0250   7910             
0250   7910~            	else
0250   7910~            	else
0250   7910~            	else
0250   7910~            	else
0250   7910             
0250   7910             
0250   7910 04          
0250   7913             
0250   7913 20 FE       
0250   7915             
0250   7915             
0250   7915             
0250   7915~            	else
0250   7915~            	else
0250   7915~            	else
0250   7915~            	else
0250   7915~            	else
0250   7915             
0250   7915~            	else
0250   7915~            	else
0250   7915             
0250   7915~            	else
0250   7915~            	else
0250   7915             
0251   7915 E6 18       		ldaB	displayBcd1 + 8, X
0252   7917             	endif
0252   7917             
0252   7917             
0252   7917             
0252   7917             
0252   7917             
0252   7917~            	endif
0252   7917~            	endif
0252   7917             
0252   7917~            	endif
0252   7917~            	endif
0252   7917             
0252   7914             
0252   7914 02          
0252   7915             
0252   7915             
0252   7915~            	endif
0252   7915~            	endif
0252   7915~            	endif
0252   7915             
0252   7917             
0252   7917~            	endif
0252   7917~            	endif
0252   7917             
0253   7917 F7 28 02    	staB	displayBcd
0254   791A             	
0255   791A             ; read switches
0256   791A DE 50       	ldX		curCol
0257   791C B6 30 00    	ldaA	switchRow
0258   791F 16          	tab
0259   7920 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0260   7922             	
0261   7922 D6 52       	ldaB	curSwitchRowLsb 	;	B now contains LSB of switchTable row addr
0262   7924 D7 01       	staB	temp + 1 			; temp = switch
0263   7926 D7 54       	staB	tempX + 1			; tempX = cRAM
0264   7928 C6 60       	ldaB	#switchTable >> 8
0265   792A D7 00       	staB	temp
0266   792C C6 01       	ldaB	#cRAM >> 8
0267   792E D7 53       	staB	tempX
0268   7930             	
0269   7930 C6 01       	ldaB	#00000001b
0270   7932             	
0271   7932             	; temp now contains the beginning of the row in the switchTable
0272   7932             swNext:
0273   7932 85 01       	bitA	#00000001b	 ; Z set if switch not different
0274   7934             	ifne		; if bit set, switch different
0274   7934             
0274   7934 27 FE       
0275   7936 36          		pshA
0276   7937 DE 53       		ldX		tempX
0277   7939 A6 00       		ldaA	0, X
0278   793B 84 0F       		andA	#00001111b ; need to remove upper F ( sets Z if A = 0)
0279   793D             		ifne 	; >0 -> settling
0279   793D             
0279   793D 27 FE       
0280   793F 4A          			decA
0281   7940 A7 00       			staA	0, X	; sets Z if now A = 0
0282   7942             			ifeq ; now settled, fire event
0282   7942             
0282   7942 26 FE       
0283   7944 DE 50       settled:		ldX		curCol
0284   7946 17          				tBA
0285   7947 A8 20       				eorA	switchRow1, X ; toggle bit in row
0286   7949 A7 20       				staA	switchRow1, X
0287   794B             				; todo somehow actually fire it here
0288   794B             				;ldX		temp	
0289   794B             				;ldX		0, X
0290   794B             				;jsr		0, X
0291   794B             			endif
0291   794B             
0291   794B             
0291   794B             
0291   794B             
0291   794B             
0291   794B~            			endif
0291   794B~            			endif
0291   794B             
0291   794B~            			endif
0291   794B~            			endif
0291   794B             
0291   7943             
0291   7943 07          
0291   7944             
0291   7944             
0291   7944~            			endif
0291   7944~            			endif
0291   7944~            			endif
0291   7944             
0291   794B             
0291   794B~            			endif
0291   794B~            			endif
0291   794B             
0292   794B             		else ; =0 -> was settled, so now it's not
0292   794B             
0292   794B             
0292   794B             
0292   794B             
0292   793E             
0292   793E             
0292   793E             
0292   793E~            		else ; =0 -> was settled, so now it's not
0292   793E~            		else ; =0 -> was settled, so now it's not
0292   793E~            		else ; =0 -> was settled, so now it's not
0292   793E~            		else ; =0 -> was settled, so now it's not
0292   793E             
0292   793E~            		else ; =0 -> was settled, so now it's not
0292   793E~            		else ; =0 -> was settled, so now it's not
0292   793E~            		else ; =0 -> was settled, so now it's not
0292   793E~            		else ; =0 -> was settled, so now it's not
0292   793E             
0292   793E             
0292   793E 0E          
0292   794B             
0292   794B 20 FE       
0292   794D             
0292   794D             
0292   794D             
0292   794D~            		else ; =0 -> was settled, so now it's not
0292   794D~            		else ; =0 -> was settled, so now it's not
0292   794D~            		else ; =0 -> was settled, so now it's not
0292   794D~            		else ; =0 -> was settled, so now it's not
0292   794D~            		else ; =0 -> was settled, so now it's not
0292   794D             
0292   794D~            		else ; =0 -> was settled, so now it's not
0292   794D~            		else ; =0 -> was settled, so now it's not
0292   794D             
0292   794D~            		else ; =0 -> was settled, so now it's not
0292   794D~            		else ; =0 -> was settled, so now it's not
0292   794D             
0293   794D             			; get the settle time
0294   794D 96 54       			ldaA	tempX + 1
0295   794F 97 01       			staA	temp + 1 ;get temp in sync with tempX LSB
0296   7951 DE 00       			ldX		temp
0297   7953 A6 80       			ldaA	settleTable - switchTable, X ; A has settle settings
0298   7955 DE 53       			ldX		tempX
0299   7957 A7 00       			staA	0, X		; start settling	
0300   7959 27 E9       			beq		settled		; quick out for 0 settle
0301   795B             		endif
0301   795B             
0301   795B             
0301   795B             
0301   795B             
0301   795B             
0301   795B~            		endif
0301   795B~            		endif
0301   795B             
0301   795B~            		endif
0301   795B~            		endif
0301   795B             
0301   794C             
0301   794C 0E          
0301   794D             
0301   794D             
0301   794D~            		endif
0301   794D~            		endif
0301   794D~            		endif
0301   794D             
0301   795B             
0301   795B~            		endif
0301   795B~            		endif
0301   795B             
0302   795B             			
0303   795B 32          		pulA
0304   795C             	endif
0304   795C             
0304   795C             
0304   795C             
0304   795C             
0304   795C             
0304   795C~            	endif
0304   795C~            	endif
0304   795C             
0304   795C~            	endif
0304   795C~            	endif
0304   795C             
0304   7935             
0304   7935 26          
0304   7936             
0304   7936             
0304   7936~            	endif
0304   7936~            	endif
0304   7936~            	endif
0304   7936             
0304   795C             
0304   795C~            	endif
0304   795C~            	endif
0304   795C             
0305   795C 7C 00 54    	inc tempX + 1
0306   795F 58          	aslB
0307   7960 44          	lsrA			; pop lowest bit off, set Z if A is empty
0308   7961 26 CF       	bne		swNext 	; more on bits, keep processing 
0309   7963             	
0310   7963             	
0311   7963             ; update lamps
0312   7963 DE 50       	ldX		curCol
0313   7965 86 FF       	ldaA	#$FF	;lamp row is inverted
0314   7967 B7 24 00    	staA	lampRow
0315   796A 96 07       	ldaA	strobe
0316   796C B7 24 02    	staA	lampStrobe
0317   796F A6 20       	ldaA	switchRow1, X
0318   7971 B7 24 00    	staA	lampRow
0319   7974 86 00       	ldaA	#00
0320   7976             
0321   7976             ; update solenoids
0322   7976             	; if a solenoid is set to <254, --
0323   7976             	; if =255, off, otherwise on
0324   7976             	; leave it at 254
0325   7976             	
0326   7976 7C 00 50    	inc		curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0327   7979 86 FE       	ldaA	#254
0328   797B DE 50       	ldX		curCol
0329   797D E6 40       	ldaB	solenoid1 - cRAM, X
0330   797F A1 40       	cmpA	solenoid1 - cRAM, X
0331   7981             	ifge 	; solenoid <=254, turn on
0331   7981             
0331   7981 25 FE       
0332   7983             		ifgt	; solenoid < 254, decrement
0332   7983             
0332   7983 23 FE       
0333   7985 6A 40       			dec		solenoid1 - cRAM, X
0334   7987             		endif
0334   7987             
0334   7987             
0334   7987             
0334   7987             
0334   7987             
0334   7987~            		endif
0334   7987~            		endif
0334   7987             
0334   7987~            		endif
0334   7987~            		endif
0334   7987             
0334   7984             
0334   7984 02          
0334   7985             
0334   7985             
0334   7985~            		endif
0334   7985~            		endif
0334   7985~            		endif
0334   7985             
0334   7987             
0334   7987~            		endif
0334   7987~            		endif
0334   7987             
0335   7987 0D          		sec
0336   7988             	else
0336   7988             
0336   7988             
0336   7988             
0336   7988             
0336   7982             
0336   7982             
0336   7982             
0336   7982~            	else
0336   7982~            	else
0336   7982~            	else
0336   7982~            	else
0336   7982             
0336   7982~            	else
0336   7982~            	else
0336   7982~            	else
0336   7982~            	else
0336   7982             
0336   7982             
0336   7982 07          
0336   7988             
0336   7988 20 FE       
0336   798A             
0336   798A             
0336   798A             
0336   798A~            	else
0336   798A~            	else
0336   798A~            	else
0336   798A~            	else
0336   798A~            	else
0336   798A             
0336   798A~            	else
0336   798A~            	else
0336   798A             
0336   798A~            	else
0336   798A~            	else
0336   798A             
0337   798A 0C          		clc
0338   798B             	endif
0338   798B             
0338   798B             
0338   798B             
0338   798B             
0338   798B             
0338   798B~            	endif
0338   798B~            	endif
0338   798B             
0338   798B~            	endif
0338   798B~            	endif
0338   798B             
0338   7989             
0338   7989 01          
0338   798A             
0338   798A             
0338   798A~            	endif
0338   798A~            	endif
0338   798A~            	endif
0338   798A             
0338   798B             
0338   798B~            	endif
0338   798B~            	endif
0338   798B             
0339   798B 76 00 28    	ror		solAStatus
0340   798E A1 48       	cmpA	solenoid9 - cRAM, X
0341   7990             	ifge 	; solenoid <=254, turn on
0341   7990             
0341   7990 25 FE       
0342   7992             		ifgt	; solenoid < 254, decrement
0342   7992             
0342   7992 23 FE       
0343   7994 6A 48       			dec		solenoid9 - cRAM, X
0344   7996             		endif
0344   7996             
0344   7996             
0344   7996             
0344   7996             
0344   7996             
0344   7996~            		endif
0344   7996~            		endif
0344   7996             
0344   7996~            		endif
0344   7996~            		endif
0344   7996             
0344   7993             
0344   7993 02          
0344   7994             
0344   7994             
0344   7994~            		endif
0344   7994~            		endif
0344   7994~            		endif
0344   7994             
0344   7996             
0344   7996~            		endif
0344   7996~            		endif
0344   7996             
0345   7996 0D          		sec
0346   7997             	else
0346   7997             
0346   7997             
0346   7997             
0346   7997             
0346   7991             
0346   7991             
0346   7991             
0346   7991~            	else
0346   7991~            	else
0346   7991~            	else
0346   7991~            	else
0346   7991             
0346   7991~            	else
0346   7991~            	else
0346   7991~            	else
0346   7991~            	else
0346   7991             
0346   7991             
0346   7991 07          
0346   7997             
0346   7997 20 FE       
0346   7999             
0346   7999             
0346   7999             
0346   7999~            	else
0346   7999~            	else
0346   7999~            	else
0346   7999~            	else
0346   7999~            	else
0346   7999             
0346   7999~            	else
0346   7999~            	else
0346   7999             
0346   7999~            	else
0346   7999~            	else
0346   7999             
0347   7999 0C          		clc
0348   799A             	endif
0348   799A             
0348   799A             
0348   799A             
0348   799A             
0348   799A             
0348   799A~            	endif
0348   799A~            	endif
0348   799A             
0348   799A~            	endif
0348   799A~            	endif
0348   799A             
0348   7998             
0348   7998 01          
0348   7999             
0348   7999             
0348   7999~            	endif
0348   7999~            	endif
0348   7999~            	endif
0348   7999             
0348   799A             
0348   799A~            	endif
0348   799A~            	endif
0348   799A             
0349   799A 76 00 29    	ror		solBStatus
0350   799D 7A 00 50    	dec		curCol
0351   79A0             	
0352   79A0             ; update strobe	
0353   79A0 DE 50       	ldX		curCol
0354   79A2 08          	inX 	
0355   79A3 86 08       	ldaA	#8 	; pitch
0356   79A5 9B 52       	addA	curSwitchRowLsb
0357   79A7 97 52       	staA	curSwitchRowLsb
0358   79A9 78 00 07    	asl		strobe
0359   79AC 7C 01 68    	inc		displayCol
0360   79AF 86 00       	ldaA	#0
0361   79B1 91 07       	cmpA	strobe ; strobe done?  reset
0362   79B3             	ifeq		
0362   79B3             
0362   79B3 26 FE       
0363   79B5 96 28       		ldaA	solAStatus
0364   79B7 B7 22 00    		staA	solenoidA
0365   79BA 96 29       		ldaA	solBStatus
0366   79BC B7 22 02    		staA	solenoidB
0367   79BF             	
0368   79BF 86 01       		ldaA	#00000001b
0369   79C1 97 07       		staA	strobe
0370   79C3             		
0371   79C3 CE 00 00    		ldX 	#0
0372   79C6             		
0373   79C6 86 00       		ldaA	#0
0374   79C8 97 52       		staA	curSwitchRowLsb
0375   79CA 97 28       		staA	solAStatus
0376   79CC 97 29       		staA	solBStatus
0377   79CE             		
0378   79CE F6 01 68    		ldaB	displayCol	; reset display col only if it's > 7 
0379   79D1 C1 F8       		cmpB	#$F8	; since it needs to count to 15 instead of 7
0380   79D3             		ifgt
0380   79D3             
0380   79D3 23 FE       
0381   79D5 B7 01 68    			staA	displayCol
0382   79D8             		endif
0382   79D8             
0382   79D8             
0382   79D8             
0382   79D8             
0382   79D8             
0382   79D8~            		endif
0382   79D8~            		endif
0382   79D8             
0382   79D8~            		endif
0382   79D8~            		endif
0382   79D8             
0382   79D4             
0382   79D4 03          
0382   79D5             
0382   79D5             
0382   79D5~            		endif
0382   79D5~            		endif
0382   79D5~            		endif
0382   79D5             
0382   79D8             
0382   79D8~            		endif
0382   79D8~            		endif
0382   79D8             
0383   79D8             	endif
0383   79D8             
0383   79D8             
0383   79D8             
0383   79D8             
0383   79D8             
0383   79D8~            	endif
0383   79D8~            	endif
0383   79D8             
0383   79D8~            	endif
0383   79D8~            	endif
0383   79D8             
0383   79B4             
0383   79B4 23          
0383   79B5             
0383   79B5             
0383   79B5~            	endif
0383   79B5~            	endif
0383   79B5~            	endif
0383   79B5             
0383   79D8             
0383   79D8~            	endif
0383   79D8~            	endif
0383   79D8             
0384   79D8             	
0385   79D8 DF 50       	stX		curCol
0386   79DA 3B          	rti
0387   79DB             
0388   7FF8             pointers: 	.org $7FF8  	
0389   7FF8             	.msfirst
0390   7FF8 78 CD       	.dw interrupt			
0391   7FFA 78 CD       	.dw interrupt			
0392   7FFC 78 CD       	.dw interrupt			
0393   7FFE 78 00       	.dw main
0394   8000             	
0395   8000             	
0396   8000             	.endtasm: Number of errors = 0
