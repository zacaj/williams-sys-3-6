0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             attractX:		.equ RAM + $2A ; +
0041+  0000             forkX			.equ RAM + $2C ; +
0042+  0000             curCol:			.equ RAM + $50 ; +
0043+  0000             tempX:			.equ RAM + $52 ; +
0044+  0000             queueHead:		.equ RAM + $54 ; +
0045+  0000             queueTail:		.equ RAM + $56 ; +
0046+  0000             tempQ:			.equ RAM + $58 ; +
0047+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0048+  0000             queueEnd:		.equ RAM + $6D
0049+  0000             ;
0050+  0000             displayBcd1:	.equ RAM + $70
0051+  0000             displayBcd16:	.equ RAM + $7F
0052+  0000             ballCount:		.equ displayBcd1 + 7
0053+  0000             waitLeft: 		.equ RAM + $80 ; dec every 8ms
0054+  0000             waitLeftEnd:		.equ RAM + $87
0055+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0056+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0057+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0058+  0000             flashLampCol1:		.equ RAM + $A0
0059+  0000             flashLampCol8:		.equ RAM + $A7
0060+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0061+  0000             lastSwitch:		.equ RAM + $A8
0062+  0000             dropResetTimer:		.equ RAM + $A9 ; max 127
0063+  0000             dropsDown		.equ RAM + $AA
0064+  0000             p_Bonus:		.equ RAM + $B0
0065+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0066+  0000             p_DropsDown:		.equ RAM + $B5
0067+  0000             p_LampCol2:		.equ RAM + $B6 ; -> B9
0068+  0000             spinnerTimer:		.equ RAM + $BA 
0069+  0000             
0070+  0000             p_BonusLeft:		.equ RAM + $BE
0071+  0000             bonusTimer:		.equ RAM + $BF ; counts down from 127 during bonus
0072+  0000             
0073+  0000             
0074+  0000             
0075+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0076+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0077+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0078+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0079+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0080+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0081+  0000             #DEFINE s(n) 		(0 + n)
0082+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0083+  0000             pA_10:			.equ pA_1m + 5
0084+  0000             pB_1m:			.equ pA_10 + 1
0085+  0000             pB_10:			.equ pB_1m + 5
0086+  0000             pC_1m:			.equ pB_10 + 1
0087+  0000             pC_10:			.equ pC_1m + 5
0088+  0000             pD_1m:			.equ pC_10 + 1
0089+  0000             pD_10:			.equ pD_1m + 5 
0090+  0000             ; 
0091+  0000             displayCol:		.equ cRAM + $6A
0092+  0000             state:			.equ cRAM + $6B	; _ | strobe reset | don't validate | _
0093+  0000             
0094+  0000             instant:		.equ 4
0095+  0000             debounce:		.equ 1
0096+  0000             slow:			.equ 2
0097+  0000             
0098+  0000             switchSettle:	.equ cRAM + $30
0099+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 75    		cpX	displayBcd1 + 5
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 75    			cpX	displayBcd1 + 5
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7D    		cpX	displayBcd1 + 8 + 5
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7D    			cpX	displayBcd1 + 8 + 5
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0F       	ldaB	>lc(8) ; gameover
0101+  7C8C C5 20       	bitB	lr(6)
0102+  7C8E             	ifne
0102+  7C8E             
0102+  7C8E 27 FE       
0103+  7C90 39          		rts
0104+  7C91             	endif
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C8F             
0104+  7C8F 01          
0104+  7C90             
0104+  7C90             
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0105+  7C91             	
0106+  7C91 D6 0E       	ldaB	>lc(7)
0107+  7C93 C5 02       	bitB	lr(2)
0108+  7C95 26 1A       	bne	blankP2
0109+  7C97 C5 04       	bitB	lr(3)
0110+  7C99 26 22       	bne	blankP3
0111+  7C9B C5 08       	bitB	lr(4)
0112+  7C9D 26 2A       	bne	blankP4
0113+  7C9F C5 10       	bitB	lr(5)
0114+  7CA1 26 32       	bne	blankDone
0115+  7CA3 20 00       	bra	blankP1
0116+  7CA5             blankP1:
0117+  7CA5 86 F0       	ldaA	$F0
0118+  7CA7 9A 74       	oraA	>displayBcd1 + 4
0119+  7CA9 97 74       	staA	displayBcd1 + 4
0120+  7CAB 86 F0       	ldaA	$F0
0121+  7CAD 9A 75       	oraA	>displayBcd1 + 5
0122+  7CAF 97 75       	staA	displayBcd1 + 5
0123+  7CB1             blankP2:
0124+  7CB1 86 F0       	ldaA	$F0
0125+  7CB3 9A 7C       	oraA	>displayBcd1 + 12
0126+  7CB5 97 7C       	staA	displayBcd1 + 12
0127+  7CB7 86 F0       	ldaA	$F0
0128+  7CB9 9A 7D       	oraA	>displayBcd1 + 13
0129+  7CBB 97 7D       	staA	displayBcd1 + 13
0130+  7CBD             blankP3:
0131+  7CBD 86 0F       	ldaA	$0F
0132+  7CBF 9A 74       	oraA	>displayBcd1 + 4
0133+  7CC1 97 74       	staA	displayBcd1 + 4
0134+  7CC3 86 0F       	ldaA	$0F
0135+  7CC5 9A 75       	oraA	>displayBcd1 + 5
0136+  7CC7 97 75       	staA	displayBcd1 + 5
0137+  7CC9             blankP4:
0138+  7CC9 86 0F       	ldaA	$0F
0139+  7CCB 9A 7C       	oraA	>displayBcd1 + 12
0140+  7CCD 97 7C       	staA	displayBcd1 + 12
0141+  7CCF 86 0F       	ldaA	$0F
0142+  7CD1 9A 7D       	oraA	>displayBcd1 + 13
0143+  7CD3 97 7D       	staA	displayBcd1 + 13
0144+  7CD5             blankDone:
0145+  7CD5 39          	rts
0146+  7CD6             	
0147+  7CD6             refreshPlayerScores:
0148+  7CD6 BD 7C 00    	jsr copyScores13
0149+  7CD9 BD 7C 45    	jsr copyScores24
0150+  7CDC             	
0151+  7CDC 86 F0       	ldaA	$F0
0152+  7CDE B1 01 50    	cmpA	>pA_1m
0153+  7CE1 26 29       	bne	refresh_1m
0154+  7CE3 B1 01 56    	cmpA	>pB_1m
0155+  7CE6 26 24       	bne	refresh_1m	
0156+  7CE8 B1 01 5C    	cmpA	>pC_1m
0157+  7CEB 26 1F       	bne	refresh_1m
0158+  7CED B1 01 62    	cmpA	>pD_1m
0159+  7CF0 26 1A       	bne	refresh_1m
0160+  7CF2             	
0161+  7CF2 CE 00 70    	ldX	displayBcd1
0162+  7CF5             refresh_10xloop:
0163+  7CF5 A6 01       	ldaA	1, X
0164+  7CF7 A7 00       	staA	0,X
0165+  7CF9 A6 09       	ldaA	8 + 1, X
0166+  7CFB A7 08       	staA	8, X
0167+  7CFD 08          	inX
0168+  7CFE 8C 00 75    	cpX	displayBcd1+5
0169+  7D01 26 F2       	bne	refresh_10xloop
0170+  7D03 86 00       	ldaA	0
0171+  7D05 97 75       	staA	displayBcd1 + 5
0172+  7D07 97 7D       	staA	displayBcd1 + 5 + 8
0173+  7D09 7E 7C 8A    	jmp blankNonPlayerScores
0174+  7D0C             refresh_1m:
0175+  7D0C 7E 7C 8A    	jmp blankNonPlayerScores
0176+  7D0F             	
0177+  7D0F             	
0178+  7D0F             ; add score instantly
0179+  7D0F             ; X = place in p*_1* to add the score to
0180+  7D0F             ; A = amount to add (max 9)
0181+  7D0F             ; tail call
0182+  7D0F             _addScoreI:
0183+  7D0F AB 00       	addA	0, X
0184+  7D11 8A F0       	oraA	11110000b
0185+  7D13             	ifcs ; overflowed, need to increment next number
0185+  7D13             
0185+  7D13 24 FE       
0186+  7D15 8B 06       		addA	6	; adjust A back into BCD
0187+  7D17 A7 00       		staA	0, X
0188+  7D19             addScore_carryOver:		; loop to propagate carry
0189+  7D19 09          		deX	; go to next decimal place
0190+  7D1A A6 00       		ldaA	0, X	
0191+  7D1C 8A F0       		oraA	11110000b
0192+  7D1E 81 F9       		cmpA	$F9
0193+  7D20             		ifeq			; if it's already a 9, reset it and carry again
0193+  7D20             
0193+  7D20 26 FE       
0194+  7D22 6F 00       			clr	0, X
0195+  7D24 27 F3       			beq addScore_carryOver
0196+  7D26             		else			; otherwise ++ it and done
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D21             
0196+  7D21             
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21             
0196+  7D21 06          
0196+  7D26             
0196+  7D26 20 FE       
0196+  7D28             
0196+  7D28             
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0197+  7D28 6C 00       			inc	0, X
0198+  7D2A             		endif	
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D27             
0198+  7D27 02          
0198+  7D28             
0198+  7D28             
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0199+  7D2A             	else
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D14             
0199+  7D14             
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14             
0199+  7D14 17          
0199+  7D2A             
0199+  7D2A 20 FE       
0199+  7D2C             
0199+  7D2C             
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0200+  7D2C 81 F9       		cmpA	$F9
0201+  7D2E             		ifgt ; >9 -> need to adjust back into BCD
0201+  7D2E             
0201+  7D2E 23 FE       
0202+  7D30 8B 06       			addA	6
0203+  7D32 A7 00       			staA	0, X
0204+  7D34             addScore_carryDa:
0205+  7D34 09          			deX
0206+  7D35 A6 00       			ldaA	0, X
0207+  7D37 8A F0       			oraA	11110000b
0208+  7D39 81 F9       			cmpA	$F9
0209+  7D3B             			ifeq
0209+  7D3B             
0209+  7D3B 26 FE       
0210+  7D3D 6F 00       				clr	0, X
0211+  7D3F 27 F3       				beq 	addScore_carryDa
0212+  7D41             			else
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C             
0212+  7D3C 06          
0212+  7D41             
0212+  7D41 20 FE       
0212+  7D43             
0212+  7D43             
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0213+  7D43 6C 00       				inc	0, X
0214+  7D45             			endif	
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D42             
0214+  7D42 02          
0214+  7D43             
0214+  7D43             
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0215+  7D45             		else
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F             
0215+  7D2F 17          
0215+  7D45             
0215+  7D45 20 FE       
0215+  7D47             
0215+  7D47             
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0216+  7D47 A7 00       			staA	0, X
0217+  7D49             		endif
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D46             
0217+  7D46 02          
0217+  7D47             
0217+  7D47             
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0218+  7D49             	endif
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D2B             
0218+  7D2B 1D          
0218+  7D2C             
0218+  7D2C             
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0219+  7D49             
0220+  7D49 7E 7C D6    	jmp refreshPlayerScores
0221+  7D4C             	
0222+  7D4C 39          	rts
0223+  7D4D             	
0224+  7D4D             ; t A,X
0225+  7D4D             setXToCurPlayer10:
0226+  7D4D 96 0F       	ldaA	>lc(8)
0227+  7D4F 85 01       	bitA	0001b
0228+  7D51 27 04       	beq	_addScore10N_p2
0229+  7D53 CE 01 55    	ldX	pA_10
0230+  7D56 39          	rts
0231+  7D57             _addScore10N_p2:
0232+  7D57 85 02       	bitA	0010b
0233+  7D59 27 04       	beq	_addScore10N_p3
0234+  7D5B CE 01 5B    	ldX	pB_10
0235+  7D5E 39          	rts
0236+  7D5F             _addScore10N_p3:
0237+  7D5F 85 04       	bitA	0100b
0238+  7D61 27 04       	beq	_addScore10N_p4
0239+  7D63 CE 01 61    	ldX	pC_10
0240+  7D66 39          	rts
0241+  7D67             _addScore10N_p4:
0242+  7D67 CE 01 67    	ldX	pD_10
0243+  7D6A 39          	rts
0244+  7D6B             
0245+  7D6B             ; suspends execution for A ms and returns to queue processor
0246+  7D6B             ; should only be called from switch callbacks
0247+  7D6B             ; trashes everything but B
0248+  7D6B             _delay:	
0249+  7D6B CE 00 7F    	ldX	waitLeft - 1
0250+  7D6E             delay_findEmptyLoop:
0251+  7D6E 08          	inX
0252+  7D6F 6D 00       	tst	0, X
0253+  7D71 26 FB       	bne 	delay_findEmptyLoop 
0254+  7D73             	
0255+  7D73             	; X = first waitLeft that = 0
0256+  7D73 E7 18       	staB	waitReg - waitLeft, X
0257+  7D75 33          	pulB	; A = MSB of PC
0258+  7D76 E7 08       	staB	waitMsb - waitLeft, X
0259+  7D78 33          	pulB	; A = LSB of PC
0260+  7D79 E7 10       	staB	waitLsb - waitLeft, X
0261+  7D7B A7 00       	staA	0, X
0262+  7D7D             	; time and add stored
0263+  7D7D 7E 7A 07    	jmp skipEvent
0264+  7D80             	
0265+  7D80             _fork:	
0266+  7D80 CE 00 7F    	ldX	waitLeft - 1
0267+  7D83             fork_findEmptyLoop:
0268+  7D83 08          	inX
0269+  7D84 6D 00       	tst	0, X
0270+  7D86 26 FB       	bne 	fork_findEmptyLoop 
0271+  7D88             	
0272+  7D88             	; X = first waitLeft that = 0
0273+  7D88 E7 18       	staB	waitReg - waitLeft, X
0274+  7D8A 33          	pulB	; A = MSB of PC
0275+  7D8B E7 08       	staB	waitMsb - waitLeft, X
0276+  7D8D 33          	pulB	; A = LSB of PC
0277+  7D8E CB 03       	addB	3
0278+  7D90             	ifcs
0278+  7D90             
0278+  7D90 24 FE       
0279+  7D92 6C 08       		inc	waitMsb - waitLeft, X
0280+  7D94             	endif
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0280+  7D91             
0280+  7D91 02          
0280+  7D92             
0280+  7D92             
0280+  7D92~            	endif
0280+  7D92~            	endif
0280+  7D92~            	endif
0280+  7D92             
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0281+  7D94 E7 10       	staB	waitLsb - waitLeft, X
0282+  7D96 A7 00       	staA	0, X
0283+  7D98             	; time and add stored
0284+  7D98 C0 03       	subB	3
0285+  7D9A 37          	pshB
0286+  7D9B E6 08       	ldaB	waitMsb - waitLeft, X
0287+  7D9D             	ifcs
0287+  7D9D             
0287+  7D9D 24 FE       
0288+  7D9F 5A          		decB
0289+  7DA0             	endif
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0289+  7D9E             
0289+  7D9E 01          
0289+  7D9F             
0289+  7D9F             
0289+  7D9F~            	endif
0289+  7D9F~            	endif
0289+  7D9F~            	endif
0289+  7D9F             
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0290+  7DA0 37          	pshB
0291+  7DA1 39          	rts
0292+  7DA2             	
0293+  7DA2             	
0294+  7DA2             	
0295+  7DA2             resetScores:
0296+  7DA2 86 00       	ldaA	00
0297+  7DA4 CE 01 50    	ldX	pA_1m
0298+  7DA7             _zeroScores:
0299+  7DA7 A7 00       	staA	0, X
0300+  7DA9 08          	inX
0301+  7DAA 8C 01 68    	cpX	pD_10 + 1
0302+  7DAD 26 F8       	bne	_zeroScores
0303+  7DAF             	
0304+  7DAF 86 00       	ldaA	0
0305+  7DB1 97 12       	staA	curPlayer
0306+  7DB3 97 13       	staA	curPlayer + 1
0307+  7DB5 86 FF       	ldaA	$FF
0308+  7DB7 97 76       	staA	displayBcd1 + 6
0309+  7DB9 97 7E       	staA	displayBcd1 + 14
0310+  7DBB 97 7F       	staA	displayBcd1 + 15
0311+  7DBD             	
0312+  7DBD BD 7C D6    	jsr	refreshPlayerScores
0313+  7DC0 39          	rts
0314+  7DC1             
0315+  7DC1             ; trash ~B
0316+  7DC1             ; delay for ms (8-2000)
0317+  7DC1             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0318+  7DC1             ; makes a second thread that will skip the next (3b) instruction
0319+  7DC1             #DEFINE fork(ms) ldaA ms/8\ jsr _fork
0320+  7DC1             #DEFINE beginFork()	
0321+  7DC1             #DEFINE endFork()	ldX >forkX\ jmp afterFork
0322+  7DC1             	
0323+  7DC1             ; trashes B (max 104ms)
0324+  7DC1             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0325+  7DC1             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0326+  7DC1             
0327+  7DC1             ; trashes AX
0328+  7DC1             ; place: 1-5 = 10s thru 100ks
0329+  7DC1             ; amount: 1-9
0330+  7DC1             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0331+  7DC1             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0332+  7DC1             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0333+  7DC1             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0334+  7DC1             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0335+  7DC1             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0336+  7DC1             
0337+  7DC1             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0338+  7DC1             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0339+  7DC1             
0340+  7DC1             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0341+  7DC1             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0342+  7DC1             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0343+  7DC1             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0344+  7DC1             
0345+  7DC1             #include "attract.asm"
0001++ 7DC1             attractStart:
0002++ 7DC1 08          	.db 00001000b
0003++ 7DC2 18          	.db 00011000b
0004++ 7DC3 10          	.db 00010000b
0005++ 7DC4 80          	.db 10000000b
0006++ 7DC5 01          	.db 00000001b
0007++ 7DC6             	
0008++ 7DC6 50          	.db 01010000b
0009++ 7DC7 40          	.db 01000000b
0010++ 7DC8 08          	.db 00001000b
0011++ 7DC9 80          	.db 10000000b
0012++ 7DCA 03          	.db 00000011b
0013++ 7DCB             	
0014++ 7DCB 20          	.db 00100000b
0015++ 7DCC 28          	.db 00101000b
0016++ 7DCD 04          	.db 00000100b
0017++ 7DCE 80          	.db 10000000b
0018++ 7DCF 07          	.db 00000111b
0019++ 7DD0             	
0020++ 7DD0 44          	.db 01000100b
0021++ 7DD1 80          	.db 10000000b
0022++ 7DD2 02          	.db 00000010b
0023++ 7DD3 80          	.db 10000000b
0024++ 7DD4 0F          	.db 00001111b
0025++ 7DD5             	
0026++ 7DD5 08          	.db 00001000b
0027++ 7DD6 18          	.db 00011000b
0028++ 7DD7 01          	.db 00000001b
0029++ 7DD8 80          	.db 10000000b
0030++ 7DD9 1F          	.db 00011111b
0031++ 7DDA             	
0032++ 7DDA 50          	.db 01010000b
0033++ 7DDB 40          	.db 01000000b
0034++ 7DDC 02          	.db 00000010b
0035++ 7DDD 80          	.db 10000000b
0036++ 7DDE 3F          	.db 00111111b
0037++ 7DDF             	
0038++ 7DDF 20          	.db 00100000b
0039++ 7DE0 28          	.db 00101000b
0040++ 7DE1 04          	.db 00000100b
0041++ 7DE2 80          	.db 10000000b
0042++ 7DE3 7F          	.db 01111111b
0043++ 7DE4             	
0044++ 7DE4 44          	.db 01000100b
0045++ 7DE5 80          	.db 10000000b
0046++ 7DE6 08          	.db 00001000b
0047++ 7DE7 80          	.db 10000000b
0048++ 7DE8 FF          	.db 11111111b
0049++ 7DE9             attractEnd:0006   7DE9             
0007   7DE9             #include "game.asm"
0001+  7DE9             ; Laser Ball solenoids
0002+  7DE9             ;#DEFINE KICKOUT 		01
0003+  7DE9             ;#DEFINE LEFT_KICKER 	02
0004+  7DE9             ;#DEFINE DROP_LA			03
0005+  7DE9             ;#DEFINE DROP_SER		04
0006+  7DE9             ;#DEFINE EJECT_HOLE		05
0007+  7DE9             ;#DEFINE DROP_BA			06
0008+  7DE9             ;#DEFINE DROP_LL			07
0009+  7DE9             ;#DEFINE RIGHT_KICKER	08
0010+  7DE9             ;#DEFINE SOUND1			09 ; thru 13
0011+  7DE9             ;#DEFINE KNOCKER			14
0012+  7DE9             ;#DEFINE	FLASHERS		15
0013+  7DE9             ;#DEFINE COIN_LOCKOUT	16
0014+  7DE9             
0015+  7DE9             ; Hot Tip solenoids
0016+  7DE9             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7DE9             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7DE9             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7DE9             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7DE9             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7DE9             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7DE9             #DEFINE CHIME_10	SOL(09, 16)
0023+  7DE9             #DEFINE CHIME_100	SOL(10, 16)
0024+  7DE9             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7DE9             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7DE9             #DEFINE CLICKER		SOL(13, 8)
0027+  7DE9             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7DE9             #DEFINE BUZZER		SOL(15, 100)
0029+  7DE9             #DEFINE SHORT_PAUSE 	115
0030+  7DE9             
0031+  7DE9             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7DE9             #DEFINE done(v)	\
0033+  7DE9             #DEFCONT	#IF (v==0)
0034+  7DE9             #DEFCONT		\ ldaA 10b
0035+  7DE9             #DEFCONT		\ oraA >state
0036+  7DE9             #DEFCONT		\ staA state
0037+  7DE9             #DEFCONT	\#ENDIF
0038+  7DE9             #DEFCONT	\ jmp afterQueueEvent
0039+  7DE9             	
0040+  7DE9             	
0041+  7DE9             _addScore10N:
0042+  7DE9 BD 7D 4D    	jsr setXToCurPlayer10
0043+  7DEC 86 01       	ldaA	1
0044+  7DEE BD 7D 0F    	jsr _addScoreI
0045+  7DF1 86 02       	fireSolenoidA(CHIME_10)
0045+  7DF3 B7 01 48    
0046+  7DF6 39          	rts
0047+  7DF7             _addScore100N:
0048+  7DF7 BD 7D 4D    	jsr setXToCurPlayer10
0049+  7DFA 09          	deX
0050+  7DFB 86 01       	ldaA	1
0051+  7DFD BD 7D 0F    	jsr _addScoreI
0052+  7E00 86 02       	fireSolenoidA(CHIME_100)	
0052+  7E02 B7 01 49    
0053+  7E05 39          	rts
0054+  7E06             _addScore1000N:
0055+  7E06 BD 7D 4D    	jsr setXToCurPlayer10
0056+  7E09 09          	deX
0057+  7E0A 09          	deX
0058+  7E0B 86 01       	ldaA	1
0059+  7E0D BD 7D 0F    	jsr _addScoreI
0060+  7E10 86 02       	fireSolenoidA(CHIME_1000)
0060+  7E12 B7 01 4A    
0061+  7E15 39          	rts
0062+  7E16             #DEFINE score10() jsr _addScore10N
0063+  7E16             #DEFINE score100() jsr _addScore100N
0064+  7E16             #DEFINE score1000() jsr _addScore1000N
0065+  7E16             #DEFINE score500() \ jsr _addScore100N
0066+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7E16             #DEFCONT	\ jsr _addScore100N
0069+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7E16             #DEFCONT	\ jsr _addScore100N
0072+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7E16             #DEFCONT	\ jsr _addScore100N
0075+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7E16             #DEFCONT	\ jsr _addScore100N
0078+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7E16             
0081+  7E16             #DEFINE advBonus()	jsr advanceBonus
0082+  7E16             
0083+  7E16             advanceBonus:
0084+  7E16 86 08       	ldaA	1000b
0085+  7E18 B5 01 6B    	bitA	>state
0086+  7E1B             	ifne
0086+  7E1B             
0086+  7E1B 27 FE       
0087+  7E1D 39          		rts
0088+  7E1E             	endif
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0088+  7E1C             
0088+  7E1C 01          
0088+  7E1D             
0088+  7E1D             
0088+  7E1D~            	endif
0088+  7E1D~            	endif
0088+  7E1D~            	endif
0088+  7E1D             
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0089+  7E1E 7C 00 B0    	inc 	p_Bonus
0090+  7E21 86 7F       	lampOff(8,5) ; 1k
0090+  7E23 94 0C       
0090+  7E25 97 0C       
0091+  7E27 C6 02       	ldaB	2
0092+  7E29 86 08       	fork(64)
0092+  7E2B BD 7D 80    
0093+  7E2E 39          	rts
0094+  7E2F 01          	nop
0095+  7E30 01          	nop
0096+  7E31             	beginFork()
0097+  7E31             advanceBonus_loop:
0098+  7E31 7A 00 B0    	dec	p_Bonus
0099+  7E34 BD 60 C3    	jsr 	bonusLights
0100+  7E37 7C 00 B0    	inc	p_Bonus
0101+  7E3A 86 FE       	ldaA	11111110b
0102+  7E3C             	
0103+  7E3C 37          	pshB
0104+  7E3D 5A          	decB
0105+  7E3E             inner:
0106+  7E3E 5A          	decB
0107+  7E3F 27 04       	beq	innerEnd
0108+  7E41 0D          	seC
0109+  7E42 49          	rolA
0110+  7E43 20 F9       	bra 	inner
0111+  7E45             innerEnd:
0112+  7E45 33          	pulB
0113+  7E46             	
0114+  7E46 94 0D       	andA	>lc(6)
0115+  7E48 97 0D       	staA	lc(6)
0116+  7E4A 86 08       	delay(64)
0116+  7E4C BD 7D 6B    
0117+  7E4F 5C          	incB
0118+  7E50 D1 B0       	cmpB	>p_Bonus
0119+  7E52 2D DD       	blt	advanceBonus_loop
0120+  7E54 D6 B0       	ldaB	>p_Bonus
0121+  7E56 BD 60 C3    	jsr 	bonusLights
0122+  7E59 DE 2C       	endFork()
0122+  7E5B 7E 79 3C    
0123+  7E5E             	
0124+  7E5E             ; switch callbacks:
0125+  7E5E             
0126+  60C0             none:	.org $6000 + 192 ; size of callback table
0127+  60C0             	done(1)
0127+  60C0~            	done(1)
0127+  60C0~            	done(1)
0127+  60C0~            	done(1)
0127+  60C0~            	done(1)
0127+  60C0             
0127+  60C0 7E 79 BE    
0128+  60C3             	
0129+  60C3             bonusLights:
0130+  60C3 86 00       	ldaA	0
0131+  60C5 97 0C       	staA	lc(5)
0132+  60C7 97 0D       	staA	lc(6)
0133+  60C9 7D 00 B0    	tst	>p_Bonus
0134+  60CC 27 11       	beq	bonusLights_done
0135+  60CE             	
0136+  60CE 86 80       	lampOn(8,5) ; 1k
0136+  60D0 9A 0C       
0136+  60D2 97 0C       
0137+  60D4             	
0138+  60D4 96 B0       	ldaA	>p_Bonus
0139+  60D6             bonusLights_loop:
0140+  60D6 4A          	decA
0141+  60D7 27 06       	beq 	bonusLights_done
0142+  60D9 0D          	seC
0143+  60DA 79 00 0D    	rol	lc(6)
0144+  60DD 20 F7       	bra	bonusLights_loop
0145+  60DF             	
0146+  60DF             bonusLights_done
0147+  60DF             
0148+  60DF 86 09       	ldaA	9
0149+  60E1 91 B0       	cmpA	>p_Bonus
0150+  60E3             	ifge	
0150+  60E3             
0150+  60E3 25 FE       
0151+  60E5             	else	; bonus >= 10?
0151+  60E5             
0151+  60E5             
0151+  60E5             
0151+  60E5             
0151+  60E4             
0151+  60E4             
0151+  60E4             
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4             
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4             
0151+  60E4             
0151+  60E4 02          
0151+  60E5             
0151+  60E5 20 FE       
0151+  60E7             
0151+  60E7             
0151+  60E7             
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7             
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7             
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7             
0152+  60E7 86 0A       		ldaA	10
0153+  60E9 97 B0       		staA	p_Bonus
0154+  60EB 86 40       		lampOn(7,5) ; 10k light
0154+  60ED 9A 0C       
0154+  60EF 97 0C       
0155+  60F1             	endif
0155+  60F1             
0155+  60F1             
0155+  60F1             
0155+  60F1             
0155+  60F1             
0155+  60F1~            	endif
0155+  60F1~            	endif
0155+  60F1             
0155+  60F1~            	endif
0155+  60F1~            	endif
0155+  60F1             
0155+  60E6             
0155+  60E6 0A          
0155+  60E7             
0155+  60E7             
0155+  60E7~            	endif
0155+  60E7~            	endif
0155+  60E7~            	endif
0155+  60E7             
0155+  60F1             
0155+  60F1~            	endif
0155+  60F1~            	endif
0155+  60F1             
0156+  60F1             	
0157+  60F1 39          	rts
0158+  60F2             	
0159+  60F2             	
0160+  60F2             startBall:
0161+  60F2 DE 12       	ldX	>curPlayer
0162+  60F4 86 01       	ldaA	1
0163+  60F6 97 B0       	staA	p_Bonus
0164+  60F8 86 80       	lampOn(8,5)
0164+  60FA 9A 0C       
0164+  60FC 97 0C       
0165+  60FE B6 22 03    	enablePf
0165+  6101 8A 38       
0165+  6103 B7 22 03    
0166+  6106             	
0167+  6106 86 00       	ldaA	0
0168+  6108 97 B5       	staA	p_DropsDown
0169+  610A 86 41       	ldaA	65
0170+  610C 97 A9       	staA	dropResetTimer
0171+  610E             	
0172+  610E 86 00       	ldaA	0
0173+  6110 97 AA       	staA	dropsDown
0174+  6112             	
0175+  6112 C6 0C       	fireSolenoid(DROP_HOT)
0175+  6114 F7 01 42    
0176+  6117 86 12       	delay(150)
0176+  6119 BD 7D 6B    
0177+  611C C6 0C       	fireSolenoid(DROP_TIP)
0177+  611E F7 01 41    
0178+  6121 86 12       	delay(150)
0178+  6123 BD 7D 6B    
0179+  6126             	
0180+  6126 86 FF       	ldaA	$FF
0181+  6128 97 A8       	staA	lastSwitch
0182+  612A             	
0183+  612A             	; clear lights
0184+  612A CE 00 08    	ldX	lampCol1
0185+  612D 86 00       	ldaA	0b
0186+  612F             lClearLights:
0187+  612F A7 00       	staA	0, X
0188+  6131 A7 98       	staA	flashLampCol1 - lampCol1, X
0189+  6133 08          	inX
0190+  6134 8C 00 0E    	cpX	lc(6) + 1
0191+  6137 26 F6       	bne	lClearLights
0192+  6139             	;
0193+  6139             	
0194+  6139             	; init lights for player data
0195+  6139 DE 12       	ldX	>curPlayer
0196+  613B A6 B1       	ldaA	p_Ejects, X
0197+  613D 97 0B       	staA	lc(4)
0198+  613F E6 B6       	ldaB	p_LampCol2, X
0199+  6141 C5 02       	bitB	lr(2)
0200+  6143             	ifne 
0200+  6143             
0200+  6143 27 FE       
0201+  6145 86 02       		lampOn(2,3)
0201+  6147 9A 0A       
0201+  6149 97 0A       
0202+  614B C4 FD       		andB	11111101b
0203+  614D             	endif
0203+  614D             
0203+  614D             
0203+  614D             
0203+  614D             
0203+  614D             
0203+  614D~            	endif
0203+  614D~            	endif
0203+  614D             
0203+  614D~            	endif
0203+  614D~            	endif
0203+  614D             
0203+  6144             
0203+  6144 08          
0203+  6145             
0203+  6145             
0203+  6145~            	endif
0203+  6145~            	endif
0203+  6145~            	endif
0203+  6145             
0203+  614D             
0203+  614D~            	endif
0203+  614D~            	endif
0203+  614D             
0204+  614D D7 09       	staB	lc(2)
0205+  614F             	
0206+  614F 86 40       	ldaA	lr(7) ; shoot again
0207+  6151 95 0F       	bitA	>lc(8)
0208+  6153             	ifne
0208+  6153             
0208+  6153 27 FE       
0209+  6155 86 01       		lampOn(1,3) ; shoot again
0209+  6157 9A 0A       
0209+  6159 97 0A       
0210+  615B             	endif
0210+  615B             
0210+  615B             
0210+  615B             
0210+  615B             
0210+  615B             
0210+  615B~            	endif
0210+  615B~            	endif
0210+  615B             
0210+  615B~            	endif
0210+  615B~            	endif
0210+  615B             
0210+  6154             
0210+  6154 06          
0210+  6155             
0210+  6155             
0210+  6155~            	endif
0210+  6155~            	endif
0210+  6155~            	endif
0210+  6155             
0210+  615B             
0210+  615B~            	endif
0210+  615B~            	endif
0210+  615B             
0211+  615B             	
0212+  615B             	; flash player light
0213+  615B 86 0F       	ldaA	00001111b ; player up lights
0214+  615D 9A A7       	oraA	>flc(8)
0215+  615F 97 A7       	staA	flc(8)
0216+  6161             	
0217+  6161 86 01       	ldaA	sr(1) ; check outhole
0218+  6163 95 21       	bitA	>sc(2)
0219+  6165             	ifne ; ball in hole
0219+  6165             
0219+  6165 27 FE       
0220+  6167 C6 02       		fireSolenoid(OUTHOLE)
0220+  6169 F7 01 44    
0221+  616C             	endif
0221+  616C             
0221+  616C             
0221+  616C             
0221+  616C             
0221+  616C             
0221+  616C~            	endif
0221+  616C~            	endif
0221+  616C             
0221+  616C~            	endif
0221+  616C~            	endif
0221+  616C             
0221+  6166             
0221+  6166 05          
0221+  6167             
0221+  6167             
0221+  6167~            	endif
0221+  6167~            	endif
0221+  6167~            	endif
0221+  6167             
0221+  616C             
0221+  616C~            	endif
0221+  616C~            	endif
0221+  616C             
0222+  616C             	
0223+  616C 39          	rts
0224+  616D             	
0225+  616D             	
0226+  616D             startGame:
0227+  616D 86 02       	lampOn(2,7) ; one player
0227+  616F 9A 0E       
0227+  6171 97 0E       
0228+  6173             	
0229+  6173 86 DF       	lampOff(6,8) ; game over
0229+  6175 94 0F       
0229+  6177 97 0F       
0230+  6179             	
0231+  6179 C6 02       	fireSolenoid(CHIME_10)
0231+  617B F7 01 48    
0232+  617E 86 0E       	delay(SHORT_PAUSE)
0232+  6180 BD 7D 6B    
0233+  6183 C6 02       	fireSolenoid(CHIME_10)
0233+  6185 F7 01 48    
0234+  6188 86 0E       	delay(SHORT_PAUSE)
0234+  618A BD 7D 6B    
0235+  618D C6 02       	fireSolenoid(CHIME_10)
0235+  618F F7 01 48    
0236+  6192 86 19       	delay(200)
0236+  6194 BD 7D 6B    
0237+  6197             	
0238+  6197 C6 02       	fireSolenoid(CHIME_10)
0238+  6199 F7 01 48    
0239+  619C 86 0E       	delay(SHORT_PAUSE)
0239+  619E BD 7D 6B    
0240+  61A1 C6 02       	fireSolenoid(CHIME_10)
0240+  61A3 F7 01 48    
0241+  61A6 86 0E       	delay(SHORT_PAUSE)
0241+  61A8 BD 7D 6B    
0242+  61AB C6 02       	fireSolenoid(CHIME_10)
0242+  61AD F7 01 48    
0243+  61B0 86 19       	delay(200)
0243+  61B2 BD 7D 6B    
0244+  61B5             	
0245+  61B5 C6 02       	fireSolenoid(CHIME_10)
0245+  61B7 F7 01 48    
0246+  61BA 86 0E       	delay(SHORT_PAUSE)
0246+  61BC BD 7D 6B    
0247+  61BF C6 02       	fireSolenoid(CHIME_10)
0247+  61C1 F7 01 48    
0248+  61C4 86 0E       	delay(SHORT_PAUSE)
0248+  61C6 BD 7D 6B    
0249+  61C9 C6 02       	fireSolenoid(CHIME_100)
0249+  61CB F7 01 49    
0250+  61CE 86 19       	delay(200)
0250+  61D0 BD 7D 6B    
0251+  61D3 C6 02       	fireSolenoid(CHIME_1000)
0251+  61D5 F7 01 4A    
0252+  61D8 86 19       	delay(200)
0252+  61DA BD 7D 6B    
0253+  61DD C6 02       	fireSolenoid(CHIME_10k)
0253+  61DF F7 01 4B    
0254+  61E2 86 12       	delay(150)
0254+  61E4 BD 7D 6B    
0255+  61E7             	
0256+  61E7             	; reset scores
0257+  61E7 BD 7D A2    	jsr 	resetScores
0258+  61EA             	
0259+  61EA             	; reset ball count
0260+  61EA 86 10       	ldaA	$10
0261+  61EC 97 77       	staA	ballCount	
0262+  61EE             
0263+  61EE C6 00       	ldaB	0
0264+  61F0 D7 13       	staB	curPlayer + 1
0265+  61F2             	
0266+  61F2 D7 0E       	staB	lc(7)
0267+  61F4 D7 0F       	staB	lc(8)
0268+  61F6 D7 A6       	staB	flc(7)
0269+  61F8 D7 A7       	staB	flc(8)
0270+  61FA             	
0271+  61FA CE 00 00    	ldX	0
0272+  61FD             lInitPlayers:
0273+  61FD C6 01       	ldaB	lr(1)
0274+  61FF E7 B1       	staB	p_Ejects, X
0275+  6201 C6 00       	ldaB	0
0276+  6203 E7 B6       	staB	p_LampCol2, X
0277+  6205 08          	inX
0278+  6206 8C 00 04    	cpX	4
0279+  6209 26 F2       	bne	lInitPlayers
0280+  620B             	
0281+  620B BD 60 F2    	jsr	startBall
0282+  620E             	
0283+  620E             	; invalidate playfield
0284+  620E 86 01       	ldaA	lr(1)
0285+  6210 9A 0F       	oraA	>lc(8)
0286+  6212 97 0F       	staA	lc(8)
0287+  6214             	
0288+  6214 86 02       	lampOn(2,7) ; one player
0288+  6216 9A 0E       
0288+  6218 97 0E       
0289+  621A             	
0290+  621A 86 DF       	lampOff(6,8) ; game over
0290+  621C 94 0F       
0290+  621E 97 0F       
0291+  6220             	
0292+  6220 39          	rts
0293+  6221             	
0294+  6221             
0295+  6221             	
0296+  6221             swTilt: 
0297+  6221 86 10       	lampOn(5,8) ; tilt
0297+  6223 9A 0F       
0297+  6225 97 0F       
0298+  6227 B6 22 03    	disablePf
0298+  622A 84 F7       
0298+  622C B7 22 03    
0299+  622F             	done(0)
0299+  622F             
0299+  622F 86 02       
0299+  6231 BA 01 6B    
0299+  6234 B7 01 6B    
0299+  6237             
0299+  6237 7E 79 BE    
0300+  623A             	
0301+  623A             swStart: 
0302+  623A 96 0F       	ldaA >lc(8)
0303+  623C 85 20       	bitA lr(6)
0304+  623E             	ifne ; in game over
0304+  623E             
0304+  623E 27 FE       
0305+  6240 BD 61 6D    		jsr startGame
0306+  6243             	else 
0306+  6243             
0306+  6243             
0306+  6243             
0306+  6243             
0306+  623F             
0306+  623F             
0306+  623F             
0306+  623F~            	else 
0306+  623F~            	else 
0306+  623F~            	else 
0306+  623F~            	else 
0306+  623F             
0306+  623F~            	else 
0306+  623F~            	else 
0306+  623F~            	else 
0306+  623F~            	else 
0306+  623F             
0306+  623F             
0306+  623F 05          
0306+  6243             
0306+  6243 20 FE       
0306+  6245             
0306+  6245             
0306+  6245             
0306+  6245~            	else 
0306+  6245~            	else 
0306+  6245~            	else 
0306+  6245~            	else 
0306+  6245~            	else 
0306+  6245             
0306+  6245~            	else 
0306+  6245~            	else 
0306+  6245             
0306+  6245~            	else 
0306+  6245~            	else 
0306+  6245             
0307+  6245 86 10       		ldaA	$10
0308+  6247 91 77       		cmpA	>ballCount
0309+  6249             		ifeq ; add player
0309+  6249             
0309+  6249 26 FE       
0310+  624B 86 1E       			ldaA	00011110b
0311+  624D 94 0E       			andA	>lc(7) ; player count lights
0312+  624F 85 10       			bitA	lr(5)
0313+  6251             			ifeq	; if not on P4 already, add player
0313+  6251             
0313+  6251 26 FE       
0314+  6253 48          				aslA
0315+  6254 C6 E1       				ldaB	11100001b
0316+  6256 D4 0E       				andB	>lc(7)
0317+  6258 D7 0E       				staB	lc(7)
0318+  625A 9A 0E       				oraA	>lc(7)
0319+  625C 97 0E       				staA	lc(7)
0320+  625E             			endif
0320+  625E             
0320+  625E             
0320+  625E             
0320+  625E             
0320+  625E             
0320+  625E~            			endif
0320+  625E~            			endif
0320+  625E             
0320+  625E~            			endif
0320+  625E~            			endif
0320+  625E             
0320+  6252             
0320+  6252 0B          
0320+  6253             
0320+  6253             
0320+  6253~            			endif
0320+  6253~            			endif
0320+  6253~            			endif
0320+  6253             
0320+  625E             
0320+  625E~            			endif
0320+  625E~            			endif
0320+  625E             
0321+  625E             		else ; restart game
0321+  625E             
0321+  625E             
0321+  625E             
0321+  625E             
0321+  624A             
0321+  624A             
0321+  624A             
0321+  624A~            		else ; restart game
0321+  624A~            		else ; restart game
0321+  624A~            		else ; restart game
0321+  624A~            		else ; restart game
0321+  624A             
0321+  624A~            		else ; restart game
0321+  624A~            		else ; restart game
0321+  624A~            		else ; restart game
0321+  624A~            		else ; restart game
0321+  624A             
0321+  624A             
0321+  624A 15          
0321+  625E             
0321+  625E 20 FE       
0321+  6260             
0321+  6260             
0321+  6260             
0321+  6260~            		else ; restart game
0321+  6260~            		else ; restart game
0321+  6260~            		else ; restart game
0321+  6260~            		else ; restart game
0321+  6260~            		else ; restart game
0321+  6260             
0321+  6260~            		else ; restart game
0321+  6260~            		else ; restart game
0321+  6260             
0321+  6260~            		else ; restart game
0321+  6260~            		else ; restart game
0321+  6260             
0322+  6260 BD 61 6D    			jsr startGame
0323+  6263             		endif		
0323+  6263             
0323+  6263             
0323+  6263             
0323+  6263             
0323+  6263             
0323+  6263~            		endif		
0323+  6263~            		endif		
0323+  6263             
0323+  6263~            		endif		
0323+  6263~            		endif		
0323+  6263             
0323+  625F             
0323+  625F 03          
0323+  6260             
0323+  6260             
0323+  6260~            		endif		
0323+  6260~            		endif		
0323+  6260~            		endif		
0323+  6260             
0323+  6263             
0323+  6263~            		endif		
0323+  6263~            		endif		
0323+  6263             
0324+  6263             	endif
0324+  6263             
0324+  6263             
0324+  6263             
0324+  6263             
0324+  6263             
0324+  6263~            	endif
0324+  6263~            	endif
0324+  6263             
0324+  6263~            	endif
0324+  6263~            	endif
0324+  6263             
0324+  6244             
0324+  6244 1E          
0324+  6245             
0324+  6245             
0324+  6245~            	endif
0324+  6245~            	endif
0324+  6245~            	endif
0324+  6245             
0324+  6263             
0324+  6263~            	endif
0324+  6263~            	endif
0324+  6263             
0325+  6263             	
0326+  6263 BD 7C D6    	jsr refreshPlayerScores
0327+  6266             	
0328+  6266             	done(0)
0328+  6266             
0328+  6266 86 02       
0328+  6268 BA 01 6B    
0328+  626B B7 01 6B    
0328+  626E             
0328+  626E 7E 79 BE    
0329+  6271             	
0330+  6271             swOuthole: 
0331+  6271 96 0F       	ldaA	>lc(8) ; !game over
0332+  6273 85 20       	bitA	lr(6)
0333+  6275             	ifne ; game over
0333+  6275             
0333+  6275 27 FE       
0334+  6277             		done(0)
0334+  6277             
0334+  6277 86 02       
0334+  6279 BA 01 6B    
0334+  627C B7 01 6B    
0334+  627F             
0334+  627F 7E 79 BE    
0335+  6282             	endif
0335+  6282             
0335+  6282             
0335+  6282             
0335+  6282             
0335+  6282             
0335+  6282~            	endif
0335+  6282~            	endif
0335+  6282             
0335+  6282~            	endif
0335+  6282~            	endif
0335+  6282             
0335+  6276             
0335+  6276 0B          
0335+  6277             
0335+  6277             
0335+  6277~            	endif
0335+  6277~            	endif
0335+  6277~            	endif
0335+  6277             
0335+  6282             
0335+  6282~            	endif
0335+  6282~            	endif
0335+  6282             
0336+  6282             	
0337+  6282 7D 00 BF    	tst	>bonusTimer
0338+  6285             	ifne
0338+  6285             
0338+  6285 27 FE       
0339+  6287             		done(0)
0339+  6287             
0339+  6287 86 02       
0339+  6289 BA 01 6B    
0339+  628C B7 01 6B    
0339+  628F             
0339+  628F 7E 79 BE    
0340+  6292             	else
0340+  6292             
0340+  6292             
0340+  6292             
0340+  6292             
0340+  6286             
0340+  6286             
0340+  6286             
0340+  6286~            	else
0340+  6286~            	else
0340+  6286~            	else
0340+  6286~            	else
0340+  6286             
0340+  6286~            	else
0340+  6286~            	else
0340+  6286~            	else
0340+  6286~            	else
0340+  6286             
0340+  6286             
0340+  6286 0D          
0340+  6292             
0340+  6292 20 FE       
0340+  6294             
0340+  6294             
0340+  6294             
0340+  6294~            	else
0340+  6294~            	else
0340+  6294~            	else
0340+  6294~            	else
0340+  6294~            	else
0340+  6294             
0340+  6294~            	else
0340+  6294~            	else
0340+  6294             
0340+  6294~            	else
0340+  6294~            	else
0340+  6294             
0341+  6294 86 7F       		ldaA	127
0342+  6296 97 BF       		staA	bonusTimer
0343+  6298             	endif
0343+  6298             
0343+  6298             
0343+  6298             
0343+  6298             
0343+  6298             
0343+  6298~            	endif
0343+  6298~            	endif
0343+  6298             
0343+  6298~            	endif
0343+  6298~            	endif
0343+  6298             
0343+  6293             
0343+  6293 04          
0343+  6294             
0343+  6294             
0343+  6294~            	endif
0343+  6294~            	endif
0343+  6294~            	endif
0343+  6294             
0343+  6298             
0343+  6298~            	endif
0343+  6298~            	endif
0343+  6298             
0344+  6298 86 4B       	delay(600)
0344+  629A BD 7D 6B    
0345+  629D             	
0346+  629D             	; check ballsave
0347+  629D 86 01       	ldaA	lr(1)
0348+  629F 95 0A       	bitA	>lc(3)
0349+  62A1             	ifne	; shoot again on
0349+  62A1             
0349+  62A1 27 FE       
0350+  62A3 95 A2       		bitA	>flc(3)
0351+  62A5             		ifne ; shoot again flashing
0351+  62A5             
0351+  62A5 27 FE       
0352+  62A7             			; turn off used special
0353+  62A7 86 80       			ldaA	lr(8) ; right special
0354+  62A9 95 09       			bitA	>lc(2)
0355+  62AB             			ifne
0355+  62AB             
0355+  62AB 27 FE       
0356+  62AD 86 7F       				lampOff(8,2)
0356+  62AF 94 09       
0356+  62B1 97 09       
0357+  62B3 86 7F       				flashOff(8,2)
0357+  62B5 94 A1       
0357+  62B7 97 A1       
0358+  62B9             			endif
0358+  62B9             
0358+  62B9             
0358+  62B9             
0358+  62B9             
0358+  62B9             
0358+  62B9~            			endif
0358+  62B9~            			endif
0358+  62B9             
0358+  62B9~            			endif
0358+  62B9~            			endif
0358+  62B9             
0358+  62AC             
0358+  62AC 0C          
0358+  62AD             
0358+  62AD             
0358+  62AD~            			endif
0358+  62AD~            			endif
0358+  62AD~            			endif
0358+  62AD             
0358+  62B9             
0358+  62B9~            			endif
0358+  62B9~            			endif
0358+  62B9             
0359+  62B9 86 02       			ldaA	lr(2) ; right special
0360+  62BB 95 0A       			bitA	>lc(3)
0361+  62BD             			ifne
0361+  62BD             
0361+  62BD 27 FE       
0362+  62BF 86 FD       				lampOff(2,3)
0362+  62C1 94 0A       
0362+  62C3 97 0A       
0363+  62C5 86 FD       				flashOff(2,3)
0363+  62C7 94 A2       
0363+  62C9 97 A2       
0364+  62CB             			endif
0364+  62CB             
0364+  62CB             
0364+  62CB             
0364+  62CB             
0364+  62CB             
0364+  62CB~            			endif
0364+  62CB~            			endif
0364+  62CB             
0364+  62CB~            			endif
0364+  62CB~            			endif
0364+  62CB             
0364+  62BE             
0364+  62BE 0C          
0364+  62BF             
0364+  62BF             
0364+  62BF~            			endif
0364+  62BF~            			endif
0364+  62BF~            			endif
0364+  62BF             
0364+  62CB             
0364+  62CB~            			endif
0364+  62CB~            			endif
0364+  62CB             
0365+  62CB             			
0366+  62CB             			; flash player light
0367+  62CB 86 0F       			ldaA	00001111b ; player up lights
0368+  62CD 9A A7       			oraA	>flc(8)
0369+  62CF 97 A7       			staA	flc(8)
0370+  62D1             		endif
0370+  62D1             
0370+  62D1             
0370+  62D1             
0370+  62D1             
0370+  62D1             
0370+  62D1~            		endif
0370+  62D1~            		endif
0370+  62D1             
0370+  62D1~            		endif
0370+  62D1~            		endif
0370+  62D1             
0370+  62A6             
0370+  62A6 2A          
0370+  62A7             
0370+  62A7             
0370+  62A7~            		endif
0370+  62A7~            		endif
0370+  62A7~            		endif
0370+  62A7             
0370+  62D1             
0370+  62D1~            		endif
0370+  62D1~            		endif
0370+  62D1             
0371+  62D1             	endif
0371+  62D1             
0371+  62D1             
0371+  62D1             
0371+  62D1             
0371+  62D1             
0371+  62D1~            	endif
0371+  62D1~            	endif
0371+  62D1             
0371+  62D1~            	endif
0371+  62D1~            	endif
0371+  62D1             
0371+  62A2             
0371+  62A2 2E          
0371+  62A3             
0371+  62A3             
0371+  62A3~            	endif
0371+  62A3~            	endif
0371+  62A3~            	endif
0371+  62A3             
0371+  62D1             
0371+  62D1~            	endif
0371+  62D1~            	endif
0371+  62D1             
0372+  62D1             	
0373+  62D1 86 0F       	ldaA	00001111b ; player up lights
0374+  62D3 95 A7       	bitA	>flc(8)	; check if any player is flashing
0375+  62D5             	ifne ; any flashing -> playfield invalid
0375+  62D5             
0375+  62D5 27 FE       
0376+  62D7             swOuthole_save:
0377+  62D7 86 EF       		lampOff(5,8) ; tilt
0377+  62D9 94 0F       
0377+  62DB 97 0F       
0378+  62DD             		
0379+  62DD B6 22 03    		enablePf
0379+  62E0 8A 38       
0379+  62E2 B7 22 03    
0380+  62E5 C6 02       		fireSolenoid(OUTHOLE)
0380+  62E7 F7 01 44    
0381+  62EA             	else ; none flashing -> playfield valid -> end ball			
0381+  62EA             
0381+  62EA             
0381+  62EA             
0381+  62EA             
0381+  62D6             
0381+  62D6             
0381+  62D6             
0381+  62D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  62D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  62D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  62D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  62D6             
0381+  62D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  62D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  62D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  62D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  62D6             
0381+  62D6             
0381+  62D6 15          
0381+  62EA             
0381+  62EA 20 FE       
0381+  62EC             
0381+  62EC             
0381+  62EC             
0381+  62EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  62EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  62EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  62EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  62EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  62EC             
0381+  62EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  62EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  62EC             
0381+  62EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  62EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  62EC             
0382+  62EC             swOuthole_bonusLoop:
0383+  62EC BD 7E 06    		score1000()
0384+  62EF 96 09       		ldaA	>lc(2) ; double bonus
0385+  62F1 85 04       		bitA	lr(3)
0386+  62F3             		ifne 
0386+  62F3             
0386+  62F3 27 FE       
0387+  62F5 86 0C       			delay(100)
0387+  62F7 BD 7D 6B    
0388+  62FA BD 7E 06    			score1000()
0389+  62FD             		endif
0389+  62FD             
0389+  62FD             
0389+  62FD             
0389+  62FD             
0389+  62FD             
0389+  62FD~            		endif
0389+  62FD~            		endif
0389+  62FD             
0389+  62FD~            		endif
0389+  62FD~            		endif
0389+  62FD             
0389+  62F4             
0389+  62F4 08          
0389+  62F5             
0389+  62F5             
0389+  62F5~            		endif
0389+  62F5~            		endif
0389+  62F5~            		endif
0389+  62F5             
0389+  62FD             
0389+  62FD~            		endif
0389+  62FD~            		endif
0389+  62FD             
0390+  62FD 7A 00 B0    		dec	p_Bonus
0391+  6300 BD 60 C3    		jsr	bonusLights
0392+  6303 86 19       		delay(200)
0392+  6305 BD 7D 6B    
0393+  6308 7D 00 B0    		tst	>p_Bonus
0394+  630B 26 DF       		bne	swOuthole_bonusLoop
0395+  630D             	
0396+  630D 86 0F       		ldaA	00001111b ; player up lights
0397+  630F 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0398+  6311 D6 0A       		ldaB	>lc(3) ; check shoot again light
0399+  6313 C5 01       		bitB	lr(1)
0400+  6315             		ifeq ; shoot again not lit
0400+  6315             
0400+  6315 26 FE       
0401+  6317             			; store player's data
0402+  6317 DE 12       			ldX	>curPlayer
0403+  6319 D6 0B       			ldaB	>lc(4)
0404+  631B E7 B1       			staB	p_Ejects, X
0405+  631D D6 0A       			ldaB	>lc(3)
0406+  631F C4 02       			andB	lr(2)
0407+  6321 DA 09       			oraB	>lc(2)
0408+  6323 E7 B6       			staB	p_LampCol2, X
0409+  6325             			
0410+  6325             		
0411+  6325             			; go to next player
0412+  6325 48          			aslA
0413+  6326 7C 00 13    			inc	curPlayer + 1
0414+  6329 95 0E       			bitA	>lc(7)	; is player count < player #
0415+  632B             			ifne ; last player
0415+  632B             
0415+  632B 27 FE       
0416+  632D 86 01       				ldaA	00000001b; ; back to player 1
0417+  632F C6 00       				ldaB	0
0418+  6331 D7 13       				staB	curPlayer + 1
0419+  6333             				
0420+  6333             				; increase ball count
0421+  6333 D6 77       				ldaB	>ballCount
0422+  6335 CB 10       				addB	$10
0423+  6337 C1 40       				cmpB	$40
0424+  6339             				ifeq ; game over
0424+  6339             
0424+  6339 26 FE       
0425+  633B 86 20       					lampOn(6,8)
0425+  633D 9A 0F       
0425+  633F 97 0F       
0426+  6341 B6 22 03    					disablePf
0426+  6344 84 F7       
0426+  6346 B7 22 03    
0427+  6349             					done(1)
0427+  6349~            					done(1)
0427+  6349~            					done(1)
0427+  6349~            					done(1)
0427+  6349~            					done(1)
0427+  6349             
0427+  6349 7E 79 BE    
0428+  634C             				else
0428+  634C             
0428+  634C             
0428+  634C             
0428+  634C             
0428+  633A             
0428+  633A             
0428+  633A             
0428+  633A~            				else
0428+  633A~            				else
0428+  633A~            				else
0428+  633A~            				else
0428+  633A             
0428+  633A~            				else
0428+  633A~            				else
0428+  633A~            				else
0428+  633A~            				else
0428+  633A             
0428+  633A             
0428+  633A 13          
0428+  634C             
0428+  634C 20 FE       
0428+  634E             
0428+  634E             
0428+  634E             
0428+  634E~            				else
0428+  634E~            				else
0428+  634E~            				else
0428+  634E~            				else
0428+  634E~            				else
0428+  634E             
0428+  634E~            				else
0428+  634E~            				else
0428+  634E             
0428+  634E~            				else
0428+  634E~            				else
0428+  634E             
0429+  634E D7 77       					staB	ballCount
0430+  6350             				endif		
0430+  6350             
0430+  6350             
0430+  6350             
0430+  6350             
0430+  6350             
0430+  6350~            				endif		
0430+  6350~            				endif		
0430+  6350             
0430+  6350~            				endif		
0430+  6350~            				endif		
0430+  6350             
0430+  634D             
0430+  634D 02          
0430+  634E             
0430+  634E             
0430+  634E~            				endif		
0430+  634E~            				endif		
0430+  634E~            				endif		
0430+  634E             
0430+  6350             
0430+  6350~            				endif		
0430+  6350~            				endif		
0430+  6350             
0431+  6350             			endif
0431+  6350             
0431+  6350             
0431+  6350             
0431+  6350             
0431+  6350             
0431+  6350~            			endif
0431+  6350~            			endif
0431+  6350             
0431+  6350~            			endif
0431+  6350~            			endif
0431+  6350             
0431+  632C             
0431+  632C 23          
0431+  632D             
0431+  632D             
0431+  632D~            			endif
0431+  632D~            			endif
0431+  632D~            			endif
0431+  632D             
0431+  6350             
0431+  6350~            			endif
0431+  6350~            			endif
0431+  6350             
0432+  6350             			
0433+  6350 97 0F       			staA	lc(8)
0434+  6352             		endif
0434+  6352             
0434+  6352             
0434+  6352             
0434+  6352             
0434+  6352             
0434+  6352~            		endif
0434+  6352~            		endif
0434+  6352             
0434+  6352~            		endif
0434+  6352~            		endif
0434+  6352             
0434+  6316             
0434+  6316 3B          
0434+  6317             
0434+  6317             
0434+  6317~            		endif
0434+  6317~            		endif
0434+  6317~            		endif
0434+  6317             
0434+  6352             
0434+  6352~            		endif
0434+  6352~            		endif
0434+  6352             
0435+  6352             		
0436+  6352 BD 60 F2    		jsr	startBall
0437+  6355             	endif	
0437+  6355             
0437+  6355             
0437+  6355             
0437+  6355             
0437+  6355             
0437+  6355~            	endif	
0437+  6355~            	endif	
0437+  6355             
0437+  6355~            	endif	
0437+  6355~            	endif	
0437+  6355             
0437+  62EB             
0437+  62EB 69          
0437+  62EC             
0437+  62EC             
0437+  62EC~            	endif	
0437+  62EC~            	endif	
0437+  62EC~            	endif	
0437+  62EC             
0437+  6355             
0437+  6355~            	endif	
0437+  6355~            	endif	
0437+  6355             
0438+  6355             	
0439+  6355 7F 00 BF    	clr 	bonusTimer
0440+  6358             	
0441+  6358             	done(0)
0441+  6358             
0441+  6358 86 02       
0441+  635A BA 01 6B    
0441+  635D B7 01 6B    
0441+  6360             
0441+  6360 7E 79 BE    
0442+  6363             	
0443+  6363             swLeftEject:
0444+  6363 96 0F       	ldaA	>lc(8)
0445+  6365 85 20       	bitA	lr(6)
0446+  6367             	ifne ; not in game
0446+  6367             
0446+  6367 27 FE       
0447+  6369 C6 03       		fireSolenoid(LEFT_EJECT)
0447+  636B F7 01 43    
0448+  636E             		done(0)
0448+  636E             
0448+  636E 86 02       
0448+  6370 BA 01 6B    
0448+  6373 B7 01 6B    
0448+  6376             
0448+  6376 7E 79 BE    
0449+  6379             	endif
0449+  6379             
0449+  6379             
0449+  6379             
0449+  6379             
0449+  6379             
0449+  6379~            	endif
0449+  6379~            	endif
0449+  6379             
0449+  6379~            	endif
0449+  6379~            	endif
0449+  6379             
0449+  6368             
0449+  6368 10          
0449+  6369             
0449+  6369             
0449+  6369~            	endif
0449+  6369~            	endif
0449+  6369~            	endif
0449+  6369             
0449+  6379             
0449+  6379~            	endif
0449+  6379~            	endif
0449+  6379             
0450+  6379             		
0451+  6379 BD 7E 16    	advBonus()
0452+  637C 86 04       	ldaA	lr(3) ; extra ball
0453+  637E 95 0A       	bitA	>lc(3)
0454+  6380             	ifne
0454+  6380             
0454+  6380 27 FE       
0455+  6382 C6 06       		fireSolenoid(KNOCKER)
0455+  6384 F7 01 4D    
0456+  6387 86 01       		lampOn(1,3) ; shoot again
0456+  6389 9A 0A       
0456+  638B 97 0A       
0457+  638D 86 40       		lampOn(7,8)
0457+  638F 9A 0F       
0457+  6391 97 0F       
0458+  6393 86 FB       		lampOff(3,3) ; extra ball
0458+  6395 94 0A       
0458+  6397 97 0A       
0459+  6399 86 3E       		delay(500)
0459+  639B BD 7D 6B    
0460+  639E             	else
0460+  639E             
0460+  639E             
0460+  639E             
0460+  639E             
0460+  6381             
0460+  6381             
0460+  6381             
0460+  6381~            	else
0460+  6381~            	else
0460+  6381~            	else
0460+  6381~            	else
0460+  6381             
0460+  6381~            	else
0460+  6381~            	else
0460+  6381~            	else
0460+  6381~            	else
0460+  6381             
0460+  6381             
0460+  6381 1E          
0460+  639E             
0460+  639E 20 FE       
0460+  63A0             
0460+  63A0             
0460+  63A0             
0460+  63A0~            	else
0460+  63A0~            	else
0460+  63A0~            	else
0460+  63A0~            	else
0460+  63A0~            	else
0460+  63A0             
0460+  63A0~            	else
0460+  63A0~            	else
0460+  63A0             
0460+  63A0~            	else
0460+  63A0~            	else
0460+  63A0             
0461+  63A0 BD 67 78    		jsr	addCollect
0462+  63A3             		score500()
0462+  63A3 BD 7D F7    
0462+  63A6 C6 02       
0462+  63A8 F7 01 49    
0462+  63AB 86 0E       
0462+  63AD BD 7D 6B    
0462+  63B0 BD 7D F7    
0462+  63B3 C6 02       
0462+  63B5 F7 01 49    
0462+  63B8 86 0E       
0462+  63BA BD 7D 6B    
0462+  63BD BD 7D F7    
0462+  63C0 C6 02       
0462+  63C2 F7 01 49    
0462+  63C5 86 0E       
0462+  63C7 BD 7D 6B    
0462+  63CA BD 7D F7    
0462+  63CD C6 02       
0462+  63CF F7 01 49    
0462+  63D2 86 0E       
0462+  63D4 BD 7D 6B    
0462+  63D7 BD 7D F7    
0462+  63DA C6 02       
0462+  63DC F7 01 49    
0462+  63DF 86 0E       
0462+  63E1 BD 7D 6B    
0463+  63E4             	endif
0463+  63E4             
0463+  63E4             
0463+  63E4             
0463+  63E4             
0463+  63E4             
0463+  63E4~            	endif
0463+  63E4~            	endif
0463+  63E4             
0463+  63E4~            	endif
0463+  63E4~            	endif
0463+  63E4             
0463+  639F             
0463+  639F 44          
0463+  63A0             
0463+  63A0             
0463+  63A0~            	endif
0463+  63A0~            	endif
0463+  63A0~            	endif
0463+  63A0             
0463+  63E4             
0463+  63E4~            	endif
0463+  63E4~            	endif
0463+  63E4             
0464+  63E4 C6 03       	fireSolenoid(LEFT_EJECT)
0464+  63E6 F7 01 43    
0465+  63E9             	
0466+  63E9 86 32       	fork(400)
0466+  63EB BD 7D 80    
0467+  63EE             	done(1)
0467+  63EE~            	done(1)
0467+  63EE~            	done(1)
0467+  63EE~            	done(1)
0467+  63EE~            	done(1)
0467+  63EE             
0467+  63EE 7E 79 BE    
0468+  63F1             	beginFork()
0469+  63F1 86 C7       	ldaA	11000111b
0470+  63F3 94 A1       	andA	>flc(2)
0471+  63F5 97 A1       	staA	flc(2)
0472+  63F7 DE 2C       	endFork()
0472+  63F9 7E 79 3C    
0473+  63FC             	
0474+  63FC             swTopEject:
0475+  63FC BD 7E 16    	advBonus()
0476+  63FF D6 0B       	ldaB	>lc(4)
0477+  6401 57          	asrB
0478+  6402             	ifeq ; 1k
0478+  6402             
0478+  6402 26 FE       
0479+  6404 BD 7E 06    		score1000()
0480+  6407 86 19       		delay(200)
0480+  6409 BD 7D 6B    
0481+  640C 7E 64 D1    		jmp	swTopEject_scored
0482+  640F             	endif
0482+  640F             
0482+  640F             
0482+  640F             
0482+  640F             
0482+  640F             
0482+  640F~            	endif
0482+  640F~            	endif
0482+  640F             
0482+  640F~            	endif
0482+  640F~            	endif
0482+  640F             
0482+  6403             
0482+  6403 0B          
0482+  6404             
0482+  6404             
0482+  6404~            	endif
0482+  6404~            	endif
0482+  6404~            	endif
0482+  6404             
0482+  640F             
0482+  640F~            	endif
0482+  640F~            	endif
0482+  640F             
0483+  640F 57          	asrB
0484+  6410             	ifeq  ; captive
0484+  6410             
0484+  6410 26 FE       
0485+  6412 86 40       		ldaA	lr(7)
0486+  6414 95 09       		bitA	>lc(2) ; captive ball
0487+  6416             		ifeq	; not lit
0487+  6416             
0487+  6416 26 FE       
0488+  6418 86 40       			lampOn(7,2)
0488+  641A 9A 09       
0488+  641C 97 09       
0489+  641E 86 40       			flashLamp(7,2)
0489+  6420 9A A1       
0489+  6422 97 A1       
0490+  6424             		else
0490+  6424             
0490+  6424             
0490+  6424             
0490+  6424             
0490+  6417             
0490+  6417             
0490+  6417             
0490+  6417~            		else
0490+  6417~            		else
0490+  6417~            		else
0490+  6417~            		else
0490+  6417             
0490+  6417~            		else
0490+  6417~            		else
0490+  6417~            		else
0490+  6417~            		else
0490+  6417             
0490+  6417             
0490+  6417 0E          
0490+  6424             
0490+  6424 20 FE       
0490+  6426             
0490+  6426             
0490+  6426             
0490+  6426~            		else
0490+  6426~            		else
0490+  6426~            		else
0490+  6426~            		else
0490+  6426~            		else
0490+  6426             
0490+  6426~            		else
0490+  6426~            		else
0490+  6426             
0490+  6426~            		else
0490+  6426~            		else
0490+  6426             
0491+  6426 86 BF       			lampOff(7,2)
0491+  6428 94 09       
0491+  642A 97 09       
0492+  642C             		endif
0492+  642C             
0492+  642C             
0492+  642C             
0492+  642C             
0492+  642C             
0492+  642C~            		endif
0492+  642C~            		endif
0492+  642C             
0492+  642C~            		endif
0492+  642C~            		endif
0492+  642C             
0492+  6425             
0492+  6425 06          
0492+  6426             
0492+  6426             
0492+  6426~            		endif
0492+  6426~            		endif
0492+  6426~            		endif
0492+  6426             
0492+  642C             
0492+  642C~            		endif
0492+  642C~            		endif
0492+  642C             
0493+  642C             	score500()
0493+  642C BD 7D F7    
0493+  642F C6 02       
0493+  6431 F7 01 49    
0493+  6434 86 0E       
0493+  6436 BD 7D 6B    
0493+  6439 BD 7D F7    
0493+  643C C6 02       
0493+  643E F7 01 49    
0493+  6441 86 0E       
0493+  6443 BD 7D 6B    
0493+  6446 BD 7D F7    
0493+  6449 C6 02       
0493+  644B F7 01 49    
0493+  644E 86 0E       
0493+  6450 BD 7D 6B    
0493+  6453 BD 7D F7    
0493+  6456 C6 02       
0493+  6458 F7 01 49    
0493+  645B 86 0E       
0493+  645D BD 7D 6B    
0493+  6460 BD 7D F7    
0493+  6463 C6 02       
0493+  6465 F7 01 49    
0493+  6468 86 0E       
0493+  646A BD 7D 6B    
0494+  646D 7E 64 D1    		jmp	swTopEject_scored
0495+  6470             	endif
0495+  6470             
0495+  6470             
0495+  6470             
0495+  6470             
0495+  6470             
0495+  6470~            	endif
0495+  6470~            	endif
0495+  6470             
0495+  6470~            	endif
0495+  6470~            	endif
0495+  6470             
0495+  6411             
0495+  6411 5E          
0495+  6412             
0495+  6412             
0495+  6412~            	endif
0495+  6412~            	endif
0495+  6412~            	endif
0495+  6412             
0495+  6470             
0495+  6470~            	endif
0495+  6470~            	endif
0495+  6470             
0496+  6470 57          	asrB
0497+  6471             	ifne	
0497+  6471             
0497+  6471 27 FE       
0498+  6473 57          		asrB
0499+  6474             		ifeq ; double
0499+  6474             
0499+  6474 26 FE       
0500+  6476 86 04       			ldaA	lr(3)
0501+  6478 95 09       			bitA	>lc(2) ; double bonus
0502+  647A             			ifeq	; not lit
0502+  647A             
0502+  647A 26 FE       
0503+  647C 86 04       				lampOn(3,2)
0503+  647E 9A 09       
0503+  6480 97 09       
0504+  6482 86 04       				flashLamp(3,2)
0504+  6484 9A A1       
0504+  6486 97 A1       
0505+  6488             			else
0505+  6488             
0505+  6488             
0505+  6488             
0505+  6488             
0505+  647B             
0505+  647B             
0505+  647B             
0505+  647B~            			else
0505+  647B~            			else
0505+  647B~            			else
0505+  647B~            			else
0505+  647B             
0505+  647B~            			else
0505+  647B~            			else
0505+  647B~            			else
0505+  647B~            			else
0505+  647B             
0505+  647B             
0505+  647B 0E          
0505+  6488             
0505+  6488 20 FE       
0505+  648A             
0505+  648A             
0505+  648A             
0505+  648A~            			else
0505+  648A~            			else
0505+  648A~            			else
0505+  648A~            			else
0505+  648A~            			else
0505+  648A             
0505+  648A~            			else
0505+  648A~            			else
0505+  648A             
0505+  648A~            			else
0505+  648A~            			else
0505+  648A             
0506+  648A 86 FB       				lampOff(3,2)
0506+  648C 94 09       
0506+  648E 97 09       
0507+  6490             			endif
0507+  6490             
0507+  6490             
0507+  6490             
0507+  6490             
0507+  6490             
0507+  6490~            			endif
0507+  6490~            			endif
0507+  6490             
0507+  6490~            			endif
0507+  6490~            			endif
0507+  6490             
0507+  6489             
0507+  6489 06          
0507+  648A             
0507+  648A             
0507+  648A~            			endif
0507+  648A~            			endif
0507+  648A~            			endif
0507+  648A             
0507+  6490             
0507+  6490~            			endif
0507+  6490~            			endif
0507+  6490             
0508+  6490             		endif
0508+  6490             
0508+  6490             
0508+  6490             
0508+  6490             
0508+  6490             
0508+  6490~            		endif
0508+  6490~            		endif
0508+  6490             
0508+  6490~            		endif
0508+  6490~            		endif
0508+  6490             
0508+  6475             
0508+  6475 1A          
0508+  6476             
0508+  6476             
0508+  6476~            		endif
0508+  6476~            		endif
0508+  6476~            		endif
0508+  6476             
0508+  6490             
0508+  6490~            		endif
0508+  6490~            		endif
0508+  6490             
0509+  6490             	endif
0509+  6490             
0509+  6490             
0509+  6490             
0509+  6490             
0509+  6490             
0509+  6490~            	endif
0509+  6490~            	endif
0509+  6490             
0509+  6490~            	endif
0509+  6490~            	endif
0509+  6490             
0509+  6472             
0509+  6472 1D          
0509+  6473             
0509+  6473             
0509+  6473~            	endif
0509+  6473~            	endif
0509+  6473~            	endif
0509+  6473             
0509+  6490             
0509+  6490~            	endif
0509+  6490~            	endif
0509+  6490             
0510+  6490             	score500()
0510+  6490 BD 7D F7    
0510+  6493 C6 02       
0510+  6495 F7 01 49    
0510+  6498 86 0E       
0510+  649A BD 7D 6B    
0510+  649D BD 7D F7    
0510+  64A0 C6 02       
0510+  64A2 F7 01 49    
0510+  64A5 86 0E       
0510+  64A7 BD 7D 6B    
0510+  64AA BD 7D F7    
0510+  64AD C6 02       
0510+  64AF F7 01 49    
0510+  64B2 86 0E       
0510+  64B4 BD 7D 6B    
0510+  64B7 BD 7D F7    
0510+  64BA C6 02       
0510+  64BC F7 01 49    
0510+  64BF 86 0E       
0510+  64C1 BD 7D 6B    
0510+  64C4 BD 7D F7    
0510+  64C7 C6 02       
0510+  64C9 F7 01 49    
0510+  64CC 86 0E       
0510+  64CE BD 7D 6B    
0511+  64D1             swTopEject_scored:
0512+  64D1 86 FB       	flashOff(3,2)
0512+  64D3 94 A1       
0512+  64D5 97 A1       
0513+  64D7 86 BF       	flashOff(7,2)
0513+  64D9 94 A1       
0513+  64DB 97 A1       
0514+  64DD C6 03       	fireSolenoid(TOP_EJECT)
0514+  64DF F7 01 40    
0515+  64E2             	done(1)
0515+  64E2~            	done(1)
0515+  64E2~            	done(1)
0515+  64E2~            	done(1)
0515+  64E2~            	done(1)
0515+  64E2             
0515+  64E2 7E 79 BE    
0516+  64E5             	
0517+  64E5             swHotTip:
0518+  64E5 7D 00 A9    	tst	>dropResetTimer
0519+  64E8             	ifne
0519+  64E8             
0519+  64E8 27 FE       
0520+  64EA             		done(0)
0520+  64EA             
0520+  64EA 86 02       
0520+  64EC BA 01 6B    
0520+  64EF B7 01 6B    
0520+  64F2             
0520+  64F2 7E 79 BE    
0521+  64F5             	endif
0521+  64F5             
0521+  64F5             
0521+  64F5             
0521+  64F5             
0521+  64F5             
0521+  64F5~            	endif
0521+  64F5~            	endif
0521+  64F5             
0521+  64F5~            	endif
0521+  64F5~            	endif
0521+  64F5             
0521+  64E9             
0521+  64E9 0B          
0521+  64EA             
0521+  64EA             
0521+  64EA~            	endif
0521+  64EA~            	endif
0521+  64EA~            	endif
0521+  64EA             
0521+  64F5             
0521+  64F5~            	endif
0521+  64F5~            	endif
0521+  64F5             
0522+  64F5             	
0523+  64F5 BD 67 78    	jsr	addCollect
0524+  64F8 86 00       	ldaA	0
0525+  64FA 97 B5       	staA	p_DropsDown
0526+  64FC 97 AA       	staA	dropsDown
0527+  64FE 86 41       	ldaA	65
0528+  6500 97 A9       	staA	dropResetTimer
0529+  6502 86 12       	delay(150)
0529+  6504 BD 7D 6B    
0530+  6507 C6 0C       	fireSolenoid(DROP_HOT)
0530+  6509 F7 01 42    
0531+  650C 86 12       	delay(150)
0531+  650E BD 7D 6B    
0532+  6511 C6 0C       	fireSolenoid(DROP_TIP)
0532+  6513 F7 01 41    
0533+  6516 86 F7       	lampOff(4,3) ; spinner
0533+  6518 94 0A       
0533+  651A 97 0A       
0534+  651C             	
0535+  651C 86 70       	fork(900)
0535+  651E BD 7D 80    
0536+  6521             	done(1)
0536+  6521~            	done(1)
0536+  6521~            	done(1)
0536+  6521~            	done(1)
0536+  6521~            	done(1)
0536+  6521             
0536+  6521 7E 79 BE    
0537+  6524             	beginFork()
0538+  6524 86 C7       	ldaA	11000111b
0539+  6526 94 A1       	andA	>flc(2)
0540+  6528 97 A1       	staA	flc(2)
0541+  652A DE 2C       	endFork()
0541+  652C 7E 79 3C    
0542+  652F             	
0543+  652F             swLeftOutlane:
0544+  652F 86 02       	ldaA	lr(2) ; left special
0545+  6531 95 0A       	bitA	>lc(3)
0546+  6533             	ifne
0546+  6533             
0546+  6533 27 FE       
0547+  6535 86 01       		lampOn(1,3) ; shoot again
0547+  6537 9A 0A       
0547+  6539 97 0A       
0548+  653B 86 01       		flashLamp(1,3)
0548+  653D 9A A2       
0548+  653F 97 A2       
0549+  6541 C6 0C       		fireSolenoid(BUZZER)
0549+  6543 F7 01 4E    
0550+  6546 86 02       		flashLamp(2,3)
0550+  6548 9A A2       
0550+  654A 97 A2       
0551+  654C             	endif
0551+  654C             
0551+  654C             
0551+  654C             
0551+  654C             
0551+  654C             
0551+  654C~            	endif
0551+  654C~            	endif
0551+  654C             
0551+  654C~            	endif
0551+  654C~            	endif
0551+  654C             
0551+  6534             
0551+  6534 17          
0551+  6535             
0551+  6535             
0551+  6535~            	endif
0551+  6535~            	endif
0551+  6535~            	endif
0551+  6535             
0551+  654C             
0551+  654C~            	endif
0551+  654C~            	endif
0551+  654C             
0552+  654C BD 7E 16    	advBonus()
0553+  654F BD 7E 06    	score1000()
0554+  6552             	done(1)
0554+  6552~            	done(1)
0554+  6552~            	done(1)
0554+  6552~            	done(1)
0554+  6552~            	done(1)
0554+  6552             
0554+  6552 7E 79 BE    
0555+  6555             	
0556+  6555             swRightOutlane:
0557+  6555 86 80       	ldaA	lr(8) ; right special
0558+  6557 95 09       	bitA	>lc(2)
0559+  6559             	ifne
0559+  6559             
0559+  6559 27 FE       
0560+  655B 86 01       		lampOn(1,3) ; shoot again
0560+  655D 9A 0A       
0560+  655F 97 0A       
0561+  6561 86 01       		flashLamp(1,3)
0561+  6563 9A A2       
0561+  6565 97 A2       
0562+  6567 C6 0C       		fireSolenoid(BUZZER)
0562+  6569 F7 01 4E    
0563+  656C 86 80       		flashLamp(8,2)
0563+  656E 9A A1       
0563+  6570 97 A1       
0564+  6572             	endif
0564+  6572             
0564+  6572             
0564+  6572             
0564+  6572             
0564+  6572             
0564+  6572~            	endif
0564+  6572~            	endif
0564+  6572             
0564+  6572~            	endif
0564+  6572~            	endif
0564+  6572             
0564+  655A             
0564+  655A 17          
0564+  655B             
0564+  655B             
0564+  655B~            	endif
0564+  655B~            	endif
0564+  655B~            	endif
0564+  655B             
0564+  6572             
0564+  6572~            	endif
0564+  6572~            	endif
0564+  6572             
0565+  6572 BD 7E 16    	advBonus()
0566+  6575 BD 7E 06    	score1000()
0567+  6578             	done(1)
0567+  6578~            	done(1)
0567+  6578~            	done(1)
0567+  6578~            	done(1)
0567+  6578~            	done(1)
0567+  6578             
0567+  6578 7E 79 BE    
0568+  657B             	
0569+  657B             swLeftInlane:
0570+  657B BD 7E 16    	advBonus()
0571+  657E BD 7E 06    	score1000()
0572+  6581             	done(1)
0572+  6581~            	done(1)
0572+  6581~            	done(1)
0572+  6581~            	done(1)
0572+  6581~            	done(1)
0572+  6581             
0572+  6581 7E 79 BE    
0573+  6584             swRightInlane:
0574+  6584 BD 7E 16    	advBonus()
0575+  6587 BD 7E 06    	score1000()
0576+  658A 86 FF       	ldaA	255
0577+  658C 97 BA       	staA	spinnerTimer
0578+  658E 86 08       	flashLamp(4,3) ; spinner
0578+  6590 9A A2       
0578+  6592 97 A2       
0579+  6594 86 08       	lampOn(4,3)
0579+  6596 9A 0A       
0579+  6598 97 0A       
0580+  659A             	done(1)
0580+  659A~            	done(1)
0580+  659A~            	done(1)
0580+  659A~            	done(1)
0580+  659A~            	done(1)
0580+  659A             
0580+  659A 7E 79 BE    
0581+  659D             sw10pt:
0582+  659D BD 7D E9    	score10()
0583+  65A0 77 00 0B    	asr	lc(4)
0584+  65A3             	ifeq ; shifted off the edge
0584+  65A3             
0584+  65A3 26 FE       
0585+  65A5 86 10       		ldaA	00010000b
0586+  65A7 97 0B       		staA	lc(4)
0587+  65A9             	endif
0587+  65A9             
0587+  65A9             
0587+  65A9             
0587+  65A9             
0587+  65A9             
0587+  65A9~            	endif
0587+  65A9~            	endif
0587+  65A9             
0587+  65A9~            	endif
0587+  65A9~            	endif
0587+  65A9             
0587+  65A4             
0587+  65A4 04          
0587+  65A5             
0587+  65A5             
0587+  65A5~            	endif
0587+  65A5~            	endif
0587+  65A5~            	endif
0587+  65A5             
0587+  65A9             
0587+  65A9~            	endif
0587+  65A9~            	endif
0587+  65A9             
0588+  65A9             	done(1)
0588+  65A9~            	done(1)
0588+  65A9~            	done(1)
0588+  65A9~            	done(1)
0588+  65A9~            	done(1)
0588+  65A9             
0588+  65A9 7E 79 BE    
0589+  65AC             sw100pt:
0590+  65AC BD 7D F7    	score100()
0591+  65AF             	done(1)
0591+  65AF~            	done(1)
0591+  65AF~            	done(1)
0591+  65AF~            	done(1)
0591+  65AF~            	done(1)
0591+  65AF             
0591+  65AF 7E 79 BE    
0592+  65B2             sw500pt:
0593+  65B2 BD 67 4C    	jsr	alternate
0594+  65B5             	score500()
0594+  65B5 BD 7D F7    
0594+  65B8 C6 02       
0594+  65BA F7 01 49    
0594+  65BD 86 0E       
0594+  65BF BD 7D 6B    
0594+  65C2 BD 7D F7    
0594+  65C5 C6 02       
0594+  65C7 F7 01 49    
0594+  65CA 86 0E       
0594+  65CC BD 7D 6B    
0594+  65CF BD 7D F7    
0594+  65D2 C6 02       
0594+  65D4 F7 01 49    
0594+  65D7 86 0E       
0594+  65D9 BD 7D 6B    
0594+  65DC BD 7D F7    
0594+  65DF C6 02       
0594+  65E1 F7 01 49    
0594+  65E4 86 0E       
0594+  65E6 BD 7D 6B    
0594+  65E9 BD 7D F7    
0594+  65EC C6 02       
0594+  65EE F7 01 49    
0594+  65F1 86 0E       
0594+  65F3 BD 7D 6B    
0595+  65F6             	done(1)
0595+  65F6~            	done(1)
0595+  65F6~            	done(1)
0595+  65F6~            	done(1)
0595+  65F6~            	done(1)
0595+  65F6             
0595+  65F6 7E 79 BE    
0596+  65F9             swPop:
0597+  65F9 BD 67 4C    	jsr	alternate
0598+  65FC BD 7D F7    	score100()
0599+  65FF             	done(1)
0599+  65FF~            	done(1)
0599+  65FF~            	done(1)
0599+  65FF~            	done(1)
0599+  65FF~            	done(1)
0599+  65FF             
0599+  65FF 7E 79 BE    
0600+  6602             swDropTip:
0601+  6602 86 08       	ldaA	1<<3
0602+  6604 7E 66 20    	jmp	swDrop
0603+  6607             swDropHot:
0604+  6607 86 01       	ldaA	1<<0
0605+  6609 7E 66 20    	jmp	swDrop
0606+  660C             swDroptIp:
0607+  660C 86 10       	ldaA	1<<4
0608+  660E 7E 66 20    	jmp	swDrop
0609+  6611             swDrophOt:
0610+  6611 86 02       	ldaA	1<<1
0611+  6613 7E 66 20    	jmp	swDrop
0612+  6616             swDroptiP:
0613+  6616 86 20       	ldaA	1<<5
0614+  6618 7E 66 20    	jmp	swDrop
0615+  661B             swDrophoT:
0616+  661B 86 04       	ldaA	1<<2
0617+  661D 7E 66 20    	jmp	swDrop
0618+  6620             swDrop:
0619+  6620 7D 00 A9    	tst	>dropResetTimer
0620+  6623             	ifeq
0620+  6623             
0620+  6623 26 FE       
0621+  6625 95 AA       		bitA	>dropsDown
0622+  6627             		ifne
0622+  6627             
0622+  6627 27 FE       
0623+  6629             			done(0)
0623+  6629             
0623+  6629 86 02       
0623+  662B BA 01 6B    
0623+  662E B7 01 6B    
0623+  6631             
0623+  6631 7E 79 BE    
0624+  6634             		endif
0624+  6634             
0624+  6634             
0624+  6634             
0624+  6634             
0624+  6634             
0624+  6634~            		endif
0624+  6634~            		endif
0624+  6634             
0624+  6634~            		endif
0624+  6634~            		endif
0624+  6634             
0624+  6628             
0624+  6628 0B          
0624+  6629             
0624+  6629             
0624+  6629~            		endif
0624+  6629~            		endif
0624+  6629~            		endif
0624+  6629             
0624+  6634             
0624+  6634~            		endif
0624+  6634~            		endif
0624+  6634             
0625+  6634 9A AA       		oraA	>dropsDown
0626+  6636             		
0627+  6636 97 AA       		staA	dropsDown
0628+  6638 7C 00 B5    		inc	p_DropsDown
0629+  663B 86 04       		ldaA	4
0630+  663D 91 B5       		cmpA	>p_DropsDown
0631+  663F             		ifgt
0631+  663F             
0631+  663F 23 FE       
0632+  6641 86 F7       			lampOff(4,3) ; spinner
0632+  6643 94 0A       
0632+  6645 97 0A       
0633+  6647             		else
0633+  6647             
0633+  6647             
0633+  6647             
0633+  6647             
0633+  6640             
0633+  6640             
0633+  6640             
0633+  6640~            		else
0633+  6640~            		else
0633+  6640~            		else
0633+  6640~            		else
0633+  6640             
0633+  6640~            		else
0633+  6640~            		else
0633+  6640~            		else
0633+  6640~            		else
0633+  6640             
0633+  6640             
0633+  6640 08          
0633+  6647             
0633+  6647 20 FE       
0633+  6649             
0633+  6649             
0633+  6649             
0633+  6649~            		else
0633+  6649~            		else
0633+  6649~            		else
0633+  6649~            		else
0633+  6649~            		else
0633+  6649             
0633+  6649~            		else
0633+  6649~            		else
0633+  6649             
0633+  6649~            		else
0633+  6649~            		else
0633+  6649             
0634+  6649 86 08       			lampOn(4,3)
0634+  664B 9A 0A       
0634+  664D 97 0A       
0635+  664F             		endif
0635+  664F             
0635+  664F             
0635+  664F             
0635+  664F             
0635+  664F             
0635+  664F~            		endif
0635+  664F~            		endif
0635+  664F             
0635+  664F~            		endif
0635+  664F~            		endif
0635+  664F             
0635+  6648             
0635+  6648 06          
0635+  6649             
0635+  6649             
0635+  6649~            		endif
0635+  6649~            		endif
0635+  6649~            		endif
0635+  6649             
0635+  664F             
0635+  664F~            		endif
0635+  664F~            		endif
0635+  664F             
0636+  664F             		
0637+  664F BD 7D E9    		score10()
0638+  6652 BD 7E 16    		advBonus()
0639+  6655             		done(1)
0639+  6655~            		done(1)
0639+  6655~            		done(1)
0639+  6655~            		done(1)
0639+  6655~            		done(1)
0639+  6655             
0639+  6655 7E 79 BE    
0640+  6658             	else
0640+  6658             
0640+  6658             
0640+  6658             
0640+  6658             
0640+  6624             
0640+  6624             
0640+  6624             
0640+  6624~            	else
0640+  6624~            	else
0640+  6624~            	else
0640+  6624~            	else
0640+  6624             
0640+  6624~            	else
0640+  6624~            	else
0640+  6624~            	else
0640+  6624~            	else
0640+  6624             
0640+  6624             
0640+  6624 35          
0640+  6658             
0640+  6658 20 FE       
0640+  665A             
0640+  665A             
0640+  665A             
0640+  665A~            	else
0640+  665A~            	else
0640+  665A~            	else
0640+  665A~            	else
0640+  665A~            	else
0640+  665A             
0640+  665A~            	else
0640+  665A~            	else
0640+  665A             
0640+  665A~            	else
0640+  665A~            	else
0640+  665A             
0641+  665A             		done(0)
0641+  665A             
0641+  665A 86 02       
0641+  665C BA 01 6B    
0641+  665F B7 01 6B    
0641+  6662             
0641+  6662 7E 79 BE    
0642+  6665             	endif
0642+  6665             
0642+  6665             
0642+  6665             
0642+  6665             
0642+  6665             
0642+  6665~            	endif
0642+  6665~            	endif
0642+  6665             
0642+  6665~            	endif
0642+  6665~            	endif
0642+  6665             
0642+  6659             
0642+  6659 0B          
0642+  665A             
0642+  665A             
0642+  665A~            	endif
0642+  665A~            	endif
0642+  665A~            	endif
0642+  665A             
0642+  6665             
0642+  6665~            	endif
0642+  6665~            	endif
0642+  6665             
0643+  6665             swAdvBonus:
0644+  6665 BD 7E 16    	advBonus()
0645+  6668 BD 7E 06    	score1000()
0646+  666B             	done(1)
0646+  666B~            	done(1)
0646+  666B~            	done(1)
0646+  666B~            	done(1)
0646+  666B~            	done(1)
0646+  666B             
0646+  666B 7E 79 BE    
0647+  666E             swSpinner:
0648+  666E             	;ldaA	>sc(4)
0649+  666E             	;bitA	sr(6)
0650+  666E             	;ifne
0651+  666E             	;	score100()
0652+  666E             	;	ldaA	$E
0653+  666E             	;else
0654+  666E             	;	noValidate
0655+  666E             	;	ldaA	0
0656+  666E             	;endif
0657+  666E             	;staA	solenoid1 + CLICKER - 1
0658+  666E             	
0659+  666E 86 08       	ldaA	lr(4) ; spinner
0660+  6670 95 0A       	bitA	>lc(3)
0661+  6672             	ifne ; spinner on
0661+  6672             
0661+  6672 27 FE       
0662+  6674 7D 00 BA    		tst	>spinnerTimer
0663+  6677             		ifne
0663+  6677             
0663+  6677 27 FE       
0664+  6679 86 20       			ldaA	32
0665+  667B 97 BA       			staA	spinnerTimer
0666+  667D 86 0A       			ldaA	10
0667+  667F 95 02       			bitA	>counter
0668+  6681             			ifeq
0668+  6681             
0668+  6681 26 FE       
0669+  6683 BD 7E 16    				advBonus()
0670+  6686             			endif
0670+  6686             
0670+  6686             
0670+  6686             
0670+  6686             
0670+  6686             
0670+  6686~            			endif
0670+  6686~            			endif
0670+  6686             
0670+  6686~            			endif
0670+  6686~            			endif
0670+  6686             
0670+  6682             
0670+  6682 03          
0670+  6683             
0670+  6683             
0670+  6683~            			endif
0670+  6683~            			endif
0670+  6683~            			endif
0670+  6683             
0670+  6686             
0670+  6686~            			endif
0670+  6686~            			endif
0670+  6686             
0671+  6686             		endif
0671+  6686             
0671+  6686             
0671+  6686             
0671+  6686             
0671+  6686             
0671+  6686~            		endif
0671+  6686~            		endif
0671+  6686             
0671+  6686~            		endif
0671+  6686~            		endif
0671+  6686             
0671+  6678             
0671+  6678 0D          
0671+  6679             
0671+  6679             
0671+  6679~            		endif
0671+  6679~            		endif
0671+  6679~            		endif
0671+  6679             
0671+  6686             
0671+  6686~            		endif
0671+  6686~            		endif
0671+  6686             
0672+  6686 BD 7D F7    		score100()
0673+  6689 C6 01       		fireSolenoid(CLICKER)
0673+  668B F7 01 4C    
0674+  668E             	else
0674+  668E             
0674+  668E             
0674+  668E             
0674+  668E             
0674+  6673             
0674+  6673             
0674+  6673             
0674+  6673~            	else
0674+  6673~            	else
0674+  6673~            	else
0674+  6673~            	else
0674+  6673             
0674+  6673~            	else
0674+  6673~            	else
0674+  6673~            	else
0674+  6673~            	else
0674+  6673             
0674+  6673             
0674+  6673 1C          
0674+  668E             
0674+  668E 20 FE       
0674+  6690             
0674+  6690             
0674+  6690             
0674+  6690~            	else
0674+  6690~            	else
0674+  6690~            	else
0674+  6690~            	else
0674+  6690~            	else
0674+  6690             
0674+  6690~            	else
0674+  6690~            	else
0674+  6690             
0674+  6690~            	else
0674+  6690~            	else
0674+  6690             
0675+  6690 7D 00 BA    		tst	>spinnerTimer
0676+  6693             		ifne
0676+  6693             
0676+  6693 27 FE       
0677+  6695 86 20       			ldaA	32
0678+  6697 97 BA       			staA	spinnerTimer
0679+  6699 BD 7D F7    			score100()
0680+  669C C6 01       			fireSolenoid(CLICKER)
0680+  669E F7 01 4C    
0681+  66A1             		else
0681+  66A1             
0681+  66A1             
0681+  66A1             
0681+  66A1             
0681+  6694             
0681+  6694             
0681+  6694             
0681+  6694~            		else
0681+  6694~            		else
0681+  6694~            		else
0681+  6694~            		else
0681+  6694             
0681+  6694~            		else
0681+  6694~            		else
0681+  6694~            		else
0681+  6694~            		else
0681+  6694             
0681+  6694             
0681+  6694 0E          
0681+  66A1             
0681+  66A1 20 FE       
0681+  66A3             
0681+  66A3             
0681+  66A3             
0681+  66A3~            		else
0681+  66A3~            		else
0681+  66A3~            		else
0681+  66A3~            		else
0681+  66A3~            		else
0681+  66A3             
0681+  66A3~            		else
0681+  66A3~            		else
0681+  66A3             
0681+  66A3~            		else
0681+  66A3~            		else
0681+  66A3             
0682+  66A3 BD 7D E9    			score10()
0683+  66A6             		endif
0683+  66A6             
0683+  66A6             
0683+  66A6             
0683+  66A6             
0683+  66A6             
0683+  66A6~            		endif
0683+  66A6~            		endif
0683+  66A6             
0683+  66A6~            		endif
0683+  66A6~            		endif
0683+  66A6             
0683+  66A2             
0683+  66A2 03          
0683+  66A3             
0683+  66A3             
0683+  66A3~            		endif
0683+  66A3~            		endif
0683+  66A3~            		endif
0683+  66A3             
0683+  66A6             
0683+  66A6~            		endif
0683+  66A6~            		endif
0683+  66A6             
0684+  66A6             	endif
0684+  66A6             
0684+  66A6             
0684+  66A6             
0684+  66A6             
0684+  66A6             
0684+  66A6~            	endif
0684+  66A6~            	endif
0684+  66A6             
0684+  66A6~            	endif
0684+  66A6~            	endif
0684+  66A6             
0684+  668F             
0684+  668F 16          
0684+  6690             
0684+  6690             
0684+  6690~            	endif
0684+  6690~            	endif
0684+  6690~            	endif
0684+  6690             
0684+  66A6             
0684+  66A6~            	endif
0684+  66A6~            	endif
0684+  66A6             
0685+  66A6             	done(1)
0685+  66A6~            	done(1)
0685+  66A6~            	done(1)
0685+  66A6~            	done(1)
0685+  66A6~            	done(1)
0685+  66A6             
0685+  66A6 7E 79 BE    
0686+  66A9             
0687+  66A9             swCaptiveRollover:
0688+  66A9 96 09       	ldaA	>lc(2)
0689+  66AB 85 40       	bitA	lr(7)
0690+  66AD             	ifeq ; light off
0690+  66AD             
0690+  66AD 26 FE       
0691+  66AF BD 7D E9    		score10()
0692+  66B2             	else
0692+  66B2             
0692+  66B2             
0692+  66B2             
0692+  66B2             
0692+  66AE             
0692+  66AE             
0692+  66AE             
0692+  66AE~            	else
0692+  66AE~            	else
0692+  66AE~            	else
0692+  66AE~            	else
0692+  66AE             
0692+  66AE~            	else
0692+  66AE~            	else
0692+  66AE~            	else
0692+  66AE~            	else
0692+  66AE             
0692+  66AE             
0692+  66AE 05          
0692+  66B2             
0692+  66B2 20 FE       
0692+  66B4             
0692+  66B4             
0692+  66B4             
0692+  66B4~            	else
0692+  66B4~            	else
0692+  66B4~            	else
0692+  66B4~            	else
0692+  66B4~            	else
0692+  66B4             
0692+  66B4~            	else
0692+  66B4~            	else
0692+  66B4             
0692+  66B4~            	else
0692+  66B4~            	else
0692+  66B4             
0693+  66B4 BD 7E 06    		score1000()
0694+  66B7 86 0E       		ldaA	14 ; captive rollover switch number
0695+  66B9 91 A8       		cmpA	>lastSwitch
0696+  66BB             		ifne
0696+  66BB             
0696+  66BB 27 FE       
0697+  66BD 86 0F       			ldaA	15 ; captive rollover switch number
0698+  66BF 91 A8       			cmpA	>lastSwitch
0699+  66C1             			ifne
0699+  66C1             
0699+  66C1 27 FE       
0700+  66C3 BD 66 E0    				jsr	captiveAward
0701+  66C6             			endif
0701+  66C6             
0701+  66C6             
0701+  66C6             
0701+  66C6             
0701+  66C6             
0701+  66C6~            			endif
0701+  66C6~            			endif
0701+  66C6             
0701+  66C6~            			endif
0701+  66C6~            			endif
0701+  66C6             
0701+  66C2             
0701+  66C2 03          
0701+  66C3             
0701+  66C3             
0701+  66C3~            			endif
0701+  66C3~            			endif
0701+  66C3~            			endif
0701+  66C3             
0701+  66C6             
0701+  66C6~            			endif
0701+  66C6~            			endif
0701+  66C6             
0702+  66C6             		endif
0702+  66C6             
0702+  66C6             
0702+  66C6             
0702+  66C6             
0702+  66C6             
0702+  66C6~            		endif
0702+  66C6~            		endif
0702+  66C6             
0702+  66C6~            		endif
0702+  66C6~            		endif
0702+  66C6             
0702+  66BC             
0702+  66BC 09          
0702+  66BD             
0702+  66BD             
0702+  66BD~            		endif
0702+  66BD~            		endif
0702+  66BD~            		endif
0702+  66BD             
0702+  66C6             
0702+  66C6~            		endif
0702+  66C6~            		endif
0702+  66C6             
0703+  66C6             	endif
0703+  66C6             
0703+  66C6             
0703+  66C6             
0703+  66C6             
0703+  66C6             
0703+  66C6~            	endif
0703+  66C6~            	endif
0703+  66C6             
0703+  66C6~            	endif
0703+  66C6~            	endif
0703+  66C6             
0703+  66B3             
0703+  66B3 12          
0703+  66B4             
0703+  66B4             
0703+  66B4~            	endif
0703+  66B4~            	endif
0703+  66B4~            	endif
0703+  66B4             
0703+  66C6             
0703+  66C6~            	endif
0703+  66C6~            	endif
0703+  66C6             
0704+  66C6             	done(1)
0704+  66C6~            	done(1)
0704+  66C6~            	done(1)
0704+  66C6~            	done(1)
0704+  66C6~            	done(1)
0704+  66C6             
0704+  66C6 7E 79 BE    
0705+  66C9             
0706+  66C9             swCaptiveTarget:
0707+  66C9 BD 7E 16    	advBonus()
0708+  66CC 96 09       	ldaA	>lc(2)
0709+  66CE 85 40       	bitA	lr(7)
0710+  66D0             	ifeq ; light off
0710+  66D0             
0710+  66D0 26 FE       
0711+  66D2 BD 7D E9    		score10()
0712+  66D5 BD 66 E0    		jsr	captiveAward
0713+  66D8             	else
0713+  66D8             
0713+  66D8             
0713+  66D8             
0713+  66D8             
0713+  66D1             
0713+  66D1             
0713+  66D1             
0713+  66D1~            	else
0713+  66D1~            	else
0713+  66D1~            	else
0713+  66D1~            	else
0713+  66D1             
0713+  66D1~            	else
0713+  66D1~            	else
0713+  66D1~            	else
0713+  66D1~            	else
0713+  66D1             
0713+  66D1             
0713+  66D1 08          
0713+  66D8             
0713+  66D8 20 FE       
0713+  66DA             
0713+  66DA             
0713+  66DA             
0713+  66DA~            	else
0713+  66DA~            	else
0713+  66DA~            	else
0713+  66DA~            	else
0713+  66DA~            	else
0713+  66DA             
0713+  66DA~            	else
0713+  66DA~            	else
0713+  66DA             
0713+  66DA~            	else
0713+  66DA~            	else
0713+  66DA             
0714+  66DA BD 7E 06    		score1000()
0715+  66DD             	endif
0715+  66DD             
0715+  66DD             
0715+  66DD             
0715+  66DD             
0715+  66DD             
0715+  66DD~            	endif
0715+  66DD~            	endif
0715+  66DD             
0715+  66DD~            	endif
0715+  66DD~            	endif
0715+  66DD             
0715+  66D9             
0715+  66D9 03          
0715+  66DA             
0715+  66DA             
0715+  66DA~            	endif
0715+  66DA~            	endif
0715+  66DA~            	endif
0715+  66DA             
0715+  66DD             
0715+  66DD~            	endif
0715+  66DD~            	endif
0715+  66DD             
0716+  66DD             	done(1)
0716+  66DD~            	done(1)
0716+  66DD~            	done(1)
0716+  66DD~            	done(1)
0716+  66DD~            	done(1)
0716+  66DD             
0716+  66DD 7E 79 BE    
0717+  66E0             	
0718+  66E0             captiveAward:
0719+  66E0 86 01       	fork(10)
0719+  66E2 BD 7D 80    
0720+  66E5 39          	rts
0721+  66E6 01          	nop
0722+  66E7 01          	nop
0723+  66E8             	
0724+  66E8             	beginFork()
0725+  66E8 86 80       	lampOn(8,2) ; right special
0725+  66EA 9A 09       
0725+  66EC 97 09       
0726+  66EE             	
0727+  66EE 96 09       	ldaA	>lc(2)
0728+  66F0 85 08       	bitA	lr(4) ; shoe 1
0729+  66F2             	ifeq
0729+  66F2             
0729+  66F2 26 FE       
0730+  66F4 DE 2C       		endFork()
0730+  66F6 7E 79 3C    
0731+  66F9             	else
0731+  66F9             
0731+  66F9             
0731+  66F9             
0731+  66F9             
0731+  66F3             
0731+  66F3             
0731+  66F3             
0731+  66F3~            	else
0731+  66F3~            	else
0731+  66F3~            	else
0731+  66F3~            	else
0731+  66F3             
0731+  66F3~            	else
0731+  66F3~            	else
0731+  66F3~            	else
0731+  66F3~            	else
0731+  66F3             
0731+  66F3             
0731+  66F3 07          
0731+  66F9             
0731+  66F9 20 FE       
0731+  66FB             
0731+  66FB             
0731+  66FB             
0731+  66FB~            	else
0731+  66FB~            	else
0731+  66FB~            	else
0731+  66FB~            	else
0731+  66FB~            	else
0731+  66FB             
0731+  66FB~            	else
0731+  66FB~            	else
0731+  66FB             
0731+  66FB~            	else
0731+  66FB~            	else
0731+  66FB             
0732+  66FB 85 20       		bitA	lr(6)
0733+  66FD             		ifne
0733+  66FD             
0733+  66FD 27 FE       
0734+  66FF 86 20       			flashLamp(6,2)
0734+  6701 9A A1       
0734+  6703 97 A1       
0735+  6705             		else
0735+  6705             
0735+  6705             
0735+  6705             
0735+  6705             
0735+  66FE             
0735+  66FE             
0735+  66FE             
0735+  66FE~            		else
0735+  66FE~            		else
0735+  66FE~            		else
0735+  66FE~            		else
0735+  66FE             
0735+  66FE~            		else
0735+  66FE~            		else
0735+  66FE~            		else
0735+  66FE~            		else
0735+  66FE             
0735+  66FE             
0735+  66FE 08          
0735+  6705             
0735+  6705 20 FE       
0735+  6707             
0735+  6707             
0735+  6707             
0735+  6707~            		else
0735+  6707~            		else
0735+  6707~            		else
0735+  6707~            		else
0735+  6707~            		else
0735+  6707             
0735+  6707~            		else
0735+  6707~            		else
0735+  6707             
0735+  6707~            		else
0735+  6707~            		else
0735+  6707             
0736+  6707 85 10       			bitA	lr(5)
0737+  6709             			ifne
0737+  6709             
0737+  6709 27 FE       
0738+  670B 86 10       				flashLamp(5,2)
0738+  670D 9A A1       
0738+  670F 97 A1       
0739+  6711             			else
0739+  6711             
0739+  6711             
0739+  6711             
0739+  6711             
0739+  670A             
0739+  670A             
0739+  670A             
0739+  670A~            			else
0739+  670A~            			else
0739+  670A~            			else
0739+  670A~            			else
0739+  670A             
0739+  670A~            			else
0739+  670A~            			else
0739+  670A~            			else
0739+  670A~            			else
0739+  670A             
0739+  670A             
0739+  670A 08          
0739+  6711             
0739+  6711 20 FE       
0739+  6713             
0739+  6713             
0739+  6713             
0739+  6713~            			else
0739+  6713~            			else
0739+  6713~            			else
0739+  6713~            			else
0739+  6713~            			else
0739+  6713             
0739+  6713~            			else
0739+  6713~            			else
0739+  6713             
0739+  6713~            			else
0739+  6713~            			else
0739+  6713             
0740+  6713 86 08       				flashLamp(4,2)
0740+  6715 9A A1       
0740+  6717 97 A1       
0741+  6719             			endif
0741+  6719             
0741+  6719             
0741+  6719             
0741+  6719             
0741+  6719             
0741+  6719~            			endif
0741+  6719~            			endif
0741+  6719             
0741+  6719~            			endif
0741+  6719~            			endif
0741+  6719             
0741+  6712             
0741+  6712 06          
0741+  6713             
0741+  6713             
0741+  6713~            			endif
0741+  6713~            			endif
0741+  6713~            			endif
0741+  6713             
0741+  6719             
0741+  6719~            			endif
0741+  6719~            			endif
0741+  6719             
0742+  6719             		endif
0742+  6719             
0742+  6719             
0742+  6719             
0742+  6719             
0742+  6719             
0742+  6719~            		endif
0742+  6719~            		endif
0742+  6719             
0742+  6719~            		endif
0742+  6719~            		endif
0742+  6719             
0742+  6706             
0742+  6706 12          
0742+  6707             
0742+  6707             
0742+  6707~            		endif
0742+  6707~            		endif
0742+  6707~            		endif
0742+  6707             
0742+  6719             
0742+  6719~            		endif
0742+  6719~            		endif
0742+  6719             
0743+  6719             	endif
0743+  6719             
0743+  6719             
0743+  6719             
0743+  6719             
0743+  6719             
0743+  6719~            	endif
0743+  6719~            	endif
0743+  6719             
0743+  6719~            	endif
0743+  6719~            	endif
0743+  6719             
0743+  66FA             
0743+  66FA 1E          
0743+  66FB             
0743+  66FB             
0743+  66FB~            	endif
0743+  66FB~            	endif
0743+  66FB~            	endif
0743+  66FB             
0743+  6719             
0743+  6719~            	endif
0743+  6719~            	endif
0743+  6719             
0744+  6719             	
0745+  6719 86 04       	ldaA	lr(3)
0746+  671B 95 09       	bitA	>lc(2)
0747+  671D             	ifne ; double bonus
0747+  671D             
0747+  671D 27 FE       
0748+  671F 96 B0       		ldaA	>p_Bonus
0749+  6721             	else
0749+  6721             
0749+  6721             
0749+  6721             
0749+  6721             
0749+  671E             
0749+  671E             
0749+  671E             
0749+  671E~            	else
0749+  671E~            	else
0749+  671E~            	else
0749+  671E~            	else
0749+  671E             
0749+  671E~            	else
0749+  671E~            	else
0749+  671E~            	else
0749+  671E~            	else
0749+  671E             
0749+  671E             
0749+  671E 04          
0749+  6721             
0749+  6721 20 FE       
0749+  6723             
0749+  6723             
0749+  6723             
0749+  6723~            	else
0749+  6723~            	else
0749+  6723~            	else
0749+  6723~            	else
0749+  6723~            	else
0749+  6723             
0749+  6723~            	else
0749+  6723~            	else
0749+  6723             
0749+  6723~            	else
0749+  6723~            	else
0749+  6723             
0750+  6723 86 01       		ldaA	1
0751+  6725             	endif	
0751+  6725             
0751+  6725             
0751+  6725             
0751+  6725             
0751+  6725             
0751+  6725~            	endif	
0751+  6725~            	endif	
0751+  6725             
0751+  6725~            	endif	
0751+  6725~            	endif	
0751+  6725             
0751+  6722             
0751+  6722 02          
0751+  6723             
0751+  6723             
0751+  6723~            	endif	
0751+  6723~            	endif	
0751+  6723~            	endif	
0751+  6723             
0751+  6725             
0751+  6725~            	endif	
0751+  6725~            	endif	
0751+  6725             
0752+  6725 97 BE       	staA	p_BonusLeft
0753+  6727             	
0754+  6727             captiveAward_bonusLoop:
0755+  6727 BD 7E 06    	score1000()
0756+  672A 7A 00 B0    	dec	p_Bonus
0757+  672D BD 60 C3    	jsr	bonusLights
0758+  6730 86 19       	delay(200)
0758+  6732 BD 7D 6B    
0759+  6735 7D 00 B0    	tst	>p_Bonus
0760+  6738 26 ED       	bne	captiveAward_bonusLoop
0761+  673A             	
0762+  673A 86 38       	ldaA	00111000b
0763+  673C 94 A1       	andA	>flc(2)
0764+  673E 43          	comA
0765+  673F 94 09       	andA	>lc(2)
0766+  6741 97 09       	staA	lc(2)
0767+  6743             	
0768+  6743 96 BE       	ldaA	>p_BonusLeft
0769+  6745 97 B0       	staA	p_Bonus
0770+  6747             	
0771+  6747 DE 2C       	endFork()	
0771+  6749 7E 79 3C    
0772+  674C             	
0773+  674C             	
0774+  674C             alternate:
0775+  674C C6 00       	ldaB	0 ; turn on left?
0776+  674E 86 80       	ldaA	lr(8) ; right special
0777+  6750 95 09       	bitA	>lc(2)
0778+  6752             	ifne
0778+  6752             
0778+  6752 27 FE       
0779+  6754 C6 01       		ldaB	1
0780+  6756 86 7F       		lampOff(8,2) ; right special
0780+  6758 94 09       
0780+  675A 97 09       
0781+  675C             	endif
0781+  675C             
0781+  675C             
0781+  675C             
0781+  675C             
0781+  675C             
0781+  675C~            	endif
0781+  675C~            	endif
0781+  675C             
0781+  675C~            	endif
0781+  675C~            	endif
0781+  675C             
0781+  6753             
0781+  6753 08          
0781+  6754             
0781+  6754             
0781+  6754~            	endif
0781+  6754~            	endif
0781+  6754~            	endif
0781+  6754             
0781+  675C             
0781+  675C~            	endif
0781+  675C~            	endif
0781+  675C             
0782+  675C 86 02       	ldaA	lr(2) ; left special
0783+  675E 95 0A       	bitA	>lc(3)
0784+  6760             	ifne
0784+  6760             
0784+  6760 27 FE       
0785+  6762 86 80       		lampOn(8,2) ; right special
0785+  6764 9A 09       
0785+  6766 97 09       
0786+  6768 86 FD       		lampOff(2,3) ; left special
0786+  676A 94 0A       
0786+  676C 97 0A       
0787+  676E             	endif
0787+  676E             
0787+  676E             
0787+  676E             
0787+  676E             
0787+  676E             
0787+  676E~            	endif
0787+  676E~            	endif
0787+  676E             
0787+  676E~            	endif
0787+  676E~            	endif
0787+  676E             
0787+  6761             
0787+  6761 0C          
0787+  6762             
0787+  6762             
0787+  6762~            	endif
0787+  6762~            	endif
0787+  6762~            	endif
0787+  6762             
0787+  676E             
0787+  676E~            	endif
0787+  676E~            	endif
0787+  676E             
0788+  676E 5D          	tstB
0789+  676F             	ifne
0789+  676F             
0789+  676F 27 FE       
0790+  6771 86 02       		lampOn(2,3) ; left special
0790+  6773 9A 0A       
0790+  6775 97 0A       
0791+  6777             	endif
0791+  6777             
0791+  6777             
0791+  6777             
0791+  6777             
0791+  6777             
0791+  6777~            	endif
0791+  6777~            	endif
0791+  6777             
0791+  6777~            	endif
0791+  6777~            	endif
0791+  6777             
0791+  6770             
0791+  6770 06          
0791+  6771             
0791+  6771             
0791+  6771~            	endif
0791+  6771~            	endif
0791+  6771~            	endif
0791+  6771             
0791+  6777             
0791+  6777~            	endif
0791+  6777~            	endif
0791+  6777             
0792+  6777 39          	rts
0793+  6778             	
0794+  6778             addCollect:
0795+  6778 96 09       	ldaA	>lc(2)
0796+  677A 85 08       	bitA	lr(4)
0797+  677C             	ifeq
0797+  677C             
0797+  677C 26 FE       
0798+  677E 86 08       		lampOn(4,2)
0798+  6780 9A 09       
0798+  6782 97 09       
0799+  6784 86 08       		flashLamp(4,2)
0799+  6786 9A A1       
0799+  6788 97 A1       
0800+  678A             	else
0800+  678A             
0800+  678A             
0800+  678A             
0800+  678A             
0800+  677D             
0800+  677D             
0800+  677D             
0800+  677D~            	else
0800+  677D~            	else
0800+  677D~            	else
0800+  677D~            	else
0800+  677D             
0800+  677D~            	else
0800+  677D~            	else
0800+  677D~            	else
0800+  677D~            	else
0800+  677D             
0800+  677D             
0800+  677D 0E          
0800+  678A             
0800+  678A 20 FE       
0800+  678C             
0800+  678C             
0800+  678C             
0800+  678C~            	else
0800+  678C~            	else
0800+  678C~            	else
0800+  678C~            	else
0800+  678C~            	else
0800+  678C             
0800+  678C~            	else
0800+  678C~            	else
0800+  678C             
0800+  678C~            	else
0800+  678C~            	else
0800+  678C             
0801+  678C 85 10       		bitA	lr(5)
0802+  678E             		ifeq
0802+  678E             
0802+  678E 26 FE       
0803+  6790 86 10       			lampOn(5,2)
0803+  6792 9A 09       
0803+  6794 97 09       
0804+  6796 86 10       			flashLamp(5,2)
0804+  6798 9A A1       
0804+  679A 97 A1       
0805+  679C             		else
0805+  679C             
0805+  679C             
0805+  679C             
0805+  679C             
0805+  678F             
0805+  678F             
0805+  678F             
0805+  678F~            		else
0805+  678F~            		else
0805+  678F~            		else
0805+  678F~            		else
0805+  678F             
0805+  678F~            		else
0805+  678F~            		else
0805+  678F~            		else
0805+  678F~            		else
0805+  678F             
0805+  678F             
0805+  678F 0E          
0805+  679C             
0805+  679C 20 FE       
0805+  679E             
0805+  679E             
0805+  679E             
0805+  679E~            		else
0805+  679E~            		else
0805+  679E~            		else
0805+  679E~            		else
0805+  679E~            		else
0805+  679E             
0805+  679E~            		else
0805+  679E~            		else
0805+  679E             
0805+  679E~            		else
0805+  679E~            		else
0805+  679E             
0806+  679E 85 20       			bitA	lr(6)
0807+  67A0             			ifeq
0807+  67A0             
0807+  67A0 26 FE       
0808+  67A2 86 20       				lampOn(6,2)
0808+  67A4 9A 09       
0808+  67A6 97 09       
0809+  67A8 86 20       				flashLamp(6,2)
0809+  67AA 9A A1       
0809+  67AC 97 A1       
0810+  67AE             			else
0810+  67AE             
0810+  67AE             
0810+  67AE             
0810+  67AE             
0810+  67A1             
0810+  67A1             
0810+  67A1             
0810+  67A1~            			else
0810+  67A1~            			else
0810+  67A1~            			else
0810+  67A1~            			else
0810+  67A1             
0810+  67A1~            			else
0810+  67A1~            			else
0810+  67A1~            			else
0810+  67A1~            			else
0810+  67A1             
0810+  67A1             
0810+  67A1 0E          
0810+  67AE             
0810+  67AE 20 FE       
0810+  67B0             
0810+  67B0             
0810+  67B0             
0810+  67B0~            			else
0810+  67B0~            			else
0810+  67B0~            			else
0810+  67B0~            			else
0810+  67B0~            			else
0810+  67B0             
0810+  67B0~            			else
0810+  67B0~            			else
0810+  67B0             
0810+  67B0~            			else
0810+  67B0~            			else
0810+  67B0             
0811+  67B0 BD 7E 06    				score1000()
0812+  67B3 86 04       				lampOn(3,3)
0812+  67B5 9A 0A       
0812+  67B7 97 0A       
0813+  67B9             			endif
0813+  67B9             
0813+  67B9             
0813+  67B9             
0813+  67B9             
0813+  67B9             
0813+  67B9~            			endif
0813+  67B9~            			endif
0813+  67B9             
0813+  67B9~            			endif
0813+  67B9~            			endif
0813+  67B9             
0813+  67AF             
0813+  67AF 09          
0813+  67B0             
0813+  67B0             
0813+  67B0~            			endif
0813+  67B0~            			endif
0813+  67B0~            			endif
0813+  67B0             
0813+  67B9             
0813+  67B9~            			endif
0813+  67B9~            			endif
0813+  67B9             
0814+  67B9             		endif
0814+  67B9             
0814+  67B9             
0814+  67B9             
0814+  67B9             
0814+  67B9             
0814+  67B9~            		endif
0814+  67B9~            		endif
0814+  67B9             
0814+  67B9~            		endif
0814+  67B9~            		endif
0814+  67B9             
0814+  679D             
0814+  679D 1B          
0814+  679E             
0814+  679E             
0814+  679E~            		endif
0814+  679E~            		endif
0814+  679E~            		endif
0814+  679E             
0814+  67B9             
0814+  67B9~            		endif
0814+  67B9~            		endif
0814+  67B9             
0815+  67B9             	endif
0815+  67B9             
0815+  67B9             
0815+  67B9             
0815+  67B9             
0815+  67B9             
0815+  67B9~            	endif
0815+  67B9~            	endif
0815+  67B9             
0815+  67B9~            	endif
0815+  67B9~            	endif
0815+  67B9             
0815+  678B             
0815+  678B 2D          
0815+  678C             
0815+  678C             
0815+  678C~            	endif
0815+  678C~            	endif
0815+  678C~            	endif
0815+  678C             
0815+  67B9             
0815+  67B9~            	endif
0815+  67B9~            	endif
0815+  67B9             
0816+  67B9 39          	rts
0817+  67BA             	
0818+  67BA             ; end callbacks
0819+  67BA             	.msfirst
0820+  67BA             ; needs to be on $**00 address
0821+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0822+  6000 62 21       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0822+  6002 62 21       
0822+  6004 62 3A       
0822+  6006 60 C0       
0822+  6008 60 C0       
0822+  600A 60 C0       
0822+  600C 62 21       
0822+  600E 60 C0       
0823+  6010 62 71       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0823+  6012 62 21       
0823+  6014 65 55       
0823+  6016 65 84       
0823+  6018 65 9D       
0823+  601A 65 B2       
0823+  601C 66 A9       
0823+  601E 66 C9       
0824+  6020 66 02       	.dw swDropTip	\.dw swDroptIp\.dw swDroptiP\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0824+  6022 66 0C       
0824+  6024 66 16       
0824+  6026 66 65       
0824+  6028 65 9D       
0824+  602A 63 FC       
0824+  602C 65 9D       
0824+  602E 60 C0       
0825+  6030 66 07       	.dw swDropHot	\.dw swDrophOt\.dw swDrophoT\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0825+  6032 66 11       
0825+  6034 66 1B       
0825+  6036 65 9D       
0825+  6038 63 63       
0825+  603A 66 6E       
0825+  603C 65 F9       
0825+  603E 65 B2       
0826+  6040 65 2F       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0826+  6042 65 7B       
0826+  6044 65 9D       
0826+  6046 60 C0       
0826+  6048 64 E5       
0826+  604A 60 C0       
0826+  604C 60 C0       
0826+  604E 60 C0       
0827+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0827+  6052 60 C0       
0827+  6054 60 C0       
0827+  6056 60 C0       
0827+  6058 60 C0       
0827+  605A 60 C0       
0827+  605C 60 C0       
0827+  605E 60 C0       
0828+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0828+  6062 60 C0       
0828+  6064 60 C0       
0828+  6066 60 C0       
0828+  6068 60 C0       
0828+  606A 60 C0       
0828+  606C 60 C0       
0828+  606E 60 C0       
0829+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0829+  6072 60 C0       
0829+  6074 60 C0       
0829+  6076 60 C0       
0829+  6078 60 C0       
0829+  607A 60 C0       
0829+  607C 60 C0       
0829+  607E 60 C0       
0830+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0831+  6080             ; off = how many cycles it must be off for
0832+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0833+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0834+  6080             ; TRANSPOSED (?)
0835+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0836+  6080             settleTable: ; must be right after callbackTable
0837+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0837+  6081 87          
0837+  6082 C2          
0837+  6083 47          
0837+  6084 47          
0837+  6085 47          
0837+  6086 87          
0837+  6087 47          
0838+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0838+  6089 87          
0838+  608A 87          
0838+  608B 87          
0838+  608C 81          
0838+  608D 81          
0838+  608E 80          
0838+  608F 87          
0839+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,3,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0839+  6091 87          
0839+  6092 87          
0839+  6093 83          
0839+  6094 83          
0839+  6095 E1          
0839+  6096 81          
0839+  6097 80          
0840+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,1,1,0)
0840+  6099 87          
0840+  609A 87          
0840+  609B 81          
0840+  609C E1          
0840+  609D 80          
0840+  609E 80          
0840+  609F 81          
0841+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0841+  60A1 87          
0841+  60A2 81          
0841+  60A3 47          
0841+  60A4 80          
0841+  60A5 47          
0841+  60A6 47          
0841+  60A7 47          
0842+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0842+  60A9 47          
0842+  60AA 47          
0842+  60AB 47          
0842+  60AC 47          
0842+  60AD 47          
0842+  60AE 47          
0842+  60AF 47          
0843+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0843+  60B1 47          
0843+  60B2 47          
0843+  60B3 47          
0843+  60B4 47          
0843+  60B5 47          
0843+  60B6 47          
0843+  60B7 47          
0844+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0844+  60B9 47          
0844+  60BA 47          
0844+  60BB 47          
0844+  60BC 47          
0844+  60BD 47          
0844+  60BE 47          
0844+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 7D       	ldaA	attractStart >> 8
0102   78AF 97 2A       	staA	attractX
0103   78B1 86 C1       	ldaA	attractStart&$FF
0104   78B3 97 2B       	staA	attractX + 1
0105   78B5             	
0106   78B5 86 FF       	ldaA	$FF	
0107   78B7 B7 28 00    	staA 	displayStrobe
0108   78BA             
0109   78BA 86 00       	ldaA	00
0110   78BC 97 07       	staA	strobe
0111   78BE B7 01 6A    	staA	displayCol
0112   78C1             	
0113   78C1 CE 00 00    	ldX 	0
0114   78C4 DF 50       	stX		curCol
0115   78C6             	
0116   78C6 86 00       	ldaA	0
0117   78C8 97 10       	staA	curSwitchRowLsb
0118   78CA             	
0119   78CA             ; fill solenoid status with off
0120   78CA 86 0F       	ldaA	$F
0121   78CC CE 01 40    	ldX	solenoid1
0122   78CF             lSolDefault:
0123   78CF A7 00       	staA	0, X
0124   78D1 08          	inX
0125   78D2 8C 01 4F    	cpX	solenoid16
0126   78D5 26 F8       	bne	lSolDefault
0127   78D7             	
0128   78D7             ; clear 8 banks
0129   78D7 86 00       	ldaA 	0
0130   78D9 CE 00 00    	ldX	0
0131   78DC             lClear8:
0132   78DC A7 08       	staA	lampCol1, X
0133   78DE A7 A0       	staA	flashLampCol1, X
0134   78E0 A7 80       	staA	waitLeft, X
0135   78E2 08          	inX
0136   78E3 8C 00 08    	cpX	8
0137   78E6 26 F4       	bne 	lClear8
0138   78E8             	
0139   78E8             ; empty settle
0140   78E8 86 00       	ldaA	$00
0141   78EA CE 01 00    	ldX	settleRow1
0142   78ED             lSettleDefault:
0143   78ED A7 00       	staA	0, X
0144   78EF 08          	inX
0145   78F0 8C 01 3F    	cpX	settleRow8End
0146   78F3 26 F8       	bne	lSettleDefault
0147   78F5             	
0148   78F5             ; empty queue
0149   78F5 86 FF       	ldaA	$FF
0150   78F7 CE 00 60    	ldX	queue
0151   78FA             lEmptyQueue:
0152   78FA A7 00       	staA	0, X
0153   78FC 08          	inX
0154   78FD 8C 00 6D    	cpX	queueEnd
0155   7900 26 F8       	bne	lEmptyQueue
0156   7902             	
0157   7902 86 00       	ldaA	0
0158   7904 97 54       	staA	queueHead + 0
0159   7906 97 56       	staA	queueTail + 0
0160   7908 86 60       	ldaA	queue
0161   790A 97 55       	staA	queueHead + 1
0162   790C 97 57       	staA	queueTail + 1
0163   790E             	
0164   790E             ; test numbers
0165   790E 86 20       	lampOn(6,8) ; game over
0165   7910 9A 0F       
0165   7912 97 0F       
0166   7914             
0167   7914             	
0168   7914 BD 7D A2    	jsr resetScores
0169   7917             	
0170   7917             ; setup complete
0171   7917 0E          	clI		; enable timer interrupt
0172   7918             	
0173   7918             	
0174   7918             end:
0175   7918 B6 01 6B    	ldaA	>state
0176   791B 85 04       	bitA	100b
0177   791D             	ifne
0177   791D             
0177   791D 27 FE       
0178   791F             		; dec wait timers
0179   791F CE 00 7F    		ldX	waitLeft - 1
0180   7922             decWaitTimers:
0181   7922 08          		inX
0182   7923 A6 00       		ldaA	0, X
0183   7925             		ifne
0183   7925             
0183   7925 27 FE       
0184   7927 4A          			decA
0185   7928 A7 00       			staA	0, X
0186   792A             			ifeq
0186   792A             
0186   792A 26 FE       
0187   792C A6 08       				ldaA	waitMsb - waitLeft, X
0188   792E 97 58       				staA	tempQ
0189   7930 A6 10       				ldaA	waitLsb - waitLeft, X
0190   7932 97 59       				staA	tempQ + 1
0191   7934 E6 18       				ldaB	waitReg - waitLeft, X
0192   7936 DF 2C       				stX	forkX
0193   7938 DE 58       				ldX	>tempQ
0194   793A 6E 00       				jmp	0, X
0195   793C             			endif
0195   793C             
0195   793C             
0195   793C             
0195   793C             
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0195   792B             
0195   792B 10          
0195   792C             
0195   792C             
0195   792C~            			endif
0195   792C~            			endif
0195   792C~            			endif
0195   792C             
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0196   793C             		endif
0196   793C             
0196   793C             
0196   793C             
0196   793C             
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0196   7926             
0196   7926 15          
0196   7927             
0196   7927             
0196   7927~            		endif
0196   7927~            		endif
0196   7927~            		endif
0196   7927             
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0197   793C             afterFork:
0198   793C 8C 00 87    		cpX	waitLeftEnd
0199   793F 26 E1       		bne	decWaitTimers
0200   7941             		
0201   7941             		
0202   7941 7A 00 A9    		dec	dropResetTimer
0203   7944             		ifmi
0203   7944             
0203   7944 2A FE       
0204   7946 7C 00 A9    			inc	dropResetTimer
0205   7949             		endif
0205   7949             
0205   7949             
0205   7949             
0205   7949             
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0205   7945             
0205   7945 03          
0205   7946             
0205   7946             
0205   7946~            		endif
0205   7946~            		endif
0205   7946~            		endif
0205   7946             
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0206   7949 7A 00 BF    		dec	bonusTimer
0207   794C             		ifmi
0207   794C             
0207   794C 2A FE       
0208   794E 7C 00 BF    			inc	bonusTimer
0209   7951             		endif
0209   7951             
0209   7951             
0209   7951             
0209   7951             
0209   7951             
0209   7951~            		endif
0209   7951~            		endif
0209   7951             
0209   7951~            		endif
0209   7951~            		endif
0209   7951             
0209   794D             
0209   794D 03          
0209   794E             
0209   794E             
0209   794E~            		endif
0209   794E~            		endif
0209   794E~            		endif
0209   794E             
0209   7951             
0209   7951~            		endif
0209   7951~            		endif
0209   7951             
0210   7951 7D 00 BA    		tst	>spinnerTimer
0211   7954             		ifne
0211   7954             
0211   7954 27 FE       
0212   7956 7A 00 BA    			dec	spinnerTimer
0213   7959             			ifeq
0213   7959             
0213   7959 26 FE       
0214   795B 86 F7       				flashOff(4,3)
0214   795D 94 A2       
0214   795F 97 A2       
0215   7961 86 F7       				lampOff(4,3)
0215   7963 94 0A       
0215   7965 97 0A       
0216   7967 86 04       				ldaA	4
0217   7969 91 B5       				cmpA	>p_DropsDown
0218   796B             				ifgt
0218   796B             
0218   796B 23 FE       
0219   796D 86 F7       					lampOff(4,3) ; spinner
0219   796F 94 0A       
0219   7971 97 0A       
0220   7973             				else
0220   7973             
0220   7973             
0220   7973             
0220   7973             
0220   796C             
0220   796C             
0220   796C             
0220   796C~            				else
0220   796C~            				else
0220   796C~            				else
0220   796C~            				else
0220   796C             
0220   796C~            				else
0220   796C~            				else
0220   796C~            				else
0220   796C~            				else
0220   796C             
0220   796C             
0220   796C 08          
0220   7973             
0220   7973 20 FE       
0220   7975             
0220   7975             
0220   7975             
0220   7975~            				else
0220   7975~            				else
0220   7975~            				else
0220   7975~            				else
0220   7975~            				else
0220   7975             
0220   7975~            				else
0220   7975~            				else
0220   7975             
0220   7975~            				else
0220   7975~            				else
0220   7975             
0221   7975 86 08       					lampOn(4,3)
0221   7977 9A 0A       
0221   7979 97 0A       
0222   797B             				endif
0222   797B             
0222   797B             
0222   797B             
0222   797B             
0222   797B             
0222   797B~            				endif
0222   797B~            				endif
0222   797B             
0222   797B~            				endif
0222   797B~            				endif
0222   797B             
0222   7974             
0222   7974 06          
0222   7975             
0222   7975             
0222   7975~            				endif
0222   7975~            				endif
0222   7975~            				endif
0222   7975             
0222   797B             
0222   797B~            				endif
0222   797B~            				endif
0222   797B             
0223   797B             			endif
0223   797B             
0223   797B             
0223   797B             
0223   797B             
0223   797B             
0223   797B~            			endif
0223   797B~            			endif
0223   797B             
0223   797B~            			endif
0223   797B~            			endif
0223   797B             
0223   795A             
0223   795A 20          
0223   795B             
0223   795B             
0223   795B~            			endif
0223   795B~            			endif
0223   795B~            			endif
0223   795B             
0223   797B             
0223   797B~            			endif
0223   797B~            			endif
0223   797B             
0224   797B             		endif
0224   797B             
0224   797B             
0224   797B             
0224   797B             
0224   797B             
0224   797B~            		endif
0224   797B~            		endif
0224   797B             
0224   797B~            		endif
0224   797B~            		endif
0224   797B             
0224   7955             
0224   7955 25          
0224   7956             
0224   7956             
0224   7956~            		endif
0224   7956~            		endif
0224   7956~            		endif
0224   7956             
0224   797B             
0224   797B~            		endif
0224   797B~            		endif
0224   797B             
0225   797B             		
0226   797B B6 01 6B    		ldaA	>state		; clear strobe reset bit
0227   797E 84 FB       		andA	11111011b
0228   7980 B7 01 6B    		staA	state
0229   7983             	endif
0229   7983             
0229   7983             
0229   7983             
0229   7983             
0229   7983             
0229   7983~            	endif
0229   7983~            	endif
0229   7983             
0229   7983~            	endif
0229   7983~            	endif
0229   7983             
0229   791E             
0229   791E 64          
0229   791F             
0229   791F             
0229   791F~            	endif
0229   791F~            	endif
0229   791F~            	endif
0229   791F             
0229   7983             
0229   7983~            	endif
0229   7983~            	endif
0229   7983             
0230   7983             
0231   7983             		
0232   7983             ; pop queue
0233   7983 D6 57       	ldaB	>queueTail + 1
0234   7985 D1 55       	cmpB	>queueHead + 1
0235   7987             	ifeq
0235   7987             
0235   7987 26 FE       
0236   7989 7E 7A 24    		jmp skipQueue
0237   798C             	endif
0237   798C             
0237   798C             
0237   798C             
0237   798C             
0237   798C             
0237   798C~            	endif
0237   798C~            	endif
0237   798C             
0237   798C~            	endif
0237   798C~            	endif
0237   798C             
0237   7988             
0237   7988 03          
0237   7989             
0237   7989             
0237   7989~            	endif
0237   7989~            	endif
0237   7989~            	endif
0237   7989             
0237   798C             
0237   798C~            	endif
0237   798C~            	endif
0237   798C             
0238   798C             	
0239   798C DE 54       	ldX	>queueHead
0240   798E A6 00       	ldaA	0, X	; A now contains the first queue item
0241   7990             	
0242   7990 16          	tAB
0243   7991 C4 3F       	andB	00111111b ; B = callback index
0244   7993             	
0245   7993 D7 59       	staB	tempQ + 1
0246   7995 C6 60       	ldaB	callbackTable >> 8
0247   7997 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0248   7999 DE 58       	ldX	>tempQ
0249   799B             	
0250   799B E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0251   799D C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0252   799F             	ifne ; if closure only
0252   799F             
0252   799F 27 FE       
0253   79A1 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0254   79A3 26 62       		bne	skipEvent
0255   79A5             	endif
0255   79A5             
0255   79A5             
0255   79A5             
0255   79A5             
0255   79A5             
0255   79A5~            	endif
0255   79A5~            	endif
0255   79A5             
0255   79A5~            	endif
0255   79A5~            	endif
0255   79A5             
0255   79A0             
0255   79A0 04          
0255   79A1             
0255   79A1             
0255   79A1~            	endif
0255   79A1~            	endif
0255   79A1~            	endif
0255   79A1             
0255   79A5             
0255   79A5~            	endif
0255   79A5~            	endif
0255   79A5             
0256   79A5             	
0257   79A5 C5 40       	bitB	01000000b ; B.7 = active in game over
0258   79A7             	ifeq 	 ; not active in game over
0258   79A7             
0258   79A7 26 FE       
0259   79A9 D6 0F       		ldaB	>lc(8)	; gameover mask
0260   79AB C5 20       		bitB	lr(6)
0261   79AD 26 58       		bne	skipEvent
0262   79AF D6 0F       		ldaB	>lc(8) ; tilt bit
0263   79B1 C5 10       		bitB	lr(5)
0264   79B3 26 52       		bne	skipEvent
0265   79B5             	endif
0265   79B5             
0265   79B5             
0265   79B5             
0265   79B5             
0265   79B5             
0265   79B5~            	endif
0265   79B5~            	endif
0265   79B5             
0265   79B5~            	endif
0265   79B5~            	endif
0265   79B5             
0265   79A8             
0265   79A8 0C          
0265   79A9             
0265   79A9             
0265   79A9~            	endif
0265   79A9~            	endif
0265   79A9~            	endif
0265   79A9             
0265   79B5             
0265   79B5~            	endif
0265   79B5~            	endif
0265   79B5             
0266   79B5             	
0267   79B5             	; checked passed, do callback
0268   79B5 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0269   79B8 DE 58       	ldX	>tempQ
0270   79BA EE 00       	ldX	0, X
0271   79BC 6E 00       	jmp	0, X
0272   79BE             	; everything trashed
0273   79BE             afterQueueEvent:
0274   79BE BD 60 C3    	jsr 	bonusLights
0275   79C1             	
0276   79C1             	; update last switch
0277   79C1 96 59       	ldaA	> tempQ + 1
0278   79C3 44          	lsrA 	; got doubled earlier
0279   79C4 97 A8       	staA	lastSwitch
0280   79C6             
0281   79C6 86 02       	ldaA	10b ; no validate bit
0282   79C8 B5 01 6B    	bitA	>state
0283   79CB             	ifeq ; validate pf
0283   79CB             
0283   79CB 26 FE       
0284   79CD             		; check if playfield invalid
0285   79CD 86 0F       		ldaA	00001111b ; player up
0286   79CF 95 A7       		bitA	>flc(8)
0287   79D1             		ifne ; any flashing -> pf invalid
0287   79D1             
0287   79D1 27 FE       
0288   79D3 43          			comA	; turn off flashing
0289   79D4 94 A7       			andA	>flc(8)
0290   79D6 97 A7       			staA	flc(8)
0291   79D8             			
0292   79D8 86 01       			ldaA	lr(1) ; shoot again pf flashing
0293   79DA 95 A2       			bitA	>flc(3)
0294   79DC             			ifne
0294   79DC             
0294   79DC 27 FE       
0295   79DE             				; turn off ball save
0296   79DE 86 FE       				flashOff(1,3)
0296   79E0 94 A2       
0296   79E2 97 A2       
0297   79E4 86 40       				ldaA	lr(7) ; shoot again backbox
0298   79E6 95 0F       				bitA	>lc(8)
0299   79E8             				ifeq
0299   79E8             
0299   79E8 26 FE       
0300   79EA 86 FE       					lampOff(1,3) ; shoot again pf
0300   79EC 94 0A       
0300   79EE 97 0A       
0301   79F0             				endif
0301   79F0             
0301   79F0             
0301   79F0             
0301   79F0             
0301   79F0             
0301   79F0~            				endif
0301   79F0~            				endif
0301   79F0             
0301   79F0~            				endif
0301   79F0~            				endif
0301   79F0             
0301   79E9             
0301   79E9 06          
0301   79EA             
0301   79EA             
0301   79EA~            				endif
0301   79EA~            				endif
0301   79EA~            				endif
0301   79EA             
0301   79F0             
0301   79F0~            				endif
0301   79F0~            				endif
0301   79F0             
0302   79F0             			else
0302   79F0             
0302   79F0             
0302   79F0             
0302   79F0             
0302   79DD             
0302   79DD             
0302   79DD             
0302   79DD~            			else
0302   79DD~            			else
0302   79DD~            			else
0302   79DD~            			else
0302   79DD             
0302   79DD~            			else
0302   79DD~            			else
0302   79DD~            			else
0302   79DD~            			else
0302   79DD             
0302   79DD             
0302   79DD 14          
0302   79F0             
0302   79F0 20 FE       
0302   79F2             
0302   79F2             
0302   79F2             
0302   79F2~            			else
0302   79F2~            			else
0302   79F2~            			else
0302   79F2~            			else
0302   79F2~            			else
0302   79F2             
0302   79F2~            			else
0302   79F2~            			else
0302   79F2             
0302   79F2~            			else
0302   79F2~            			else
0302   79F2             
0303   79F2 86 FE       				lampOff(1,3) ; shoot again
0303   79F4 94 0A       
0303   79F6 97 0A       
0304   79F8 86 BF       				lampOff(7,8)
0304   79FA 94 0F       
0304   79FC 97 0F       
0305   79FE             			endif
0305   79FE             
0305   79FE             
0305   79FE             
0305   79FE             
0305   79FE             
0305   79FE~            			endif
0305   79FE~            			endif
0305   79FE             
0305   79FE~            			endif
0305   79FE~            			endif
0305   79FE             
0305   79F1             
0305   79F1 0C          
0305   79F2             
0305   79F2             
0305   79F2~            			endif
0305   79F2~            			endif
0305   79F2~            			endif
0305   79F2             
0305   79FE             
0305   79FE~            			endif
0305   79FE~            			endif
0305   79FE             
0306   79FE             		endif
0306   79FE             
0306   79FE             
0306   79FE             
0306   79FE             
0306   79FE             
0306   79FE~            		endif
0306   79FE~            		endif
0306   79FE             
0306   79FE~            		endif
0306   79FE~            		endif
0306   79FE             
0306   79D2             
0306   79D2 2B          
0306   79D3             
0306   79D3             
0306   79D3~            		endif
0306   79D3~            		endif
0306   79D3~            		endif
0306   79D3             
0306   79FE             
0306   79FE~            		endif
0306   79FE~            		endif
0306   79FE             
0307   79FE             	else
0307   79FE             
0307   79FE             
0307   79FE             
0307   79FE             
0307   79CC             
0307   79CC             
0307   79CC             
0307   79CC~            	else
0307   79CC~            	else
0307   79CC~            	else
0307   79CC~            	else
0307   79CC             
0307   79CC~            	else
0307   79CC~            	else
0307   79CC~            	else
0307   79CC~            	else
0307   79CC             
0307   79CC             
0307   79CC 33          
0307   79FE             
0307   79FE 20 FE       
0307   7A00             
0307   7A00             
0307   7A00             
0307   7A00~            	else
0307   7A00~            	else
0307   7A00~            	else
0307   7A00~            	else
0307   7A00~            	else
0307   7A00             
0307   7A00~            	else
0307   7A00~            	else
0307   7A00             
0307   7A00~            	else
0307   7A00~            	else
0307   7A00             
0308   7A00             		; clear don't validate bit
0309   7A00 43          		comA
0310   7A01 B4 01 6B    		andA	>state
0311   7A04 B7 01 6B    		staA	state
0312   7A07             	endif
0312   7A07             
0312   7A07             
0312   7A07             
0312   7A07             
0312   7A07             
0312   7A07~            	endif
0312   7A07~            	endif
0312   7A07             
0312   7A07~            	endif
0312   7A07~            	endif
0312   7A07             
0312   79FF             
0312   79FF 07          
0312   7A00             
0312   7A00             
0312   7A00~            	endif
0312   7A00~            	endif
0312   7A00~            	endif
0312   7A00             
0312   7A07             
0312   7A07~            	endif
0312   7A07~            	endif
0312   7A07             
0313   7A07             	
0314   7A07             skipEvent:
0315   7A07 B6 01 6B    	ldaA	>state
0316   7A0A 85 04       	bitA	100b
0317   7A0C             	ifeq	; don't process queue if still finishing timers
0317   7A0C             
0317   7A0C 26 FE       
0318   7A0E C6 6D       		ldaB	queueEnd
0319   7A10 D1 55       		cmpB	>queueHead + 1
0320   7A12             		ifeq
0320   7A12             
0320   7A12 26 FE       
0321   7A14 C6 60       			ldaB	queue
0322   7A16 D7 55       			staB	queueHead + 1
0323   7A18             		else
0323   7A18             
0323   7A18             
0323   7A18             
0323   7A18             
0323   7A13             
0323   7A13             
0323   7A13             
0323   7A13~            		else
0323   7A13~            		else
0323   7A13~            		else
0323   7A13~            		else
0323   7A13             
0323   7A13~            		else
0323   7A13~            		else
0323   7A13~            		else
0323   7A13~            		else
0323   7A13             
0323   7A13             
0323   7A13 06          
0323   7A18             
0323   7A18 20 FE       
0323   7A1A             
0323   7A1A             
0323   7A1A             
0323   7A1A~            		else
0323   7A1A~            		else
0323   7A1A~            		else
0323   7A1A~            		else
0323   7A1A~            		else
0323   7A1A             
0323   7A1A~            		else
0323   7A1A~            		else
0323   7A1A             
0323   7A1A~            		else
0323   7A1A~            		else
0323   7A1A             
0324   7A1A 7C 00 55    			inc	queueHead + 1
0325   7A1D             		endif
0325   7A1D             
0325   7A1D             
0325   7A1D             
0325   7A1D             
0325   7A1D             
0325   7A1D~            		endif
0325   7A1D~            		endif
0325   7A1D             
0325   7A1D~            		endif
0325   7A1D~            		endif
0325   7A1D             
0325   7A19             
0325   7A19 03          
0325   7A1A             
0325   7A1A             
0325   7A1A~            		endif
0325   7A1A~            		endif
0325   7A1A~            		endif
0325   7A1A             
0325   7A1D             
0325   7A1D~            		endif
0325   7A1D~            		endif
0325   7A1D             
0326   7A1D             	else
0326   7A1D             
0326   7A1D             
0326   7A1D             
0326   7A1D             
0326   7A0D             
0326   7A0D             
0326   7A0D             
0326   7A0D~            	else
0326   7A0D~            	else
0326   7A0D~            	else
0326   7A0D~            	else
0326   7A0D             
0326   7A0D~            	else
0326   7A0D~            	else
0326   7A0D~            	else
0326   7A0D~            	else
0326   7A0D             
0326   7A0D             
0326   7A0D 11          
0326   7A1D             
0326   7A1D 20 FE       
0326   7A1F             
0326   7A1F             
0326   7A1F             
0326   7A1F~            	else
0326   7A1F~            	else
0326   7A1F~            	else
0326   7A1F~            	else
0326   7A1F~            	else
0326   7A1F             
0326   7A1F~            	else
0326   7A1F~            	else
0326   7A1F             
0326   7A1F~            	else
0326   7A1F~            	else
0326   7A1F             
0327   7A1F DE 2C       		ldX	>forkX
0328   7A21 7E 79 3C    		jmp	afterFork
0329   7A24             	endif
0329   7A24             
0329   7A24             
0329   7A24             
0329   7A24             
0329   7A24             
0329   7A24~            	endif
0329   7A24~            	endif
0329   7A24             
0329   7A24~            	endif
0329   7A24~            	endif
0329   7A24             
0329   7A1E             
0329   7A1E 05          
0329   7A1F             
0329   7A1F             
0329   7A1F~            	endif
0329   7A1F~            	endif
0329   7A1F~            	endif
0329   7A1F             
0329   7A24             
0329   7A24~            	endif
0329   7A24~            	endif
0329   7A24             
0330   7A24             				
0331   7A24             skipQueue:
0332   7A24             				
0333   7A24             	
0334   7A24             				
0335   7A24 7E 79 18    	jmp		end
0336   7A27 00 00       	.dw 0
0337   7A29 00 00       	.dw 0
0338   7A2B 00 00       	.dw 0
0339   7A2D 00 00       	.dw 0
0340   7A2F 00 00       	.dw 0
0341   7A31             		
0342   7A31             interrupt:	
0343   7A31 7C 00 02    	inc	counter
0344   7A34 86 00       	ldaA	0
0345   7A36 91 02       	cmpA	>counter
0346   7A38 26 52       	bne	counterHandled
0347   7A3A             	
0348   7A3A             	; attract mode
0349   7A3A 86 20       	ldaA	lr(6) ; gameover
0350   7A3C 95 0F       		bitA	> lc(8)
0351   7A3E             		ifne
0351   7A3E             
0351   7A3E 27 FE       
0352   7A40 DE 2A       		ldX	>attractX
0353   7A42 A6 00       		ldaA	0, X
0354   7A44 97 09       		staA	lc(2)
0355   7A46 A6 01       		ldaA	1, X
0356   7A48 97 0A       		staA	lc(3)
0357   7A4A A6 02       		ldaA	2, X
0358   7A4C 97 0B       		staA	lc(4)
0359   7A4E A6 03       		ldaA	3, X
0360   7A50 97 0C       		staA	lc(5)
0361   7A52 A6 04       		ldaA	4, X
0362   7A54 97 0D       		staA	lc(6)
0363   7A56 96 2B       		ldaA	>attractX + 1
0364   7A58 8B 05       		addA	5
0365   7A5A 81 E9       		cmpA	attractEnd&$FF
0366   7A5C             		ifeq
0366   7A5C             
0366   7A5C 26 FE       
0367   7A5E 86 C1       			ldaA	attractStart&$FF
0368   7A60             		endif
0368   7A60             
0368   7A60             
0368   7A60             
0368   7A60             
0368   7A60             
0368   7A60~            		endif
0368   7A60~            		endif
0368   7A60             
0368   7A60~            		endif
0368   7A60~            		endif
0368   7A60             
0368   7A5D             
0368   7A5D 02          
0368   7A5E             
0368   7A5E             
0368   7A5E~            		endif
0368   7A5E~            		endif
0368   7A5E~            		endif
0368   7A5E             
0368   7A60             
0368   7A60~            		endif
0368   7A60~            		endif
0368   7A60             
0369   7A60 97 2B       		staA	attractX + 1
0370   7A62             	endif
0370   7A62             
0370   7A62             
0370   7A62             
0370   7A62             
0370   7A62             
0370   7A62~            	endif
0370   7A62~            	endif
0370   7A62             
0370   7A62~            	endif
0370   7A62~            	endif
0370   7A62             
0370   7A3F             
0370   7A3F 22          
0370   7A40             
0370   7A40             
0370   7A40~            	endif
0370   7A40~            	endif
0370   7A40~            	endif
0370   7A40             
0370   7A62             
0370   7A62~            	endif
0370   7A62~            	endif
0370   7A62             
0371   7A62             	
0372   7A62 7C 00 03    	inc 	counter2
0373   7A65 86 08       	ldaA	8
0374   7A67 91 03       	cmpA	>counter2
0375   7A69 26 21       	bne	counterHandled
0376   7A6B             	
0377   7A6B 86 0A       	ldaA	10
0378   7A6D 91 B0       	cmpA	>p_Bonus
0379   7A6F             	ifeq
0379   7A6F             
0379   7A6F 26 FE       
0380   7A71 BD 7E 16    		jsr advanceBonus
0381   7A74             	endif
0381   7A74             
0381   7A74             
0381   7A74             
0381   7A74             
0381   7A74             
0381   7A74~            	endif
0381   7A74~            	endif
0381   7A74             
0381   7A74~            	endif
0381   7A74~            	endif
0381   7A74             
0381   7A70             
0381   7A70 03          
0381   7A71             
0381   7A71             
0381   7A71~            	endif
0381   7A71~            	endif
0381   7A71~            	endif
0381   7A71             
0381   7A74             
0381   7A74~            	endif
0381   7A74~            	endif
0381   7A74             
0382   7A74             	
0383   7A74 86 00       	ldaA	0
0384   7A76 97 03       	staA	counter2
0385   7A78 86 77       	ldaA	01110111b
0386   7A7A 91 7E       	cmpA	>displayBcd1 + 14
0387   7A7C 27 08       	beq	on
0388   7A7E             	
0389   7A7E 86 F0       	ldaA	$F0
0390   7A80             	;staA	lampRow1
0391   7A80 86 77       	ldaA	01110111b
0392   7A82 97 7E       	staA	displayBcd1	 + 14
0393   7A84 20 06       	bra	counterHandled
0394   7A86             on:
0395   7A86 86 0F       	ldaA	$0F
0396   7A88             	;staA	lampRow1
0397   7A88 86 33       	ldaA	00110011b
0398   7A8A 97 7E       	staA	displayBcd1	 + 14
0399   7A8C             
0400   7A8C             counterHandled:
0401   7A8C             ; move switch column
0402   7A8C 96 07       	ldaA	>strobe
0403   7A8E B7 30 02    	staA	switchStrobe
0404   7A91             	
0405   7A91             ; update display 
0406   7A91             	
0407   7A91 96 BF       	ldaA	>$BF
0408   7A93 97 7F       	staA	displayBcd1 + 15
0409   7A95 96 6F       	ldaA	>$6F
0410   7A97 97 76       	staA	displayBcd1 + 6
0411   7A99             	
0412   7A99 DE 50       	ldX	>curCol
0413   7A9B B6 01 6A    	ldaA	>displayCol
0414   7A9E 84 0F       	andA	1111b
0415   7AA0 C6 FF       	ldaB 	$FF
0416   7AA2 F7 28 02    	staB	displayBcd
0417   7AA5 B7 28 00    	staA	displayStrobe
0418   7AA8 85 08       	bitA	00001000b
0419   7AAA             	ifeq
0419   7AAA             
0419   7AAA 26 FE       
0420   7AAC E6 70       		ldaB	displayBcd1, X
0421   7AAE             	else
0421   7AAE             
0421   7AAE             
0421   7AAE             
0421   7AAE             
0421   7AAB             
0421   7AAB             
0421   7AAB             
0421   7AAB~            	else
0421   7AAB~            	else
0421   7AAB~            	else
0421   7AAB~            	else
0421   7AAB             
0421   7AAB~            	else
0421   7AAB~            	else
0421   7AAB~            	else
0421   7AAB~            	else
0421   7AAB             
0421   7AAB             
0421   7AAB 04          
0421   7AAE             
0421   7AAE 20 FE       
0421   7AB0             
0421   7AB0             
0421   7AB0             
0421   7AB0~            	else
0421   7AB0~            	else
0421   7AB0~            	else
0421   7AB0~            	else
0421   7AB0~            	else
0421   7AB0             
0421   7AB0~            	else
0421   7AB0~            	else
0421   7AB0             
0421   7AB0~            	else
0421   7AB0~            	else
0421   7AB0             
0422   7AB0 E6 78       		ldaB	displayBcd1 + 8, X
0423   7AB2             	endif
0423   7AB2             
0423   7AB2             
0423   7AB2             
0423   7AB2             
0423   7AB2             
0423   7AB2~            	endif
0423   7AB2~            	endif
0423   7AB2             
0423   7AB2~            	endif
0423   7AB2~            	endif
0423   7AB2             
0423   7AAF             
0423   7AAF 02          
0423   7AB0             
0423   7AB0             
0423   7AB0~            	endif
0423   7AB0~            	endif
0423   7AB0~            	endif
0423   7AB0             
0423   7AB2             
0423   7AB2~            	endif
0423   7AB2~            	endif
0423   7AB2             
0424   7AB2 F7 28 02    	staB	displayBcd
0425   7AB5             	
0426   7AB5             ; read switches
0427   7AB5             	;jmp updateLamps
0428   7AB5 DE 50       	ldX	>curCol
0429   7AB7 B6 30 00    	ldaA	>switchRow
0430   7ABA 16          	tab
0431   7ABB A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0432   7ABD             	
0433   7ABD D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0434   7ABF D7 01       	staB	temp + 1 			; temp = switch / 2
0435   7AC1 D7 53       	staB	tempX + 1			; tempX = cRAM
0436   7AC3 C6 60       	ldaB	callbackTable >> 8
0437   7AC5 D7 00       	staB	temp
0438   7AC7 C6 01       	ldaB	cRAM >> 8
0439   7AC9 D7 52       	staB	tempX
0440   7ACB             	
0441   7ACB C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0442   7ACD             	
0443   7ACD             	; temp now contains the beginning of the row in the callbackTable
0444   7ACD             swNext:
0445   7ACD 85 01       	bitA	00000001b	 ; Z set if switch not different
0446   7ACF             	ifne		; if bit set, switch different
0446   7ACF             
0446   7ACF 27 FE       
0447   7AD1 36          		pshA ; store changed switches left
0448   7AD2 DE 52       		ldX	>tempX
0449   7AD4             checkSettled:
0450   7AD4 A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0451   7AD6 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0452   7AD8 27 35       		beq 	notSettled; A=0 -> was settled
0453   7ADA             		; else A > 0 -> settling
0454   7ADA 86 18       			ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0455   7ADC             				; but checking 'multiple of 8' would miss 7/8 switch
0456   7ADC             				; columns completely since they're in sync
0457   7ADC             				; so instead the lowest bits are empty (so that it'll
0458   7ADC             				; get all switch cols) and instead it skips 7/8 groups 
0459   7ADC             				; of 8 IRQs
0460   7ADC 95 02       			bitA	>counter
0461   7ADE 26 49       			bne	settledEnd
0462   7AE0 A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0463   7AE2 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0464   7AE4 4A          			decA
0465   7AE5 A7 00       			staA	0, X	; sets Z if now A = 0
0466   7AE7             			ifeq ; A=0 -> now settled, fire event
0466   7AE7             
0466   7AE7 26 FE       
0467   7AE9             settled:		
0468   7AE9 DE 50       				ldX	>curCol
0469   7AEB 17          				tBA	; A now the bit in row
0470   7AEC A8 20       				eorA	switchRow1, X ; toggle bit in row
0471   7AEE A7 20       				staA	switchRow1, X ; A now state of row
0472   7AF0             				
0473   7AF0 F5 30 00    				bitB	>switchRow
0474   7AF3             				ifne ; switch now on
0474   7AF3             
0474   7AF3 27 FE       
0475   7AF5 86 40       					ldaA	01000000b
0476   7AF7             				else
0476   7AF7             
0476   7AF7             
0476   7AF7             
0476   7AF7             
0476   7AF4             
0476   7AF4             
0476   7AF4             
0476   7AF4~            				else
0476   7AF4~            				else
0476   7AF4~            				else
0476   7AF4~            				else
0476   7AF4             
0476   7AF4~            				else
0476   7AF4~            				else
0476   7AF4~            				else
0476   7AF4~            				else
0476   7AF4             
0476   7AF4             
0476   7AF4 04          
0476   7AF7             
0476   7AF7 20 FE       
0476   7AF9             
0476   7AF9             
0476   7AF9             
0476   7AF9~            				else
0476   7AF9~            				else
0476   7AF9~            				else
0476   7AF9~            				else
0476   7AF9~            				else
0476   7AF9             
0476   7AF9~            				else
0476   7AF9~            				else
0476   7AF9             
0476   7AF9~            				else
0476   7AF9~            				else
0476   7AF9             
0477   7AF9 86 C0       					ldaA	11000000b
0478   7AFB             				endif
0478   7AFB             
0478   7AFB             
0478   7AFB             
0478   7AFB             
0478   7AFB             
0478   7AFB~            				endif
0478   7AFB~            				endif
0478   7AFB             
0478   7AFB~            				endif
0478   7AFB~            				endif
0478   7AFB             
0478   7AF8             
0478   7AF8 02          
0478   7AF9             
0478   7AF9             
0478   7AF9~            				endif
0478   7AF9~            				endif
0478   7AF9~            				endif
0478   7AF9             
0478   7AFB             
0478   7AFB~            				endif
0478   7AFB~            				endif
0478   7AFB             
0479   7AFB 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0480   7AFD             				
0481   7AFD             				; store event
0482   7AFD DE 56       				ldX	>queueTail
0483   7AFF A7 00       				staA	0, X
0484   7B01 7C 00 57    				inc	queueTail + 1
0485   7B04             				
0486   7B04             				; wrap queueTail if necessary
0487   7B04 8C 00 6D    				cpX	queueEnd 
0488   7B07             				ifeq
0488   7B07             
0488   7B07 26 FE       
0489   7B09 86 60       					ldaA	queue 
0490   7B0B 97 57       					staA	queueTail + 1
0491   7B0D             				endif
0491   7B0D             
0491   7B0D             
0491   7B0D             
0491   7B0D             
0491   7B0D             
0491   7B0D~            				endif
0491   7B0D~            				endif
0491   7B0D             
0491   7B0D~            				endif
0491   7B0D~            				endif
0491   7B0D             
0491   7B08             
0491   7B08 04          
0491   7B09             
0491   7B09             
0491   7B09~            				endif
0491   7B09~            				endif
0491   7B09~            				endif
0491   7B09             
0491   7B0D             
0491   7B0D~            				endif
0491   7B0D~            				endif
0491   7B0D             
0492   7B0D             			endif
0492   7B0D             
0492   7B0D             
0492   7B0D             
0492   7B0D             
0492   7B0D             
0492   7B0D~            			endif
0492   7B0D~            			endif
0492   7B0D             
0492   7B0D~            			endif
0492   7B0D~            			endif
0492   7B0D             
0492   7AE8             
0492   7AE8 24          
0492   7AE9             
0492   7AE9             
0492   7AE9~            			endif
0492   7AE9~            			endif
0492   7AE9~            			endif
0492   7AE9             
0492   7B0D             
0492   7B0D~            			endif
0492   7B0D~            			endif
0492   7B0D             
0493   7B0D 20 1A       		bra settledEnd
0494   7B0F             notSettled: ; =0 -> was settled, so now it's not
0495   7B0F             			; get the settle time
0496   7B0F 96 53       			ldaA	>tempX + 1
0497   7B11 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0498   7B13 DE 00       			ldX	>temp
0499   7B15             			
0500   7B15             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0501   7B15 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0502   7B17             			
0503   7B17             			; need to get correct 3 bits from switch settings
0504   7B17 F5 30 00    			bitB	>switchRow
0505   7B1A             			ifne ; switch just turned on
0505   7B1A             
0505   7B1A 27 FE       
0506   7B1C 44          				lsrA
0507   7B1D 44          				lsrA
0508   7B1E             			else
0508   7B1E             
0508   7B1E             
0508   7B1E             
0508   7B1E             
0508   7B1B             
0508   7B1B             
0508   7B1B             
0508   7B1B~            			else
0508   7B1B~            			else
0508   7B1B~            			else
0508   7B1B~            			else
0508   7B1B             
0508   7B1B~            			else
0508   7B1B~            			else
0508   7B1B~            			else
0508   7B1B~            			else
0508   7B1B             
0508   7B1B             
0508   7B1B 04          
0508   7B1E             
0508   7B1E 20 FE       
0508   7B20             
0508   7B20             
0508   7B20             
0508   7B20~            			else
0508   7B20~            			else
0508   7B20~            			else
0508   7B20~            			else
0508   7B20~            			else
0508   7B20             
0508   7B20~            			else
0508   7B20~            			else
0508   7B20             
0508   7B20~            			else
0508   7B20~            			else
0508   7B20             
0509   7B20 48          				aslA
0510   7B21             			endif
0510   7B21             
0510   7B21             
0510   7B21             
0510   7B21             
0510   7B21             
0510   7B21~            			endif
0510   7B21~            			endif
0510   7B21             
0510   7B21~            			endif
0510   7B21~            			endif
0510   7B21             
0510   7B1F             
0510   7B1F 01          
0510   7B20             
0510   7B20             
0510   7B20~            			endif
0510   7B20~            			endif
0510   7B20~            			endif
0510   7B20             
0510   7B21             
0510   7B21~            			endif
0510   7B21~            			endif
0510   7B21             
0511   7B21 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0512   7B23             						
0513   7B23 DE 52       			ldX	>tempX
0514   7B25 A7 00       			staA	0, X		; start settling	
0515   7B27 27 C0       			beq	settled		; quick out for 0 settle
0516   7B29             settledEnd:
0517   7B29             			
0518   7B29 32          		pulA
0519   7B2A             	endif
0519   7B2A             
0519   7B2A             
0519   7B2A             
0519   7B2A             
0519   7B2A             
0519   7B2A~            	endif
0519   7B2A~            	endif
0519   7B2A             
0519   7B2A~            	endif
0519   7B2A~            	endif
0519   7B2A             
0519   7AD0             
0519   7AD0 59          
0519   7AD1             
0519   7AD1             
0519   7AD1~            	endif
0519   7AD1~            	endif
0519   7AD1~            	endif
0519   7AD1             
0519   7B2A             
0519   7B2A~            	endif
0519   7B2A~            	endif
0519   7B2A             
0520   7B2A 7C 00 53    	inc tempX + 1
0521   7B2D 58          	aslB
0522   7B2E 44          	lsrA			; pop lowest bit off, set Z if A is empty
0523   7B2F 26 9C       	bne		swNext 	; more 'switched' bits, keep processing 
0524   7B31             	
0525   7B31             	
0526   7B31             ; update lamps
0527   7B31             updateLamps:
0528   7B31             	;jmp updateStrobe
0529   7B31             
0530   7B31 DE 50       	ldX	>curCol
0531   7B33             	
0532   7B33 86 FF       	ldaA	$FF	;lamp row is inverted
0533   7B35 B7 24 00    	staA	lampCol
0534   7B38 96 07       	ldaA	>strobe
0535   7B3A B7 24 02    	staA	lampStrobe
0536   7B3D             	
0537   7B3D D6 02       	ldaB	>counter
0538   7B3F A6 08       	ldaA	lampCol1, X
0539   7B41 C5 80       	bitB	10000000b 
0540   7B43             	ifeq
0540   7B43             
0540   7B43 26 FE       
0541   7B45 A8 A0       		eorA	flashLampCol1, X
0542   7B47 A4 08       		andA	lampCol1, X
0543   7B49             	endif
0543   7B49             
0543   7B49             
0543   7B49             
0543   7B49             
0543   7B49             
0543   7B49~            	endif
0543   7B49~            	endif
0543   7B49             
0543   7B49~            	endif
0543   7B49~            	endif
0543   7B49             
0543   7B44             
0543   7B44 04          
0543   7B45             
0543   7B45             
0543   7B45~            	endif
0543   7B45~            	endif
0543   7B45~            	endif
0543   7B45             
0543   7B49             
0543   7B49~            	endif
0543   7B49~            	endif
0543   7B49             
0544   7B49 43          	comA	; inverted
0545   7B4A             	
0546   7B4A B7 24 00    	staA	lampCol
0547   7B4D 86 00       	ldaA	00
0548   7B4F             
0549   7B4F             ; update solenoids
0550   7B4F             	; if a solenoid is set to <254, --
0551   7B4F             	; if =255, off, otherwise on
0552   7B4F             	; else leave it at 254
0553   7B4F             	
0554   7B4F 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0555   7B52 86 FE       	ldaA	254
0556   7B54 DE 50       	ldX	>curCol
0557   7B56             	; update solenoid in current 'column' (1-8) 
0558   7B56 A1 40       	cmpA	solenoid1 - cRAM, X
0559   7B58             	ifge 	; solenoid <=254, turn on
0559   7B58             
0559   7B58 25 FE       
0560   7B5A             		ifgt	; solenoid < 254, decrement
0560   7B5A             
0560   7B5A 23 FE       
0561   7B5C 6A 40       			dec	solenoid1 - cRAM, X
0562   7B5E             		endif
0562   7B5E             
0562   7B5E             
0562   7B5E             
0562   7B5E             
0562   7B5E             
0562   7B5E~            		endif
0562   7B5E~            		endif
0562   7B5E             
0562   7B5E~            		endif
0562   7B5E~            		endif
0562   7B5E             
0562   7B5B             
0562   7B5B 02          
0562   7B5C             
0562   7B5C             
0562   7B5C~            		endif
0562   7B5C~            		endif
0562   7B5C~            		endif
0562   7B5C             
0562   7B5E             
0562   7B5E~            		endif
0562   7B5E~            		endif
0562   7B5E             
0563   7B5E 0D          		sec
0564   7B5F             	else
0564   7B5F             
0564   7B5F             
0564   7B5F             
0564   7B5F             
0564   7B59             
0564   7B59             
0564   7B59             
0564   7B59~            	else
0564   7B59~            	else
0564   7B59~            	else
0564   7B59~            	else
0564   7B59             
0564   7B59~            	else
0564   7B59~            	else
0564   7B59~            	else
0564   7B59~            	else
0564   7B59             
0564   7B59             
0564   7B59 07          
0564   7B5F             
0564   7B5F 20 FE       
0564   7B61             
0564   7B61             
0564   7B61             
0564   7B61~            	else
0564   7B61~            	else
0564   7B61~            	else
0564   7B61~            	else
0564   7B61~            	else
0564   7B61             
0564   7B61~            	else
0564   7B61~            	else
0564   7B61             
0564   7B61~            	else
0564   7B61~            	else
0564   7B61             
0565   7B61 0C          		clc
0566   7B62             	endif
0566   7B62             
0566   7B62             
0566   7B62             
0566   7B62             
0566   7B62             
0566   7B62~            	endif
0566   7B62~            	endif
0566   7B62             
0566   7B62~            	endif
0566   7B62~            	endif
0566   7B62             
0566   7B60             
0566   7B60 01          
0566   7B61             
0566   7B61             
0566   7B61~            	endif
0566   7B61~            	endif
0566   7B61~            	endif
0566   7B61             
0566   7B62             
0566   7B62~            	endif
0566   7B62~            	endif
0566   7B62             
0567   7B62 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0568   7B65             	; repeat above for second bank
0569   7B65 A1 48       	cmpA	solenoid9 - cRAM, X
0570   7B67             	ifge 	; solenoid <=254, turn on
0570   7B67             
0570   7B67 25 FE       
0571   7B69             		ifgt	; solenoid < 254, decrement
0571   7B69             
0571   7B69 23 FE       
0572   7B6B 6A 48       			dec	solenoid9 - cRAM, X
0573   7B6D             		endif
0573   7B6D             
0573   7B6D             
0573   7B6D             
0573   7B6D             
0573   7B6D             
0573   7B6D~            		endif
0573   7B6D~            		endif
0573   7B6D             
0573   7B6D~            		endif
0573   7B6D~            		endif
0573   7B6D             
0573   7B6A             
0573   7B6A 02          
0573   7B6B             
0573   7B6B             
0573   7B6B~            		endif
0573   7B6B~            		endif
0573   7B6B~            		endif
0573   7B6B             
0573   7B6D             
0573   7B6D~            		endif
0573   7B6D~            		endif
0573   7B6D             
0574   7B6D 0D          		sec
0575   7B6E             	else
0575   7B6E             
0575   7B6E             
0575   7B6E             
0575   7B6E             
0575   7B68             
0575   7B68             
0575   7B68             
0575   7B68~            	else
0575   7B68~            	else
0575   7B68~            	else
0575   7B68~            	else
0575   7B68             
0575   7B68~            	else
0575   7B68~            	else
0575   7B68~            	else
0575   7B68~            	else
0575   7B68             
0575   7B68             
0575   7B68 07          
0575   7B6E             
0575   7B6E 20 FE       
0575   7B70             
0575   7B70             
0575   7B70             
0575   7B70~            	else
0575   7B70~            	else
0575   7B70~            	else
0575   7B70~            	else
0575   7B70~            	else
0575   7B70             
0575   7B70~            	else
0575   7B70~            	else
0575   7B70             
0575   7B70~            	else
0575   7B70~            	else
0575   7B70             
0576   7B70 0C          		clc
0577   7B71             	endif
0577   7B71             
0577   7B71             
0577   7B71             
0577   7B71             
0577   7B71             
0577   7B71~            	endif
0577   7B71~            	endif
0577   7B71             
0577   7B71~            	endif
0577   7B71~            	endif
0577   7B71             
0577   7B6F             
0577   7B6F 01          
0577   7B70             
0577   7B70             
0577   7B70~            	endif
0577   7B70~            	endif
0577   7B70~            	endif
0577   7B70             
0577   7B71             
0577   7B71~            	endif
0577   7B71~            	endif
0577   7B71             
0578   7B71 76 00 29    	ror		solBStatus	
0579   7B74 7A 00 50    	dec		curCol ; undo inc
0580   7B77             	
0581   7B77             ; update strobe	
0582   7B77             updateStrobe:
0583   7B77             	;ldX		curCol
0584   7B77             	;inX 	
0585   7B77 86 08       	ldaA	8 	; pitch
0586   7B79 9B 10       	addA	>curSwitchRowLsb
0587   7B7B 97 10       	staA	curSwitchRowLsb
0588   7B7D 78 00 07    	asl	strobe
0589   7B80 7C 01 6A    	inc	displayCol
0590   7B83 86 00       	ldaA	0
0591   7B85 91 07       	cmpA	>strobe ; strobe done?  reset
0592   7B87             	ifeq		
0592   7B87             
0592   7B87 26 FE       
0593   7B89 96 28       		ldaA	>solAStatus
0594   7B8B B7 22 00    		staA	solenoidA
0595   7B8E 96 29       		ldaA	>solBStatus
0596   7B90 B7 22 02    		staA	solenoidB
0597   7B93             	
0598   7B93 86 01       		ldaA	00000001b
0599   7B95 97 07       		staA	strobe
0600   7B97             		
0601   7B97             		;ldX 	#0
0602   7B97             		
0603   7B97 86 00       		ldaA	0
0604   7B99 97 50       		staA	curCol
0605   7B9B 97 51       		staA	curCol + 1
0606   7B9D 97 10       		staA	curSwitchRowLsb
0607   7B9F 97 28       		staA	solAStatus
0608   7BA1 97 29       		staA	solBStatus
0609   7BA3             		
0610   7BA3 F6 01 6A    		ldaB	>displayCol	; reset display col only if it's > 7 
0611   7BA6 CA F0       		oraB	11110000b
0612   7BA8 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0613   7BAA             		ifgt
0613   7BAA             
0613   7BAA 23 FE       
0614   7BAC B7 01 6A    			staA	displayCol
0615   7BAF             		endif
0615   7BAF             
0615   7BAF             
0615   7BAF             
0615   7BAF             
0615   7BAF             
0615   7BAF~            		endif
0615   7BAF~            		endif
0615   7BAF             
0615   7BAF~            		endif
0615   7BAF~            		endif
0615   7BAF             
0615   7BAB             
0615   7BAB 03          
0615   7BAC             
0615   7BAC             
0615   7BAC~            		endif
0615   7BAC~            		endif
0615   7BAC~            		endif
0615   7BAC             
0615   7BAF             
0615   7BAF~            		endif
0615   7BAF~            		endif
0615   7BAF             
0616   7BAF             	
0617   7BAF B6 01 6B    		ldaA	>state
0618   7BB2 8A 04       		oraA	100b
0619   7BB4 B7 01 6B    		staA	state
0620   7BB7             	else
0620   7BB7             
0620   7BB7             
0620   7BB7             
0620   7BB7             
0620   7B88             
0620   7B88             
0620   7B88             
0620   7B88~            	else
0620   7B88~            	else
0620   7B88~            	else
0620   7B88~            	else
0620   7B88             
0620   7B88~            	else
0620   7B88~            	else
0620   7B88~            	else
0620   7B88~            	else
0620   7B88             
0620   7B88             
0620   7B88 30          
0620   7BB7             
0620   7BB7 20 FE       
0620   7BB9             
0620   7BB9             
0620   7BB9             
0620   7BB9~            	else
0620   7BB9~            	else
0620   7BB9~            	else
0620   7BB9~            	else
0620   7BB9~            	else
0620   7BB9             
0620   7BB9~            	else
0620   7BB9~            	else
0620   7BB9             
0620   7BB9~            	else
0620   7BB9~            	else
0620   7BB9             
0621   7BB9 7C 00 51    		inc	curCol + 1
0622   7BBC             	endif
0622   7BBC             
0622   7BBC             
0622   7BBC             
0622   7BBC             
0622   7BBC             
0622   7BBC~            	endif
0622   7BBC~            	endif
0622   7BBC             
0622   7BBC~            	endif
0622   7BBC~            	endif
0622   7BBC             
0622   7BB8             
0622   7BB8 03          
0622   7BB9             
0622   7BB9             
0622   7BB9~            	endif
0622   7BB9~            	endif
0622   7BB9~            	endif
0622   7BB9             
0622   7BBC             
0622   7BBC~            	endif
0622   7BBC~            	endif
0622   7BBC             
0623   7BBC             	
0624   7BBC 3B          	rti
0625   7BBD             afterInterrupt:
0626   7BBD             
0627   7FF8             pointers: 	.org $7FF8  	
0628   7FF8             	.msfirst
0629   7FF8 7A 31       	.dw interrupt			
0630   7FFA 7A 31       	.dw interrupt			
0631   7FFC 7A 31       	.dw interrupt			
0632   7FFE 78 00       	.dw main
0633   8000             	
0634   8000             	
0635   8000             	.endtasm: Number of errors = 0
