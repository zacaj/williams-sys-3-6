0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             attractX:		.equ RAM + $2A ; +
0041+  0000             forkX			.equ RAM + $2C ; +
0042+  0000             scanCurCol:		.equ RAM + $2E ; +
0043+  0000             scanCurSwitchRowLsb:	.equ RAM + $30
0044+  0000             scanStrobe:		.equ RAM + $31
0045+  0000             scanX:			.equ RAM + $32 ; +
0046+  0000             scanTempX:		.equ RAM + $34 ; +
0047+  0000             irqSwitchRow:		.equ RAM + $36
0048+  0000             curCol:			.equ RAM + $50 ; +
0049+  0000             tempX:			.equ RAM + $52 ; +
0050+  0000             queueHead:		.equ RAM + $54 ; +
0051+  0000             queueTail:		.equ RAM + $56 ; +
0052+  0000             tempQ:			.equ RAM + $58 ; +
0053+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0054+  0000             queueEnd:		.equ RAM + $6D
0055+  0000             ;
0056+  0000             displayBcd1:	.equ RAM + $70
0057+  0000             displayBcd16:	.equ RAM + $7F
0058+  0000             ballCount:		.equ displayBcd1 + 7
0059+  0000             waitLeft: 		.equ RAM + $80 ; dec every 8ms
0060+  0000             waitLeftEnd:		.equ RAM + $86
0061+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0062+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0063+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0064+  0000             flashLampCol1:		.equ RAM + $A0
0065+  0000             flashLampCol8:		.equ RAM + $A7
0066+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0067+  0000             lastSwitch:		.equ RAM + $A8
0068+  0000             dropResetTimer:		.equ RAM + $A9 ; max 127
0069+  0000             dropsDown		.equ RAM + $AA
0070+  0000             p_Bonus:		.equ RAM + $B0
0071+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0072+  0000             p_DropsDown:		.equ RAM + $B5
0073+  0000             p_LampCol2:		.equ RAM + $B6 ; -> B9
0074+  0000             spinnerTimer:		.equ RAM + $BA 
0075+  0000             
0076+  0000             p_BonusLeft:		.equ RAM + $BE
0077+  0000             bonusTimer:		.equ RAM + $BF ; counts down from 127 during bonus
0078+  0000             
0079+  0000             
0080+  0000             
0081+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0082+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0083+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0084+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0085+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0086+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0087+  0000             #DEFINE s(n) 		(0 + n)
0088+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0089+  0000             pA_10:			.equ pA_1m + 5
0090+  0000             pB_1m:			.equ pA_10 + 1
0091+  0000             pB_10:			.equ pB_1m + 5
0092+  0000             pC_1m:			.equ pB_10 + 1
0093+  0000             pC_10:			.equ pC_1m + 5
0094+  0000             pD_1m:			.equ pC_10 + 1
0095+  0000             pD_10:			.equ pD_1m + 5 
0096+  0000             ; 
0097+  0000             displayCol:		.equ cRAM + $6A
0098+  0000             state:			.equ cRAM + $6B	; loop processing performed | strobe reset | don't validate | quick scanning switches
0099+  0000             strobeReset:		.equ cRAM + $6C
0100+  0000             
0101+  0000             instant:		.equ 4
0102+  0000             debounce:		.equ 1
0103+  0000             slow:			.equ 2
0104+  0000             
0105+  0000             switchSettle:	.equ cRAM + $30
0106+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7D00             utils:	.org $7800 + $500
0002+  7D00             
0003+  7D00             ; copy players' scores to display 
0004+  7D00             copyScores13:
0005+  7D00 CE 00 70    	ldX	displayBcd1
0006+  7D03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7D05             copy13Loop:
0008+  7D05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7D07 84 0F       	andA	$0F
0010+  7D09 81 00       	cmpA	$00 
0011+  7D0B             	ifeq ; if pA score = 0?
0011+  7D0B             
0011+  7D0B 26 FE       
0012+  7D0D 8C 00 75    		cpX	displayBcd1 + 5
0013+  7D10             		ifeq
0013+  7D10             
0013+  7D10 26 FE       
0014+  7D12 C4 0F       			andB	00001111b 
0015+  7D14 86 0F       			ldaA	$0F
0016+  7D16             		else
0016+  7D16             
0016+  7D16             
0016+  7D16             
0016+  7D16             
0016+  7D11             
0016+  7D11             
0016+  7D11             
0016+  7D11~            		else
0016+  7D11~            		else
0016+  7D11~            		else
0016+  7D11~            		else
0016+  7D11             
0016+  7D11~            		else
0016+  7D11~            		else
0016+  7D11~            		else
0016+  7D11~            		else
0016+  7D11             
0016+  7D11             
0016+  7D11 06          
0016+  7D16             
0016+  7D16 20 FE       
0016+  7D18             
0016+  7D18             
0016+  7D18             
0016+  7D18~            		else
0016+  7D18~            		else
0016+  7D18~            		else
0016+  7D18~            		else
0016+  7D18~            		else
0016+  7D18             
0016+  7D18~            		else
0016+  7D18~            		else
0016+  7D18             
0016+  7D18~            		else
0016+  7D18~            		else
0016+  7D18             
0017+  7D18 17          			tBA	; replace 0 with blank/0
0018+  7D19             		endif
0018+  7D19             
0018+  7D19             
0018+  7D19             
0018+  7D19             
0018+  7D19             
0018+  7D19~            		endif
0018+  7D19~            		endif
0018+  7D19             
0018+  7D19~            		endif
0018+  7D19~            		endif
0018+  7D19             
0018+  7D17             
0018+  7D17 01          
0018+  7D18             
0018+  7D18             
0018+  7D18~            		endif
0018+  7D18~            		endif
0018+  7D18~            		endif
0018+  7D18             
0018+  7D19             
0018+  7D19~            		endif
0018+  7D19~            		endif
0018+  7D19             
0019+  7D19             	else
0019+  7D19             
0019+  7D19             
0019+  7D19             
0019+  7D19             
0019+  7D0C             
0019+  7D0C             
0019+  7D0C             
0019+  7D0C~            	else
0019+  7D0C~            	else
0019+  7D0C~            	else
0019+  7D0C~            	else
0019+  7D0C             
0019+  7D0C~            	else
0019+  7D0C~            	else
0019+  7D0C~            	else
0019+  7D0C~            	else
0019+  7D0C             
0019+  7D0C             
0019+  7D0C 0E          
0019+  7D19             
0019+  7D19 20 FE       
0019+  7D1B             
0019+  7D1B             
0019+  7D1B             
0019+  7D1B~            	else
0019+  7D1B~            	else
0019+  7D1B~            	else
0019+  7D1B~            	else
0019+  7D1B~            	else
0019+  7D1B             
0019+  7D1B~            	else
0019+  7D1B~            	else
0019+  7D1B             
0019+  7D1B~            	else
0019+  7D1B~            	else
0019+  7D1B             
0020+  7D1B 48          		aslA
0021+  7D1C 48          		aslA
0022+  7D1D 48          		aslA
0023+  7D1E 48          		aslA
0024+  7D1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7D21 8A 0F       		oraA	00001111b
0026+  7D23             	endif
0026+  7D23             
0026+  7D23             
0026+  7D23             
0026+  7D23             
0026+  7D23             
0026+  7D23~            	endif
0026+  7D23~            	endif
0026+  7D23             
0026+  7D23~            	endif
0026+  7D23~            	endif
0026+  7D23             
0026+  7D1A             
0026+  7D1A 08          
0026+  7D1B             
0026+  7D1B             
0026+  7D1B~            	endif
0026+  7D1B~            	endif
0026+  7D1B~            	endif
0026+  7D1B             
0026+  7D23             
0026+  7D23~            	endif
0026+  7D23~            	endif
0026+  7D23             
0027+  7D23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7D25             	
0029+  7D25             	;andA	$F0
0030+  7D25 85 0F       	bitA	00001111b
0031+  7D27             	ifeq ; pC is 0
0031+  7D27             
0031+  7D27 26 FE       
0032+  7D29 C5 0F       		bitB	1111b
0033+  7D2B             		ifne
0033+  7D2B             
0033+  7D2B 27 FE       
0034+  7D2D 8C 00 75    			cpX	displayBcd1 + 5
0035+  7D30             			ifeq
0035+  7D30             
0035+  7D30 26 FE       
0036+  7D32 C4 F0       				andB	11110000b
0037+  7D34             			else
0037+  7D34             
0037+  7D34             
0037+  7D34             
0037+  7D34             
0037+  7D31             
0037+  7D31             
0037+  7D31             
0037+  7D31~            			else
0037+  7D31~            			else
0037+  7D31~            			else
0037+  7D31~            			else
0037+  7D31             
0037+  7D31~            			else
0037+  7D31~            			else
0037+  7D31~            			else
0037+  7D31~            			else
0037+  7D31             
0037+  7D31             
0037+  7D31 04          
0037+  7D34             
0037+  7D34 20 FE       
0037+  7D36             
0037+  7D36             
0037+  7D36             
0037+  7D36~            			else
0037+  7D36~            			else
0037+  7D36~            			else
0037+  7D36~            			else
0037+  7D36~            			else
0037+  7D36             
0037+  7D36~            			else
0037+  7D36~            			else
0037+  7D36             
0037+  7D36~            			else
0037+  7D36~            			else
0037+  7D36             
0038+  7D36 8A 0F       				oraA	$F
0039+  7D38             			endif
0039+  7D38             
0039+  7D38             
0039+  7D38             
0039+  7D38             
0039+  7D38             
0039+  7D38~            			endif
0039+  7D38~            			endif
0039+  7D38             
0039+  7D38~            			endif
0039+  7D38~            			endif
0039+  7D38             
0039+  7D35             
0039+  7D35 02          
0039+  7D36             
0039+  7D36             
0039+  7D36~            			endif
0039+  7D36~            			endif
0039+  7D36~            			endif
0039+  7D36             
0039+  7D38             
0039+  7D38~            			endif
0039+  7D38~            			endif
0039+  7D38             
0040+  7D38             		endif
0040+  7D38             
0040+  7D38             
0040+  7D38             
0040+  7D38             
0040+  7D38             
0040+  7D38~            		endif
0040+  7D38~            		endif
0040+  7D38             
0040+  7D38~            		endif
0040+  7D38~            		endif
0040+  7D38             
0040+  7D2C             
0040+  7D2C 0B          
0040+  7D2D             
0040+  7D2D             
0040+  7D2D~            		endif
0040+  7D2D~            		endif
0040+  7D2D~            		endif
0040+  7D2D             
0040+  7D38             
0040+  7D38~            		endif
0040+  7D38~            		endif
0040+  7D38             
0041+  7D38             	else
0041+  7D38             
0041+  7D38             
0041+  7D38             
0041+  7D38             
0041+  7D28             
0041+  7D28             
0041+  7D28             
0041+  7D28~            	else
0041+  7D28~            	else
0041+  7D28~            	else
0041+  7D28~            	else
0041+  7D28             
0041+  7D28~            	else
0041+  7D28~            	else
0041+  7D28~            	else
0041+  7D28~            	else
0041+  7D28             
0041+  7D28             
0041+  7D28 11          
0041+  7D38             
0041+  7D38 20 FE       
0041+  7D3A             
0041+  7D3A             
0041+  7D3A             
0041+  7D3A~            	else
0041+  7D3A~            	else
0041+  7D3A~            	else
0041+  7D3A~            	else
0041+  7D3A~            	else
0041+  7D3A             
0041+  7D3A~            	else
0041+  7D3A~            	else
0041+  7D3A             
0041+  7D3A~            	else
0041+  7D3A~            	else
0041+  7D3A             
0042+  7D3A C4 F0       		andB	11110000b
0043+  7D3C             	endif
0043+  7D3C             
0043+  7D3C             
0043+  7D3C             
0043+  7D3C             
0043+  7D3C             
0043+  7D3C~            	endif
0043+  7D3C~            	endif
0043+  7D3C             
0043+  7D3C~            	endif
0043+  7D3C~            	endif
0043+  7D3C             
0043+  7D39             
0043+  7D39 02          
0043+  7D3A             
0043+  7D3A             
0043+  7D3A~            	endif
0043+  7D3A~            	endif
0043+  7D3A~            	endif
0043+  7D3A             
0043+  7D3C             
0043+  7D3C~            	endif
0043+  7D3C~            	endif
0043+  7D3C             
0044+  7D3C A7 00       	staA	0, X
0045+  7D3E             	
0046+  7D3E 08          	inX
0047+  7D3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7D42 26 C1       	bne 	copy13Loop
0049+  7D44             	
0050+  7D44 39          	rts
0051+  7D45             
0052+  7D45             copyScores24:
0053+  7D45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7D48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7D4A             copy24Loop:
0056+  7D4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7D4C 84 0F       	andA	$0F
0058+  7D4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7D50             	ifeq ; if pA score = 0?
0059+  7D50             
0059+  7D50 26 FE       
0060+  7D52 8C 00 7D    		cpX	displayBcd1 + 8 + 5
0061+  7D55             		ifeq
0061+  7D55             
0061+  7D55 26 FE       
0062+  7D57 C4 0F       			andB	00001111b 
0063+  7D59 86 0F       			ldaA	$0F
0064+  7D5B             		else
0064+  7D5B             
0064+  7D5B             
0064+  7D5B             
0064+  7D5B             
0064+  7D56             
0064+  7D56             
0064+  7D56             
0064+  7D56~            		else
0064+  7D56~            		else
0064+  7D56~            		else
0064+  7D56~            		else
0064+  7D56             
0064+  7D56~            		else
0064+  7D56~            		else
0064+  7D56~            		else
0064+  7D56~            		else
0064+  7D56             
0064+  7D56             
0064+  7D56 06          
0064+  7D5B             
0064+  7D5B 20 FE       
0064+  7D5D             
0064+  7D5D             
0064+  7D5D             
0064+  7D5D~            		else
0064+  7D5D~            		else
0064+  7D5D~            		else
0064+  7D5D~            		else
0064+  7D5D~            		else
0064+  7D5D             
0064+  7D5D~            		else
0064+  7D5D~            		else
0064+  7D5D             
0064+  7D5D~            		else
0064+  7D5D~            		else
0064+  7D5D             
0065+  7D5D 17          			tBA	; replace 0 with blank/0
0066+  7D5E             		endif
0066+  7D5E             
0066+  7D5E             
0066+  7D5E             
0066+  7D5E             
0066+  7D5E             
0066+  7D5E~            		endif
0066+  7D5E~            		endif
0066+  7D5E             
0066+  7D5E~            		endif
0066+  7D5E~            		endif
0066+  7D5E             
0066+  7D5C             
0066+  7D5C 01          
0066+  7D5D             
0066+  7D5D             
0066+  7D5D~            		endif
0066+  7D5D~            		endif
0066+  7D5D~            		endif
0066+  7D5D             
0066+  7D5E             
0066+  7D5E~            		endif
0066+  7D5E~            		endif
0066+  7D5E             
0067+  7D5E             	else
0067+  7D5E             
0067+  7D5E             
0067+  7D5E             
0067+  7D5E             
0067+  7D51             
0067+  7D51             
0067+  7D51             
0067+  7D51~            	else
0067+  7D51~            	else
0067+  7D51~            	else
0067+  7D51~            	else
0067+  7D51             
0067+  7D51~            	else
0067+  7D51~            	else
0067+  7D51~            	else
0067+  7D51~            	else
0067+  7D51             
0067+  7D51             
0067+  7D51 0E          
0067+  7D5E             
0067+  7D5E 20 FE       
0067+  7D60             
0067+  7D60             
0067+  7D60             
0067+  7D60~            	else
0067+  7D60~            	else
0067+  7D60~            	else
0067+  7D60~            	else
0067+  7D60~            	else
0067+  7D60             
0067+  7D60~            	else
0067+  7D60~            	else
0067+  7D60             
0067+  7D60~            	else
0067+  7D60~            	else
0067+  7D60             
0068+  7D60 48          		aslA
0069+  7D61 48          		aslA
0070+  7D62 48          		aslA
0071+  7D63 48          		aslA
0072+  7D64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7D66 8A 0F       		oraA	00001111b
0074+  7D68             	endif
0074+  7D68             
0074+  7D68             
0074+  7D68             
0074+  7D68             
0074+  7D68             
0074+  7D68~            	endif
0074+  7D68~            	endif
0074+  7D68             
0074+  7D68~            	endif
0074+  7D68~            	endif
0074+  7D68             
0074+  7D5F             
0074+  7D5F 08          
0074+  7D60             
0074+  7D60             
0074+  7D60~            	endif
0074+  7D60~            	endif
0074+  7D60~            	endif
0074+  7D60             
0074+  7D68             
0074+  7D68~            	endif
0074+  7D68~            	endif
0074+  7D68             
0075+  7D68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7D6A             	;andA	$F0
0077+  7D6A 85 0F       	bitA	00001111b
0078+  7D6C             	ifeq ; pC is 0
0078+  7D6C             
0078+  7D6C 26 FE       
0079+  7D6E C5 0F       		bitB	1111b
0080+  7D70             		ifne
0080+  7D70             
0080+  7D70 27 FE       
0081+  7D72 8C 00 7D    			cpX	displayBcd1 + 8 + 5
0082+  7D75             			ifeq
0082+  7D75             
0082+  7D75 26 FE       
0083+  7D77 C4 F0       				andB	11110000b
0084+  7D79             			else
0084+  7D79             
0084+  7D79             
0084+  7D79             
0084+  7D79             
0084+  7D76             
0084+  7D76             
0084+  7D76             
0084+  7D76~            			else
0084+  7D76~            			else
0084+  7D76~            			else
0084+  7D76~            			else
0084+  7D76             
0084+  7D76~            			else
0084+  7D76~            			else
0084+  7D76~            			else
0084+  7D76~            			else
0084+  7D76             
0084+  7D76             
0084+  7D76 04          
0084+  7D79             
0084+  7D79 20 FE       
0084+  7D7B             
0084+  7D7B             
0084+  7D7B             
0084+  7D7B~            			else
0084+  7D7B~            			else
0084+  7D7B~            			else
0084+  7D7B~            			else
0084+  7D7B~            			else
0084+  7D7B             
0084+  7D7B~            			else
0084+  7D7B~            			else
0084+  7D7B             
0084+  7D7B~            			else
0084+  7D7B~            			else
0084+  7D7B             
0085+  7D7B 8A 0F       				oraA	$F
0086+  7D7D             			endif
0086+  7D7D             
0086+  7D7D             
0086+  7D7D             
0086+  7D7D             
0086+  7D7D             
0086+  7D7D~            			endif
0086+  7D7D~            			endif
0086+  7D7D             
0086+  7D7D~            			endif
0086+  7D7D~            			endif
0086+  7D7D             
0086+  7D7A             
0086+  7D7A 02          
0086+  7D7B             
0086+  7D7B             
0086+  7D7B~            			endif
0086+  7D7B~            			endif
0086+  7D7B~            			endif
0086+  7D7B             
0086+  7D7D             
0086+  7D7D~            			endif
0086+  7D7D~            			endif
0086+  7D7D             
0087+  7D7D             		endif
0087+  7D7D             
0087+  7D7D             
0087+  7D7D             
0087+  7D7D             
0087+  7D7D             
0087+  7D7D~            		endif
0087+  7D7D~            		endif
0087+  7D7D             
0087+  7D7D~            		endif
0087+  7D7D~            		endif
0087+  7D7D             
0087+  7D71             
0087+  7D71 0B          
0087+  7D72             
0087+  7D72             
0087+  7D72~            		endif
0087+  7D72~            		endif
0087+  7D72~            		endif
0087+  7D72             
0087+  7D7D             
0087+  7D7D~            		endif
0087+  7D7D~            		endif
0087+  7D7D             
0088+  7D7D             	else
0088+  7D7D             
0088+  7D7D             
0088+  7D7D             
0088+  7D7D             
0088+  7D6D             
0088+  7D6D             
0088+  7D6D             
0088+  7D6D~            	else
0088+  7D6D~            	else
0088+  7D6D~            	else
0088+  7D6D~            	else
0088+  7D6D             
0088+  7D6D~            	else
0088+  7D6D~            	else
0088+  7D6D~            	else
0088+  7D6D~            	else
0088+  7D6D             
0088+  7D6D             
0088+  7D6D 11          
0088+  7D7D             
0088+  7D7D 20 FE       
0088+  7D7F             
0088+  7D7F             
0088+  7D7F             
0088+  7D7F~            	else
0088+  7D7F~            	else
0088+  7D7F~            	else
0088+  7D7F~            	else
0088+  7D7F~            	else
0088+  7D7F             
0088+  7D7F~            	else
0088+  7D7F~            	else
0088+  7D7F             
0088+  7D7F~            	else
0088+  7D7F~            	else
0088+  7D7F             
0089+  7D7F C4 F0       		andB	11110000b
0090+  7D81             	endif
0090+  7D81             
0090+  7D81             
0090+  7D81             
0090+  7D81             
0090+  7D81             
0090+  7D81~            	endif
0090+  7D81~            	endif
0090+  7D81             
0090+  7D81~            	endif
0090+  7D81~            	endif
0090+  7D81             
0090+  7D7E             
0090+  7D7E 02          
0090+  7D7F             
0090+  7D7F             
0090+  7D7F~            	endif
0090+  7D7F~            	endif
0090+  7D7F~            	endif
0090+  7D7F             
0090+  7D81             
0090+  7D81~            	endif
0090+  7D81~            	endif
0090+  7D81             
0091+  7D81 A7 00       	staA  0, X 
0092+  7D83             	
0093+  7D83 08          	inX
0094+  7D84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7D87 26 C1       	bne copy24Loop	
0096+  7D89             	
0097+  7D89 39          	rts
0098+  7D8A             	
0099+  7D8A             blankNonPlayerScores:
0100+  7D8A D6 0F       	ldaB	>lc(8) ; gameover
0101+  7D8C C5 20       	bitB	lr(6)
0102+  7D8E             	ifne
0102+  7D8E             
0102+  7D8E 27 FE       
0103+  7D90 39          		rts
0104+  7D91             	endif
0104+  7D91             
0104+  7D91             
0104+  7D91             
0104+  7D91             
0104+  7D91             
0104+  7D91~            	endif
0104+  7D91~            	endif
0104+  7D91             
0104+  7D91~            	endif
0104+  7D91~            	endif
0104+  7D91             
0104+  7D8F             
0104+  7D8F 01          
0104+  7D90             
0104+  7D90             
0104+  7D90~            	endif
0104+  7D90~            	endif
0104+  7D90~            	endif
0104+  7D90             
0104+  7D91             
0104+  7D91~            	endif
0104+  7D91~            	endif
0104+  7D91             
0105+  7D91             	
0106+  7D91 D6 0E       	ldaB	>lc(7)
0107+  7D93 C5 02       	bitB	lr(2)
0108+  7D95 26 1A       	bne	blankP2
0109+  7D97 C5 04       	bitB	lr(3)
0110+  7D99 26 22       	bne	blankP3
0111+  7D9B C5 08       	bitB	lr(4)
0112+  7D9D 26 2A       	bne	blankP4
0113+  7D9F C5 10       	bitB	lr(5)
0114+  7DA1 26 32       	bne	blankDone
0115+  7DA3 20 00       	bra	blankP1
0116+  7DA5             blankP1:
0117+  7DA5 86 F0       	ldaA	$F0
0118+  7DA7 9A 74       	oraA	>displayBcd1 + 4
0119+  7DA9 97 74       	staA	displayBcd1 + 4
0120+  7DAB 86 F0       	ldaA	$F0
0121+  7DAD 9A 75       	oraA	>displayBcd1 + 5
0122+  7DAF 97 75       	staA	displayBcd1 + 5
0123+  7DB1             blankP2:
0124+  7DB1 86 F0       	ldaA	$F0
0125+  7DB3 9A 7C       	oraA	>displayBcd1 + 12
0126+  7DB5 97 7C       	staA	displayBcd1 + 12
0127+  7DB7 86 F0       	ldaA	$F0
0128+  7DB9 9A 7D       	oraA	>displayBcd1 + 13
0129+  7DBB 97 7D       	staA	displayBcd1 + 13
0130+  7DBD             blankP3:
0131+  7DBD 86 0F       	ldaA	$0F
0132+  7DBF 9A 74       	oraA	>displayBcd1 + 4
0133+  7DC1 97 74       	staA	displayBcd1 + 4
0134+  7DC3 86 0F       	ldaA	$0F
0135+  7DC5 9A 75       	oraA	>displayBcd1 + 5
0136+  7DC7 97 75       	staA	displayBcd1 + 5
0137+  7DC9             blankP4:
0138+  7DC9 86 0F       	ldaA	$0F
0139+  7DCB 9A 7C       	oraA	>displayBcd1 + 12
0140+  7DCD 97 7C       	staA	displayBcd1 + 12
0141+  7DCF 86 0F       	ldaA	$0F
0142+  7DD1 9A 7D       	oraA	>displayBcd1 + 13
0143+  7DD3 97 7D       	staA	displayBcd1 + 13
0144+  7DD5             blankDone:
0145+  7DD5 39          	rts
0146+  7DD6             	
0147+  7DD6             refreshPlayerScores:
0148+  7DD6 BD 7D 00    	jsr copyScores13
0149+  7DD9 BD 7D 45    	jsr copyScores24
0150+  7DDC             	
0151+  7DDC 86 F0       	ldaA	$F0
0152+  7DDE B1 01 50    	cmpA	>pA_1m
0153+  7DE1 26 29       	bne	refresh_1m
0154+  7DE3 B1 01 56    	cmpA	>pB_1m
0155+  7DE6 26 24       	bne	refresh_1m	
0156+  7DE8 B1 01 5C    	cmpA	>pC_1m
0157+  7DEB 26 1F       	bne	refresh_1m
0158+  7DED B1 01 62    	cmpA	>pD_1m
0159+  7DF0 26 1A       	bne	refresh_1m
0160+  7DF2             	
0161+  7DF2 CE 00 70    	ldX	displayBcd1
0162+  7DF5             refresh_10xloop:
0163+  7DF5 A6 01       	ldaA	1, X
0164+  7DF7 A7 00       	staA	0,X
0165+  7DF9 A6 09       	ldaA	8 + 1, X
0166+  7DFB A7 08       	staA	8, X
0167+  7DFD 08          	inX
0168+  7DFE 8C 00 75    	cpX	displayBcd1+5
0169+  7E01 26 F2       	bne	refresh_10xloop
0170+  7E03 86 00       	ldaA	0
0171+  7E05 97 75       	staA	displayBcd1 + 5
0172+  7E07 97 7D       	staA	displayBcd1 + 5 + 8
0173+  7E09 7E 7D 8A    	jmp blankNonPlayerScores
0174+  7E0C             refresh_1m:
0175+  7E0C 7E 7D 8A    	jmp blankNonPlayerScores
0176+  7E0F             	
0177+  7E0F             	
0178+  7E0F             ; add score instantly
0179+  7E0F             ; X = place in p*_1* to add the score to
0180+  7E0F             ; A = amount to add (max 9)
0181+  7E0F             ; tail call
0182+  7E0F             ; trashes ABX
0183+  7E0F             _addScoreI:
0184+  7E0F AB 00       	addA	0, X
0185+  7E11 8A F0       	oraA	11110000b
0186+  7E13             	ifcs ; overflowed, need to increment next number
0186+  7E13             
0186+  7E13 24 FE       
0187+  7E15 8B 06       		addA	6	; adjust A back into BCD
0188+  7E17 A7 00       		staA	0, X
0189+  7E19             addScore_carryOver:		; loop to propagate carry
0190+  7E19 09          		deX	; go to next decimal place
0191+  7E1A A6 00       		ldaA	0, X	
0192+  7E1C 8A F0       		oraA	11110000b
0193+  7E1E 81 F9       		cmpA	$F9
0194+  7E20             		ifeq			; if it's already a 9, reset it and carry again
0194+  7E20             
0194+  7E20 26 FE       
0195+  7E22 6F 00       			clr	0, X
0196+  7E24 27 F3       			beq addScore_carryOver
0197+  7E26             		else			; otherwise ++ it and done
0197+  7E26             
0197+  7E26             
0197+  7E26             
0197+  7E26             
0197+  7E21             
0197+  7E21             
0197+  7E21             
0197+  7E21~            		else			; otherwise ++ it and done
0197+  7E21~            		else			; otherwise ++ it and done
0197+  7E21~            		else			; otherwise ++ it and done
0197+  7E21~            		else			; otherwise ++ it and done
0197+  7E21             
0197+  7E21~            		else			; otherwise ++ it and done
0197+  7E21~            		else			; otherwise ++ it and done
0197+  7E21~            		else			; otherwise ++ it and done
0197+  7E21~            		else			; otherwise ++ it and done
0197+  7E21             
0197+  7E21             
0197+  7E21 06          
0197+  7E26             
0197+  7E26 20 FE       
0197+  7E28             
0197+  7E28             
0197+  7E28             
0197+  7E28~            		else			; otherwise ++ it and done
0197+  7E28~            		else			; otherwise ++ it and done
0197+  7E28~            		else			; otherwise ++ it and done
0197+  7E28~            		else			; otherwise ++ it and done
0197+  7E28~            		else			; otherwise ++ it and done
0197+  7E28             
0197+  7E28~            		else			; otherwise ++ it and done
0197+  7E28~            		else			; otherwise ++ it and done
0197+  7E28             
0197+  7E28~            		else			; otherwise ++ it and done
0197+  7E28~            		else			; otherwise ++ it and done
0197+  7E28             
0198+  7E28 6C 00       			inc	0, X
0199+  7E2A             		endif	
0199+  7E2A             
0199+  7E2A             
0199+  7E2A             
0199+  7E2A             
0199+  7E2A             
0199+  7E2A~            		endif	
0199+  7E2A~            		endif	
0199+  7E2A             
0199+  7E2A~            		endif	
0199+  7E2A~            		endif	
0199+  7E2A             
0199+  7E27             
0199+  7E27 02          
0199+  7E28             
0199+  7E28             
0199+  7E28~            		endif	
0199+  7E28~            		endif	
0199+  7E28~            		endif	
0199+  7E28             
0199+  7E2A             
0199+  7E2A~            		endif	
0199+  7E2A~            		endif	
0199+  7E2A             
0200+  7E2A             	else
0200+  7E2A             
0200+  7E2A             
0200+  7E2A             
0200+  7E2A             
0200+  7E14             
0200+  7E14             
0200+  7E14             
0200+  7E14~            	else
0200+  7E14~            	else
0200+  7E14~            	else
0200+  7E14~            	else
0200+  7E14             
0200+  7E14~            	else
0200+  7E14~            	else
0200+  7E14~            	else
0200+  7E14~            	else
0200+  7E14             
0200+  7E14             
0200+  7E14 17          
0200+  7E2A             
0200+  7E2A 20 FE       
0200+  7E2C             
0200+  7E2C             
0200+  7E2C             
0200+  7E2C~            	else
0200+  7E2C~            	else
0200+  7E2C~            	else
0200+  7E2C~            	else
0200+  7E2C~            	else
0200+  7E2C             
0200+  7E2C~            	else
0200+  7E2C~            	else
0200+  7E2C             
0200+  7E2C~            	else
0200+  7E2C~            	else
0200+  7E2C             
0201+  7E2C 81 F9       		cmpA	$F9
0202+  7E2E             		ifgt ; >9 -> need to adjust back into BCD
0202+  7E2E             
0202+  7E2E 23 FE       
0203+  7E30 8B 06       			addA	6
0204+  7E32 A7 00       			staA	0, X
0205+  7E34             addScore_carryDa:
0206+  7E34 09          			deX
0207+  7E35 A6 00       			ldaA	0, X
0208+  7E37 8A F0       			oraA	11110000b
0209+  7E39 81 F9       			cmpA	$F9
0210+  7E3B             			ifeq
0210+  7E3B             
0210+  7E3B 26 FE       
0211+  7E3D 6F 00       				clr	0, X
0212+  7E3F 27 F3       				beq 	addScore_carryDa
0213+  7E41             			else
0213+  7E41             
0213+  7E41             
0213+  7E41             
0213+  7E41             
0213+  7E3C             
0213+  7E3C             
0213+  7E3C             
0213+  7E3C~            			else
0213+  7E3C~            			else
0213+  7E3C~            			else
0213+  7E3C~            			else
0213+  7E3C             
0213+  7E3C~            			else
0213+  7E3C~            			else
0213+  7E3C~            			else
0213+  7E3C~            			else
0213+  7E3C             
0213+  7E3C             
0213+  7E3C 06          
0213+  7E41             
0213+  7E41 20 FE       
0213+  7E43             
0213+  7E43             
0213+  7E43             
0213+  7E43~            			else
0213+  7E43~            			else
0213+  7E43~            			else
0213+  7E43~            			else
0213+  7E43~            			else
0213+  7E43             
0213+  7E43~            			else
0213+  7E43~            			else
0213+  7E43             
0213+  7E43~            			else
0213+  7E43~            			else
0213+  7E43             
0214+  7E43 6C 00       				inc	0, X
0215+  7E45             			endif	
0215+  7E45             
0215+  7E45             
0215+  7E45             
0215+  7E45             
0215+  7E45             
0215+  7E45~            			endif	
0215+  7E45~            			endif	
0215+  7E45             
0215+  7E45~            			endif	
0215+  7E45~            			endif	
0215+  7E45             
0215+  7E42             
0215+  7E42 02          
0215+  7E43             
0215+  7E43             
0215+  7E43~            			endif	
0215+  7E43~            			endif	
0215+  7E43~            			endif	
0215+  7E43             
0215+  7E45             
0215+  7E45~            			endif	
0215+  7E45~            			endif	
0215+  7E45             
0216+  7E45             		else
0216+  7E45             
0216+  7E45             
0216+  7E45             
0216+  7E45             
0216+  7E2F             
0216+  7E2F             
0216+  7E2F             
0216+  7E2F~            		else
0216+  7E2F~            		else
0216+  7E2F~            		else
0216+  7E2F~            		else
0216+  7E2F             
0216+  7E2F~            		else
0216+  7E2F~            		else
0216+  7E2F~            		else
0216+  7E2F~            		else
0216+  7E2F             
0216+  7E2F             
0216+  7E2F 17          
0216+  7E45             
0216+  7E45 20 FE       
0216+  7E47             
0216+  7E47             
0216+  7E47             
0216+  7E47~            		else
0216+  7E47~            		else
0216+  7E47~            		else
0216+  7E47~            		else
0216+  7E47~            		else
0216+  7E47             
0216+  7E47~            		else
0216+  7E47~            		else
0216+  7E47             
0216+  7E47~            		else
0216+  7E47~            		else
0216+  7E47             
0217+  7E47 A7 00       			staA	0, X
0218+  7E49             		endif
0218+  7E49             
0218+  7E49             
0218+  7E49             
0218+  7E49             
0218+  7E49             
0218+  7E49~            		endif
0218+  7E49~            		endif
0218+  7E49             
0218+  7E49~            		endif
0218+  7E49~            		endif
0218+  7E49             
0218+  7E46             
0218+  7E46 02          
0218+  7E47             
0218+  7E47             
0218+  7E47~            		endif
0218+  7E47~            		endif
0218+  7E47~            		endif
0218+  7E47             
0218+  7E49             
0218+  7E49~            		endif
0218+  7E49~            		endif
0218+  7E49             
0219+  7E49             	endif
0219+  7E49             
0219+  7E49             
0219+  7E49             
0219+  7E49             
0219+  7E49             
0219+  7E49~            	endif
0219+  7E49~            	endif
0219+  7E49             
0219+  7E49~            	endif
0219+  7E49~            	endif
0219+  7E49             
0219+  7E2B             
0219+  7E2B 1D          
0219+  7E2C             
0219+  7E2C             
0219+  7E2C~            	endif
0219+  7E2C~            	endif
0219+  7E2C~            	endif
0219+  7E2C             
0219+  7E49             
0219+  7E49~            	endif
0219+  7E49~            	endif
0219+  7E49             
0220+  7E49             
0221+  7E49 7E 7D D6    	jmp refreshPlayerScores
0222+  7E4C             	
0223+  7E4C 39          	rts
0224+  7E4D             	
0225+  7E4D             ; t A,X
0226+  7E4D             setXToCurPlayer10:
0227+  7E4D 96 0F       	ldaA	>lc(8)
0228+  7E4F 85 01       	bitA	0001b
0229+  7E51 27 04       	beq	_addScore10N_p2
0230+  7E53 CE 01 55    	ldX	pA_10
0231+  7E56 39          	rts
0232+  7E57             _addScore10N_p2:
0233+  7E57 85 02       	bitA	0010b
0234+  7E59 27 04       	beq	_addScore10N_p3
0235+  7E5B CE 01 5B    	ldX	pB_10
0236+  7E5E 39          	rts
0237+  7E5F             _addScore10N_p3:
0238+  7E5F 85 04       	bitA	0100b
0239+  7E61 27 04       	beq	_addScore10N_p4
0240+  7E63 CE 01 61    	ldX	pC_10
0241+  7E66 39          	rts
0242+  7E67             _addScore10N_p4:
0243+  7E67 CE 01 67    	ldX	pD_10
0244+  7E6A 39          	rts
0245+  7E6B             
0246+  7E6B             ; suspends execution for A ms and returns to queue processor
0247+  7E6B             ; should only be called from switch callbacks
0248+  7E6B             ; trashes everything but B
0249+  7E6B             _delay:	
0250+  7E6B CE 00 7F    	ldX	waitLeft - 1
0251+  7E6E             delay_findEmptyLoop:
0252+  7E6E 08          	inX
0253+  7E6F 6D 00       	tst	0, X
0254+  7E71 26 FB       	bne 	delay_findEmptyLoop 
0255+  7E73             	
0256+  7E73             	; X = first waitLeft that = 0
0257+  7E73 E7 18       	staB	waitReg - waitLeft, X
0258+  7E75 33          	pulB	; B = MSB of PC
0259+  7E76 E7 08       	staB	waitMsb - waitLeft, X
0260+  7E78 33          	pulB	; B = LSB of PC
0261+  7E79 E7 10       	staB	waitLsb - waitLeft, X
0262+  7E7B A7 00       	staA	0, X
0263+  7E7D             	; time and add stored
0264+  7E7D 7E 7A 37    	jmp skipEvent
0265+  7E80             	
0266+  7E80             _fork:	
0267+  7E80 CE 00 7F    	ldX	waitLeft - 1
0268+  7E83             fork_findEmptyLoop:
0269+  7E83 08          	inX
0270+  7E84 6D 00       	tst	0, X
0271+  7E86 26 FB       	bne 	fork_findEmptyLoop 
0272+  7E88             	
0273+  7E88             	; X = first waitLeft that = 0
0274+  7E88 E7 18       	staB	waitReg - waitLeft, X
0275+  7E8A 33          	pulB	; B = MSB of PC
0276+  7E8B E7 08       	staB	waitMsb - waitLeft, X
0277+  7E8D 33          	pulB	; B = LSB of PC
0278+  7E8E CB 03       	addB	3
0279+  7E90             	ifcs
0279+  7E90             
0279+  7E90 24 FE       
0280+  7E92 6C 08       		inc	waitMsb - waitLeft, X
0281+  7E94             	endif
0281+  7E94             
0281+  7E94             
0281+  7E94             
0281+  7E94             
0281+  7E94             
0281+  7E94~            	endif
0281+  7E94~            	endif
0281+  7E94             
0281+  7E94~            	endif
0281+  7E94~            	endif
0281+  7E94             
0281+  7E91             
0281+  7E91 02          
0281+  7E92             
0281+  7E92             
0281+  7E92~            	endif
0281+  7E92~            	endif
0281+  7E92~            	endif
0281+  7E92             
0281+  7E94             
0281+  7E94~            	endif
0281+  7E94~            	endif
0281+  7E94             
0282+  7E94 E7 10       	staB	waitLsb - waitLeft, X
0283+  7E96 A7 00       	staA	0, X
0284+  7E98             	; time and add stored
0285+  7E98 C0 03       	subB	3
0286+  7E9A 37          	pshB
0287+  7E9B E6 08       	ldaB	waitMsb - waitLeft, X
0288+  7E9D             	ifcs
0288+  7E9D             
0288+  7E9D 24 FE       
0289+  7E9F 5A          		decB
0290+  7EA0             	endif
0290+  7EA0             
0290+  7EA0             
0290+  7EA0             
0290+  7EA0             
0290+  7EA0             
0290+  7EA0~            	endif
0290+  7EA0~            	endif
0290+  7EA0             
0290+  7EA0~            	endif
0290+  7EA0~            	endif
0290+  7EA0             
0290+  7E9E             
0290+  7E9E 01          
0290+  7E9F             
0290+  7E9F             
0290+  7E9F~            	endif
0290+  7E9F~            	endif
0290+  7E9F~            	endif
0290+  7E9F             
0290+  7EA0             
0290+  7EA0~            	endif
0290+  7EA0~            	endif
0290+  7EA0             
0291+  7EA0 37          	pshB
0292+  7EA1 39          	rts
0293+  7EA2             	
0294+  7EA2             	
0295+  7EA2             	
0296+  7EA2             resetScores:
0297+  7EA2 86 00       	ldaA	00
0298+  7EA4 CE 01 50    	ldX	pA_1m
0299+  7EA7             _zeroScores:
0300+  7EA7 A7 00       	staA	0, X
0301+  7EA9 08          	inX
0302+  7EAA 8C 01 68    	cpX	pD_10 + 1
0303+  7EAD 26 F8       	bne	_zeroScores
0304+  7EAF             	
0305+  7EAF 86 00       	ldaA	0
0306+  7EB1 97 12       	staA	curPlayer
0307+  7EB3 97 13       	staA	curPlayer + 1
0308+  7EB5 86 FF       	ldaA	$FF
0309+  7EB7 97 76       	staA	displayBcd1 + 6
0310+  7EB9 97 7E       	staA	displayBcd1 + 14
0311+  7EBB 97 7F       	staA	displayBcd1 + 15
0312+  7EBD             	
0313+  7EBD BD 7D D6    	jsr	refreshPlayerScores
0314+  7EC0 39          	rts
0315+  7EC1             
0316+  7EC1             ; trash ~B
0317+  7EC1             ; delay for ms (8-2000)
0318+  7EC1             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0319+  7EC1             ; makes a second thread that will skip the next (3b) instruction
0320+  7EC1             #DEFINE fork(ms) ldaA ms/8\ jsr _fork
0321+  7EC1             #DEFINE beginFork()	
0322+  7EC1             #DEFINE endFork()	ldX >forkX\ jmp afterFork
0323+  7EC1             	
0324+  7EC1             ; trashes B (max 104ms)
0325+  7EC1             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0326+  7EC1             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0327+  7EC1             
0328+  7EC1             ; trashes AX
0329+  7EC1             ; place: 1-5 = 10s thru 100ks
0330+  7EC1             ; amount: 1-9
0331+  7EC1             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0332+  7EC1             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0333+  7EC1             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0334+  7EC1             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0335+  7EC1             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0336+  7EC1             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0337+  7EC1             
0338+  7EC1             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0339+  7EC1             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0340+  7EC1             
0341+  7EC1             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0342+  7EC1             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0343+  7EC1             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0344+  7EC1             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0345+  7EC1             
0346+  7EC1             #include "attract.asm"
0001++ 7EC1             attractStart:
0002++ 7EC1 08          	.db 00001000b
0003++ 7EC2 18          	.db 00011000b
0004++ 7EC3 10          	.db 00010000b
0005++ 7EC4 80          	.db 10000000b
0006++ 7EC5 01          	.db 00000001b
0007++ 7EC6             	
0008++ 7EC6 50          	.db 01010000b
0009++ 7EC7 40          	.db 01000000b
0010++ 7EC8 08          	.db 00001000b
0011++ 7EC9 80          	.db 10000000b
0012++ 7ECA 03          	.db 00000011b
0013++ 7ECB             	
0014++ 7ECB 20          	.db 00100000b
0015++ 7ECC 28          	.db 00101000b
0016++ 7ECD 04          	.db 00000100b
0017++ 7ECE 80          	.db 10000000b
0018++ 7ECF 07          	.db 00000111b
0019++ 7ED0             	
0020++ 7ED0 44          	.db 01000100b
0021++ 7ED1 80          	.db 10000000b
0022++ 7ED2 02          	.db 00000010b
0023++ 7ED3 80          	.db 10000000b
0024++ 7ED4 0F          	.db 00001111b
0025++ 7ED5             	
0026++ 7ED5 08          	.db 00001000b
0027++ 7ED6 18          	.db 00011000b
0028++ 7ED7 01          	.db 00000001b
0029++ 7ED8 80          	.db 10000000b
0030++ 7ED9 1F          	.db 00011111b
0031++ 7EDA             	
0032++ 7EDA 50          	.db 01010000b
0033++ 7EDB 40          	.db 01000000b
0034++ 7EDC 02          	.db 00000010b
0035++ 7EDD 80          	.db 10000000b
0036++ 7EDE 3F          	.db 00111111b
0037++ 7EDF             	
0038++ 7EDF 20          	.db 00100000b
0039++ 7EE0 28          	.db 00101000b
0040++ 7EE1 04          	.db 00000100b
0041++ 7EE2 80          	.db 10000000b
0042++ 7EE3 7F          	.db 01111111b
0043++ 7EE4             	
0044++ 7EE4 44          	.db 01000100b
0045++ 7EE5 80          	.db 10000000b
0046++ 7EE6 08          	.db 00001000b
0047++ 7EE7 80          	.db 10000000b
0048++ 7EE8 FF          	.db 11111111b
0049++ 7EE9             attractEnd:0006   7EE9             
0007   7EE9             #include "game.asm"
0001+  7EE9             ; Laser Ball solenoids
0002+  7EE9             ;#DEFINE KICKOUT 		01
0003+  7EE9             ;#DEFINE LEFT_KICKER 	02
0004+  7EE9             ;#DEFINE DROP_LA			03
0005+  7EE9             ;#DEFINE DROP_SER		04
0006+  7EE9             ;#DEFINE EJECT_HOLE		05
0007+  7EE9             ;#DEFINE DROP_BA			06
0008+  7EE9             ;#DEFINE DROP_LL			07
0009+  7EE9             ;#DEFINE RIGHT_KICKER	08
0010+  7EE9             ;#DEFINE SOUND1			09 ; thru 13
0011+  7EE9             ;#DEFINE KNOCKER			14
0012+  7EE9             ;#DEFINE	FLASHERS		15
0013+  7EE9             ;#DEFINE COIN_LOCKOUT	16
0014+  7EE9             
0015+  7EE9             ; Hot Tip solenoids
0016+  7EE9             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7EE9             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7EE9             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7EE9             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7EE9             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7EE9             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7EE9             #DEFINE CHIME_10	SOL(09, 16)
0023+  7EE9             #DEFINE CHIME_100	SOL(10, 16)
0024+  7EE9             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7EE9             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7EE9             #DEFINE CLICKER		SOL(13, 8)
0027+  7EE9             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7EE9             #DEFINE BUZZER		SOL(15, 100)
0029+  7EE9             #DEFINE SHORT_PAUSE 	115
0030+  7EE9             
0031+  7EE9             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7EE9             #DEFINE done(v)	\
0033+  7EE9             #DEFCONT	#IF (v==0)
0034+  7EE9             #DEFCONT		\ ldaA 10b
0035+  7EE9             #DEFCONT		\ oraA >state
0036+  7EE9             #DEFCONT		\ staA state
0037+  7EE9             #DEFCONT	\#ENDIF
0038+  7EE9             #DEFCONT	\ jmp afterQueueEvent
0039+  7EE9             	
0040+  7EE9             	
0041+  7EE9             _addScore10N:
0042+  7EE9 BD 7E 4D    	jsr setXToCurPlayer10
0043+  7EEC 86 01       	ldaA	1
0044+  7EEE BD 7E 0F    	jsr _addScoreI
0045+  7EF1 86 02       	fireSolenoidA(CHIME_10)
0045+  7EF3 B7 01 48    
0046+  7EF6 39          	rts
0047+  7EF7             _addScore100N:
0048+  7EF7 BD 7E 4D    	jsr setXToCurPlayer10
0049+  7EFA 09          	deX
0050+  7EFB 86 01       	ldaA	1
0051+  7EFD BD 7E 0F    	jsr _addScoreI
0052+  7F00 86 02       	fireSolenoidA(CHIME_100)	
0052+  7F02 B7 01 49    
0053+  7F05 39          	rts
0054+  7F06             _addScore1000N:
0055+  7F06 BD 7E 4D    	jsr setXToCurPlayer10
0056+  7F09 09          	deX
0057+  7F0A 09          	deX
0058+  7F0B 86 01       	ldaA	1
0059+  7F0D BD 7E 0F    	jsr _addScoreI
0060+  7F10 86 02       	fireSolenoidA(CHIME_1000)
0060+  7F12 B7 01 4A    
0061+  7F15 39          	rts
0062+  7F16             #DEFINE score10() jsr _addScore10N
0063+  7F16             #DEFINE score100() jsr _addScore100N
0064+  7F16             #DEFINE score1000() jsr _addScore1000N
0065+  7F16             #DEFINE score500() \ jsr _addScore100N	
0066+  7F16             #DEFCONT	\ delay(SHORT_PAUSE)
0067+  7F16             #DEFCONT	\ jsr _addScore100N	
0068+  7F16             #DEFCONT	\ delay(SHORT_PAUSE)
0069+  7F16             #DEFCONT	\ jsr _addScore100N	
0070+  7F16             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7F16             #DEFCONT	\ jsr _addScore100N	
0072+  7F16             #DEFCONT	\ delay(SHORT_PAUSE)
0073+  7F16             #DEFCONT	\ jsr _addScore100N	
0074+  7F16             #DEFCONT	\ delay(SHORT_PAUSE)
0075+  7F16             
0076+  7F16             #DEFINE advBonus()	jsr advanceBonus
0077+  7F16             
0078+  7F16             advanceBonus:
0079+  7F16             	;ldaA	1000b
0080+  7F16             	;bitA	>state
0081+  7F16             	;ifne
0082+  7F16             	;	rts
0083+  7F16             	;endif
0084+  7F16 7C 00 B0    	inc 	p_Bonus
0085+  7F19 86 7F       	lampOff(8,5) ; 1k
0085+  7F1B 94 0C       
0085+  7F1D 97 0C       
0086+  7F1F C6 02       	ldaB	2
0087+  7F21 86 08       	fork(64)
0087+  7F23 BD 7E 80    
0088+  7F26 39          	rts
0089+  7F27 01          	nop
0090+  7F28 01          	nop
0091+  7F29             	beginFork()
0092+  7F29             advanceBonus_loop:
0093+  7F29 7A 00 B0    	dec	p_Bonus
0094+  7F2C BD 60 C3    	jsr 	bonusLights
0095+  7F2F 7C 00 B0    	inc	p_Bonus
0096+  7F32 86 FE       	ldaA	11111110b
0097+  7F34             	
0098+  7F34 37          	pshB
0099+  7F35 5A          	decB
0100+  7F36             inner:
0101+  7F36 5A          	decB
0102+  7F37 27 04       	beq	innerEnd
0103+  7F39 0D          	seC
0104+  7F3A 49          	rolA
0105+  7F3B 20 F9       	bra 	inner
0106+  7F3D             innerEnd:
0107+  7F3D 33          	pulB
0108+  7F3E             	
0109+  7F3E 94 0D       	andA	>lc(6)
0110+  7F40 97 0D       	staA	lc(6)
0111+  7F42 86 08       	delay(64)
0111+  7F44 BD 7E 6B    
0112+  7F47 5C          	incB
0113+  7F48 D1 B0       	cmpB	>p_Bonus
0114+  7F4A 2D DD       	blt	advanceBonus_loop
0115+  7F4C D6 B0       	ldaB	>p_Bonus
0116+  7F4E BD 60 C3    	jsr 	bonusLights
0117+  7F51 DE 2C       	endFork()
0117+  7F53 7E 79 52    
0118+  7F56             	
0119+  7F56             ; switch callbacks:
0120+  7F56             
0121+  60C0             none:	.org $6000 + 192 ; size of callback table
0122+  60C0             	done(1)
0122+  60C0~            	done(1)
0122+  60C0~            	done(1)
0122+  60C0~            	done(1)
0122+  60C0~            	done(1)
0122+  60C0             
0122+  60C0 7E 79 E6    
0123+  60C3             	
0124+  60C3             bonusLights:
0125+  60C3 7F 00 0C    	clr	lc(5)
0126+  60C6 7F 00 0D    	clr	lc(6)
0127+  60C9 7D 00 B0    	tst	>p_Bonus
0128+  60CC 27 11       	beq	bonusLights_done
0129+  60CE             	
0130+  60CE 86 80       	lampOn(8,5) ; 1k
0130+  60D0 9A 0C       
0130+  60D2 97 0C       
0131+  60D4             	
0132+  60D4 96 B0       	ldaA	>p_Bonus
0133+  60D6             bonusLights_loop:
0134+  60D6 4A          	decA
0135+  60D7 27 06       	beq 	bonusLights_done
0136+  60D9 0D          	seC
0137+  60DA 79 00 0D    	rol	lc(6)
0138+  60DD 20 F7       	bra	bonusLights_loop
0139+  60DF             	
0140+  60DF             bonusLights_done
0141+  60DF             
0142+  60DF 86 09       	ldaA	9
0143+  60E1 91 B0       	cmpA	>p_Bonus
0144+  60E3             	ifge	
0144+  60E3             
0144+  60E3 25 FE       
0145+  60E5             	else	; bonus >= 10?
0145+  60E5             
0145+  60E5             
0145+  60E5             
0145+  60E5             
0145+  60E4             
0145+  60E4             
0145+  60E4             
0145+  60E4~            	else	; bonus >= 10?
0145+  60E4~            	else	; bonus >= 10?
0145+  60E4~            	else	; bonus >= 10?
0145+  60E4~            	else	; bonus >= 10?
0145+  60E4             
0145+  60E4~            	else	; bonus >= 10?
0145+  60E4~            	else	; bonus >= 10?
0145+  60E4~            	else	; bonus >= 10?
0145+  60E4~            	else	; bonus >= 10?
0145+  60E4             
0145+  60E4             
0145+  60E4 02          
0145+  60E5             
0145+  60E5 20 FE       
0145+  60E7             
0145+  60E7             
0145+  60E7             
0145+  60E7~            	else	; bonus >= 10?
0145+  60E7~            	else	; bonus >= 10?
0145+  60E7~            	else	; bonus >= 10?
0145+  60E7~            	else	; bonus >= 10?
0145+  60E7~            	else	; bonus >= 10?
0145+  60E7             
0145+  60E7~            	else	; bonus >= 10?
0145+  60E7~            	else	; bonus >= 10?
0145+  60E7             
0145+  60E7~            	else	; bonus >= 10?
0145+  60E7~            	else	; bonus >= 10?
0145+  60E7             
0146+  60E7 86 0A       		ldaA	10
0147+  60E9 97 B0       		staA	p_Bonus
0148+  60EB 86 40       		lampOn(7,5) ; 10k light
0148+  60ED 9A 0C       
0148+  60EF 97 0C       
0149+  60F1             	endif
0149+  60F1             
0149+  60F1             
0149+  60F1             
0149+  60F1             
0149+  60F1             
0149+  60F1~            	endif
0149+  60F1~            	endif
0149+  60F1             
0149+  60F1~            	endif
0149+  60F1~            	endif
0149+  60F1             
0149+  60E6             
0149+  60E6 0A          
0149+  60E7             
0149+  60E7             
0149+  60E7~            	endif
0149+  60E7~            	endif
0149+  60E7~            	endif
0149+  60E7             
0149+  60F1             
0149+  60F1~            	endif
0149+  60F1~            	endif
0149+  60F1             
0150+  60F1             	
0151+  60F1 39          	rts
0152+  60F2             	
0153+  60F2             	
0154+  60F2             startBall:
0155+  60F2 DE 12       	ldX	>curPlayer
0156+  60F4 86 01       	ldaA	1
0157+  60F6 97 B0       	staA	p_Bonus
0158+  60F8 86 80       	lampOn(8,5)
0158+  60FA 9A 0C       
0158+  60FC 97 0C       
0159+  60FE B6 22 03    	enablePf
0159+  6101 8A 38       
0159+  6103 B7 22 03    
0160+  6106             	
0161+  6106 7F 00 B5    	clr	p_DropsDown
0162+  6109 86 41       	ldaA	65
0163+  610B 97 A9       	staA	dropResetTimer
0164+  610D             	
0165+  610D 7F 00 AA    	clr	dropsDown
0166+  6110             	
0167+  6110 C6 0C       	fireSolenoid(DROP_HOT)
0167+  6112 F7 01 42    
0168+  6115 86 12       	delay(150)
0168+  6117 BD 7E 6B    
0169+  611A C6 0C       	fireSolenoid(DROP_TIP)
0169+  611C F7 01 41    
0170+  611F 86 12       	delay(150)
0170+  6121 BD 7E 6B    
0171+  6124             	
0172+  6124 86 FF       	ldaA	$FF
0173+  6126 97 A8       	staA	lastSwitch
0174+  6128             	
0175+  6128             	; clear lights
0176+  6128 CE 00 08    	ldX	lampCol1
0177+  612B             lClearLights:
0178+  612B 6F 00       	clr	0, X
0179+  612D 6F 98       	clr	flashLampCol1 - lampCol1, X
0180+  612F 08          	inX
0181+  6130 8C 00 0E    	cpX	lc(6) + 1
0182+  6133 26 F6       	bne	lClearLights
0183+  6135             	;
0184+  6135             	
0185+  6135             	; init lights for player data
0186+  6135 DE 12       	ldX	>curPlayer
0187+  6137 A6 B1       	ldaA	p_Ejects, X
0188+  6139 97 0B       	staA	lc(4)
0189+  613B E6 B6       	ldaB	p_LampCol2, X
0190+  613D C5 02       	bitB	lr(2)
0191+  613F             	ifne 
0191+  613F             
0191+  613F 27 FE       
0192+  6141 86 02       		lampOn(2,3)
0192+  6143 9A 0A       
0192+  6145 97 0A       
0193+  6147 C4 FD       		andB	11111101b
0194+  6149             	endif
0194+  6149             
0194+  6149             
0194+  6149             
0194+  6149             
0194+  6149             
0194+  6149~            	endif
0194+  6149~            	endif
0194+  6149             
0194+  6149~            	endif
0194+  6149~            	endif
0194+  6149             
0194+  6140             
0194+  6140 08          
0194+  6141             
0194+  6141             
0194+  6141~            	endif
0194+  6141~            	endif
0194+  6141~            	endif
0194+  6141             
0194+  6149             
0194+  6149~            	endif
0194+  6149~            	endif
0194+  6149             
0195+  6149 D7 09       	staB	lc(2)
0196+  614B             	
0197+  614B 86 40       	ldaA	lr(7) ; shoot again
0198+  614D 95 0F       	bitA	>lc(8)
0199+  614F             	ifne
0199+  614F             
0199+  614F 27 FE       
0200+  6151 86 01       		lampOn(1,3) ; shoot again
0200+  6153 9A 0A       
0200+  6155 97 0A       
0201+  6157             	endif
0201+  6157             
0201+  6157             
0201+  6157             
0201+  6157             
0201+  6157             
0201+  6157~            	endif
0201+  6157~            	endif
0201+  6157             
0201+  6157~            	endif
0201+  6157~            	endif
0201+  6157             
0201+  6150             
0201+  6150 06          
0201+  6151             
0201+  6151             
0201+  6151~            	endif
0201+  6151~            	endif
0201+  6151~            	endif
0201+  6151             
0201+  6157             
0201+  6157~            	endif
0201+  6157~            	endif
0201+  6157             
0202+  6157             	
0203+  6157             	; flash player light
0204+  6157 86 0F       	ldaA	00001111b ; player up lights
0205+  6159 9A A7       	oraA	>flc(8)
0206+  615B 97 A7       	staA	flc(8)
0207+  615D             	
0208+  615D 86 01       	ldaA	sr(1) ; check outhole
0209+  615F 95 21       	bitA	>sc(2)
0210+  6161             	;ifne ; ball in hole
0211+  6161 C6 02       		fireSolenoid(OUTHOLE)
0211+  6163 F7 01 44    
0212+  6166             	;endif
0213+  6166             	
0214+  6166 39          	rts
0215+  6167             	
0216+  6167             	
0217+  6167             startGame:
0218+  6167 86 02       	lampOn(2,7) ; one player
0218+  6169 9A 0E       
0218+  616B 97 0E       
0219+  616D             	
0220+  616D 86 DF       	lampOff(6,8) ; game over
0220+  616F 94 0F       
0220+  6171 97 0F       
0221+  6173             	
0222+  6173 C6 02       	fireSolenoid(CHIME_10)
0222+  6175 F7 01 48    
0223+  6178 86 0E       	delay(SHORT_PAUSE)
0223+  617A BD 7E 6B    
0224+  617D C6 02       	fireSolenoid(CHIME_10)
0224+  617F F7 01 48    
0225+  6182 86 0E       	delay(SHORT_PAUSE)
0225+  6184 BD 7E 6B    
0226+  6187 C6 02       	fireSolenoid(CHIME_10)
0226+  6189 F7 01 48    
0227+  618C 86 19       	delay(200)
0227+  618E BD 7E 6B    
0228+  6191             	
0229+  6191 C6 02       	fireSolenoid(CHIME_10)
0229+  6193 F7 01 48    
0230+  6196 86 0E       	delay(SHORT_PAUSE)
0230+  6198 BD 7E 6B    
0231+  619B C6 02       	fireSolenoid(CHIME_10)
0231+  619D F7 01 48    
0232+  61A0 86 0E       	delay(SHORT_PAUSE)
0232+  61A2 BD 7E 6B    
0233+  61A5 C6 02       	fireSolenoid(CHIME_10)
0233+  61A7 F7 01 48    
0234+  61AA 86 19       	delay(200)
0234+  61AC BD 7E 6B    
0235+  61AF             	
0236+  61AF C6 02       	fireSolenoid(CHIME_10)
0236+  61B1 F7 01 48    
0237+  61B4 86 0E       	delay(SHORT_PAUSE)
0237+  61B6 BD 7E 6B    
0238+  61B9 C6 02       	fireSolenoid(CHIME_10)
0238+  61BB F7 01 48    
0239+  61BE 86 0E       	delay(SHORT_PAUSE)
0239+  61C0 BD 7E 6B    
0240+  61C3 C6 02       	fireSolenoid(CHIME_100)
0240+  61C5 F7 01 49    
0241+  61C8 86 19       	delay(200)
0241+  61CA BD 7E 6B    
0242+  61CD C6 02       	fireSolenoid(CHIME_1000)
0242+  61CF F7 01 4A    
0243+  61D2 86 19       	delay(200)
0243+  61D4 BD 7E 6B    
0244+  61D7 C6 02       	fireSolenoid(CHIME_10k)
0244+  61D9 F7 01 4B    
0245+  61DC 86 12       	delay(150)
0245+  61DE BD 7E 6B    
0246+  61E1             	
0247+  61E1             	; reset scores
0248+  61E1 BD 7E A2    	jsr 	resetScores
0249+  61E4             	
0250+  61E4             	; reset ball count
0251+  61E4 86 10       	ldaA	$10
0252+  61E6 97 77       	staA	ballCount	
0253+  61E8             
0254+  61E8 C6 00       	ldaB	0
0255+  61EA D7 13       	staB	curPlayer + 1
0256+  61EC             	
0257+  61EC D7 0E       	staB	lc(7)
0258+  61EE D7 0F       	staB	lc(8)
0259+  61F0 D7 A6       	staB	flc(7)
0260+  61F2 D7 A7       	staB	flc(8)
0261+  61F4             	
0262+  61F4 CE 00 00    	ldX	0
0263+  61F7             lInitPlayers:
0264+  61F7 C6 01       	ldaB	lr(1)
0265+  61F9 E7 B1       	staB	p_Ejects, X
0266+  61FB C6 00       	ldaB	0
0267+  61FD E7 B6       	staB	p_LampCol2, X
0268+  61FF 08          	inX
0269+  6200 8C 00 04    	cpX	4
0270+  6203 26 F2       	bne	lInitPlayers
0271+  6205             	
0272+  6205 BD 60 F2    	jsr	startBall
0273+  6208             	
0274+  6208             	; invalidate playfield
0275+  6208 86 01       	ldaA	lr(1)
0276+  620A 9A 0F       	oraA	>lc(8)
0277+  620C 97 0F       	staA	lc(8)
0278+  620E             	
0279+  620E 86 02       	lampOn(2,7) ; one player
0279+  6210 9A 0E       
0279+  6212 97 0E       
0280+  6214             	
0281+  6214 86 DF       	lampOff(6,8) ; game over
0281+  6216 94 0F       
0281+  6218 97 0F       
0282+  621A             	
0283+  621A 39          	rts
0284+  621B             	
0285+  621B             
0286+  621B             	
0287+  621B             swTilt: 
0288+  621B 86 10       	lampOn(5,8) ; tilt
0288+  621D 9A 0F       
0288+  621F 97 0F       
0289+  6221 B6 22 03    	disablePf
0289+  6224 84 F7       
0289+  6226 B7 22 03    
0290+  6229             	done(0)
0290+  6229             
0290+  6229 86 02       
0290+  622B BA 01 6B    
0290+  622E B7 01 6B    
0290+  6231             
0290+  6231 7E 79 E6    
0291+  6234             	
0292+  6234             swStart: 
0293+  6234 96 0F       	ldaA >lc(8)
0294+  6236 85 20       	bitA lr(6)
0295+  6238             	ifne ; in game over
0295+  6238             
0295+  6238 27 FE       
0296+  623A BD 61 67    		jsr startGame
0297+  623D             	else 
0297+  623D             
0297+  623D             
0297+  623D             
0297+  623D             
0297+  6239             
0297+  6239             
0297+  6239             
0297+  6239~            	else 
0297+  6239~            	else 
0297+  6239~            	else 
0297+  6239~            	else 
0297+  6239             
0297+  6239~            	else 
0297+  6239~            	else 
0297+  6239~            	else 
0297+  6239~            	else 
0297+  6239             
0297+  6239             
0297+  6239 05          
0297+  623D             
0297+  623D 20 FE       
0297+  623F             
0297+  623F             
0297+  623F             
0297+  623F~            	else 
0297+  623F~            	else 
0297+  623F~            	else 
0297+  623F~            	else 
0297+  623F~            	else 
0297+  623F             
0297+  623F~            	else 
0297+  623F~            	else 
0297+  623F             
0297+  623F~            	else 
0297+  623F~            	else 
0297+  623F             
0298+  623F 86 10       		ldaA	$10
0299+  6241 91 77       		cmpA	>ballCount
0300+  6243             		ifeq ; add player
0300+  6243             
0300+  6243 26 FE       
0301+  6245 86 1E       			ldaA	00011110b
0302+  6247 94 0E       			andA	>lc(7) ; player count lights
0303+  6249 85 10       			bitA	lr(5)
0304+  624B             			ifeq	; if not on P4 already, add player
0304+  624B             
0304+  624B 26 FE       
0305+  624D 48          				aslA
0306+  624E C6 E1       				ldaB	11100001b
0307+  6250 D4 0E       				andB	>lc(7)
0308+  6252 D7 0E       				staB	lc(7)
0309+  6254 9A 0E       				oraA	>lc(7)
0310+  6256 97 0E       				staA	lc(7)
0311+  6258             			endif
0311+  6258             
0311+  6258             
0311+  6258             
0311+  6258             
0311+  6258             
0311+  6258~            			endif
0311+  6258~            			endif
0311+  6258             
0311+  6258~            			endif
0311+  6258~            			endif
0311+  6258             
0311+  624C             
0311+  624C 0B          
0311+  624D             
0311+  624D             
0311+  624D~            			endif
0311+  624D~            			endif
0311+  624D~            			endif
0311+  624D             
0311+  6258             
0311+  6258~            			endif
0311+  6258~            			endif
0311+  6258             
0312+  6258             		else ; restart game
0312+  6258             
0312+  6258             
0312+  6258             
0312+  6258             
0312+  6244             
0312+  6244             
0312+  6244             
0312+  6244~            		else ; restart game
0312+  6244~            		else ; restart game
0312+  6244~            		else ; restart game
0312+  6244~            		else ; restart game
0312+  6244             
0312+  6244~            		else ; restart game
0312+  6244~            		else ; restart game
0312+  6244~            		else ; restart game
0312+  6244~            		else ; restart game
0312+  6244             
0312+  6244             
0312+  6244 15          
0312+  6258             
0312+  6258 20 FE       
0312+  625A             
0312+  625A             
0312+  625A             
0312+  625A~            		else ; restart game
0312+  625A~            		else ; restart game
0312+  625A~            		else ; restart game
0312+  625A~            		else ; restart game
0312+  625A~            		else ; restart game
0312+  625A             
0312+  625A~            		else ; restart game
0312+  625A~            		else ; restart game
0312+  625A             
0312+  625A~            		else ; restart game
0312+  625A~            		else ; restart game
0312+  625A             
0313+  625A BD 61 67    			jsr startGame
0314+  625D             		endif		
0314+  625D             
0314+  625D             
0314+  625D             
0314+  625D             
0314+  625D             
0314+  625D~            		endif		
0314+  625D~            		endif		
0314+  625D             
0314+  625D~            		endif		
0314+  625D~            		endif		
0314+  625D             
0314+  6259             
0314+  6259 03          
0314+  625A             
0314+  625A             
0314+  625A~            		endif		
0314+  625A~            		endif		
0314+  625A~            		endif		
0314+  625A             
0314+  625D             
0314+  625D~            		endif		
0314+  625D~            		endif		
0314+  625D             
0315+  625D             	endif
0315+  625D             
0315+  625D             
0315+  625D             
0315+  625D             
0315+  625D             
0315+  625D~            	endif
0315+  625D~            	endif
0315+  625D             
0315+  625D~            	endif
0315+  625D~            	endif
0315+  625D             
0315+  623E             
0315+  623E 1E          
0315+  623F             
0315+  623F             
0315+  623F~            	endif
0315+  623F~            	endif
0315+  623F~            	endif
0315+  623F             
0315+  625D             
0315+  625D~            	endif
0315+  625D~            	endif
0315+  625D             
0316+  625D             	
0317+  625D BD 7D D6    	jsr refreshPlayerScores
0318+  6260             	
0319+  6260             	done(0)
0319+  6260             
0319+  6260 86 02       
0319+  6262 BA 01 6B    
0319+  6265 B7 01 6B    
0319+  6268             
0319+  6268 7E 79 E6    
0320+  626B             	
0321+  626B             swOuthole: 
0322+  626B 7C 00 C0    	inc	$C0
0323+  626E 96 0F       	ldaA	>lc(8) ; !game over
0324+  6270 85 20       	bitA	lr(6)
0325+  6272             	ifne ; game over
0325+  6272             
0325+  6272 27 FE       
0326+  6274             		done(0)
0326+  6274             
0326+  6274 86 02       
0326+  6276 BA 01 6B    
0326+  6279 B7 01 6B    
0326+  627C             
0326+  627C 7E 79 E6    
0327+  627F             	endif
0327+  627F             
0327+  627F             
0327+  627F             
0327+  627F             
0327+  627F             
0327+  627F~            	endif
0327+  627F~            	endif
0327+  627F             
0327+  627F~            	endif
0327+  627F~            	endif
0327+  627F             
0327+  6273             
0327+  6273 0B          
0327+  6274             
0327+  6274             
0327+  6274~            	endif
0327+  6274~            	endif
0327+  6274~            	endif
0327+  6274             
0327+  627F             
0327+  627F~            	endif
0327+  627F~            	endif
0327+  627F             
0328+  627F             	
0329+  627F 7D 00 BF    	tst	>bonusTimer
0330+  6282             	ifne
0330+  6282             
0330+  6282 27 FE       
0331+  6284             		done(0)
0331+  6284             
0331+  6284 86 02       
0331+  6286 BA 01 6B    
0331+  6289 B7 01 6B    
0331+  628C             
0331+  628C 7E 79 E6    
0332+  628F             	else
0332+  628F             
0332+  628F             
0332+  628F             
0332+  628F             
0332+  6283             
0332+  6283             
0332+  6283             
0332+  6283~            	else
0332+  6283~            	else
0332+  6283~            	else
0332+  6283~            	else
0332+  6283             
0332+  6283~            	else
0332+  6283~            	else
0332+  6283~            	else
0332+  6283~            	else
0332+  6283             
0332+  6283             
0332+  6283 0D          
0332+  628F             
0332+  628F 20 FE       
0332+  6291             
0332+  6291             
0332+  6291             
0332+  6291~            	else
0332+  6291~            	else
0332+  6291~            	else
0332+  6291~            	else
0332+  6291~            	else
0332+  6291             
0332+  6291~            	else
0332+  6291~            	else
0332+  6291             
0332+  6291~            	else
0332+  6291~            	else
0332+  6291             
0333+  6291 86 7F       		ldaA	127
0334+  6293 97 BF       		staA	bonusTimer
0335+  6295             	endif
0335+  6295             
0335+  6295             
0335+  6295             
0335+  6295             
0335+  6295             
0335+  6295~            	endif
0335+  6295~            	endif
0335+  6295             
0335+  6295~            	endif
0335+  6295~            	endif
0335+  6295             
0335+  6290             
0335+  6290 04          
0335+  6291             
0335+  6291             
0335+  6291~            	endif
0335+  6291~            	endif
0335+  6291~            	endif
0335+  6291             
0335+  6295             
0335+  6295~            	endif
0335+  6295~            	endif
0335+  6295             
0336+  6295 86 4B       	delay(600)
0336+  6297 BD 7E 6B    
0337+  629A             	
0338+  629A             	; check ballsave
0339+  629A 86 01       	ldaA	lr(1)
0340+  629C 95 0A       	bitA	>lc(3)
0341+  629E             	ifne	; shoot again on
0341+  629E             
0341+  629E 27 FE       
0342+  62A0 95 A2       		bitA	>flc(3)
0343+  62A2             		ifne ; shoot again flashing
0343+  62A2             
0343+  62A2 27 FE       
0344+  62A4             			; turn off used special
0345+  62A4 86 80       			ldaA	lr(8) ; right special
0346+  62A6 95 09       			bitA	>lc(2)
0347+  62A8             			ifne
0347+  62A8             
0347+  62A8 27 FE       
0348+  62AA 86 7F       				lampOff(8,2)
0348+  62AC 94 09       
0348+  62AE 97 09       
0349+  62B0 86 7F       				flashOff(8,2)
0349+  62B2 94 A1       
0349+  62B4 97 A1       
0350+  62B6             			endif
0350+  62B6             
0350+  62B6             
0350+  62B6             
0350+  62B6             
0350+  62B6             
0350+  62B6~            			endif
0350+  62B6~            			endif
0350+  62B6             
0350+  62B6~            			endif
0350+  62B6~            			endif
0350+  62B6             
0350+  62A9             
0350+  62A9 0C          
0350+  62AA             
0350+  62AA             
0350+  62AA~            			endif
0350+  62AA~            			endif
0350+  62AA~            			endif
0350+  62AA             
0350+  62B6             
0350+  62B6~            			endif
0350+  62B6~            			endif
0350+  62B6             
0351+  62B6 86 02       			ldaA	lr(2) ; right special
0352+  62B8 95 0A       			bitA	>lc(3)
0353+  62BA             			ifne
0353+  62BA             
0353+  62BA 27 FE       
0354+  62BC 86 FD       				lampOff(2,3)
0354+  62BE 94 0A       
0354+  62C0 97 0A       
0355+  62C2 86 FD       				flashOff(2,3)
0355+  62C4 94 A2       
0355+  62C6 97 A2       
0356+  62C8             			endif
0356+  62C8             
0356+  62C8             
0356+  62C8             
0356+  62C8             
0356+  62C8             
0356+  62C8~            			endif
0356+  62C8~            			endif
0356+  62C8             
0356+  62C8~            			endif
0356+  62C8~            			endif
0356+  62C8             
0356+  62BB             
0356+  62BB 0C          
0356+  62BC             
0356+  62BC             
0356+  62BC~            			endif
0356+  62BC~            			endif
0356+  62BC~            			endif
0356+  62BC             
0356+  62C8             
0356+  62C8~            			endif
0356+  62C8~            			endif
0356+  62C8             
0357+  62C8             			
0358+  62C8             			; flash player light
0359+  62C8 86 0F       			ldaA	00001111b ; player up lights
0360+  62CA 9A A7       			oraA	>flc(8)
0361+  62CC 97 A7       			staA	flc(8)
0362+  62CE             		endif
0362+  62CE             
0362+  62CE             
0362+  62CE             
0362+  62CE             
0362+  62CE             
0362+  62CE~            		endif
0362+  62CE~            		endif
0362+  62CE             
0362+  62CE~            		endif
0362+  62CE~            		endif
0362+  62CE             
0362+  62A3             
0362+  62A3 2A          
0362+  62A4             
0362+  62A4             
0362+  62A4~            		endif
0362+  62A4~            		endif
0362+  62A4~            		endif
0362+  62A4             
0362+  62CE             
0362+  62CE~            		endif
0362+  62CE~            		endif
0362+  62CE             
0363+  62CE             	endif
0363+  62CE             
0363+  62CE             
0363+  62CE             
0363+  62CE             
0363+  62CE             
0363+  62CE~            	endif
0363+  62CE~            	endif
0363+  62CE             
0363+  62CE~            	endif
0363+  62CE~            	endif
0363+  62CE             
0363+  629F             
0363+  629F 2E          
0363+  62A0             
0363+  62A0             
0363+  62A0~            	endif
0363+  62A0~            	endif
0363+  62A0~            	endif
0363+  62A0             
0363+  62CE             
0363+  62CE~            	endif
0363+  62CE~            	endif
0363+  62CE             
0364+  62CE             	
0365+  62CE 86 0F       	ldaA	00001111b ; player up lights
0366+  62D0 95 A7       	bitA	>flc(8)	; check if any player is flashing
0367+  62D2             	ifne ; any flashing -> playfield invalid
0367+  62D2             
0367+  62D2 27 FE       
0368+  62D4             swOuthole_save:
0369+  62D4 86 EF       		lampOff(5,8) ; tilt
0369+  62D6 94 0F       
0369+  62D8 97 0F       
0370+  62DA             		
0371+  62DA B6 22 03    		enablePf
0371+  62DD 8A 38       
0371+  62DF B7 22 03    
0372+  62E2 C6 02       		fireSolenoid(OUTHOLE)
0372+  62E4 F7 01 44    
0373+  62E7             	else ; none flashing -> playfield valid -> end ball			
0373+  62E7             
0373+  62E7             
0373+  62E7             
0373+  62E7             
0373+  62D3             
0373+  62D3             
0373+  62D3             
0373+  62D3~            	else ; none flashing -> playfield valid -> end ball			
0373+  62D3~            	else ; none flashing -> playfield valid -> end ball			
0373+  62D3~            	else ; none flashing -> playfield valid -> end ball			
0373+  62D3~            	else ; none flashing -> playfield valid -> end ball			
0373+  62D3             
0373+  62D3~            	else ; none flashing -> playfield valid -> end ball			
0373+  62D3~            	else ; none flashing -> playfield valid -> end ball			
0373+  62D3~            	else ; none flashing -> playfield valid -> end ball			
0373+  62D3~            	else ; none flashing -> playfield valid -> end ball			
0373+  62D3             
0373+  62D3             
0373+  62D3 15          
0373+  62E7             
0373+  62E7 20 FE       
0373+  62E9             
0373+  62E9             
0373+  62E9             
0373+  62E9~            	else ; none flashing -> playfield valid -> end ball			
0373+  62E9~            	else ; none flashing -> playfield valid -> end ball			
0373+  62E9~            	else ; none flashing -> playfield valid -> end ball			
0373+  62E9~            	else ; none flashing -> playfield valid -> end ball			
0373+  62E9~            	else ; none flashing -> playfield valid -> end ball			
0373+  62E9             
0373+  62E9~            	else ; none flashing -> playfield valid -> end ball			
0373+  62E9~            	else ; none flashing -> playfield valid -> end ball			
0373+  62E9             
0373+  62E9~            	else ; none flashing -> playfield valid -> end ball			
0373+  62E9~            	else ; none flashing -> playfield valid -> end ball			
0373+  62E9             
0374+  62E9             swOuthole_bonusLoop:
0375+  62E9 BD 7F 06    		score1000()
0376+  62EC 96 09       		ldaA	>lc(2) ; double bonus
0377+  62EE 85 04       		bitA	lr(3)
0378+  62F0             		ifne 
0378+  62F0             
0378+  62F0 27 FE       
0379+  62F2 86 0C       			delay(100)
0379+  62F4 BD 7E 6B    
0380+  62F7 BD 7F 06    			score1000()
0381+  62FA             		endif
0381+  62FA             
0381+  62FA             
0381+  62FA             
0381+  62FA             
0381+  62FA             
0381+  62FA~            		endif
0381+  62FA~            		endif
0381+  62FA             
0381+  62FA~            		endif
0381+  62FA~            		endif
0381+  62FA             
0381+  62F1             
0381+  62F1 08          
0381+  62F2             
0381+  62F2             
0381+  62F2~            		endif
0381+  62F2~            		endif
0381+  62F2~            		endif
0381+  62F2             
0381+  62FA             
0381+  62FA~            		endif
0381+  62FA~            		endif
0381+  62FA             
0382+  62FA 7A 00 B0    		dec	p_Bonus
0383+  62FD BD 60 C3    		jsr	bonusLights
0384+  6300 86 19       		delay(200)
0384+  6302 BD 7E 6B    
0385+  6305 7D 00 B0    		tst	>p_Bonus
0386+  6308 26 DF       		bne	swOuthole_bonusLoop
0387+  630A             	
0388+  630A 86 0F       		ldaA	00001111b ; player up lights
0389+  630C 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0390+  630E D6 0A       		ldaB	>lc(3) ; check shoot again light
0391+  6310 C5 01       		bitB	lr(1)
0392+  6312             		ifeq ; shoot again not lit
0392+  6312             
0392+  6312 26 FE       
0393+  6314             			; store player's data
0394+  6314 DE 12       			ldX	>curPlayer
0395+  6316 D6 0B       			ldaB	>lc(4)
0396+  6318 E7 B1       			staB	p_Ejects, X
0397+  631A D6 0A       			ldaB	>lc(3)
0398+  631C C4 02       			andB	lr(2)
0399+  631E DA 09       			oraB	>lc(2)
0400+  6320 E7 B6       			staB	p_LampCol2, X
0401+  6322             			
0402+  6322             		
0403+  6322             			; go to next player
0404+  6322 48          			aslA
0405+  6323 7C 00 13    			inc	curPlayer + 1
0406+  6326 95 0E       			bitA	>lc(7)	; is player count < player #
0407+  6328             			ifne ; last player
0407+  6328             
0407+  6328 27 FE       
0408+  632A 86 01       				ldaA	00000001b; ; back to player 1
0409+  632C C6 00       				ldaB	0
0410+  632E D7 13       				staB	curPlayer + 1
0411+  6330             				
0412+  6330             				; increase ball count
0413+  6330 D6 77       				ldaB	>ballCount
0414+  6332 CB 10       				addB	$10
0415+  6334 C1 40       				cmpB	$40
0416+  6336             				ifeq ; game over
0416+  6336             
0416+  6336 26 FE       
0417+  6338 86 20       					lampOn(6,8)
0417+  633A 9A 0F       
0417+  633C 97 0F       
0418+  633E B6 22 03    					disablePf
0418+  6341 84 F7       
0418+  6343 B7 22 03    
0419+  6346             					done(1)
0419+  6346~            					done(1)
0419+  6346~            					done(1)
0419+  6346~            					done(1)
0419+  6346~            					done(1)
0419+  6346             
0419+  6346 7E 79 E6    
0420+  6349             				else
0420+  6349             
0420+  6349             
0420+  6349             
0420+  6349             
0420+  6337             
0420+  6337             
0420+  6337             
0420+  6337~            				else
0420+  6337~            				else
0420+  6337~            				else
0420+  6337~            				else
0420+  6337             
0420+  6337~            				else
0420+  6337~            				else
0420+  6337~            				else
0420+  6337~            				else
0420+  6337             
0420+  6337             
0420+  6337 13          
0420+  6349             
0420+  6349 20 FE       
0420+  634B             
0420+  634B             
0420+  634B             
0420+  634B~            				else
0420+  634B~            				else
0420+  634B~            				else
0420+  634B~            				else
0420+  634B~            				else
0420+  634B             
0420+  634B~            				else
0420+  634B~            				else
0420+  634B             
0420+  634B~            				else
0420+  634B~            				else
0420+  634B             
0421+  634B D7 77       					staB	ballCount
0422+  634D             				endif		
0422+  634D             
0422+  634D             
0422+  634D             
0422+  634D             
0422+  634D             
0422+  634D~            				endif		
0422+  634D~            				endif		
0422+  634D             
0422+  634D~            				endif		
0422+  634D~            				endif		
0422+  634D             
0422+  634A             
0422+  634A 02          
0422+  634B             
0422+  634B             
0422+  634B~            				endif		
0422+  634B~            				endif		
0422+  634B~            				endif		
0422+  634B             
0422+  634D             
0422+  634D~            				endif		
0422+  634D~            				endif		
0422+  634D             
0423+  634D             			endif
0423+  634D             
0423+  634D             
0423+  634D             
0423+  634D             
0423+  634D             
0423+  634D~            			endif
0423+  634D~            			endif
0423+  634D             
0423+  634D~            			endif
0423+  634D~            			endif
0423+  634D             
0423+  6329             
0423+  6329 23          
0423+  632A             
0423+  632A             
0423+  632A~            			endif
0423+  632A~            			endif
0423+  632A~            			endif
0423+  632A             
0423+  634D             
0423+  634D~            			endif
0423+  634D~            			endif
0423+  634D             
0424+  634D             			
0425+  634D 97 0F       			staA	lc(8)
0426+  634F             		endif
0426+  634F             
0426+  634F             
0426+  634F             
0426+  634F             
0426+  634F             
0426+  634F~            		endif
0426+  634F~            		endif
0426+  634F             
0426+  634F~            		endif
0426+  634F~            		endif
0426+  634F             
0426+  6313             
0426+  6313 3B          
0426+  6314             
0426+  6314             
0426+  6314~            		endif
0426+  6314~            		endif
0426+  6314~            		endif
0426+  6314             
0426+  634F             
0426+  634F~            		endif
0426+  634F~            		endif
0426+  634F             
0427+  634F             		
0428+  634F BD 60 F2    		jsr	startBall
0429+  6352             	endif	
0429+  6352             
0429+  6352             
0429+  6352             
0429+  6352             
0429+  6352             
0429+  6352~            	endif	
0429+  6352~            	endif	
0429+  6352             
0429+  6352~            	endif	
0429+  6352~            	endif	
0429+  6352             
0429+  62E8             
0429+  62E8 69          
0429+  62E9             
0429+  62E9             
0429+  62E9~            	endif	
0429+  62E9~            	endif	
0429+  62E9~            	endif	
0429+  62E9             
0429+  6352             
0429+  6352~            	endif	
0429+  6352~            	endif	
0429+  6352             
0430+  6352             	
0431+  6352 7F 00 BF    	clr 	bonusTimer
0432+  6355             	
0433+  6355             	done(0)
0433+  6355             
0433+  6355 86 02       
0433+  6357 BA 01 6B    
0433+  635A B7 01 6B    
0433+  635D             
0433+  635D 7E 79 E6    
0434+  6360             	
0435+  6360             swLeftEject:
0436+  6360 96 0F       	ldaA	>lc(8)
0437+  6362 85 20       	bitA	lr(6)
0438+  6364             	ifne ; not in game
0438+  6364             
0438+  6364 27 FE       
0439+  6366 C6 03       		fireSolenoid(LEFT_EJECT)
0439+  6368 F7 01 43    
0440+  636B             		done(0)
0440+  636B             
0440+  636B 86 02       
0440+  636D BA 01 6B    
0440+  6370 B7 01 6B    
0440+  6373             
0440+  6373 7E 79 E6    
0441+  6376             	endif
0441+  6376             
0441+  6376             
0441+  6376             
0441+  6376             
0441+  6376             
0441+  6376~            	endif
0441+  6376~            	endif
0441+  6376             
0441+  6376~            	endif
0441+  6376~            	endif
0441+  6376             
0441+  6365             
0441+  6365 10          
0441+  6366             
0441+  6366             
0441+  6366~            	endif
0441+  6366~            	endif
0441+  6366~            	endif
0441+  6366             
0441+  6376             
0441+  6376~            	endif
0441+  6376~            	endif
0441+  6376             
0442+  6376             		
0443+  6376 BD 7F 16    	advBonus()
0444+  6379 86 04       	ldaA	lr(3) ; extra ball
0445+  637B 95 0A       	bitA	>lc(3)
0446+  637D             	ifne
0446+  637D             
0446+  637D 27 FE       
0447+  637F C6 06       		fireSolenoid(KNOCKER)
0447+  6381 F7 01 4D    
0448+  6384 86 01       		lampOn(1,3) ; shoot again
0448+  6386 9A 0A       
0448+  6388 97 0A       
0449+  638A 86 40       		lampOn(7,8)
0449+  638C 9A 0F       
0449+  638E 97 0F       
0450+  6390 86 FB       		lampOff(3,3) ; extra ball
0450+  6392 94 0A       
0450+  6394 97 0A       
0451+  6396 86 3E       		delay(500)
0451+  6398 BD 7E 6B    
0452+  639B             	else
0452+  639B             
0452+  639B             
0452+  639B             
0452+  639B             
0452+  637E             
0452+  637E             
0452+  637E             
0452+  637E~            	else
0452+  637E~            	else
0452+  637E~            	else
0452+  637E~            	else
0452+  637E             
0452+  637E~            	else
0452+  637E~            	else
0452+  637E~            	else
0452+  637E~            	else
0452+  637E             
0452+  637E             
0452+  637E 1E          
0452+  639B             
0452+  639B 20 FE       
0452+  639D             
0452+  639D             
0452+  639D             
0452+  639D~            	else
0452+  639D~            	else
0452+  639D~            	else
0452+  639D~            	else
0452+  639D~            	else
0452+  639D             
0452+  639D~            	else
0452+  639D~            	else
0452+  639D             
0452+  639D~            	else
0452+  639D~            	else
0452+  639D             
0453+  639D BD 67 9D    		jsr	addCollect
0454+  63A0             		score500()
0454+  63A0 BD 7E F7    
0454+  63A3 86 0E       
0454+  63A5 BD 7E 6B    
0454+  63A8 BD 7E F7    
0454+  63AB 86 0E       
0454+  63AD BD 7E 6B    
0454+  63B0 BD 7E F7    
0454+  63B3 86 0E       
0454+  63B5 BD 7E 6B    
0454+  63B8 BD 7E F7    
0454+  63BB 86 0E       
0454+  63BD BD 7E 6B    
0454+  63C0 BD 7E F7    
0454+  63C3 86 0E       
0454+  63C5 BD 7E 6B    
0455+  63C8             	endif
0455+  63C8             
0455+  63C8             
0455+  63C8             
0455+  63C8             
0455+  63C8             
0455+  63C8~            	endif
0455+  63C8~            	endif
0455+  63C8             
0455+  63C8~            	endif
0455+  63C8~            	endif
0455+  63C8             
0455+  639C             
0455+  639C 2B          
0455+  639D             
0455+  639D             
0455+  639D~            	endif
0455+  639D~            	endif
0455+  639D~            	endif
0455+  639D             
0455+  63C8             
0455+  63C8~            	endif
0455+  63C8~            	endif
0455+  63C8             
0456+  63C8 C6 03       	fireSolenoid(LEFT_EJECT)
0456+  63CA F7 01 43    
0457+  63CD             	
0458+  63CD 86 32       	fork(400)
0458+  63CF BD 7E 80    
0459+  63D2             	done(1)
0459+  63D2~            	done(1)
0459+  63D2~            	done(1)
0459+  63D2~            	done(1)
0459+  63D2~            	done(1)
0459+  63D2             
0459+  63D2 7E 79 E6    
0460+  63D5             	beginFork()
0461+  63D5 86 C7       	ldaA	11000111b
0462+  63D7 94 A1       	andA	>flc(2)
0463+  63D9 97 A1       	staA	flc(2)
0464+  63DB DE 2C       	endFork()
0464+  63DD 7E 79 52    
0465+  63E0             	
0466+  63E0             swTopEject:
0467+  63E0 96 0F       	ldaA	>lc(8)
0468+  63E2 85 20       	bitA	lr(6)
0469+  63E4             	ifne ; not in game
0469+  63E4             
0469+  63E4 27 FE       
0470+  63E6 C6 03       		fireSolenoid(TOP_EJECT)
0470+  63E8 F7 01 40    
0471+  63EB             		done(0)
0471+  63EB             
0471+  63EB 86 02       
0471+  63ED BA 01 6B    
0471+  63F0 B7 01 6B    
0471+  63F3             
0471+  63F3 7E 79 E6    
0472+  63F6             	endif
0472+  63F6             
0472+  63F6             
0472+  63F6             
0472+  63F6             
0472+  63F6             
0472+  63F6~            	endif
0472+  63F6~            	endif
0472+  63F6             
0472+  63F6~            	endif
0472+  63F6~            	endif
0472+  63F6             
0472+  63E5             
0472+  63E5 10          
0472+  63E6             
0472+  63E6             
0472+  63E6~            	endif
0472+  63E6~            	endif
0472+  63E6~            	endif
0472+  63E6             
0472+  63F6             
0472+  63F6~            	endif
0472+  63F6~            	endif
0472+  63F6             
0473+  63F6             	
0474+  63F6 BD 7F 16    	advBonus()
0475+  63F9 D6 0B       	ldaB	>lc(4)
0476+  63FB 57          	asrB
0477+  63FC             	ifeq ; 1k
0477+  63FC             
0477+  63FC 26 FE       
0478+  63FE BD 7F 06    		score1000()
0479+  6401 86 19       		delay(200)
0479+  6403 BD 7E 6B    
0480+  6406 7E 64 99    		jmp	swTopEject_scored
0481+  6409             	endif
0481+  6409             
0481+  6409             
0481+  6409             
0481+  6409             
0481+  6409             
0481+  6409~            	endif
0481+  6409~            	endif
0481+  6409             
0481+  6409~            	endif
0481+  6409~            	endif
0481+  6409             
0481+  63FD             
0481+  63FD 0B          
0481+  63FE             
0481+  63FE             
0481+  63FE~            	endif
0481+  63FE~            	endif
0481+  63FE~            	endif
0481+  63FE             
0481+  6409             
0481+  6409~            	endif
0481+  6409~            	endif
0481+  6409             
0482+  6409 57          	asrB
0483+  640A             	ifeq  ; captive
0483+  640A             
0483+  640A 26 FE       
0484+  640C 86 40       		ldaA	lr(7)
0485+  640E 95 09       		bitA	>lc(2) ; captive ball
0486+  6410             		ifeq	; not lit
0486+  6410             
0486+  6410 26 FE       
0487+  6412 86 40       			lampOn(7,2)
0487+  6414 9A 09       
0487+  6416 97 09       
0488+  6418 86 40       			flashLamp(7,2)
0488+  641A 9A A1       
0488+  641C 97 A1       
0489+  641E             		else
0489+  641E             
0489+  641E             
0489+  641E             
0489+  641E             
0489+  6411             
0489+  6411             
0489+  6411             
0489+  6411~            		else
0489+  6411~            		else
0489+  6411~            		else
0489+  6411~            		else
0489+  6411             
0489+  6411~            		else
0489+  6411~            		else
0489+  6411~            		else
0489+  6411~            		else
0489+  6411             
0489+  6411             
0489+  6411 0E          
0489+  641E             
0489+  641E 20 FE       
0489+  6420             
0489+  6420             
0489+  6420             
0489+  6420~            		else
0489+  6420~            		else
0489+  6420~            		else
0489+  6420~            		else
0489+  6420~            		else
0489+  6420             
0489+  6420~            		else
0489+  6420~            		else
0489+  6420             
0489+  6420~            		else
0489+  6420~            		else
0489+  6420             
0490+  6420 86 BF       			lampOff(7,2)
0490+  6422 94 09       
0490+  6424 97 09       
0491+  6426             		endif
0491+  6426             
0491+  6426             
0491+  6426             
0491+  6426             
0491+  6426             
0491+  6426~            		endif
0491+  6426~            		endif
0491+  6426             
0491+  6426~            		endif
0491+  6426~            		endif
0491+  6426             
0491+  641F             
0491+  641F 06          
0491+  6420             
0491+  6420             
0491+  6420~            		endif
0491+  6420~            		endif
0491+  6420~            		endif
0491+  6420             
0491+  6426             
0491+  6426~            		endif
0491+  6426~            		endif
0491+  6426             
0492+  6426             		score500()
0492+  6426 BD 7E F7    
0492+  6429 86 0E       
0492+  642B BD 7E 6B    
0492+  642E BD 7E F7    
0492+  6431 86 0E       
0492+  6433 BD 7E 6B    
0492+  6436 BD 7E F7    
0492+  6439 86 0E       
0492+  643B BD 7E 6B    
0492+  643E BD 7E F7    
0492+  6441 86 0E       
0492+  6443 BD 7E 6B    
0492+  6446 BD 7E F7    
0492+  6449 86 0E       
0492+  644B BD 7E 6B    
0493+  644E 7E 64 99    		jmp	swTopEject_scored
0494+  6451             	endif
0494+  6451             
0494+  6451             
0494+  6451             
0494+  6451             
0494+  6451             
0494+  6451~            	endif
0494+  6451~            	endif
0494+  6451             
0494+  6451~            	endif
0494+  6451~            	endif
0494+  6451             
0494+  640B             
0494+  640B 45          
0494+  640C             
0494+  640C             
0494+  640C~            	endif
0494+  640C~            	endif
0494+  640C~            	endif
0494+  640C             
0494+  6451             
0494+  6451~            	endif
0494+  6451~            	endif
0494+  6451             
0495+  6451 57          	asrB
0496+  6452             	ifne	
0496+  6452             
0496+  6452 27 FE       
0497+  6454 57          		asrB
0498+  6455             		ifeq ; double
0498+  6455             
0498+  6455 26 FE       
0499+  6457 86 04       			ldaA	lr(3)
0500+  6459 95 09       			bitA	>lc(2) ; double bonus
0501+  645B             			ifeq	; not lit
0501+  645B             
0501+  645B 26 FE       
0502+  645D 86 04       				lampOn(3,2)
0502+  645F 9A 09       
0502+  6461 97 09       
0503+  6463 86 04       				flashLamp(3,2)
0503+  6465 9A A1       
0503+  6467 97 A1       
0504+  6469             			else
0504+  6469             
0504+  6469             
0504+  6469             
0504+  6469             
0504+  645C             
0504+  645C             
0504+  645C             
0504+  645C~            			else
0504+  645C~            			else
0504+  645C~            			else
0504+  645C~            			else
0504+  645C             
0504+  645C~            			else
0504+  645C~            			else
0504+  645C~            			else
0504+  645C~            			else
0504+  645C             
0504+  645C             
0504+  645C 0E          
0504+  6469             
0504+  6469 20 FE       
0504+  646B             
0504+  646B             
0504+  646B             
0504+  646B~            			else
0504+  646B~            			else
0504+  646B~            			else
0504+  646B~            			else
0504+  646B~            			else
0504+  646B             
0504+  646B~            			else
0504+  646B~            			else
0504+  646B             
0504+  646B~            			else
0504+  646B~            			else
0504+  646B             
0505+  646B 86 FB       				lampOff(3,2)
0505+  646D 94 09       
0505+  646F 97 09       
0506+  6471             			endif
0506+  6471             
0506+  6471             
0506+  6471             
0506+  6471             
0506+  6471             
0506+  6471~            			endif
0506+  6471~            			endif
0506+  6471             
0506+  6471~            			endif
0506+  6471~            			endif
0506+  6471             
0506+  646A             
0506+  646A 06          
0506+  646B             
0506+  646B             
0506+  646B~            			endif
0506+  646B~            			endif
0506+  646B~            			endif
0506+  646B             
0506+  6471             
0506+  6471~            			endif
0506+  6471~            			endif
0506+  6471             
0507+  6471             		endif
0507+  6471             
0507+  6471             
0507+  6471             
0507+  6471             
0507+  6471             
0507+  6471~            		endif
0507+  6471~            		endif
0507+  6471             
0507+  6471~            		endif
0507+  6471~            		endif
0507+  6471             
0507+  6456             
0507+  6456 1A          
0507+  6457             
0507+  6457             
0507+  6457~            		endif
0507+  6457~            		endif
0507+  6457~            		endif
0507+  6457             
0507+  6471             
0507+  6471~            		endif
0507+  6471~            		endif
0507+  6471             
0508+  6471             	endif
0508+  6471             
0508+  6471             
0508+  6471             
0508+  6471             
0508+  6471             
0508+  6471~            	endif
0508+  6471~            	endif
0508+  6471             
0508+  6471~            	endif
0508+  6471~            	endif
0508+  6471             
0508+  6453             
0508+  6453 1D          
0508+  6454             
0508+  6454             
0508+  6454~            	endif
0508+  6454~            	endif
0508+  6454~            	endif
0508+  6454             
0508+  6471             
0508+  6471~            	endif
0508+  6471~            	endif
0508+  6471             
0509+  6471             	score500()
0509+  6471 BD 7E F7    
0509+  6474 86 0E       
0509+  6476 BD 7E 6B    
0509+  6479 BD 7E F7    
0509+  647C 86 0E       
0509+  647E BD 7E 6B    
0509+  6481 BD 7E F7    
0509+  6484 86 0E       
0509+  6486 BD 7E 6B    
0509+  6489 BD 7E F7    
0509+  648C 86 0E       
0509+  648E BD 7E 6B    
0509+  6491 BD 7E F7    
0509+  6494 86 0E       
0509+  6496 BD 7E 6B    
0510+  6499             swTopEject_scored:
0511+  6499 86 FB       	flashOff(3,2)
0511+  649B 94 A1       
0511+  649D 97 A1       
0512+  649F 86 BF       	flashOff(7,2)
0512+  64A1 94 A1       
0512+  64A3 97 A1       
0513+  64A5 C6 03       	fireSolenoid(TOP_EJECT)
0513+  64A7 F7 01 40    
0514+  64AA             	done(1)
0514+  64AA~            	done(1)
0514+  64AA~            	done(1)
0514+  64AA~            	done(1)
0514+  64AA~            	done(1)
0514+  64AA             
0514+  64AA 7E 79 E6    
0515+  64AD             	
0516+  64AD             swHotTip:
0517+  64AD 7D 00 A9    	tst	>dropResetTimer
0518+  64B0             	ifne
0518+  64B0             
0518+  64B0 27 FE       
0519+  64B2             		done(0)
0519+  64B2             
0519+  64B2 86 02       
0519+  64B4 BA 01 6B    
0519+  64B7 B7 01 6B    
0519+  64BA             
0519+  64BA 7E 79 E6    
0520+  64BD             	endif
0520+  64BD             
0520+  64BD             
0520+  64BD             
0520+  64BD             
0520+  64BD             
0520+  64BD~            	endif
0520+  64BD~            	endif
0520+  64BD             
0520+  64BD~            	endif
0520+  64BD~            	endif
0520+  64BD             
0520+  64B1             
0520+  64B1 0B          
0520+  64B2             
0520+  64B2             
0520+  64B2~            	endif
0520+  64B2~            	endif
0520+  64B2~            	endif
0520+  64B2             
0520+  64BD             
0520+  64BD~            	endif
0520+  64BD~            	endif
0520+  64BD             
0521+  64BD             	
0522+  64BD BD 67 9D    	jsr	addCollect
0523+  64C0 7F 00 B5    	clr	p_DropsDown
0524+  64C3 7F 00 AA    	clr	dropsDown
0525+  64C6 86 41       	ldaA	65
0526+  64C8 97 A9       	staA	dropResetTimer
0527+  64CA 86 12       	delay(150)
0527+  64CC BD 7E 6B    
0528+  64CF C6 0C       	fireSolenoid(DROP_HOT)
0528+  64D1 F7 01 42    
0529+  64D4 86 12       	delay(150)
0529+  64D6 BD 7E 6B    
0530+  64D9 C6 0C       	fireSolenoid(DROP_TIP)
0530+  64DB F7 01 41    
0531+  64DE 86 F7       	lampOff(4,3) ; spinner
0531+  64E0 94 0A       
0531+  64E2 97 0A       
0532+  64E4             	
0533+  64E4 86 0F       	ldaA	~11110000b
0534+  64E6 94 0A       	andA	>lc(3)
0535+  64E8 97 0A       	staA	lc(3)
0536+  64EA             	
0537+  64EA 86 70       	fork(900)
0537+  64EC BD 7E 80    
0538+  64EF             	done(1)
0538+  64EF~            	done(1)
0538+  64EF~            	done(1)
0538+  64EF~            	done(1)
0538+  64EF~            	done(1)
0538+  64EF             
0538+  64EF 7E 79 E6    
0539+  64F2             	beginFork()
0540+  64F2 86 C7       	ldaA	11000111b
0541+  64F4 94 A1       	andA	>flc(2)
0542+  64F6 97 A1       	staA	flc(2)
0543+  64F8 DE 2C       	endFork()
0543+  64FA 7E 79 52    
0544+  64FD             	
0545+  64FD             swLeftOutlane:
0546+  64FD 86 02       	ldaA	lr(2) ; left special
0547+  64FF 95 0A       	bitA	>lc(3)
0548+  6501             	ifne
0548+  6501             
0548+  6501 27 FE       
0549+  6503 86 01       		lampOn(1,3) ; shoot again
0549+  6505 9A 0A       
0549+  6507 97 0A       
0550+  6509 86 01       		flashLamp(1,3)
0550+  650B 9A A2       
0550+  650D 97 A2       
0551+  650F C6 0C       		fireSolenoid(BUZZER)
0551+  6511 F7 01 4E    
0552+  6514 86 02       		flashLamp(2,3)
0552+  6516 9A A2       
0552+  6518 97 A2       
0553+  651A             	endif
0553+  651A             
0553+  651A             
0553+  651A             
0553+  651A             
0553+  651A             
0553+  651A~            	endif
0553+  651A~            	endif
0553+  651A             
0553+  651A~            	endif
0553+  651A~            	endif
0553+  651A             
0553+  6502             
0553+  6502 17          
0553+  6503             
0553+  6503             
0553+  6503~            	endif
0553+  6503~            	endif
0553+  6503~            	endif
0553+  6503             
0553+  651A             
0553+  651A~            	endif
0553+  651A~            	endif
0553+  651A             
0554+  651A BD 7F 16    	advBonus()
0555+  651D BD 7F 06    	score1000()
0556+  6520             	done(1)
0556+  6520~            	done(1)
0556+  6520~            	done(1)
0556+  6520~            	done(1)
0556+  6520~            	done(1)
0556+  6520             
0556+  6520 7E 79 E6    
0557+  6523             	
0558+  6523             swRightOutlane:
0559+  6523 86 80       	ldaA	lr(8) ; right special
0560+  6525 95 09       	bitA	>lc(2)
0561+  6527             	ifne
0561+  6527             
0561+  6527 27 FE       
0562+  6529 86 01       		lampOn(1,3) ; shoot again
0562+  652B 9A 0A       
0562+  652D 97 0A       
0563+  652F 86 01       		flashLamp(1,3)
0563+  6531 9A A2       
0563+  6533 97 A2       
0564+  6535 C6 0C       		fireSolenoid(BUZZER)
0564+  6537 F7 01 4E    
0565+  653A 86 80       		flashLamp(8,2)
0565+  653C 9A A1       
0565+  653E 97 A1       
0566+  6540             	endif
0566+  6540             
0566+  6540             
0566+  6540             
0566+  6540             
0566+  6540             
0566+  6540~            	endif
0566+  6540~            	endif
0566+  6540             
0566+  6540~            	endif
0566+  6540~            	endif
0566+  6540             
0566+  6528             
0566+  6528 17          
0566+  6529             
0566+  6529             
0566+  6529~            	endif
0566+  6529~            	endif
0566+  6529~            	endif
0566+  6529             
0566+  6540             
0566+  6540~            	endif
0566+  6540~            	endif
0566+  6540             
0567+  6540 BD 7F 16    	advBonus()
0568+  6543 BD 7F 06    	score1000()
0569+  6546             	done(1)
0569+  6546~            	done(1)
0569+  6546~            	done(1)
0569+  6546~            	done(1)
0569+  6546~            	done(1)
0569+  6546             
0569+  6546 7E 79 E6    
0570+  6549             	
0571+  6549             swLeftInlane:
0572+  6549 BD 7F 16    	advBonus()
0573+  654C BD 7F 06    	score1000()
0574+  654F             	done(1)
0574+  654F~            	done(1)
0574+  654F~            	done(1)
0574+  654F~            	done(1)
0574+  654F~            	done(1)
0574+  654F             
0574+  654F 7E 79 E6    
0575+  6552             swRightInlane:
0576+  6552 BD 7F 16    	advBonus()
0577+  6555 BD 7F 06    	score1000()
0578+  6558 86 FF       	ldaA	255
0579+  655A 97 BA       	staA	spinnerTimer
0580+  655C 86 08       	flashLamp(4,3) ; spinner
0580+  655E 9A A2       
0580+  6560 97 A2       
0581+  6562 86 08       	lampOn(4,3)
0581+  6564 9A 0A       
0581+  6566 97 0A       
0582+  6568             	done(1)
0582+  6568~            	done(1)
0582+  6568~            	done(1)
0582+  6568~            	done(1)
0582+  6568~            	done(1)
0582+  6568             
0582+  6568 7E 79 E6    
0583+  656B             sw10pt:
0584+  656B BD 7E E9    	score10()
0585+  656E 77 00 0B    	asr	lc(4)
0586+  6571             	ifeq ; shifted off the edge
0586+  6571             
0586+  6571 26 FE       
0587+  6573 86 10       		ldaA	00010000b
0588+  6575 97 0B       		staA	lc(4)
0589+  6577             	endif
0589+  6577             
0589+  6577             
0589+  6577             
0589+  6577             
0589+  6577             
0589+  6577~            	endif
0589+  6577~            	endif
0589+  6577             
0589+  6577~            	endif
0589+  6577~            	endif
0589+  6577             
0589+  6572             
0589+  6572 04          
0589+  6573             
0589+  6573             
0589+  6573~            	endif
0589+  6573~            	endif
0589+  6573~            	endif
0589+  6573             
0589+  6577             
0589+  6577~            	endif
0589+  6577~            	endif
0589+  6577             
0590+  6577             	done(1)
0590+  6577~            	done(1)
0590+  6577~            	done(1)
0590+  6577~            	done(1)
0590+  6577~            	done(1)
0590+  6577             
0590+  6577 7E 79 E6    
0591+  657A             sw100pt:
0592+  657A BD 7E F7    	score100()
0593+  657D             	done(1)
0593+  657D~            	done(1)
0593+  657D~            	done(1)
0593+  657D~            	done(1)
0593+  657D~            	done(1)
0593+  657D             
0593+  657D 7E 79 E6    
0594+  6580             sw500pt:
0595+  6580 BD 67 71    	jsr	alternate
0596+  6583             	score500()
0596+  6583 BD 7E F7    
0596+  6586 86 0E       
0596+  6588 BD 7E 6B    
0596+  658B BD 7E F7    
0596+  658E 86 0E       
0596+  6590 BD 7E 6B    
0596+  6593 BD 7E F7    
0596+  6596 86 0E       
0596+  6598 BD 7E 6B    
0596+  659B BD 7E F7    
0596+  659E 86 0E       
0596+  65A0 BD 7E 6B    
0596+  65A3 BD 7E F7    
0596+  65A6 86 0E       
0596+  65A8 BD 7E 6B    
0597+  65AB             	done(1)
0597+  65AB~            	done(1)
0597+  65AB~            	done(1)
0597+  65AB~            	done(1)
0597+  65AB~            	done(1)
0597+  65AB             
0597+  65AB 7E 79 E6    
0598+  65AE             swPop:
0599+  65AE BD 67 71    	jsr	alternate
0600+  65B1 BD 7E F7    	score100()
0601+  65B4             	done(1)
0601+  65B4~            	done(1)
0601+  65B4~            	done(1)
0601+  65B4~            	done(1)
0601+  65B4~            	done(1)
0601+  65B4             
0601+  65B4 7E 79 E6    
0602+  65B7             swDropTip:
0603+  65B7 86 08       	ldaA	1<<3
0604+  65B9 7E 65 D5    	jmp	swDrop
0605+  65BC             swDropHot:
0606+  65BC 86 01       	ldaA	1<<0
0607+  65BE 7E 65 D5    	jmp	swDrop
0608+  65C1             swDroptIp:
0609+  65C1 86 10       	ldaA	1<<4
0610+  65C3 7E 65 D5    	jmp	swDrop
0611+  65C6             swDrophOt:
0612+  65C6 86 02       	ldaA	1<<1
0613+  65C8 7E 65 D5    	jmp	swDrop
0614+  65CB             swDroptiP:
0615+  65CB 86 20       	ldaA	1<<5
0616+  65CD 7E 65 D5    	jmp	swDrop
0617+  65D0             swDrophoT:
0618+  65D0 86 04       	ldaA	1<<2
0619+  65D2 7E 65 D5    	jmp	swDrop
0620+  65D5             swDrop:
0621+  65D5             	;done(0)
0622+  65D5 7D 00 A9    	tst	>dropResetTimer
0623+  65D8             	ifeq
0623+  65D8             
0623+  65D8 26 FE       
0624+  65DA 95 AA       		bitA	>dropsDown
0625+  65DC             		ifne
0625+  65DC             
0625+  65DC 27 FE       
0626+  65DE             			done(0)
0626+  65DE             
0626+  65DE 86 02       
0626+  65E0 BA 01 6B    
0626+  65E3 B7 01 6B    
0626+  65E6             
0626+  65E6 7E 79 E6    
0627+  65E9             		endif
0627+  65E9             
0627+  65E9             
0627+  65E9             
0627+  65E9             
0627+  65E9             
0627+  65E9~            		endif
0627+  65E9~            		endif
0627+  65E9             
0627+  65E9~            		endif
0627+  65E9~            		endif
0627+  65E9             
0627+  65DD             
0627+  65DD 0B          
0627+  65DE             
0627+  65DE             
0627+  65DE~            		endif
0627+  65DE~            		endif
0627+  65DE~            		endif
0627+  65DE             
0627+  65E9             
0627+  65E9~            		endif
0627+  65E9~            		endif
0627+  65E9             
0628+  65E9 16          		tAB
0629+  65EA 9A AA       		oraA	>dropsDown
0630+  65EC 97 AA       		staA	dropsDown
0631+  65EE 7C 00 B5    		inc	p_DropsDown
0632+  65F1 17          		tBA
0633+  65F2             		
0634+  65F2 85 07       		bitA	111b ; was it HOT
0635+  65F4             		ifne	; it was HOT
0635+  65F4             
0635+  65F4 27 FE       
0636+  65F6 D6 0A       			ldaB	>lc(3)
0637+  65F8 C5 10       			bitB	lr(5)
0638+  65FA             			ifne
0638+  65FA             
0638+  65FA 27 FE       
0639+  65FC BD 7F 06    				score1000()
0640+  65FF             			else
0640+  65FF             
0640+  65FF             
0640+  65FF             
0640+  65FF             
0640+  65FB             
0640+  65FB             
0640+  65FB             
0640+  65FB~            			else
0640+  65FB~            			else
0640+  65FB~            			else
0640+  65FB~            			else
0640+  65FB             
0640+  65FB~            			else
0640+  65FB~            			else
0640+  65FB~            			else
0640+  65FB~            			else
0640+  65FB             
0640+  65FB             
0640+  65FB 05          
0640+  65FF             
0640+  65FF 20 FE       
0640+  6601             
0640+  6601             
0640+  6601             
0640+  6601~            			else
0640+  6601~            			else
0640+  6601~            			else
0640+  6601~            			else
0640+  6601~            			else
0640+  6601             
0640+  6601~            			else
0640+  6601~            			else
0640+  6601             
0640+  6601~            			else
0640+  6601~            			else
0640+  6601             
0641+  6601 C5 20       				bitB	lr(6)
0642+  6603             				ifne
0642+  6603             
0642+  6603 27 FE       
0643+  6605 BD 7E F7    					score100()
0644+  6608             				else
0644+  6608             
0644+  6608             
0644+  6608             
0644+  6608             
0644+  6604             
0644+  6604             
0644+  6604             
0644+  6604~            				else
0644+  6604~            				else
0644+  6604~            				else
0644+  6604~            				else
0644+  6604             
0644+  6604~            				else
0644+  6604~            				else
0644+  6604~            				else
0644+  6604~            				else
0644+  6604             
0644+  6604             
0644+  6604 05          
0644+  6608             
0644+  6608 20 FE       
0644+  660A             
0644+  660A             
0644+  660A             
0644+  660A~            				else
0644+  660A~            				else
0644+  660A~            				else
0644+  660A~            				else
0644+  660A~            				else
0644+  660A             
0644+  660A~            				else
0644+  660A~            				else
0644+  660A             
0644+  660A~            				else
0644+  660A~            				else
0644+  660A             
0645+  660A BD 7E E9    					score10()
0646+  660D             				endif
0646+  660D             
0646+  660D             
0646+  660D             
0646+  660D             
0646+  660D             
0646+  660D~            				endif
0646+  660D~            				endif
0646+  660D             
0646+  660D~            				endif
0646+  660D~            				endif
0646+  660D             
0646+  6609             
0646+  6609 03          
0646+  660A             
0646+  660A             
0646+  660A~            				endif
0646+  660A~            				endif
0646+  660A~            				endif
0646+  660A             
0646+  660D             
0646+  660D~            				endif
0646+  660D~            				endif
0646+  660D             
0647+  660D             			endif
0647+  660D             
0647+  660D             
0647+  660D             
0647+  660D             
0647+  660D             
0647+  660D~            			endif
0647+  660D~            			endif
0647+  660D             
0647+  660D~            			endif
0647+  660D~            			endif
0647+  660D             
0647+  6600             
0647+  6600 0C          
0647+  6601             
0647+  6601             
0647+  6601~            			endif
0647+  6601~            			endif
0647+  6601~            			endif
0647+  6601             
0647+  660D             
0647+  660D~            			endif
0647+  660D~            			endif
0647+  660D             
0648+  660D D6 0A       			ldaB	>lc(3)
0649+  660F C5 40       			bitB	lr(7)
0650+  6611             			ifeq
0650+  6611             
0650+  6611 26 FE       
0651+  6613 C5 80       				bitB	lr(8)
0652+  6615             				ifne	; was 100
0652+  6615             
0652+  6615 27 FE       
0653+  6617 86 40       					lampOn(7,3) ; on 1000
0653+  6619 9A 0A       
0653+  661B 97 0A       
0654+  661D 86 7F       					lampOff(8,3) ; 100
0654+  661F 94 0A       
0654+  6621 97 0A       
0655+  6623             				else ; was 10
0655+  6623             
0655+  6623             
0655+  6623             
0655+  6623             
0655+  6616             
0655+  6616             
0655+  6616             
0655+  6616~            				else ; was 10
0655+  6616~            				else ; was 10
0655+  6616~            				else ; was 10
0655+  6616~            				else ; was 10
0655+  6616             
0655+  6616~            				else ; was 10
0655+  6616~            				else ; was 10
0655+  6616~            				else ; was 10
0655+  6616~            				else ; was 10
0655+  6616             
0655+  6616             
0655+  6616 0E          
0655+  6623             
0655+  6623 20 FE       
0655+  6625             
0655+  6625             
0655+  6625             
0655+  6625~            				else ; was 10
0655+  6625~            				else ; was 10
0655+  6625~            				else ; was 10
0655+  6625~            				else ; was 10
0655+  6625~            				else ; was 10
0655+  6625             
0655+  6625~            				else ; was 10
0655+  6625~            				else ; was 10
0655+  6625             
0655+  6625~            				else ; was 10
0655+  6625~            				else ; was 10
0655+  6625             
0656+  6625 86 80       					lampOn(8,3)
0656+  6627 9A 0A       
0656+  6629 97 0A       
0657+  662B             				endif
0657+  662B             
0657+  662B             
0657+  662B             
0657+  662B             
0657+  662B             
0657+  662B~            				endif
0657+  662B~            				endif
0657+  662B             
0657+  662B~            				endif
0657+  662B~            				endif
0657+  662B             
0657+  6624             
0657+  6624 06          
0657+  6625             
0657+  6625             
0657+  6625~            				endif
0657+  6625~            				endif
0657+  6625~            				endif
0657+  6625             
0657+  662B             
0657+  662B~            				endif
0657+  662B~            				endif
0657+  662B             
0658+  662B             			endif
0658+  662B             
0658+  662B             
0658+  662B             
0658+  662B             
0658+  662B             
0658+  662B~            			endif
0658+  662B~            			endif
0658+  662B             
0658+  662B~            			endif
0658+  662B~            			endif
0658+  662B             
0658+  6612             
0658+  6612 18          
0658+  6613             
0658+  6613             
0658+  6613~            			endif
0658+  6613~            			endif
0658+  6613~            			endif
0658+  6613             
0658+  662B             
0658+  662B~            			endif
0658+  662B~            			endif
0658+  662B             
0659+  662B             		else
0659+  662B             
0659+  662B             
0659+  662B             
0659+  662B             
0659+  65F5             
0659+  65F5             
0659+  65F5             
0659+  65F5~            		else
0659+  65F5~            		else
0659+  65F5~            		else
0659+  65F5~            		else
0659+  65F5             
0659+  65F5~            		else
0659+  65F5~            		else
0659+  65F5~            		else
0659+  65F5~            		else
0659+  65F5             
0659+  65F5             
0659+  65F5 37          
0659+  662B             
0659+  662B 20 FE       
0659+  662D             
0659+  662D             
0659+  662D             
0659+  662D~            		else
0659+  662D~            		else
0659+  662D~            		else
0659+  662D~            		else
0659+  662D~            		else
0659+  662D             
0659+  662D~            		else
0659+  662D~            		else
0659+  662D             
0659+  662D~            		else
0659+  662D~            		else
0659+  662D             
0660+  662D D6 0A       			ldaB	>lc(3)
0661+  662F C5 40       			bitB	lr(7)
0662+  6631             			ifne
0662+  6631             
0662+  6631 27 FE       
0663+  6633 BD 7F 06    				score1000()
0664+  6636             			else
0664+  6636             
0664+  6636             
0664+  6636             
0664+  6636             
0664+  6632             
0664+  6632             
0664+  6632             
0664+  6632~            			else
0664+  6632~            			else
0664+  6632~            			else
0664+  6632~            			else
0664+  6632             
0664+  6632~            			else
0664+  6632~            			else
0664+  6632~            			else
0664+  6632~            			else
0664+  6632             
0664+  6632             
0664+  6632 05          
0664+  6636             
0664+  6636 20 FE       
0664+  6638             
0664+  6638             
0664+  6638             
0664+  6638~            			else
0664+  6638~            			else
0664+  6638~            			else
0664+  6638~            			else
0664+  6638~            			else
0664+  6638             
0664+  6638~            			else
0664+  6638~            			else
0664+  6638             
0664+  6638~            			else
0664+  6638~            			else
0664+  6638             
0665+  6638 C5 80       				bitB	lr(8)
0666+  663A             				ifne
0666+  663A             
0666+  663A 27 FE       
0667+  663C BD 7E F7    					score100()
0668+  663F             				else
0668+  663F             
0668+  663F             
0668+  663F             
0668+  663F             
0668+  663B             
0668+  663B             
0668+  663B             
0668+  663B~            				else
0668+  663B~            				else
0668+  663B~            				else
0668+  663B~            				else
0668+  663B             
0668+  663B~            				else
0668+  663B~            				else
0668+  663B~            				else
0668+  663B~            				else
0668+  663B             
0668+  663B             
0668+  663B 05          
0668+  663F             
0668+  663F 20 FE       
0668+  6641             
0668+  6641             
0668+  6641             
0668+  6641~            				else
0668+  6641~            				else
0668+  6641~            				else
0668+  6641~            				else
0668+  6641~            				else
0668+  6641             
0668+  6641~            				else
0668+  6641~            				else
0668+  6641             
0668+  6641~            				else
0668+  6641~            				else
0668+  6641             
0669+  6641 BD 7E E9    					score10()
0670+  6644             				endif
0670+  6644             
0670+  6644             
0670+  6644             
0670+  6644             
0670+  6644             
0670+  6644~            				endif
0670+  6644~            				endif
0670+  6644             
0670+  6644~            				endif
0670+  6644~            				endif
0670+  6644             
0670+  6640             
0670+  6640 03          
0670+  6641             
0670+  6641             
0670+  6641~            				endif
0670+  6641~            				endif
0670+  6641~            				endif
0670+  6641             
0670+  6644             
0670+  6644~            				endif
0670+  6644~            				endif
0670+  6644             
0671+  6644             			endif
0671+  6644             
0671+  6644             
0671+  6644             
0671+  6644             
0671+  6644             
0671+  6644~            			endif
0671+  6644~            			endif
0671+  6644             
0671+  6644~            			endif
0671+  6644~            			endif
0671+  6644             
0671+  6637             
0671+  6637 0C          
0671+  6638             
0671+  6638             
0671+  6638~            			endif
0671+  6638~            			endif
0671+  6638~            			endif
0671+  6638             
0671+  6644             
0671+  6644~            			endif
0671+  6644~            			endif
0671+  6644             
0672+  6644 D6 0A       			ldaB	>lc(3)
0673+  6646 C5 10       			bitB	lr(5)
0674+  6648             			ifeq
0674+  6648             
0674+  6648 26 FE       
0675+  664A C5 20       				bitB	lr(6)
0676+  664C             				ifne	; was 100
0676+  664C             
0676+  664C 27 FE       
0677+  664E 86 10       					lampOn(5,3) ; on 1000
0677+  6650 9A 0A       
0677+  6652 97 0A       
0678+  6654 86 DF       					lampOff(6,3) ; 100
0678+  6656 94 0A       
0678+  6658 97 0A       
0679+  665A             				else ; was 10
0679+  665A             
0679+  665A             
0679+  665A             
0679+  665A             
0679+  664D             
0679+  664D             
0679+  664D             
0679+  664D~            				else ; was 10
0679+  664D~            				else ; was 10
0679+  664D~            				else ; was 10
0679+  664D~            				else ; was 10
0679+  664D             
0679+  664D~            				else ; was 10
0679+  664D~            				else ; was 10
0679+  664D~            				else ; was 10
0679+  664D~            				else ; was 10
0679+  664D             
0679+  664D             
0679+  664D 0E          
0679+  665A             
0679+  665A 20 FE       
0679+  665C             
0679+  665C             
0679+  665C             
0679+  665C~            				else ; was 10
0679+  665C~            				else ; was 10
0679+  665C~            				else ; was 10
0679+  665C~            				else ; was 10
0679+  665C~            				else ; was 10
0679+  665C             
0679+  665C~            				else ; was 10
0679+  665C~            				else ; was 10
0679+  665C             
0679+  665C~            				else ; was 10
0679+  665C~            				else ; was 10
0679+  665C             
0680+  665C 86 20       					lampOn(6,3)
0680+  665E 9A 0A       
0680+  6660 97 0A       
0681+  6662             				endif
0681+  6662             
0681+  6662             
0681+  6662             
0681+  6662             
0681+  6662             
0681+  6662~            				endif
0681+  6662~            				endif
0681+  6662             
0681+  6662~            				endif
0681+  6662~            				endif
0681+  6662             
0681+  665B             
0681+  665B 06          
0681+  665C             
0681+  665C             
0681+  665C~            				endif
0681+  665C~            				endif
0681+  665C~            				endif
0681+  665C             
0681+  6662             
0681+  6662~            				endif
0681+  6662~            				endif
0681+  6662             
0682+  6662             			endif
0682+  6662             
0682+  6662             
0682+  6662             
0682+  6662             
0682+  6662             
0682+  6662~            			endif
0682+  6662~            			endif
0682+  6662             
0682+  6662~            			endif
0682+  6662~            			endif
0682+  6662             
0682+  6649             
0682+  6649 18          
0682+  664A             
0682+  664A             
0682+  664A~            			endif
0682+  664A~            			endif
0682+  664A~            			endif
0682+  664A             
0682+  6662             
0682+  6662~            			endif
0682+  6662~            			endif
0682+  6662             
0683+  6662             		endif
0683+  6662             
0683+  6662             
0683+  6662             
0683+  6662             
0683+  6662             
0683+  6662~            		endif
0683+  6662~            		endif
0683+  6662             
0683+  6662~            		endif
0683+  6662~            		endif
0683+  6662             
0683+  662C             
0683+  662C 35          
0683+  662D             
0683+  662D             
0683+  662D~            		endif
0683+  662D~            		endif
0683+  662D~            		endif
0683+  662D             
0683+  6662             
0683+  6662~            		endif
0683+  6662~            		endif
0683+  6662             
0684+  6662 86 04       		ldaA	4
0685+  6664 91 B5       		cmpA	>p_DropsDown
0686+  6666             		ifgt
0686+  6666             
0686+  6666 23 FE       
0687+  6668 86 F7       			lampOff(4,3) ; spinner
0687+  666A 94 0A       
0687+  666C 97 0A       
0688+  666E             		else
0688+  666E             
0688+  666E             
0688+  666E             
0688+  666E             
0688+  6667             
0688+  6667             
0688+  6667             
0688+  6667~            		else
0688+  6667~            		else
0688+  6667~            		else
0688+  6667~            		else
0688+  6667             
0688+  6667~            		else
0688+  6667~            		else
0688+  6667~            		else
0688+  6667~            		else
0688+  6667             
0688+  6667             
0688+  6667 08          
0688+  666E             
0688+  666E 20 FE       
0688+  6670             
0688+  6670             
0688+  6670             
0688+  6670~            		else
0688+  6670~            		else
0688+  6670~            		else
0688+  6670~            		else
0688+  6670~            		else
0688+  6670             
0688+  6670~            		else
0688+  6670~            		else
0688+  6670             
0688+  6670~            		else
0688+  6670~            		else
0688+  6670             
0689+  6670 86 08       			lampOn(4,3)
0689+  6672 9A 0A       
0689+  6674 97 0A       
0690+  6676             		endif
0690+  6676             
0690+  6676             
0690+  6676             
0690+  6676             
0690+  6676             
0690+  6676~            		endif
0690+  6676~            		endif
0690+  6676             
0690+  6676~            		endif
0690+  6676~            		endif
0690+  6676             
0690+  666F             
0690+  666F 06          
0690+  6670             
0690+  6670             
0690+  6670~            		endif
0690+  6670~            		endif
0690+  6670~            		endif
0690+  6670             
0690+  6676             
0690+  6676~            		endif
0690+  6676~            		endif
0690+  6676             
0691+  6676             		
0692+  6676 BD 7F 16    		advBonus()
0693+  6679             		done(1)
0693+  6679~            		done(1)
0693+  6679~            		done(1)
0693+  6679~            		done(1)
0693+  6679~            		done(1)
0693+  6679             
0693+  6679 7E 79 E6    
0694+  667C             	else
0694+  667C             
0694+  667C             
0694+  667C             
0694+  667C             
0694+  65D9             
0694+  65D9             
0694+  65D9             
0694+  65D9~            	else
0694+  65D9~            	else
0694+  65D9~            	else
0694+  65D9~            	else
0694+  65D9             
0694+  65D9             
0694+  667C             
0694+  667C             
0694+  667C 7E 66 7C    
0694+  667F~            	else
0694+  667F~            	else
0694+  667F~            	else
0694+  667F~            	else
0694+  667F~            	else
0694+  667F~            	else
0694+  667F             
0694+  667F             
0694+  667F~            	else
0694+  667F~            	else
0694+  667F~            	else
0694+  667F~            	else
0694+  667F~            	else
0694+  667F             
0694+  667F~            	else
0694+  667F~            	else
0694+  667F             
0694+  667F~            	else
0694+  667F~            	else
0694+  667F             
0695+  667F             		done(0)
0695+  667F             
0695+  667F 86 02       
0695+  6681 BA 01 6B    
0695+  6684 B7 01 6B    
0695+  6687             
0695+  6687 7E 79 E6    
0696+  668A             	endif
0696+  668A             
0696+  668A             
0696+  668A             
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A             
0696+  667D             
0696+  667D 8A 66       
0696+  667F             
0696+  668A             
0696+  668A~            	endif
0696+  668A~            	endif
0696+  668A             
0697+  668A             swAdvBonus:
0698+  668A BD 7F 16    	advBonus()
0699+  668D BD 7F 06    	score1000()
0700+  6690             	done(1)
0700+  6690~            	done(1)
0700+  6690~            	done(1)
0700+  6690~            	done(1)
0700+  6690~            	done(1)
0700+  6690             
0700+  6690 7E 79 E6    
0701+  6693             swSpinner:
0702+  6693             	;ldaA	>sc(4)
0703+  6693             	;bitA	sr(6)
0704+  6693             	;ifne
0705+  6693             	;	score100()
0706+  6693             	;	ldaA	$E
0707+  6693             	;else
0708+  6693             	;	noValidate
0709+  6693             	;	ldaA	0
0710+  6693             	;endif
0711+  6693             	;staA	solenoid1 + CLICKER - 1
0712+  6693             	
0713+  6693 86 08       	ldaA	lr(4) ; spinner
0714+  6695 95 0A       	bitA	>lc(3)
0715+  6697             	ifne ; spinner on
0715+  6697             
0715+  6697 27 FE       
0716+  6699 7D 00 BA    		tst	>spinnerTimer
0717+  669C             		ifne
0717+  669C             
0717+  669C 27 FE       
0718+  669E 86 20       			ldaA	32
0719+  66A0 97 BA       			staA	spinnerTimer
0720+  66A2 86 0A       			ldaA	10
0721+  66A4 95 02       			bitA	>counter
0722+  66A6             			ifeq
0722+  66A6             
0722+  66A6 26 FE       
0723+  66A8 BD 7F 16    				advBonus()
0724+  66AB             			endif
0724+  66AB             
0724+  66AB             
0724+  66AB             
0724+  66AB             
0724+  66AB             
0724+  66AB~            			endif
0724+  66AB~            			endif
0724+  66AB             
0724+  66AB~            			endif
0724+  66AB~            			endif
0724+  66AB             
0724+  66A7             
0724+  66A7 03          
0724+  66A8             
0724+  66A8             
0724+  66A8~            			endif
0724+  66A8~            			endif
0724+  66A8~            			endif
0724+  66A8             
0724+  66AB             
0724+  66AB~            			endif
0724+  66AB~            			endif
0724+  66AB             
0725+  66AB             		endif
0725+  66AB             
0725+  66AB             
0725+  66AB             
0725+  66AB             
0725+  66AB             
0725+  66AB~            		endif
0725+  66AB~            		endif
0725+  66AB             
0725+  66AB~            		endif
0725+  66AB~            		endif
0725+  66AB             
0725+  669D             
0725+  669D 0D          
0725+  669E             
0725+  669E             
0725+  669E~            		endif
0725+  669E~            		endif
0725+  669E~            		endif
0725+  669E             
0725+  66AB             
0725+  66AB~            		endif
0725+  66AB~            		endif
0725+  66AB             
0726+  66AB BD 7E F7    		score100()
0727+  66AE C6 01       		fireSolenoid(CLICKER)
0727+  66B0 F7 01 4C    
0728+  66B3             	else
0728+  66B3             
0728+  66B3             
0728+  66B3             
0728+  66B3             
0728+  6698             
0728+  6698             
0728+  6698             
0728+  6698~            	else
0728+  6698~            	else
0728+  6698~            	else
0728+  6698~            	else
0728+  6698             
0728+  6698~            	else
0728+  6698~            	else
0728+  6698~            	else
0728+  6698~            	else
0728+  6698             
0728+  6698             
0728+  6698 1C          
0728+  66B3             
0728+  66B3 20 FE       
0728+  66B5             
0728+  66B5             
0728+  66B5             
0728+  66B5~            	else
0728+  66B5~            	else
0728+  66B5~            	else
0728+  66B5~            	else
0728+  66B5~            	else
0728+  66B5             
0728+  66B5~            	else
0728+  66B5~            	else
0728+  66B5             
0728+  66B5~            	else
0728+  66B5~            	else
0728+  66B5             
0729+  66B5 7D 00 BA    		tst	>spinnerTimer
0730+  66B8             		ifne
0730+  66B8             
0730+  66B8 27 FE       
0731+  66BA 86 20       			ldaA	32
0732+  66BC 97 BA       			staA	spinnerTimer
0733+  66BE BD 7E F7    			score100()
0734+  66C1 C6 01       			fireSolenoid(CLICKER)
0734+  66C3 F7 01 4C    
0735+  66C6             		else
0735+  66C6             
0735+  66C6             
0735+  66C6             
0735+  66C6             
0735+  66B9             
0735+  66B9             
0735+  66B9             
0735+  66B9~            		else
0735+  66B9~            		else
0735+  66B9~            		else
0735+  66B9~            		else
0735+  66B9             
0735+  66B9~            		else
0735+  66B9~            		else
0735+  66B9~            		else
0735+  66B9~            		else
0735+  66B9             
0735+  66B9             
0735+  66B9 0E          
0735+  66C6             
0735+  66C6 20 FE       
0735+  66C8             
0735+  66C8             
0735+  66C8             
0735+  66C8~            		else
0735+  66C8~            		else
0735+  66C8~            		else
0735+  66C8~            		else
0735+  66C8~            		else
0735+  66C8             
0735+  66C8~            		else
0735+  66C8~            		else
0735+  66C8             
0735+  66C8~            		else
0735+  66C8~            		else
0735+  66C8             
0736+  66C8 BD 7E E9    			score10()
0737+  66CB             		endif
0737+  66CB             
0737+  66CB             
0737+  66CB             
0737+  66CB             
0737+  66CB             
0737+  66CB~            		endif
0737+  66CB~            		endif
0737+  66CB             
0737+  66CB~            		endif
0737+  66CB~            		endif
0737+  66CB             
0737+  66C7             
0737+  66C7 03          
0737+  66C8             
0737+  66C8             
0737+  66C8~            		endif
0737+  66C8~            		endif
0737+  66C8~            		endif
0737+  66C8             
0737+  66CB             
0737+  66CB~            		endif
0737+  66CB~            		endif
0737+  66CB             
0738+  66CB             	endif
0738+  66CB             
0738+  66CB             
0738+  66CB             
0738+  66CB             
0738+  66CB             
0738+  66CB~            	endif
0738+  66CB~            	endif
0738+  66CB             
0738+  66CB~            	endif
0738+  66CB~            	endif
0738+  66CB             
0738+  66B4             
0738+  66B4 16          
0738+  66B5             
0738+  66B5             
0738+  66B5~            	endif
0738+  66B5~            	endif
0738+  66B5~            	endif
0738+  66B5             
0738+  66CB             
0738+  66CB~            	endif
0738+  66CB~            	endif
0738+  66CB             
0739+  66CB             	done(1)
0739+  66CB~            	done(1)
0739+  66CB~            	done(1)
0739+  66CB~            	done(1)
0739+  66CB~            	done(1)
0739+  66CB             
0739+  66CB 7E 79 E6    
0740+  66CE             
0741+  66CE             swCaptiveRollover:
0742+  66CE 96 09       	ldaA	>lc(2)
0743+  66D0 85 40       	bitA	lr(7)
0744+  66D2             	ifeq ; light off
0744+  66D2             
0744+  66D2 26 FE       
0745+  66D4 BD 7E E9    		score10()
0746+  66D7             	else
0746+  66D7             
0746+  66D7             
0746+  66D7             
0746+  66D7             
0746+  66D3             
0746+  66D3             
0746+  66D3             
0746+  66D3~            	else
0746+  66D3~            	else
0746+  66D3~            	else
0746+  66D3~            	else
0746+  66D3             
0746+  66D3~            	else
0746+  66D3~            	else
0746+  66D3~            	else
0746+  66D3~            	else
0746+  66D3             
0746+  66D3             
0746+  66D3 05          
0746+  66D7             
0746+  66D7 20 FE       
0746+  66D9             
0746+  66D9             
0746+  66D9             
0746+  66D9~            	else
0746+  66D9~            	else
0746+  66D9~            	else
0746+  66D9~            	else
0746+  66D9~            	else
0746+  66D9             
0746+  66D9~            	else
0746+  66D9~            	else
0746+  66D9             
0746+  66D9~            	else
0746+  66D9~            	else
0746+  66D9             
0747+  66D9 BD 7F 06    		score1000()
0748+  66DC 86 0E       		ldaA	14 ; captive rollover switch number
0749+  66DE 91 A8       		cmpA	>lastSwitch
0750+  66E0             		ifne
0750+  66E0             
0750+  66E0 27 FE       
0751+  66E2 86 0F       			ldaA	15 ; captive rollover switch number
0752+  66E4 91 A8       			cmpA	>lastSwitch
0753+  66E6             			ifne
0753+  66E6             
0753+  66E6 27 FE       
0754+  66E8 BD 67 05    				jsr	captiveAward
0755+  66EB             			endif
0755+  66EB             
0755+  66EB             
0755+  66EB             
0755+  66EB             
0755+  66EB             
0755+  66EB~            			endif
0755+  66EB~            			endif
0755+  66EB             
0755+  66EB~            			endif
0755+  66EB~            			endif
0755+  66EB             
0755+  66E7             
0755+  66E7 03          
0755+  66E8             
0755+  66E8             
0755+  66E8~            			endif
0755+  66E8~            			endif
0755+  66E8~            			endif
0755+  66E8             
0755+  66EB             
0755+  66EB~            			endif
0755+  66EB~            			endif
0755+  66EB             
0756+  66EB             		endif
0756+  66EB             
0756+  66EB             
0756+  66EB             
0756+  66EB             
0756+  66EB             
0756+  66EB~            		endif
0756+  66EB~            		endif
0756+  66EB             
0756+  66EB~            		endif
0756+  66EB~            		endif
0756+  66EB             
0756+  66E1             
0756+  66E1 09          
0756+  66E2             
0756+  66E2             
0756+  66E2~            		endif
0756+  66E2~            		endif
0756+  66E2~            		endif
0756+  66E2             
0756+  66EB             
0756+  66EB~            		endif
0756+  66EB~            		endif
0756+  66EB             
0757+  66EB             	endif
0757+  66EB             
0757+  66EB             
0757+  66EB             
0757+  66EB             
0757+  66EB             
0757+  66EB~            	endif
0757+  66EB~            	endif
0757+  66EB             
0757+  66EB~            	endif
0757+  66EB~            	endif
0757+  66EB             
0757+  66D8             
0757+  66D8 12          
0757+  66D9             
0757+  66D9             
0757+  66D9~            	endif
0757+  66D9~            	endif
0757+  66D9~            	endif
0757+  66D9             
0757+  66EB             
0757+  66EB~            	endif
0757+  66EB~            	endif
0757+  66EB             
0758+  66EB             	done(1)
0758+  66EB~            	done(1)
0758+  66EB~            	done(1)
0758+  66EB~            	done(1)
0758+  66EB~            	done(1)
0758+  66EB             
0758+  66EB 7E 79 E6    
0759+  66EE             
0760+  66EE             swCaptiveTarget:
0761+  66EE BD 7F 16    	advBonus()
0762+  66F1 96 09       	ldaA	>lc(2)
0763+  66F3 85 40       	bitA	lr(7)
0764+  66F5             	ifeq ; light off
0764+  66F5             
0764+  66F5 26 FE       
0765+  66F7 BD 7E E9    		score10()
0766+  66FA BD 67 05    		jsr	captiveAward
0767+  66FD             	else
0767+  66FD             
0767+  66FD             
0767+  66FD             
0767+  66FD             
0767+  66F6             
0767+  66F6             
0767+  66F6             
0767+  66F6~            	else
0767+  66F6~            	else
0767+  66F6~            	else
0767+  66F6~            	else
0767+  66F6             
0767+  66F6~            	else
0767+  66F6~            	else
0767+  66F6~            	else
0767+  66F6~            	else
0767+  66F6             
0767+  66F6             
0767+  66F6 08          
0767+  66FD             
0767+  66FD 20 FE       
0767+  66FF             
0767+  66FF             
0767+  66FF             
0767+  66FF~            	else
0767+  66FF~            	else
0767+  66FF~            	else
0767+  66FF~            	else
0767+  66FF~            	else
0767+  66FF             
0767+  66FF~            	else
0767+  66FF~            	else
0767+  66FF             
0767+  66FF~            	else
0767+  66FF~            	else
0767+  66FF             
0768+  66FF BD 7F 06    		score1000()
0769+  6702             	endif
0769+  6702             
0769+  6702             
0769+  6702             
0769+  6702             
0769+  6702             
0769+  6702~            	endif
0769+  6702~            	endif
0769+  6702             
0769+  6702~            	endif
0769+  6702~            	endif
0769+  6702             
0769+  66FE             
0769+  66FE 03          
0769+  66FF             
0769+  66FF             
0769+  66FF~            	endif
0769+  66FF~            	endif
0769+  66FF~            	endif
0769+  66FF             
0769+  6702             
0769+  6702~            	endif
0769+  6702~            	endif
0769+  6702             
0770+  6702             	done(1)
0770+  6702~            	done(1)
0770+  6702~            	done(1)
0770+  6702~            	done(1)
0770+  6702~            	done(1)
0770+  6702             
0770+  6702 7E 79 E6    
0771+  6705             	
0772+  6705             captiveAward:
0773+  6705 86 01       	fork(10)
0773+  6707 BD 7E 80    
0774+  670A 39          	rts
0775+  670B 01          	nop
0776+  670C 01          	nop
0777+  670D             	
0778+  670D             	beginFork()
0779+  670D 86 80       	lampOn(8,2) ; right special
0779+  670F 9A 09       
0779+  6711 97 09       
0780+  6713             	
0781+  6713 96 09       	ldaA	>lc(2)
0782+  6715 85 08       	bitA	lr(4) ; shoe 1
0783+  6717             	ifeq
0783+  6717             
0783+  6717 26 FE       
0784+  6719 DE 2C       		endFork()
0784+  671B 7E 79 52    
0785+  671E             	else
0785+  671E             
0785+  671E             
0785+  671E             
0785+  671E             
0785+  6718             
0785+  6718             
0785+  6718             
0785+  6718~            	else
0785+  6718~            	else
0785+  6718~            	else
0785+  6718~            	else
0785+  6718             
0785+  6718~            	else
0785+  6718~            	else
0785+  6718~            	else
0785+  6718~            	else
0785+  6718             
0785+  6718             
0785+  6718 07          
0785+  671E             
0785+  671E 20 FE       
0785+  6720             
0785+  6720             
0785+  6720             
0785+  6720~            	else
0785+  6720~            	else
0785+  6720~            	else
0785+  6720~            	else
0785+  6720~            	else
0785+  6720             
0785+  6720~            	else
0785+  6720~            	else
0785+  6720             
0785+  6720~            	else
0785+  6720~            	else
0785+  6720             
0786+  6720 85 20       		bitA	lr(6)
0787+  6722             		ifne
0787+  6722             
0787+  6722 27 FE       
0788+  6724 86 20       			flashLamp(6,2)
0788+  6726 9A A1       
0788+  6728 97 A1       
0789+  672A             		else
0789+  672A             
0789+  672A             
0789+  672A             
0789+  672A             
0789+  6723             
0789+  6723             
0789+  6723             
0789+  6723~            		else
0789+  6723~            		else
0789+  6723~            		else
0789+  6723~            		else
0789+  6723             
0789+  6723~            		else
0789+  6723~            		else
0789+  6723~            		else
0789+  6723~            		else
0789+  6723             
0789+  6723             
0789+  6723 08          
0789+  672A             
0789+  672A 20 FE       
0789+  672C             
0789+  672C             
0789+  672C             
0789+  672C~            		else
0789+  672C~            		else
0789+  672C~            		else
0789+  672C~            		else
0789+  672C~            		else
0789+  672C             
0789+  672C~            		else
0789+  672C~            		else
0789+  672C             
0789+  672C~            		else
0789+  672C~            		else
0789+  672C             
0790+  672C 85 10       			bitA	lr(5)
0791+  672E             			ifne
0791+  672E             
0791+  672E 27 FE       
0792+  6730 86 10       				flashLamp(5,2)
0792+  6732 9A A1       
0792+  6734 97 A1       
0793+  6736             			else
0793+  6736             
0793+  6736             
0793+  6736             
0793+  6736             
0793+  672F             
0793+  672F             
0793+  672F             
0793+  672F~            			else
0793+  672F~            			else
0793+  672F~            			else
0793+  672F~            			else
0793+  672F             
0793+  672F~            			else
0793+  672F~            			else
0793+  672F~            			else
0793+  672F~            			else
0793+  672F             
0793+  672F             
0793+  672F 08          
0793+  6736             
0793+  6736 20 FE       
0793+  6738             
0793+  6738             
0793+  6738             
0793+  6738~            			else
0793+  6738~            			else
0793+  6738~            			else
0793+  6738~            			else
0793+  6738~            			else
0793+  6738             
0793+  6738~            			else
0793+  6738~            			else
0793+  6738             
0793+  6738~            			else
0793+  6738~            			else
0793+  6738             
0794+  6738 86 08       				flashLamp(4,2)
0794+  673A 9A A1       
0794+  673C 97 A1       
0795+  673E             			endif
0795+  673E             
0795+  673E             
0795+  673E             
0795+  673E             
0795+  673E             
0795+  673E~            			endif
0795+  673E~            			endif
0795+  673E             
0795+  673E~            			endif
0795+  673E~            			endif
0795+  673E             
0795+  6737             
0795+  6737 06          
0795+  6738             
0795+  6738             
0795+  6738~            			endif
0795+  6738~            			endif
0795+  6738~            			endif
0795+  6738             
0795+  673E             
0795+  673E~            			endif
0795+  673E~            			endif
0795+  673E             
0796+  673E             		endif
0796+  673E             
0796+  673E             
0796+  673E             
0796+  673E             
0796+  673E             
0796+  673E~            		endif
0796+  673E~            		endif
0796+  673E             
0796+  673E~            		endif
0796+  673E~            		endif
0796+  673E             
0796+  672B             
0796+  672B 12          
0796+  672C             
0796+  672C             
0796+  672C~            		endif
0796+  672C~            		endif
0796+  672C~            		endif
0796+  672C             
0796+  673E             
0796+  673E~            		endif
0796+  673E~            		endif
0796+  673E             
0797+  673E             	endif
0797+  673E             
0797+  673E             
0797+  673E             
0797+  673E             
0797+  673E             
0797+  673E~            	endif
0797+  673E~            	endif
0797+  673E             
0797+  673E~            	endif
0797+  673E~            	endif
0797+  673E             
0797+  671F             
0797+  671F 1E          
0797+  6720             
0797+  6720             
0797+  6720~            	endif
0797+  6720~            	endif
0797+  6720~            	endif
0797+  6720             
0797+  673E             
0797+  673E~            	endif
0797+  673E~            	endif
0797+  673E             
0798+  673E             	
0799+  673E 86 04       	ldaA	lr(3)
0800+  6740 95 09       	bitA	>lc(2)
0801+  6742             	ifne ; double bonus
0801+  6742             
0801+  6742 27 FE       
0802+  6744 96 B0       		ldaA	>p_Bonus
0803+  6746             	else
0803+  6746             
0803+  6746             
0803+  6746             
0803+  6746             
0803+  6743             
0803+  6743             
0803+  6743             
0803+  6743~            	else
0803+  6743~            	else
0803+  6743~            	else
0803+  6743~            	else
0803+  6743             
0803+  6743~            	else
0803+  6743~            	else
0803+  6743~            	else
0803+  6743~            	else
0803+  6743             
0803+  6743             
0803+  6743 04          
0803+  6746             
0803+  6746 20 FE       
0803+  6748             
0803+  6748             
0803+  6748             
0803+  6748~            	else
0803+  6748~            	else
0803+  6748~            	else
0803+  6748~            	else
0803+  6748~            	else
0803+  6748             
0803+  6748~            	else
0803+  6748~            	else
0803+  6748             
0803+  6748~            	else
0803+  6748~            	else
0803+  6748             
0804+  6748 86 01       		ldaA	1
0805+  674A             	endif	
0805+  674A             
0805+  674A             
0805+  674A             
0805+  674A             
0805+  674A             
0805+  674A~            	endif	
0805+  674A~            	endif	
0805+  674A             
0805+  674A~            	endif	
0805+  674A~            	endif	
0805+  674A             
0805+  6747             
0805+  6747 02          
0805+  6748             
0805+  6748             
0805+  6748~            	endif	
0805+  6748~            	endif	
0805+  6748~            	endif	
0805+  6748             
0805+  674A             
0805+  674A~            	endif	
0805+  674A~            	endif	
0805+  674A             
0806+  674A 97 BE       	staA	p_BonusLeft
0807+  674C             	
0808+  674C             captiveAward_bonusLoop:
0809+  674C BD 7F 06    	score1000()
0810+  674F 7A 00 B0    	dec	p_Bonus
0811+  6752 BD 60 C3    	jsr	bonusLights
0812+  6755 86 19       	delay(200)
0812+  6757 BD 7E 6B    
0813+  675A 7D 00 B0    	tst	>p_Bonus
0814+  675D 26 ED       	bne	captiveAward_bonusLoop
0815+  675F             	
0816+  675F 86 38       	ldaA	00111000b
0817+  6761 94 A1       	andA	>flc(2)
0818+  6763 43          	comA
0819+  6764 94 09       	andA	>lc(2)
0820+  6766 97 09       	staA	lc(2)
0821+  6768             	
0822+  6768 96 BE       	ldaA	>p_BonusLeft
0823+  676A 97 B0       	staA	p_Bonus
0824+  676C             	
0825+  676C DE 2C       	endFork()	
0825+  676E 7E 79 52    
0826+  6771             	
0827+  6771             	
0828+  6771             alternate:
0829+  6771 C6 00       	ldaB	0 ; turn on left?
0830+  6773 86 80       	ldaA	lr(8) ; right special
0831+  6775 95 09       	bitA	>lc(2)
0832+  6777             	ifne
0832+  6777             
0832+  6777 27 FE       
0833+  6779 C6 01       		ldaB	1
0834+  677B 86 7F       		lampOff(8,2) ; right special
0834+  677D 94 09       
0834+  677F 97 09       
0835+  6781             	endif
0835+  6781             
0835+  6781             
0835+  6781             
0835+  6781             
0835+  6781             
0835+  6781~            	endif
0835+  6781~            	endif
0835+  6781             
0835+  6781~            	endif
0835+  6781~            	endif
0835+  6781             
0835+  6778             
0835+  6778 08          
0835+  6779             
0835+  6779             
0835+  6779~            	endif
0835+  6779~            	endif
0835+  6779~            	endif
0835+  6779             
0835+  6781             
0835+  6781~            	endif
0835+  6781~            	endif
0835+  6781             
0836+  6781 86 02       	ldaA	lr(2) ; left special
0837+  6783 95 0A       	bitA	>lc(3)
0838+  6785             	ifne
0838+  6785             
0838+  6785 27 FE       
0839+  6787 86 80       		lampOn(8,2) ; right special
0839+  6789 9A 09       
0839+  678B 97 09       
0840+  678D 86 FD       		lampOff(2,3) ; left special
0840+  678F 94 0A       
0840+  6791 97 0A       
0841+  6793             	endif
0841+  6793             
0841+  6793             
0841+  6793             
0841+  6793             
0841+  6793             
0841+  6793~            	endif
0841+  6793~            	endif
0841+  6793             
0841+  6793~            	endif
0841+  6793~            	endif
0841+  6793             
0841+  6786             
0841+  6786 0C          
0841+  6787             
0841+  6787             
0841+  6787~            	endif
0841+  6787~            	endif
0841+  6787~            	endif
0841+  6787             
0841+  6793             
0841+  6793~            	endif
0841+  6793~            	endif
0841+  6793             
0842+  6793 5D          	tstB
0843+  6794             	ifne
0843+  6794             
0843+  6794 27 FE       
0844+  6796 86 02       		lampOn(2,3) ; left special
0844+  6798 9A 0A       
0844+  679A 97 0A       
0845+  679C             	endif
0845+  679C             
0845+  679C             
0845+  679C             
0845+  679C             
0845+  679C             
0845+  679C~            	endif
0845+  679C~            	endif
0845+  679C             
0845+  679C~            	endif
0845+  679C~            	endif
0845+  679C             
0845+  6795             
0845+  6795 06          
0845+  6796             
0845+  6796             
0845+  6796~            	endif
0845+  6796~            	endif
0845+  6796~            	endif
0845+  6796             
0845+  679C             
0845+  679C~            	endif
0845+  679C~            	endif
0845+  679C             
0846+  679C 39          	rts
0847+  679D             	
0848+  679D             addCollect:
0849+  679D 96 09       	ldaA	>lc(2)
0850+  679F 85 08       	bitA	lr(4)
0851+  67A1             	ifeq
0851+  67A1             
0851+  67A1 26 FE       
0852+  67A3 86 08       		lampOn(4,2)
0852+  67A5 9A 09       
0852+  67A7 97 09       
0853+  67A9 86 08       		flashLamp(4,2)
0853+  67AB 9A A1       
0853+  67AD 97 A1       
0854+  67AF             	else
0854+  67AF             
0854+  67AF             
0854+  67AF             
0854+  67AF             
0854+  67A2             
0854+  67A2             
0854+  67A2             
0854+  67A2~            	else
0854+  67A2~            	else
0854+  67A2~            	else
0854+  67A2~            	else
0854+  67A2             
0854+  67A2~            	else
0854+  67A2~            	else
0854+  67A2~            	else
0854+  67A2~            	else
0854+  67A2             
0854+  67A2             
0854+  67A2 0E          
0854+  67AF             
0854+  67AF 20 FE       
0854+  67B1             
0854+  67B1             
0854+  67B1             
0854+  67B1~            	else
0854+  67B1~            	else
0854+  67B1~            	else
0854+  67B1~            	else
0854+  67B1~            	else
0854+  67B1             
0854+  67B1~            	else
0854+  67B1~            	else
0854+  67B1             
0854+  67B1~            	else
0854+  67B1~            	else
0854+  67B1             
0855+  67B1 85 10       		bitA	lr(5)
0856+  67B3             		ifeq
0856+  67B3             
0856+  67B3 26 FE       
0857+  67B5 86 10       			lampOn(5,2)
0857+  67B7 9A 09       
0857+  67B9 97 09       
0858+  67BB 86 10       			flashLamp(5,2)
0858+  67BD 9A A1       
0858+  67BF 97 A1       
0859+  67C1             		else
0859+  67C1             
0859+  67C1             
0859+  67C1             
0859+  67C1             
0859+  67B4             
0859+  67B4             
0859+  67B4             
0859+  67B4~            		else
0859+  67B4~            		else
0859+  67B4~            		else
0859+  67B4~            		else
0859+  67B4             
0859+  67B4~            		else
0859+  67B4~            		else
0859+  67B4~            		else
0859+  67B4~            		else
0859+  67B4             
0859+  67B4             
0859+  67B4 0E          
0859+  67C1             
0859+  67C1 20 FE       
0859+  67C3             
0859+  67C3             
0859+  67C3             
0859+  67C3~            		else
0859+  67C3~            		else
0859+  67C3~            		else
0859+  67C3~            		else
0859+  67C3~            		else
0859+  67C3             
0859+  67C3~            		else
0859+  67C3~            		else
0859+  67C3             
0859+  67C3~            		else
0859+  67C3~            		else
0859+  67C3             
0860+  67C3 85 20       			bitA	lr(6)
0861+  67C5             			ifeq
0861+  67C5             
0861+  67C5 26 FE       
0862+  67C7 86 20       				lampOn(6,2)
0862+  67C9 9A 09       
0862+  67CB 97 09       
0863+  67CD 86 20       				flashLamp(6,2)
0863+  67CF 9A A1       
0863+  67D1 97 A1       
0864+  67D3             			else
0864+  67D3             
0864+  67D3             
0864+  67D3             
0864+  67D3             
0864+  67C6             
0864+  67C6             
0864+  67C6             
0864+  67C6~            			else
0864+  67C6~            			else
0864+  67C6~            			else
0864+  67C6~            			else
0864+  67C6             
0864+  67C6~            			else
0864+  67C6~            			else
0864+  67C6~            			else
0864+  67C6~            			else
0864+  67C6             
0864+  67C6             
0864+  67C6 0E          
0864+  67D3             
0864+  67D3 20 FE       
0864+  67D5             
0864+  67D5             
0864+  67D5             
0864+  67D5~            			else
0864+  67D5~            			else
0864+  67D5~            			else
0864+  67D5~            			else
0864+  67D5~            			else
0864+  67D5             
0864+  67D5~            			else
0864+  67D5~            			else
0864+  67D5             
0864+  67D5~            			else
0864+  67D5~            			else
0864+  67D5             
0865+  67D5 BD 7F 06    				score1000()
0866+  67D8 86 04       				lampOn(3,3)
0866+  67DA 9A 0A       
0866+  67DC 97 0A       
0867+  67DE             			endif
0867+  67DE             
0867+  67DE             
0867+  67DE             
0867+  67DE             
0867+  67DE             
0867+  67DE~            			endif
0867+  67DE~            			endif
0867+  67DE             
0867+  67DE~            			endif
0867+  67DE~            			endif
0867+  67DE             
0867+  67D4             
0867+  67D4 09          
0867+  67D5             
0867+  67D5             
0867+  67D5~            			endif
0867+  67D5~            			endif
0867+  67D5~            			endif
0867+  67D5             
0867+  67DE             
0867+  67DE~            			endif
0867+  67DE~            			endif
0867+  67DE             
0868+  67DE             		endif
0868+  67DE             
0868+  67DE             
0868+  67DE             
0868+  67DE             
0868+  67DE             
0868+  67DE~            		endif
0868+  67DE~            		endif
0868+  67DE             
0868+  67DE~            		endif
0868+  67DE~            		endif
0868+  67DE             
0868+  67C2             
0868+  67C2 1B          
0868+  67C3             
0868+  67C3             
0868+  67C3~            		endif
0868+  67C3~            		endif
0868+  67C3~            		endif
0868+  67C3             
0868+  67DE             
0868+  67DE~            		endif
0868+  67DE~            		endif
0868+  67DE             
0869+  67DE             	endif
0869+  67DE             
0869+  67DE             
0869+  67DE             
0869+  67DE             
0869+  67DE             
0869+  67DE~            	endif
0869+  67DE~            	endif
0869+  67DE             
0869+  67DE~            	endif
0869+  67DE~            	endif
0869+  67DE             
0869+  67B0             
0869+  67B0 2D          
0869+  67B1             
0869+  67B1             
0869+  67B1~            	endif
0869+  67B1~            	endif
0869+  67B1~            	endif
0869+  67B1             
0869+  67DE             
0869+  67DE~            	endif
0869+  67DE~            	endif
0869+  67DE             
0870+  67DE             	
0871+  67DE             ;	ldaA	lr(6)
0872+  67DE             ;	bitA	>lc(2)
0873+  67DE             ;	ifne
0874+  67DE             ;		score1000()
0875+  67DE             ;		lampOn(3,3)
0876+  67DE             ;	else
0877+  67DE             ;		asrA
0878+  67DE             ;		bitA	>lc(2)
0879+  67DE             ;		bne	lightCollect
0880+  67DE             ;		asrA
0881+  67DE             ;		bitA	>lc(2)
0882+  67DE             ;		bne	lightCollect
0883+  67DE             ;		asrA
0884+  67DE             ;lightCollect:
0885+  67DE             ;		aslA
0886+  67DE             ;		tAB
0887+  67DE             ;		oraB	>lc(2)
0888+  67DE             ;		staB	lc(2)
0889+  67DE             ;		oraA	>flc(2)
0890+  67DE             ;		staA	flc(2)
0891+  67DE             ;	endif	
0892+  67DE 39          	rts
0893+  67DF             	
0894+  67DF             ; end callbacks
0895+  67DF             	.msfirst
0896+  67DF             ; needs to be on $**00 address
0897+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0898+  6000 62 1B       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0898+  6002 62 1B       
0898+  6004 62 34       
0898+  6006 60 C0       
0898+  6008 60 C0       
0898+  600A 60 C0       
0898+  600C 62 1B       
0898+  600E 60 C0       
0899+  6010 62 6B       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0899+  6012 62 1B       
0899+  6014 65 23       
0899+  6016 65 52       
0899+  6018 65 6B       
0899+  601A 65 80       
0899+  601C 66 CE       
0899+  601E 66 EE       
0900+  6020 65 B7       	.dw swDropTip	\.dw swDroptIp\.dw swDroptiP\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0900+  6022 65 C1       
0900+  6024 65 CB       
0900+  6026 66 8A       
0900+  6028 65 6B       
0900+  602A 63 E0       
0900+  602C 65 6B       
0900+  602E 60 C0       
0901+  6030 65 BC       	.dw swDropHot	\.dw swDrophOt\.dw swDrophoT\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0901+  6032 65 C6       
0901+  6034 65 D0       
0901+  6036 65 6B       
0901+  6038 63 60       
0901+  603A 66 93       
0901+  603C 65 AE       
0901+  603E 65 80       
0902+  6040 64 FD       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0902+  6042 65 49       
0902+  6044 65 6B       
0902+  6046 60 C0       
0902+  6048 64 AD       
0902+  604A 60 C0       
0902+  604C 60 C0       
0902+  604E 60 C0       
0903+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0903+  6052 60 C0       
0903+  6054 60 C0       
0903+  6056 60 C0       
0903+  6058 60 C0       
0903+  605A 60 C0       
0903+  605C 60 C0       
0903+  605E 60 C0       
0904+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0904+  6062 60 C0       
0904+  6064 60 C0       
0904+  6066 60 C0       
0904+  6068 60 C0       
0904+  606A 60 C0       
0904+  606C 60 C0       
0904+  606E 60 C0       
0905+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0905+  6072 60 C0       
0905+  6074 60 C0       
0905+  6076 60 C0       
0905+  6078 60 C0       
0905+  607A 60 C0       
0905+  607C 60 C0       
0905+  607E 60 C0       
0906+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0907+  6080             ; off = how many cycles it must be off for
0908+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0909+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0910+  6080             ; TRANSPOSED (?)
0911+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0912+  6080             settleTable: ; must be right after callbackTable
0913+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0913+  6081 87          
0913+  6082 C2          
0913+  6083 47          
0913+  6084 47          
0913+  6085 47          
0913+  6086 87          
0913+  6087 47          
0914+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,3,1,0)\SW(0,7,1,0)
0914+  6089 87          
0914+  608A 87          
0914+  608B 87          
0914+  608C 81          
0914+  608D 81          
0914+  608E 83          
0914+  608F 87          
0915+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,3,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0915+  6091 87          
0915+  6092 87          
0915+  6093 83          
0915+  6094 83          
0915+  6095 E1          
0915+  6096 81          
0915+  6097 80          
0916+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(4,1,1,1)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,1,1,0)
0916+  6099 87          
0916+  609A 87          
0916+  609B 83          
0916+  609C E1          
0916+  609D 80          
0916+  609E 80          
0916+  609F 81          
0917+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0917+  60A1 87          
0917+  60A2 81          
0917+  60A3 47          
0917+  60A4 80          
0917+  60A5 47          
0917+  60A6 47          
0917+  60A7 47          
0918+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0918+  60A9 47          
0918+  60AA 47          
0918+  60AB 47          
0918+  60AC 47          
0918+  60AD 47          
0918+  60AE 47          
0918+  60AF 47          
0919+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0919+  60B1 47          
0919+  60B2 47          
0919+  60B3 47          
0919+  60B4 47          
0919+  60B5 47          
0919+  60B6 47          
0919+  60B7 47          
0920+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0920+  60B9 47          
0920+  60BA 47          
0920+  60BB 47          
0920+  60BC 47          
0920+  60BD 47          
0920+  60BE 47          
0920+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 7E       	ldaA	attractStart >> 8
0102   78AF 97 2A       	staA	attractX
0103   78B1 86 C1       	ldaA	attractStart&$FF
0104   78B3 97 2B       	staA	attractX + 1
0105   78B5             	
0106   78B5 86 FF       	ldaA	$FF	
0107   78B7 B7 28 00    	staA 	displayStrobe
0108   78BA             
0109   78BA 86 00       	ldaA	00
0110   78BC 97 07       	staA	strobe
0111   78BE B7 01 6A    	staA	displayCol
0112   78C1 97 31       	staA	scanStrobe
0113   78C3             	
0114   78C3 CE 00 00    	ldX 	0
0115   78C6 DF 50       	stX	curCol
0116   78C8 DF 2E       	stX	scanCurCol
0117   78CA             	
0118   78CA 86 00       	ldaA	0
0119   78CC 97 10       	staA	curSwitchRowLsb
0120   78CE 97 30       	staA	scanCurSwitchRowLsb
0121   78D0             	
0122   78D0             ; fill solenoid status with off
0123   78D0 86 0F       	ldaA	$F
0124   78D2 CE 01 40    	ldX	solenoid1
0125   78D5             lSolDefault:
0126   78D5 A7 00       	staA	0, X
0127   78D7 08          	inX
0128   78D8 8C 01 4F    	cpX	solenoid16
0129   78DB 26 F8       	bne	lSolDefault
0130   78DD             	
0131   78DD             ; clear 8 banks
0132   78DD 86 00       	ldaA 	0
0133   78DF CE 00 00    	ldX	0
0134   78E2             lClear8:
0135   78E2 A7 08       	staA	lampCol1, X
0136   78E4 A7 A0       	staA	flashLampCol1, X
0137   78E6 A7 80       	staA	waitLeft, X
0138   78E8 08          	inX
0139   78E9 8C 00 08    	cpX	8
0140   78EC 26 F4       	bne 	lClear8
0141   78EE             	
0142   78EE             ; empty settle
0143   78EE 86 00       	ldaA	$00
0144   78F0 CE 01 00    	ldX	settleRow1
0145   78F3             lSettleDefault:
0146   78F3 A7 00       	staA	0, X
0147   78F5 08          	inX
0148   78F6 8C 01 3F    	cpX	settleRow8End
0149   78F9 26 F8       	bne	lSettleDefault
0150   78FB             	
0151   78FB             ; empty queue
0152   78FB 86 FF       	ldaA	$FF
0153   78FD CE 00 60    	ldX	queue
0154   7900             lEmptyQueue:
0155   7900 A7 00       	staA	0, X
0156   7902 08          	inX
0157   7903 8C 00 6D    	cpX	queueEnd
0158   7906 26 F8       	bne	lEmptyQueue
0159   7908             	
0160   7908 86 00       	ldaA	0
0161   790A 97 54       	staA	queueHead + 0
0162   790C 97 56       	staA	queueTail + 0
0163   790E 86 60       	ldaA	queue
0164   7910 97 55       	staA	queueHead + 1
0165   7912 97 57       	staA	queueTail + 1
0166   7914             	
0167   7914             ; test numbers
0168   7914 86 20       	lampOn(6,8) ; game over
0168   7916 9A 0F       
0168   7918 97 0F       
0169   791A             
0170   791A             	
0171   791A BD 7E A2    	jsr resetScores
0172   791D             	
0173   791D             ; setup complete
0174   791D 0E          	clI		; enable timer interrupt
0175   791E             	
0176   791E             	
0177   791E             end:
0178   791E 86 F7       	ldaA	11110111b
0179   7920 B4 01 6B    	andA	>state
0180   7923 B7 01 6B    	staA	state
0181   7926             
0182   7926 B6 01 6C    	ldaA	>strobeReset
0183   7929 85 0F       	bitA	1111b
0184   792B             	ifne
0184   792B             
0184   792B 27 FE       
0185   792D 86 08       		ldaA	1000b
0186   792F BA 01 6B    		oraA	>state
0187   7932 B7 01 6B    		staA	state
0188   7935             		
0189   7935             		; dec wait timers
0190   7935 CE 00 7F    		ldX	waitLeft - 1
0191   7938             decWaitTimers:
0192   7938 08          		inX
0193   7939 A6 00       		ldaA	0, X
0194   793B             		ifne
0194   793B             
0194   793B 27 FE       
0195   793D 4A          			decA
0196   793E A7 00       			staA	0, X
0197   7940             			ifeq
0197   7940             
0197   7940 26 FE       
0198   7942 A6 08       				ldaA	waitMsb - waitLeft, X
0199   7944 97 58       				staA	tempQ
0200   7946 A6 10       				ldaA	waitLsb - waitLeft, X
0201   7948 97 59       				staA	tempQ + 1
0202   794A E6 18       				ldaB	waitReg - waitLeft, X
0203   794C DF 2C       				stX	forkX
0204   794E DE 58       				ldX	>tempQ
0205   7950 6E 00       				jmp	0, X
0206   7952             			endif
0206   7952             
0206   7952             
0206   7952             
0206   7952             
0206   7952             
0206   7952~            			endif
0206   7952~            			endif
0206   7952             
0206   7952~            			endif
0206   7952~            			endif
0206   7952             
0206   7941             
0206   7941 10          
0206   7942             
0206   7942             
0206   7942~            			endif
0206   7942~            			endif
0206   7942~            			endif
0206   7942             
0206   7952             
0206   7952~            			endif
0206   7952~            			endif
0206   7952             
0207   7952             		endif
0207   7952             
0207   7952             
0207   7952             
0207   7952             
0207   7952             
0207   7952~            		endif
0207   7952~            		endif
0207   7952             
0207   7952~            		endif
0207   7952~            		endif
0207   7952             
0207   793C             
0207   793C 15          
0207   793D             
0207   793D             
0207   793D~            		endif
0207   793D~            		endif
0207   793D~            		endif
0207   793D             
0207   7952             
0207   7952~            		endif
0207   7952~            		endif
0207   7952             
0208   7952             afterFork:
0209   7952 8C 00 86    		cpX	waitLeftEnd
0210   7955 26 E1       		bne	decWaitTimers
0211   7957             		
0212   7957             		
0213   7957 7A 00 A9    		dec	dropResetTimer
0214   795A             		ifmi
0214   795A             
0214   795A 2A FE       
0215   795C 7C 00 A9    			inc	dropResetTimer
0216   795F             		endif
0216   795F             
0216   795F             
0216   795F             
0216   795F             
0216   795F             
0216   795F~            		endif
0216   795F~            		endif
0216   795F             
0216   795F~            		endif
0216   795F~            		endif
0216   795F             
0216   795B             
0216   795B 03          
0216   795C             
0216   795C             
0216   795C~            		endif
0216   795C~            		endif
0216   795C~            		endif
0216   795C             
0216   795F             
0216   795F~            		endif
0216   795F~            		endif
0216   795F             
0217   795F 7D 00 BF    		tst	>bonusTimer
0218   7962             		ifne
0218   7962             
0218   7962 27 FE       
0219   7964 7A 00 BF    			dec	bonusTimer
0220   7967             		endif
0220   7967             
0220   7967             
0220   7967             
0220   7967             
0220   7967             
0220   7967~            		endif
0220   7967~            		endif
0220   7967             
0220   7967~            		endif
0220   7967~            		endif
0220   7967             
0220   7963             
0220   7963 03          
0220   7964             
0220   7964             
0220   7964~            		endif
0220   7964~            		endif
0220   7964~            		endif
0220   7964             
0220   7967             
0220   7967~            		endif
0220   7967~            		endif
0220   7967             
0221   7967 7D 00 BA    		tst	>spinnerTimer
0222   796A             		ifne
0222   796A             
0222   796A 27 FE       
0223   796C 7A 00 BA    			dec	spinnerTimer
0224   796F             			ifeq
0224   796F             
0224   796F 26 FE       
0225   7971 86 F7       				flashOff(4,3)
0225   7973 94 A2       
0225   7975 97 A2       
0226   7977 86 F7       				lampOff(4,3)
0226   7979 94 0A       
0226   797B 97 0A       
0227   797D 86 04       				ldaA	4
0228   797F 91 B5       				cmpA	>p_DropsDown
0229   7981             				ifgt
0229   7981             
0229   7981 23 FE       
0230   7983 86 F7       					lampOff(4,3) ; spinner
0230   7985 94 0A       
0230   7987 97 0A       
0231   7989             				else
0231   7989             
0231   7989             
0231   7989             
0231   7989             
0231   7982             
0231   7982             
0231   7982             
0231   7982~            				else
0231   7982~            				else
0231   7982~            				else
0231   7982~            				else
0231   7982             
0231   7982~            				else
0231   7982~            				else
0231   7982~            				else
0231   7982~            				else
0231   7982             
0231   7982             
0231   7982 08          
0231   7989             
0231   7989 20 FE       
0231   798B             
0231   798B             
0231   798B             
0231   798B~            				else
0231   798B~            				else
0231   798B~            				else
0231   798B~            				else
0231   798B~            				else
0231   798B             
0231   798B~            				else
0231   798B~            				else
0231   798B             
0231   798B~            				else
0231   798B~            				else
0231   798B             
0232   798B 86 08       					lampOn(4,3)
0232   798D 9A 0A       
0232   798F 97 0A       
0233   7991             				endif
0233   7991             
0233   7991             
0233   7991             
0233   7991             
0233   7991             
0233   7991~            				endif
0233   7991~            				endif
0233   7991             
0233   7991~            				endif
0233   7991~            				endif
0233   7991             
0233   798A             
0233   798A 06          
0233   798B             
0233   798B             
0233   798B~            				endif
0233   798B~            				endif
0233   798B~            				endif
0233   798B             
0233   7991             
0233   7991~            				endif
0233   7991~            				endif
0233   7991             
0234   7991             			endif
0234   7991             
0234   7991             
0234   7991             
0234   7991             
0234   7991             
0234   7991~            			endif
0234   7991~            			endif
0234   7991             
0234   7991~            			endif
0234   7991~            			endif
0234   7991             
0234   7970             
0234   7970 20          
0234   7971             
0234   7971             
0234   7971~            			endif
0234   7971~            			endif
0234   7971~            			endif
0234   7971             
0234   7991             
0234   7991~            			endif
0234   7991~            			endif
0234   7991             
0235   7991             		endif
0235   7991             
0235   7991             
0235   7991             
0235   7991             
0235   7991             
0235   7991~            		endif
0235   7991~            		endif
0235   7991             
0235   7991~            		endif
0235   7991~            		endif
0235   7991             
0235   796B             
0235   796B 25          
0235   796C             
0235   796C             
0235   796C~            		endif
0235   796C~            		endif
0235   796C~            		endif
0235   796C             
0235   7991             
0235   7991~            		endif
0235   7991~            		endif
0235   7991             
0236   7991             		
0237   7991             		;ldaA	>state		; clear strobe reset bit
0238   7991             		;andA	11111011b
0239   7991             		;staA	state
0240   7991 7F 01 6C    		clr	strobeReset
0241   7994             	endif
0241   7994             
0241   7994             
0241   7994             
0241   7994             
0241   7994             
0241   7994~            	endif
0241   7994~            	endif
0241   7994             
0241   7994~            	endif
0241   7994~            	endif
0241   7994             
0241   792C             
0241   792C 67          
0241   792D             
0241   792D             
0241   792D~            	endif
0241   792D~            	endif
0241   792D~            	endif
0241   792D             
0241   7994             
0241   7994~            	endif
0241   7994~            	endif
0241   7994             
0242   7994             
0243   7994             		
0244   7994             ; pop queue
0245   7994 D6 57       	ldaB	>queueTail + 1
0246   7996 D1 55       	cmpB	>queueHead + 1
0247   7998             	ifeq
0247   7998             
0247   7998 26 FE       
0248   799A 7E 7A 45    		jmp skipQueue
0249   799D             	endif
0249   799D             
0249   799D             
0249   799D             
0249   799D             
0249   799D             
0249   799D~            	endif
0249   799D~            	endif
0249   799D             
0249   799D~            	endif
0249   799D~            	endif
0249   799D             
0249   7999             
0249   7999 03          
0249   799A             
0249   799A             
0249   799A~            	endif
0249   799A~            	endif
0249   799A~            	endif
0249   799A             
0249   799D             
0249   799D~            	endif
0249   799D~            	endif
0249   799D             
0250   799D 86 08       	ldaA	1000b
0251   799F BA 01 6B    	oraA	>state
0252   79A2 B7 01 6B    	staA	state
0253   79A5             	
0254   79A5 DE 54       	ldX	>queueHead
0255   79A7 A6 00       	ldaA	0, X	; A now contains the first queue item
0256   79A9             	
0257   79A9             	; step queue
0258   79A9 C6 6D       	ldaB	queueEnd
0259   79AB D1 55       	cmpB	>queueHead + 1
0260   79AD             	ifeq
0260   79AD             
0260   79AD 26 FE       
0261   79AF C6 60       		ldaB	queue
0262   79B1 D7 55       		staB	queueHead + 1
0263   79B3             	else
0263   79B3             
0263   79B3             
0263   79B3             
0263   79B3             
0263   79AE             
0263   79AE             
0263   79AE             
0263   79AE~            	else
0263   79AE~            	else
0263   79AE~            	else
0263   79AE~            	else
0263   79AE             
0263   79AE~            	else
0263   79AE~            	else
0263   79AE~            	else
0263   79AE~            	else
0263   79AE             
0263   79AE             
0263   79AE 06          
0263   79B3             
0263   79B3 20 FE       
0263   79B5             
0263   79B5             
0263   79B5             
0263   79B5~            	else
0263   79B5~            	else
0263   79B5~            	else
0263   79B5~            	else
0263   79B5~            	else
0263   79B5             
0263   79B5~            	else
0263   79B5~            	else
0263   79B5             
0263   79B5~            	else
0263   79B5~            	else
0263   79B5             
0264   79B5 7C 00 55    		inc	queueHead + 1
0265   79B8             	endif
0265   79B8             
0265   79B8             
0265   79B8             
0265   79B8             
0265   79B8             
0265   79B8~            	endif
0265   79B8~            	endif
0265   79B8             
0265   79B8~            	endif
0265   79B8~            	endif
0265   79B8             
0265   79B4             
0265   79B4 03          
0265   79B5             
0265   79B5             
0265   79B5~            	endif
0265   79B5~            	endif
0265   79B5~            	endif
0265   79B5             
0265   79B8             
0265   79B8~            	endif
0265   79B8~            	endif
0265   79B8             
0266   79B8             	
0267   79B8 16          	tAB
0268   79B9 C4 3F       	andB	00111111b ; B = callback index
0269   79BB             	
0270   79BB D7 59       	staB	tempQ + 1
0271   79BD C6 60       	ldaB	callbackTable >> 8
0272   79BF D7 58       	staB	tempQ + 0	; callback address LSB / 2
0273   79C1 DE 58       	ldX	>tempQ
0274   79C3             	
0275   79C3 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0276   79C5 C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0277   79C7             	ifne ; if closure only
0277   79C7             
0277   79C7 27 FE       
0278   79C9 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0279   79CB 26 6A       		bne	skipEvent
0280   79CD             	endif
0280   79CD             
0280   79CD             
0280   79CD             
0280   79CD             
0280   79CD             
0280   79CD~            	endif
0280   79CD~            	endif
0280   79CD             
0280   79CD~            	endif
0280   79CD~            	endif
0280   79CD             
0280   79C8             
0280   79C8 04          
0280   79C9             
0280   79C9             
0280   79C9~            	endif
0280   79C9~            	endif
0280   79C9~            	endif
0280   79C9             
0280   79CD             
0280   79CD~            	endif
0280   79CD~            	endif
0280   79CD             
0281   79CD             	
0282   79CD C5 40       	bitB	01000000b ; B.7 = active in game over
0283   79CF             	ifeq 	 ; not active in game over
0283   79CF             
0283   79CF 26 FE       
0284   79D1 D6 0F       		ldaB	>lc(8)	; gameover mask
0285   79D3 C5 20       		bitB	lr(6)
0286   79D5 26 60       		bne	skipEvent
0287   79D7 D6 0F       		ldaB	>lc(8) ; tilt bit
0288   79D9 C5 10       		bitB	lr(5)
0289   79DB 26 5A       		bne	skipEvent
0290   79DD             	endif
0290   79DD             
0290   79DD             
0290   79DD             
0290   79DD             
0290   79DD             
0290   79DD~            	endif
0290   79DD~            	endif
0290   79DD             
0290   79DD~            	endif
0290   79DD~            	endif
0290   79DD             
0290   79D0             
0290   79D0 0C          
0290   79D1             
0290   79D1             
0290   79D1~            	endif
0290   79D1~            	endif
0290   79D1~            	endif
0290   79D1             
0290   79DD             
0290   79DD~            	endif
0290   79DD~            	endif
0290   79DD             
0291   79DD             	
0292   79DD             	; checked passed, do callback
0293   79DD 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0294   79E0 DE 58       	ldX	>tempQ
0295   79E2 EE 00       	ldX	0, X
0296   79E4 6E 00       	jmp	0, X
0297   79E6             	; everything trashed
0298   79E6             afterQueueEvent:
0299   79E6 BD 60 C3    	jsr 	bonusLights
0300   79E9             	
0301   79E9             	; update last switch
0302   79E9 96 59       	ldaA	> tempQ + 1
0303   79EB 44          	lsrA 	; got doubled earlier
0304   79EC 97 A8       	staA	lastSwitch
0305   79EE             
0306   79EE 86 02       	ldaA	10b ; no validate bit
0307   79F0 B5 01 6B    	bitA	>state
0308   79F3             	ifeq ; validate pf
0308   79F3             
0308   79F3 26 FE       
0309   79F5             		; check if playfield invalid
0310   79F5 86 0F       		ldaA	00001111b ; player up
0311   79F7 95 A7       		bitA	>flc(8)
0312   79F9             		ifne ; any flashing -> pf invalid
0312   79F9             
0312   79F9 27 FE       
0313   79FB 43          			comA	; turn off flashing
0314   79FC 94 A7       			andA	>flc(8)
0315   79FE 97 A7       			staA	flc(8)
0316   7A00             			
0317   7A00 86 01       			ldaA	lr(1) ; shoot again pf flashing
0318   7A02 95 A2       			bitA	>flc(3)
0319   7A04             			ifne
0319   7A04             
0319   7A04 27 FE       
0320   7A06             				; turn off ball save
0321   7A06 86 FE       				flashOff(1,3)
0321   7A08 94 A2       
0321   7A0A 97 A2       
0322   7A0C 86 40       				ldaA	lr(7) ; shoot again backbox
0323   7A0E 95 0F       				bitA	>lc(8)
0324   7A10             				ifeq
0324   7A10             
0324   7A10 26 FE       
0325   7A12 86 FE       					lampOff(1,3) ; shoot again pf
0325   7A14 94 0A       
0325   7A16 97 0A       
0326   7A18             				endif
0326   7A18             
0326   7A18             
0326   7A18             
0326   7A18             
0326   7A18             
0326   7A18~            				endif
0326   7A18~            				endif
0326   7A18             
0326   7A18~            				endif
0326   7A18~            				endif
0326   7A18             
0326   7A11             
0326   7A11 06          
0326   7A12             
0326   7A12             
0326   7A12~            				endif
0326   7A12~            				endif
0326   7A12~            				endif
0326   7A12             
0326   7A18             
0326   7A18~            				endif
0326   7A18~            				endif
0326   7A18             
0327   7A18             			else
0327   7A18             
0327   7A18             
0327   7A18             
0327   7A18             
0327   7A05             
0327   7A05             
0327   7A05             
0327   7A05~            			else
0327   7A05~            			else
0327   7A05~            			else
0327   7A05~            			else
0327   7A05             
0327   7A05~            			else
0327   7A05~            			else
0327   7A05~            			else
0327   7A05~            			else
0327   7A05             
0327   7A05             
0327   7A05 14          
0327   7A18             
0327   7A18 20 FE       
0327   7A1A             
0327   7A1A             
0327   7A1A             
0327   7A1A~            			else
0327   7A1A~            			else
0327   7A1A~            			else
0327   7A1A~            			else
0327   7A1A~            			else
0327   7A1A             
0327   7A1A~            			else
0327   7A1A~            			else
0327   7A1A             
0327   7A1A~            			else
0327   7A1A~            			else
0327   7A1A             
0328   7A1A 86 FE       				lampOff(1,3) ; shoot again
0328   7A1C 94 0A       
0328   7A1E 97 0A       
0329   7A20 86 BF       				lampOff(7,8)
0329   7A22 94 0F       
0329   7A24 97 0F       
0330   7A26             			endif
0330   7A26             
0330   7A26             
0330   7A26             
0330   7A26             
0330   7A26             
0330   7A26~            			endif
0330   7A26~            			endif
0330   7A26             
0330   7A26~            			endif
0330   7A26~            			endif
0330   7A26             
0330   7A19             
0330   7A19 0C          
0330   7A1A             
0330   7A1A             
0330   7A1A~            			endif
0330   7A1A~            			endif
0330   7A1A~            			endif
0330   7A1A             
0330   7A26             
0330   7A26~            			endif
0330   7A26~            			endif
0330   7A26             
0331   7A26             		endif
0331   7A26             
0331   7A26             
0331   7A26             
0331   7A26             
0331   7A26             
0331   7A26~            		endif
0331   7A26~            		endif
0331   7A26             
0331   7A26~            		endif
0331   7A26~            		endif
0331   7A26             
0331   79FA             
0331   79FA 2B          
0331   79FB             
0331   79FB             
0331   79FB~            		endif
0331   79FB~            		endif
0331   79FB~            		endif
0331   79FB             
0331   7A26             
0331   7A26~            		endif
0331   7A26~            		endif
0331   7A26             
0332   7A26             	else
0332   7A26             
0332   7A26             
0332   7A26             
0332   7A26             
0332   79F4             
0332   79F4             
0332   79F4             
0332   79F4~            	else
0332   79F4~            	else
0332   79F4~            	else
0332   79F4~            	else
0332   79F4             
0332   79F4~            	else
0332   79F4~            	else
0332   79F4~            	else
0332   79F4~            	else
0332   79F4             
0332   79F4             
0332   79F4 33          
0332   7A26             
0332   7A26 20 FE       
0332   7A28             
0332   7A28             
0332   7A28             
0332   7A28~            	else
0332   7A28~            	else
0332   7A28~            	else
0332   7A28~            	else
0332   7A28~            	else
0332   7A28             
0332   7A28~            	else
0332   7A28~            	else
0332   7A28             
0332   7A28~            	else
0332   7A28~            	else
0332   7A28             
0333   7A28             		; clear don't validate bit
0334   7A28 43          		comA
0335   7A29 B4 01 6B    		andA	>state
0336   7A2C B7 01 6B    		staA	state
0337   7A2F             	endif
0337   7A2F             
0337   7A2F             
0337   7A2F             
0337   7A2F             
0337   7A2F             
0337   7A2F~            	endif
0337   7A2F~            	endif
0337   7A2F             
0337   7A2F~            	endif
0337   7A2F~            	endif
0337   7A2F             
0337   7A27             
0337   7A27 07          
0337   7A28             
0337   7A28             
0337   7A28~            	endif
0337   7A28~            	endif
0337   7A28~            	endif
0337   7A28             
0337   7A2F             
0337   7A2F~            	endif
0337   7A2F~            	endif
0337   7A2F             
0338   7A2F             	
0339   7A2F 86 08       	ldaA	1000b
0340   7A31 BA 01 6B    	oraA	>state
0341   7A34 B7 01 6B    	staA	state
0342   7A37             	
0343   7A37             skipEvent:
0344   7A37 B6 01 6C    	ldaA	>strobeReset
0345   7A3A 85 0F       	bitA	1111b
0346   7A3C             	ifeq	; don't process queue if still finishing timers
0346   7A3C             
0346   7A3C 26 FE       
0347   7A3E             	else
0347   7A3E             
0347   7A3E             
0347   7A3E             
0347   7A3E             
0347   7A3D             
0347   7A3D             
0347   7A3D             
0347   7A3D~            	else
0347   7A3D~            	else
0347   7A3D~            	else
0347   7A3D~            	else
0347   7A3D             
0347   7A3D~            	else
0347   7A3D~            	else
0347   7A3D~            	else
0347   7A3D~            	else
0347   7A3D             
0347   7A3D             
0347   7A3D 02          
0347   7A3E             
0347   7A3E 20 FE       
0347   7A40             
0347   7A40             
0347   7A40             
0347   7A40~            	else
0347   7A40~            	else
0347   7A40~            	else
0347   7A40~            	else
0347   7A40~            	else
0347   7A40             
0347   7A40~            	else
0347   7A40~            	else
0347   7A40             
0347   7A40~            	else
0347   7A40~            	else
0347   7A40             
0348   7A40 DE 2C       		ldX	>forkX
0349   7A42 7E 79 52    		jmp	afterFork
0350   7A45             	endif
0350   7A45             
0350   7A45             
0350   7A45             
0350   7A45             
0350   7A45             
0350   7A45~            	endif
0350   7A45~            	endif
0350   7A45             
0350   7A45~            	endif
0350   7A45~            	endif
0350   7A45             
0350   7A3F             
0350   7A3F 05          
0350   7A40             
0350   7A40             
0350   7A40~            	endif
0350   7A40~            	endif
0350   7A40~            	endif
0350   7A40             
0350   7A45             
0350   7A45~            	endif
0350   7A45~            	endif
0350   7A45             
0351   7A45             				
0352   7A45             skipQueue:
0353   7A45             				
0354   7A45             		
0355   7A45             	;	jmp 	quickScanDone		
0356   7A45 D6 0F       	ldaB	>lc(8)	; gameover mask
0357   7A47 C5 20       	bitB	lr(6)
0358   7A49             	ifne
0358   7A49             
0358   7A49 27 FE       
0359   7A4B 7E 7A F3    		jmp 	quickScanDone
0360   7A4E             	endif
0360   7A4E             
0360   7A4E             
0360   7A4E             
0360   7A4E             
0360   7A4E             
0360   7A4E~            	endif
0360   7A4E~            	endif
0360   7A4E             
0360   7A4E~            	endif
0360   7A4E~            	endif
0360   7A4E             
0360   7A4A             
0360   7A4A 03          
0360   7A4B             
0360   7A4B             
0360   7A4B~            	endif
0360   7A4B~            	endif
0360   7A4B~            	endif
0360   7A4B             
0360   7A4E             
0360   7A4E~            	endif
0360   7A4E~            	endif
0360   7A4E             
0361   7A4E D6 0F       	ldaB	>lc(8) ; tilt bit
0362   7A50 C5 10       	bitB	lr(5)
0363   7A52             	ifne
0363   7A52             
0363   7A52 27 FE       
0364   7A54 7E 7A F3    		jmp 	quickScanDone
0365   7A57             	endif
0365   7A57             
0365   7A57             
0365   7A57             
0365   7A57             
0365   7A57             
0365   7A57~            	endif
0365   7A57~            	endif
0365   7A57             
0365   7A57~            	endif
0365   7A57~            	endif
0365   7A57             
0365   7A53             
0365   7A53 03          
0365   7A54             
0365   7A54             
0365   7A54~            	endif
0365   7A54~            	endif
0365   7A54~            	endif
0365   7A54             
0365   7A57             
0365   7A57~            	endif
0365   7A57~            	endif
0365   7A57             
0366   7A57 B6 01 6B    	ldaA	>state
0367   7A5A 85 08       	bitA	1000b
0368   7A5C             	ifne
0368   7A5C             
0368   7A5C 27 FE       
0369   7A5E 7E 7A F3    		jmp 	quickScanDone
0370   7A61             	endif
0370   7A61             
0370   7A61             
0370   7A61             
0370   7A61             
0370   7A61             
0370   7A61~            	endif
0370   7A61~            	endif
0370   7A61             
0370   7A61~            	endif
0370   7A61~            	endif
0370   7A61             
0370   7A5D             
0370   7A5D 03          
0370   7A5E             
0370   7A5E             
0370   7A5E~            	endif
0370   7A5E~            	endif
0370   7A5E~            	endif
0370   7A5E             
0370   7A61             
0370   7A61~            	endif
0370   7A61~            	endif
0370   7A61             
0371   7A61             	
0372   7A61 86 01       	ldaA	1
0373   7A63 BA 01 6B    	oraA	>state
0374   7A66 B7 01 6B    	staA	state
0375   7A69             	
0376   7A69 96 31       	ldaA	>scanStrobe
0377   7A6B B7 30 02    	staA	switchStrobe
0378   7A6E DE 2E       	ldX	>scanCurCol
0379   7A70 B6 30 00    	ldaA	>switchRow
0380   7A73 16          	tab
0381   7A74 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0382   7A76 B4 30 00    	andA	>switchRow	; A contains any switches that are closed but not processed
0383   7A79             	ifne
0383   7A79             
0383   7A79 27 FE       
0384   7A7B             	
0385   7A7B D6 30       	ldaB	>scanCurSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0386   7A7D D7 35       	staB	scanTempX + 1 			; scanTempX = switch / 2
0387   7A7F D7 33       	staB	scanX + 1			; scanX = cRAM
0388   7A81 C6 60       	ldaB	callbackTable >> 8
0389   7A83 D7 34       	staB	scanTempX
0390   7A85 C6 01       	ldaB	cRAM >> 8
0391   7A87 D7 32       	staB	scanX
0392   7A89             	
0393   7A89 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0394   7A8B             	
0395   7A8B             	; scanTempX now contains the beginning of the row in the callbackTable
0396   7A8B             scanSwNext:
0397   7A8B 85 01       	bitA	00000001b	 ; Z set if switch not different
0398   7A8D             	ifne		; if bit set, switch different
0398   7A8D             
0398   7A8D 27 FE       
0399   7A8F 36          		pshA ; store changed switches left
0400   7A90 DE 32       		ldX	>scanX
0401   7A92 A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0402   7A94 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0403   7A96             		ifeq ; =0 -> was settled, so now it's not
0403   7A96             
0403   7A96 26 FE       
0404   7A98             			; get the settle time
0405   7A98 96 33       			ldaA	>scanX + 1
0406   7A9A 97 35       			staA	scanTempX + 1 	; get scanTempX in sync with scanX LSB
0407   7A9C DE 34       			ldX	>scanTempX
0408   7A9E             			
0409   7A9E             			; scanTempX contains half the address of the callback, so add diff between settleTable and callbackTable
0410   7A9E A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0411   7AA0             			
0412   7AA0             			; need to get correct 3 bits from switch settings
0413   7AA0 84 38       			andA	111000b
0414   7AA2             			
0415   7AA2             			ifeq
0415   7AA2             
0415   7AA2 26 FE       
0416   7AA4 DE 2E       				ldX	>scanCurCol
0417   7AA6 17          				tBA	; A now the bit in row
0418   7AA7 A5 20       				bitA	switchRow1, X
0419   7AA9             				ifeq
0419   7AA9             
0419   7AA9 26 FE       
0420   7AAB AA 20       					oraA	switchRow1, X ; toggle bit in row
0421   7AAD A7 20       					staA	switchRow1, X ; A now state of row
0422   7AAF             					;lsl	scanTempX + 1 ; double LSB because callback table is 2b wide
0423   7AAF             					;ldX	>scanTempX
0424   7AAF             					;ldX	0, X
0425   7AAF             					;jmp	0, X
0426   7AAF F5 30 00    					bitB	>switchRow
0427   7AB2 86 40       					ldaA	01000000b
0428   7AB4 9A 33       					oraA	>scanX + 1 ; A now contains the event per queue schema
0429   7AB6             					
0430   7AB6             					; store event
0431   7AB6 DE 56       					ldX	>queueTail
0432   7AB8 A7 00       					staA	0, X
0433   7ABA 7C 00 57    					inc	queueTail + 1
0434   7ABD             					
0435   7ABD             					; wrap queueTail if necessary
0436   7ABD 8C 00 6D    					cpX	queueEnd 
0437   7AC0             					ifeq
0437   7AC0             
0437   7AC0 26 FE       
0438   7AC2 86 60       						ldaA	queue 
0439   7AC4 97 57       						staA	queueTail + 1
0440   7AC6             					endif
0440   7AC6             
0440   7AC6             
0440   7AC6             
0440   7AC6             
0440   7AC6             
0440   7AC6~            					endif
0440   7AC6~            					endif
0440   7AC6             
0440   7AC6~            					endif
0440   7AC6~            					endif
0440   7AC6             
0440   7AC1             
0440   7AC1 04          
0440   7AC2             
0440   7AC2             
0440   7AC2~            					endif
0440   7AC2~            					endif
0440   7AC2~            					endif
0440   7AC2             
0440   7AC6             
0440   7AC6~            					endif
0440   7AC6~            					endif
0440   7AC6             
0441   7AC6             				endif
0441   7AC6             
0441   7AC6             
0441   7AC6             
0441   7AC6             
0441   7AC6             
0441   7AC6~            				endif
0441   7AC6~            				endif
0441   7AC6             
0441   7AC6~            				endif
0441   7AC6~            				endif
0441   7AC6             
0441   7AAA             
0441   7AAA 1B          
0441   7AAB             
0441   7AAB             
0441   7AAB~            				endif
0441   7AAB~            				endif
0441   7AAB~            				endif
0441   7AAB             
0441   7AC6             
0441   7AC6~            				endif
0441   7AC6~            				endif
0441   7AC6             
0442   7AC6             			endif
0442   7AC6             
0442   7AC6             
0442   7AC6             
0442   7AC6             
0442   7AC6             
0442   7AC6~            			endif
0442   7AC6~            			endif
0442   7AC6             
0442   7AC6~            			endif
0442   7AC6~            			endif
0442   7AC6             
0442   7AA3             
0442   7AA3 22          
0442   7AA4             
0442   7AA4             
0442   7AA4~            			endif
0442   7AA4~            			endif
0442   7AA4~            			endif
0442   7AA4             
0442   7AC6             
0442   7AC6~            			endif
0442   7AC6~            			endif
0442   7AC6             
0443   7AC6             		endif
0443   7AC6             
0443   7AC6             
0443   7AC6             
0443   7AC6             
0443   7AC6             
0443   7AC6~            		endif
0443   7AC6~            		endif
0443   7AC6             
0443   7AC6~            		endif
0443   7AC6~            		endif
0443   7AC6             
0443   7A97             
0443   7A97 2E          
0443   7A98             
0443   7A98             
0443   7A98~            		endif
0443   7A98~            		endif
0443   7A98~            		endif
0443   7A98             
0443   7AC6             
0443   7AC6~            		endif
0443   7AC6~            		endif
0443   7AC6             
0444   7AC6 32          		pulA
0445   7AC7             	endif
0445   7AC7             
0445   7AC7             
0445   7AC7             
0445   7AC7             
0445   7AC7             
0445   7AC7~            	endif
0445   7AC7~            	endif
0445   7AC7             
0445   7AC7~            	endif
0445   7AC7~            	endif
0445   7AC7             
0445   7A8E             
0445   7A8E 38          
0445   7A8F             
0445   7A8F             
0445   7A8F~            	endif
0445   7A8F~            	endif
0445   7A8F~            	endif
0445   7A8F             
0445   7AC7             
0445   7AC7~            	endif
0445   7AC7~            	endif
0445   7AC7             
0446   7AC7 7C 00 33    	inc scanX + 1
0447   7ACA 58          	aslB
0448   7ACB 44          	lsrA			; pop lowest bit off, set Z if A is empty
0449   7ACC 26 BD       	bne	scanSwNext 	; more 'switched' bits, keep processing 
0450   7ACE             	
0451   7ACE             	endif ; switch closed in row
0451   7ACE             
0451   7ACE             
0451   7ACE             
0451   7ACE             
0451   7ACE             
0451   7ACE~            	endif ; switch closed in row
0451   7ACE~            	endif ; switch closed in row
0451   7ACE             
0451   7ACE~            	endif ; switch closed in row
0451   7ACE~            	endif ; switch closed in row
0451   7ACE             
0451   7A7A             
0451   7A7A 53          
0451   7A7B             
0451   7A7B             
0451   7A7B~            	endif ; switch closed in row
0451   7A7B~            	endif ; switch closed in row
0451   7A7B~            	endif ; switch closed in row
0451   7A7B             
0451   7ACE             
0451   7ACE~            	endif ; switch closed in row
0451   7ACE~            	endif ; switch closed in row
0451   7ACE             
0452   7ACE             	
0453   7ACE 86 08       	ldaA	8 	; pitch
0454   7AD0 9B 30       	addA	>scanCurSwitchRowLsb
0455   7AD2 97 30       	staA	scanCurSwitchRowLsb
0456   7AD4 78 00 31    	asl	scanStrobe
0457   7AD7             	ifeq			
0457   7AD7             
0457   7AD7 26 FE       
0458   7AD9 86 01       		ldaA	00000001b
0459   7ADB 97 31       		staA	scanStrobe
0460   7ADD 7F 00 2E    		clr	scanCurCol
0461   7AE0 7F 00 2F    		clr	scanCurCol + 1
0462   7AE3 7F 00 30    		clr	scanCurSwitchRowLsb
0463   7AE6             	else
0463   7AE6             
0463   7AE6             
0463   7AE6             
0463   7AE6             
0463   7AD8             
0463   7AD8             
0463   7AD8             
0463   7AD8~            	else
0463   7AD8~            	else
0463   7AD8~            	else
0463   7AD8~            	else
0463   7AD8             
0463   7AD8~            	else
0463   7AD8~            	else
0463   7AD8~            	else
0463   7AD8~            	else
0463   7AD8             
0463   7AD8             
0463   7AD8 0F          
0463   7AE6             
0463   7AE6 20 FE       
0463   7AE8             
0463   7AE8             
0463   7AE8             
0463   7AE8~            	else
0463   7AE8~            	else
0463   7AE8~            	else
0463   7AE8~            	else
0463   7AE8~            	else
0463   7AE8             
0463   7AE8~            	else
0463   7AE8~            	else
0463   7AE8             
0463   7AE8~            	else
0463   7AE8~            	else
0463   7AE8             
0464   7AE8 7C 00 2F    		inc	scanCurCol + 1
0465   7AEB             	endif
0465   7AEB             
0465   7AEB             
0465   7AEB             
0465   7AEB             
0465   7AEB             
0465   7AEB~            	endif
0465   7AEB~            	endif
0465   7AEB             
0465   7AEB~            	endif
0465   7AEB~            	endif
0465   7AEB             
0465   7AE7             
0465   7AE7 03          
0465   7AE8             
0465   7AE8             
0465   7AE8~            	endif
0465   7AE8~            	endif
0465   7AE8~            	endif
0465   7AE8             
0465   7AEB             
0465   7AEB~            	endif
0465   7AEB~            	endif
0465   7AEB             
0466   7AEB             	
0467   7AEB 86 0E       	ldaA	1110b
0468   7AED B4 01 6B    	andA	>state
0469   7AF0 B7 01 6B    	staA	state
0470   7AF3             	
0471   7AF3             quickScanDone:
0472   7AF3             				
0473   7AF3 7E 79 1E    	jmp		end
0474   7AF6 00 00       	.dw 0
0475   7AF8 00 00       	.dw 0
0476   7AFA 00 00       	.dw 0
0477   7AFC 00 00       	.dw 0
0478   7AFE 00 00       	.dw 0
0479   7B00             		
0480   7B00             interrupt:	
0481   7B00 7C 00 02    	inc	counter
0482   7B03 86 00       	ldaA	0
0483   7B05 91 02       	cmpA	>counter
0484   7B07 26 52       	bne	counterHandled
0485   7B09             	
0486   7B09             	; attract mode
0487   7B09 86 20       	ldaA	lr(6) ; gameover
0488   7B0B 95 0F       		bitA	> lc(8)
0489   7B0D             		ifne
0489   7B0D             
0489   7B0D 27 FE       
0490   7B0F DE 2A       		ldX	>attractX
0491   7B11 A6 00       		ldaA	0, X
0492   7B13 97 09       		staA	lc(2)
0493   7B15 A6 01       		ldaA	1, X
0494   7B17 97 0A       		staA	lc(3)
0495   7B19 A6 02       		ldaA	2, X
0496   7B1B 97 0B       		staA	lc(4)
0497   7B1D A6 03       		ldaA	3, X
0498   7B1F 97 0C       		staA	lc(5)
0499   7B21 A6 04       		ldaA	4, X
0500   7B23 97 0D       		staA	lc(6)
0501   7B25 96 2B       		ldaA	>attractX + 1
0502   7B27 8B 05       		addA	5
0503   7B29 81 E9       		cmpA	attractEnd&$FF
0504   7B2B             		ifeq
0504   7B2B             
0504   7B2B 26 FE       
0505   7B2D 86 C1       			ldaA	attractStart&$FF
0506   7B2F             		endif
0506   7B2F             
0506   7B2F             
0506   7B2F             
0506   7B2F             
0506   7B2F             
0506   7B2F~            		endif
0506   7B2F~            		endif
0506   7B2F             
0506   7B2F~            		endif
0506   7B2F~            		endif
0506   7B2F             
0506   7B2C             
0506   7B2C 02          
0506   7B2D             
0506   7B2D             
0506   7B2D~            		endif
0506   7B2D~            		endif
0506   7B2D~            		endif
0506   7B2D             
0506   7B2F             
0506   7B2F~            		endif
0506   7B2F~            		endif
0506   7B2F             
0507   7B2F 97 2B       		staA	attractX + 1
0508   7B31             	endif
0508   7B31             
0508   7B31             
0508   7B31             
0508   7B31             
0508   7B31             
0508   7B31~            	endif
0508   7B31~            	endif
0508   7B31             
0508   7B31~            	endif
0508   7B31~            	endif
0508   7B31             
0508   7B0E             
0508   7B0E 22          
0508   7B0F             
0508   7B0F             
0508   7B0F~            	endif
0508   7B0F~            	endif
0508   7B0F~            	endif
0508   7B0F             
0508   7B31             
0508   7B31~            	endif
0508   7B31~            	endif
0508   7B31             
0509   7B31             	
0510   7B31 7C 00 03    	inc 	counter2
0511   7B34 86 08       	ldaA	8
0512   7B36 91 03       	cmpA	>counter2
0513   7B38 26 21       	bne	counterHandled
0514   7B3A             	
0515   7B3A 86 0A       	ldaA	10
0516   7B3C 91 B0       	cmpA	>p_Bonus
0517   7B3E             	ifeq
0517   7B3E             
0517   7B3E 26 FE       
0518   7B40 BD 7F 16    		jsr advanceBonus
0519   7B43             	endif
0519   7B43             
0519   7B43             
0519   7B43             
0519   7B43             
0519   7B43             
0519   7B43~            	endif
0519   7B43~            	endif
0519   7B43             
0519   7B43~            	endif
0519   7B43~            	endif
0519   7B43             
0519   7B3F             
0519   7B3F 03          
0519   7B40             
0519   7B40             
0519   7B40~            	endif
0519   7B40~            	endif
0519   7B40~            	endif
0519   7B40             
0519   7B43             
0519   7B43~            	endif
0519   7B43~            	endif
0519   7B43             
0520   7B43             	
0521   7B43 86 00       	ldaA	0
0522   7B45 97 03       	staA	counter2
0523   7B47 86 77       	ldaA	01110111b
0524   7B49 91 7E       	cmpA	>displayBcd1 + 14
0525   7B4B 27 08       	beq	on
0526   7B4D             	
0527   7B4D 86 F0       	ldaA	$F0
0528   7B4F             	;staA	lampRow1
0529   7B4F 86 77       	ldaA	01110111b
0530   7B51 97 7E       	staA	displayBcd1	 + 14
0531   7B53 20 06       	bra	counterHandled
0532   7B55             on:
0533   7B55 86 0F       	ldaA	$0F
0534   7B57             	;staA	lampRow1
0535   7B57 86 33       	ldaA	00110011b
0536   7B59 97 7E       	staA	displayBcd1	 + 14
0537   7B5B             
0538   7B5B             counterHandled:
0539   7B5B             	
0540   7B5B             ; update display 
0541   7B5B             	
0542   7B5B             	; for debugging
0543   7B5B 96 C0       	ldaA	>$C0
0544   7B5D 48          	lslA
0545   7B5E 48          	lslA
0546   7B5F 48          	lslA
0547   7B60 48          	lslA
0548   7B61 97 7F       	staA	displayBcd1 + 15
0549   7B63 96 87       	ldaA	>$87
0550   7B65 48          	lslA
0551   7B66 48          	lslA
0552   7B67 48          	lslA
0553   7B68 48          	lslA
0554   7B69 97 76       	staA	displayBcd1 + 6
0555   7B6B             	
0556   7B6B DE 50       	ldX	>curCol
0557   7B6D B6 01 6A    	ldaA	>displayCol
0558   7B70 84 0F       	andA	1111b
0559   7B72 C6 FF       	ldaB 	$FF
0560   7B74 F7 28 02    	staB	displayBcd
0561   7B77 B7 28 00    	staA	displayStrobe
0562   7B7A 85 08       	bitA	00001000b
0563   7B7C             	ifeq
0563   7B7C             
0563   7B7C 26 FE       
0564   7B7E E6 70       		ldaB	displayBcd1, X
0565   7B80             	else
0565   7B80             
0565   7B80             
0565   7B80             
0565   7B80             
0565   7B7D             
0565   7B7D             
0565   7B7D             
0565   7B7D~            	else
0565   7B7D~            	else
0565   7B7D~            	else
0565   7B7D~            	else
0565   7B7D             
0565   7B7D~            	else
0565   7B7D~            	else
0565   7B7D~            	else
0565   7B7D~            	else
0565   7B7D             
0565   7B7D             
0565   7B7D 04          
0565   7B80             
0565   7B80 20 FE       
0565   7B82             
0565   7B82             
0565   7B82             
0565   7B82~            	else
0565   7B82~            	else
0565   7B82~            	else
0565   7B82~            	else
0565   7B82~            	else
0565   7B82             
0565   7B82~            	else
0565   7B82~            	else
0565   7B82             
0565   7B82~            	else
0565   7B82~            	else
0565   7B82             
0566   7B82 E6 78       		ldaB	displayBcd1 + 8, X
0567   7B84             	endif
0567   7B84             
0567   7B84             
0567   7B84             
0567   7B84             
0567   7B84             
0567   7B84~            	endif
0567   7B84~            	endif
0567   7B84             
0567   7B84~            	endif
0567   7B84~            	endif
0567   7B84             
0567   7B81             
0567   7B81 02          
0567   7B82             
0567   7B82             
0567   7B82~            	endif
0567   7B82~            	endif
0567   7B82~            	endif
0567   7B82             
0567   7B84             
0567   7B84~            	endif
0567   7B84~            	endif
0567   7B84             
0568   7B84 F7 28 02    	staB	displayBcd
0569   7B87             	
0570   7B87             ; read switches
0571   7B87             	
0572   7B87 F6 30 02    	ldaB	>switchStrobe	; save for later
0573   7B8A 96 07       	ldaA	>strobe
0574   7B8C B7 30 02    	staA	switchStrobe
0575   7B8F DE 50       	ldX	>curCol
0576   7B91 B6 30 00    	ldaA	>switchRow
0577   7B94 97 36       	staA	irqSwitchRow
0578   7B96 F7 30 02    	staB	switchStrobe	; restore
0579   7B99 16          	tab
0580   7B9A A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0581   7B9C             	
0582   7B9C D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0583   7B9E D7 01       	staB	temp + 1 			; temp = switch / 2
0584   7BA0 D7 53       	staB	tempX + 1			; tempX = cRAM
0585   7BA2 C6 60       	ldaB	callbackTable >> 8
0586   7BA4 D7 00       	staB	temp
0587   7BA6 C6 01       	ldaB	cRAM >> 8
0588   7BA8 D7 52       	staB	tempX
0589   7BAA             	
0590   7BAA C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0591   7BAC             	
0592   7BAC             	; temp now contains the beginning of the row in the callbackTable
0593   7BAC             swNext:
0594   7BAC 85 01       	bitA	00000001b	 ; Z set if switch not different
0595   7BAE             	ifne		; if bit set, switch different
0595   7BAE             
0595   7BAE 27 FE       
0596   7BB0 36          		pshA ; store changed switches left
0597   7BB1 DE 52       		ldX	>tempX
0598   7BB3             checkSettled:
0599   7BB3 A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0600   7BB5 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0601   7BB7 27 34       		beq 	notSettled; A=0 -> was settled
0602   7BB9             		; else A > 0 -> settling
0603   7BB9 86 18       			ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0604   7BBB             				; but checking 'multiple of 8' would miss 7/8 switch
0605   7BBB             				; columns completely since they're in sync
0606   7BBB             				; so instead the lowest bits are empty (so that it'll
0607   7BBB             				; get all switch cols) and instead it skips 7/8 groups 
0608   7BBB             				; of 8 IRQs
0609   7BBB 95 02       			bitA	>counter
0610   7BBD 26 47       			bne	settledEnd
0611   7BBF A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0612   7BC1 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0613   7BC3 4A          			decA
0614   7BC4 A7 00       			staA	0, X	; sets Z if now A = 0
0615   7BC6             			ifeq ; A=0 -> now settled, fire event
0615   7BC6             
0615   7BC6 26 FE       
0616   7BC8             settled:		
0617   7BC8 DE 50       				ldX	>curCol
0618   7BCA 17          				tBA	; A now the bit in row
0619   7BCB A8 20       				eorA	switchRow1, X ; toggle bit in row
0620   7BCD A7 20       				staA	switchRow1, X ; A now state of row
0621   7BCF             				
0622   7BCF D5 36       				bitB	>irqSwitchRow
0623   7BD1             				ifne ; switch just closed
0623   7BD1             
0623   7BD1 27 FE       
0624   7BD3 86 40       					ldaA	01000000b
0625   7BD5             				else
0625   7BD5             
0625   7BD5             
0625   7BD5             
0625   7BD5             
0625   7BD2             
0625   7BD2             
0625   7BD2             
0625   7BD2~            				else
0625   7BD2~            				else
0625   7BD2~            				else
0625   7BD2~            				else
0625   7BD2             
0625   7BD2~            				else
0625   7BD2~            				else
0625   7BD2~            				else
0625   7BD2~            				else
0625   7BD2             
0625   7BD2             
0625   7BD2 04          
0625   7BD5             
0625   7BD5 20 FE       
0625   7BD7             
0625   7BD7             
0625   7BD7             
0625   7BD7~            				else
0625   7BD7~            				else
0625   7BD7~            				else
0625   7BD7~            				else
0625   7BD7~            				else
0625   7BD7             
0625   7BD7~            				else
0625   7BD7~            				else
0625   7BD7             
0625   7BD7~            				else
0625   7BD7~            				else
0625   7BD7             
0626   7BD7 86 C0       					ldaA	11000000b
0627   7BD9             				endif
0627   7BD9             
0627   7BD9             
0627   7BD9             
0627   7BD9             
0627   7BD9             
0627   7BD9~            				endif
0627   7BD9~            				endif
0627   7BD9             
0627   7BD9~            				endif
0627   7BD9~            				endif
0627   7BD9             
0627   7BD6             
0627   7BD6 02          
0627   7BD7             
0627   7BD7             
0627   7BD7~            				endif
0627   7BD7~            				endif
0627   7BD7~            				endif
0627   7BD7             
0627   7BD9             
0627   7BD9~            				endif
0627   7BD9~            				endif
0627   7BD9             
0628   7BD9 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0629   7BDB             				
0630   7BDB             				; store event
0631   7BDB DE 56       				ldX	>queueTail
0632   7BDD A7 00       				staA	0, X
0633   7BDF 7C 00 57    				inc	queueTail + 1
0634   7BE2             				
0635   7BE2             				; wrap queueTail if necessary
0636   7BE2 8C 00 6D    				cpX	queueEnd 
0637   7BE5             				ifeq
0637   7BE5             
0637   7BE5 26 FE       
0638   7BE7 86 60       					ldaA	queue 
0639   7BE9 97 57       					staA	queueTail + 1
0640   7BEB             				endif
0640   7BEB             
0640   7BEB             
0640   7BEB             
0640   7BEB             
0640   7BEB             
0640   7BEB~            				endif
0640   7BEB~            				endif
0640   7BEB             
0640   7BEB~            				endif
0640   7BEB~            				endif
0640   7BEB             
0640   7BE6             
0640   7BE6 04          
0640   7BE7             
0640   7BE7             
0640   7BE7~            				endif
0640   7BE7~            				endif
0640   7BE7~            				endif
0640   7BE7             
0640   7BEB             
0640   7BEB~            				endif
0640   7BEB~            				endif
0640   7BEB             
0641   7BEB             			endif
0641   7BEB             
0641   7BEB             
0641   7BEB             
0641   7BEB             
0641   7BEB             
0641   7BEB~            			endif
0641   7BEB~            			endif
0641   7BEB             
0641   7BEB~            			endif
0641   7BEB~            			endif
0641   7BEB             
0641   7BC7             
0641   7BC7 23          
0641   7BC8             
0641   7BC8             
0641   7BC8~            			endif
0641   7BC8~            			endif
0641   7BC8~            			endif
0641   7BC8             
0641   7BEB             
0641   7BEB~            			endif
0641   7BEB~            			endif
0641   7BEB             
0642   7BEB 20 19       		bra settledEnd
0643   7BED             notSettled: ; =0 -> was settled, so now it's not
0644   7BED             			; get the settle time
0645   7BED 96 53       			ldaA	>tempX + 1
0646   7BEF 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0647   7BF1 DE 00       			ldX	>temp
0648   7BF3             			
0649   7BF3             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0650   7BF3 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0651   7BF5             			
0652   7BF5             			; need to get correct 3 bits from switch settings
0653   7BF5 D5 36       			bitB	>irqSwitchRow
0654   7BF7             			ifne ; switch just turned on
0654   7BF7             
0654   7BF7 27 FE       
0655   7BF9 44          				lsrA
0656   7BFA 44          				lsrA
0657   7BFB             			else
0657   7BFB             
0657   7BFB             
0657   7BFB             
0657   7BFB             
0657   7BF8             
0657   7BF8             
0657   7BF8             
0657   7BF8~            			else
0657   7BF8~            			else
0657   7BF8~            			else
0657   7BF8~            			else
0657   7BF8             
0657   7BF8~            			else
0657   7BF8~            			else
0657   7BF8~            			else
0657   7BF8~            			else
0657   7BF8             
0657   7BF8             
0657   7BF8 04          
0657   7BFB             
0657   7BFB 20 FE       
0657   7BFD             
0657   7BFD             
0657   7BFD             
0657   7BFD~            			else
0657   7BFD~            			else
0657   7BFD~            			else
0657   7BFD~            			else
0657   7BFD~            			else
0657   7BFD             
0657   7BFD~            			else
0657   7BFD~            			else
0657   7BFD             
0657   7BFD~            			else
0657   7BFD~            			else
0657   7BFD             
0658   7BFD 48          				aslA
0659   7BFE             			endif
0659   7BFE             
0659   7BFE             
0659   7BFE             
0659   7BFE             
0659   7BFE             
0659   7BFE~            			endif
0659   7BFE~            			endif
0659   7BFE             
0659   7BFE~            			endif
0659   7BFE~            			endif
0659   7BFE             
0659   7BFC             
0659   7BFC 01          
0659   7BFD             
0659   7BFD             
0659   7BFD~            			endif
0659   7BFD~            			endif
0659   7BFD~            			endif
0659   7BFD             
0659   7BFE             
0659   7BFE~            			endif
0659   7BFE~            			endif
0659   7BFE             
0660   7BFE 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0661   7C00             						
0662   7C00 DE 52       			ldX	>tempX
0663   7C02 A7 00       			staA	0, X		; start settling	
0664   7C04 27 C2       			beq	settled		; quick out for 0 settle
0665   7C06             settledEnd:
0666   7C06             			
0667   7C06 32          		pulA
0668   7C07             	endif
0668   7C07             
0668   7C07             
0668   7C07             
0668   7C07             
0668   7C07             
0668   7C07~            	endif
0668   7C07~            	endif
0668   7C07             
0668   7C07~            	endif
0668   7C07~            	endif
0668   7C07             
0668   7BAF             
0668   7BAF 57          
0668   7BB0             
0668   7BB0             
0668   7BB0~            	endif
0668   7BB0~            	endif
0668   7BB0~            	endif
0668   7BB0             
0668   7C07             
0668   7C07~            	endif
0668   7C07~            	endif
0668   7C07             
0669   7C07 7C 00 53    	inc tempX + 1
0670   7C0A 58          	aslB
0671   7C0B 44          	lsrA			; pop lowest bit off, set Z if A is empty
0672   7C0C 26 9E       	bne		swNext 	; more 'switched' bits, keep processing 
0673   7C0E             	
0674   7C0E             	
0675   7C0E             ; update lamps
0676   7C0E             updateLamps:
0677   7C0E             	;jmp updateStrobe
0678   7C0E             
0679   7C0E DE 50       	ldX	>curCol
0680   7C10             	
0681   7C10 86 FF       	ldaA	$FF	;lamp row is inverted
0682   7C12 B7 24 00    	staA	lampCol
0683   7C15 96 07       	ldaA	>strobe
0684   7C17 B7 24 02    	staA	lampStrobe
0685   7C1A             	
0686   7C1A D6 02       	ldaB	>counter
0687   7C1C A6 08       	ldaA	lampCol1, X
0688   7C1E C5 80       	bitB	10000000b 
0689   7C20             	ifeq
0689   7C20             
0689   7C20 26 FE       
0690   7C22 A8 A0       		eorA	flashLampCol1, X
0691   7C24 A4 08       		andA	lampCol1, X
0692   7C26             	endif
0692   7C26             
0692   7C26             
0692   7C26             
0692   7C26             
0692   7C26             
0692   7C26~            	endif
0692   7C26~            	endif
0692   7C26             
0692   7C26~            	endif
0692   7C26~            	endif
0692   7C26             
0692   7C21             
0692   7C21 04          
0692   7C22             
0692   7C22             
0692   7C22~            	endif
0692   7C22~            	endif
0692   7C22~            	endif
0692   7C22             
0692   7C26             
0692   7C26~            	endif
0692   7C26~            	endif
0692   7C26             
0693   7C26 43          	comA	; inverted
0694   7C27             	
0695   7C27 B7 24 00    	staA	lampCol
0696   7C2A 86 00       	ldaA	00
0697   7C2C             
0698   7C2C             ; update solenoids
0699   7C2C             	; if a solenoid is set to <254, --
0700   7C2C             	; if =255, off, otherwise on
0701   7C2C             	; else leave it at 254
0702   7C2C             	
0703   7C2C 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0704   7C2F 86 FE       	ldaA	254
0705   7C31 DE 50       	ldX	>curCol
0706   7C33             	; update solenoid in current 'column' (1-8) 
0707   7C33 A1 40       	cmpA	solenoid1 - cRAM, X
0708   7C35             	ifge 	; solenoid <=254, turn on
0708   7C35             
0708   7C35 25 FE       
0709   7C37             		ifgt	; solenoid < 254, decrement
0709   7C37             
0709   7C37 23 FE       
0710   7C39 6A 40       			dec	solenoid1 - cRAM, X
0711   7C3B             		endif
0711   7C3B             
0711   7C3B             
0711   7C3B             
0711   7C3B             
0711   7C3B             
0711   7C3B~            		endif
0711   7C3B~            		endif
0711   7C3B             
0711   7C3B~            		endif
0711   7C3B~            		endif
0711   7C3B             
0711   7C38             
0711   7C38 02          
0711   7C39             
0711   7C39             
0711   7C39~            		endif
0711   7C39~            		endif
0711   7C39~            		endif
0711   7C39             
0711   7C3B             
0711   7C3B~            		endif
0711   7C3B~            		endif
0711   7C3B             
0712   7C3B 0D          		sec
0713   7C3C             	else
0713   7C3C             
0713   7C3C             
0713   7C3C             
0713   7C3C             
0713   7C36             
0713   7C36             
0713   7C36             
0713   7C36~            	else
0713   7C36~            	else
0713   7C36~            	else
0713   7C36~            	else
0713   7C36             
0713   7C36~            	else
0713   7C36~            	else
0713   7C36~            	else
0713   7C36~            	else
0713   7C36             
0713   7C36             
0713   7C36 07          
0713   7C3C             
0713   7C3C 20 FE       
0713   7C3E             
0713   7C3E             
0713   7C3E             
0713   7C3E~            	else
0713   7C3E~            	else
0713   7C3E~            	else
0713   7C3E~            	else
0713   7C3E~            	else
0713   7C3E             
0713   7C3E~            	else
0713   7C3E~            	else
0713   7C3E             
0713   7C3E~            	else
0713   7C3E~            	else
0713   7C3E             
0714   7C3E 0C          		clc
0715   7C3F             	endif
0715   7C3F             
0715   7C3F             
0715   7C3F             
0715   7C3F             
0715   7C3F             
0715   7C3F~            	endif
0715   7C3F~            	endif
0715   7C3F             
0715   7C3F~            	endif
0715   7C3F~            	endif
0715   7C3F             
0715   7C3D             
0715   7C3D 01          
0715   7C3E             
0715   7C3E             
0715   7C3E~            	endif
0715   7C3E~            	endif
0715   7C3E~            	endif
0715   7C3E             
0715   7C3F             
0715   7C3F~            	endif
0715   7C3F~            	endif
0715   7C3F             
0716   7C3F 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0717   7C42             	; repeat above for second bank
0718   7C42 A1 48       	cmpA	solenoid9 - cRAM, X
0719   7C44             	ifge 	; solenoid <=254, turn on
0719   7C44             
0719   7C44 25 FE       
0720   7C46             		ifgt	; solenoid < 254, decrement
0720   7C46             
0720   7C46 23 FE       
0721   7C48 6A 48       			dec	solenoid9 - cRAM, X
0722   7C4A             		endif
0722   7C4A             
0722   7C4A             
0722   7C4A             
0722   7C4A             
0722   7C4A             
0722   7C4A~            		endif
0722   7C4A~            		endif
0722   7C4A             
0722   7C4A~            		endif
0722   7C4A~            		endif
0722   7C4A             
0722   7C47             
0722   7C47 02          
0722   7C48             
0722   7C48             
0722   7C48~            		endif
0722   7C48~            		endif
0722   7C48~            		endif
0722   7C48             
0722   7C4A             
0722   7C4A~            		endif
0722   7C4A~            		endif
0722   7C4A             
0723   7C4A 0D          		sec
0724   7C4B             	else
0724   7C4B             
0724   7C4B             
0724   7C4B             
0724   7C4B             
0724   7C45             
0724   7C45             
0724   7C45             
0724   7C45~            	else
0724   7C45~            	else
0724   7C45~            	else
0724   7C45~            	else
0724   7C45             
0724   7C45~            	else
0724   7C45~            	else
0724   7C45~            	else
0724   7C45~            	else
0724   7C45             
0724   7C45             
0724   7C45 07          
0724   7C4B             
0724   7C4B 20 FE       
0724   7C4D             
0724   7C4D             
0724   7C4D             
0724   7C4D~            	else
0724   7C4D~            	else
0724   7C4D~            	else
0724   7C4D~            	else
0724   7C4D~            	else
0724   7C4D             
0724   7C4D~            	else
0724   7C4D~            	else
0724   7C4D             
0724   7C4D~            	else
0724   7C4D~            	else
0724   7C4D             
0725   7C4D 0C          		clc
0726   7C4E             	endif
0726   7C4E             
0726   7C4E             
0726   7C4E             
0726   7C4E             
0726   7C4E             
0726   7C4E~            	endif
0726   7C4E~            	endif
0726   7C4E             
0726   7C4E~            	endif
0726   7C4E~            	endif
0726   7C4E             
0726   7C4C             
0726   7C4C 01          
0726   7C4D             
0726   7C4D             
0726   7C4D~            	endif
0726   7C4D~            	endif
0726   7C4D~            	endif
0726   7C4D             
0726   7C4E             
0726   7C4E~            	endif
0726   7C4E~            	endif
0726   7C4E             
0727   7C4E 76 00 29    	ror		solBStatus	
0728   7C51 7A 00 50    	dec		curCol ; undo inc
0729   7C54             	
0730   7C54             ; update strobe	
0731   7C54             updateStrobe:
0732   7C54 86 08       	ldaA	8 	; pitch
0733   7C56 9B 10       	addA	>curSwitchRowLsb
0734   7C58 97 10       	staA	curSwitchRowLsb
0735   7C5A 7C 01 6A    	inc	displayCol
0736   7C5D 78 00 07    	asl	strobe ; strobe done?  reset
0737   7C60             	ifeq		
0737   7C60             
0737   7C60 26 FE       
0738   7C62 96 28       		ldaA	>solAStatus
0739   7C64 B7 22 00    		staA	solenoidA
0740   7C67 96 29       		ldaA	>solBStatus
0741   7C69 B7 22 02    		staA	solenoidB
0742   7C6C             	
0743   7C6C 86 01       		ldaA	00000001b
0744   7C6E 97 07       		staA	strobe
0745   7C70             		
0746   7C70 7F 00 50    		clr	curCol
0747   7C73 7F 00 51    		clr	curCol + 1
0748   7C76 7F 00 10    		clr	curSwitchRowLsb
0749   7C79 7F 00 28    		clr	solAStatus
0750   7C7C 7F 00 29    		clr	solBStatus
0751   7C7F             		
0752   7C7F F6 01 6A    		ldaB	>displayCol	; reset display col only if it's > 7 
0753   7C82 CA F0       		oraB	11110000b
0754   7C84 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0755   7C86             		ifgt
0755   7C86             
0755   7C86 23 FE       
0756   7C88 7F 01 6A    			clr	displayCol
0757   7C8B             		endif
0757   7C8B             
0757   7C8B             
0757   7C8B             
0757   7C8B             
0757   7C8B             
0757   7C8B~            		endif
0757   7C8B~            		endif
0757   7C8B             
0757   7C8B~            		endif
0757   7C8B~            		endif
0757   7C8B             
0757   7C87             
0757   7C87 03          
0757   7C88             
0757   7C88             
0757   7C88~            		endif
0757   7C88~            		endif
0757   7C88~            		endif
0757   7C88             
0757   7C8B             
0757   7C8B~            		endif
0757   7C8B~            		endif
0757   7C8B             
0758   7C8B             	
0759   7C8B             		;ldaA	>state
0760   7C8B             		;oraA	100b
0761   7C8B             		;staA	state
0762   7C8B 7C 01 6C    		inc	strobeReset
0763   7C8E             	else
0763   7C8E             
0763   7C8E             
0763   7C8E             
0763   7C8E             
0763   7C61             
0763   7C61             
0763   7C61             
0763   7C61~            	else
0763   7C61~            	else
0763   7C61~            	else
0763   7C61~            	else
0763   7C61             
0763   7C61~            	else
0763   7C61~            	else
0763   7C61~            	else
0763   7C61~            	else
0763   7C61             
0763   7C61             
0763   7C61 2E          
0763   7C8E             
0763   7C8E 20 FE       
0763   7C90             
0763   7C90             
0763   7C90             
0763   7C90~            	else
0763   7C90~            	else
0763   7C90~            	else
0763   7C90~            	else
0763   7C90~            	else
0763   7C90             
0763   7C90~            	else
0763   7C90~            	else
0763   7C90             
0763   7C90~            	else
0763   7C90~            	else
0763   7C90             
0764   7C90 7C 00 51    		inc	curCol + 1
0765   7C93             	endif
0765   7C93             
0765   7C93             
0765   7C93             
0765   7C93             
0765   7C93             
0765   7C93~            	endif
0765   7C93~            	endif
0765   7C93             
0765   7C93~            	endif
0765   7C93~            	endif
0765   7C93             
0765   7C8F             
0765   7C8F 03          
0765   7C90             
0765   7C90             
0765   7C90~            	endif
0765   7C90~            	endif
0765   7C90~            	endif
0765   7C90             
0765   7C93             
0765   7C93~            	endif
0765   7C93~            	endif
0765   7C93             
0766   7C93             	
0767   7C93 3B          	rti
0768   7C94             afterInterrupt:
0769   7C94             
0770   7FF8             pointers: 	.org $7FF8  	
0771   7FF8             	.msfirst
0772   7FF8 7B 00       	.dw interrupt			
0773   7FFA 7B 00       	.dw interrupt			
0774   7FFC 7B 00       	.dw interrupt			
0775   7FFE 78 00       	.dw main
0776   8000             	
0777   8000             	
0778   8000             	.endtasm: Number of errors = 0
