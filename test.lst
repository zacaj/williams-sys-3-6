0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             curCol:			.equ RAM + $50 ; +
0041+  0000             tempX:			.equ RAM + $52 ; +
0042+  0000             queueHead:		.equ RAM + $54 ; +
0043+  0000             queueTail:		.equ RAM + $56 ; +
0044+  0000             tempQ:			.equ RAM + $58 ; +
0045+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0046+  0000             queueEnd:		.equ RAM + $67
0047+  0000             ;
0048+  0000             displayBcd1:	.equ RAM + $70
0049+  0000             displayBcd16:	.equ RAM + $7F
0050+  0000             ballCount:		.equ displayBcd1 + 7
0051+  0000             waitLeft: 		.equ RAM + $80 ; dec every 8ms
0052+  0000             waitLeftEnd:		.equ RAM + $87
0053+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0054+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0055+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0056+  0000             flashLampCol1:		.equ RAM + $A0
0057+  0000             flashLampCol8:		.equ RAM + $A7
0058+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0059+  0000             lastSwitch:		.equ RAM + $A8
0060+  0000             dropResetTimer:		.equ RAM + $A9 ; max 127
0061+  0000             dropsDown:		.equ RAM + $AA
0062+  0000             p_Bonus:		.equ RAM + $B0
0063+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0064+  0000             p_DropsDown:		.equ RAM + $B5
0065+  0000             p_LampCol2:		.equ RAM + $B6 ; -> B9
0066+  0000             
0067+  0000             
0068+  0000             
0069+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0070+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0071+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0072+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0073+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0074+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0075+  0000             #DEFINE s(n) 		(0 + n)
0076+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0077+  0000             pA_10:			.equ pA_1m + 5
0078+  0000             pB_1m:			.equ pA_10 + 1
0079+  0000             pB_10:			.equ pB_1m + 5
0080+  0000             pC_1m:			.equ pB_10 + 1
0081+  0000             pC_10:			.equ pC_1m + 5
0082+  0000             pD_1m:			.equ pC_10 + 1
0083+  0000             pD_10:			.equ pD_1m + 5  
0084+  0000             displayCol:		.equ cRAM + $68
0085+  0000             state:			.equ cRAM + $69	; ? | strobe reset | don't validate | ?
0086+  0000             
0087+  0000             instant:		.equ 4
0088+  0000             debounce:		.equ 1
0089+  0000             slow:			.equ 2
0090+  0000             
0091+  0000             switchSettle:	.equ cRAM + $30
0092+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 74    		cpX	displayBcd1 + 4
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 74    			cpX	displayBcd1 + 4
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7C    		cpX	displayBcd1 + 8 + 4
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7C    			cpX	displayBcd1 + 8 + 4
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0E       	ldaB	>lc(7)
0101+  7C8C C5 02       	bitB	lr(2)
0102+  7C8E 26 1A       	bne	blankP2
0103+  7C90 C5 04       	bitB	lr(3)
0104+  7C92 26 22       	bne	blankP3
0105+  7C94 C5 08       	bitB	lr(4)
0106+  7C96 26 2A       	bne	blankP4
0107+  7C98 C5 10       	bitB	lr(5)
0108+  7C9A 26 32       	bne	blankDone
0109+  7C9C 20 00       	bra	blankP1
0110+  7C9E             blankP1:
0111+  7C9E 86 F0       	ldaA	$F0
0112+  7CA0 9A 74       	oraA	>displayBcd1 + 4
0113+  7CA2 97 74       	staA	displayBcd1 + 4
0114+  7CA4 86 F0       	ldaA	$F0
0115+  7CA6 9A 75       	oraA	>displayBcd1 + 5
0116+  7CA8 97 75       	staA	displayBcd1 + 5
0117+  7CAA             blankP2:
0118+  7CAA 86 F0       	ldaA	$F0
0119+  7CAC 9A 7C       	oraA	>displayBcd1 + 12
0120+  7CAE 97 7C       	staA	displayBcd1 + 12
0121+  7CB0 86 F0       	ldaA	$F0
0122+  7CB2 9A 7D       	oraA	>displayBcd1 + 13
0123+  7CB4 97 7D       	staA	displayBcd1 + 13
0124+  7CB6             blankP3:
0125+  7CB6 86 0F       	ldaA	$0F
0126+  7CB8 9A 74       	oraA	>displayBcd1 + 4
0127+  7CBA 97 74       	staA	displayBcd1 + 4
0128+  7CBC 86 0F       	ldaA	$0F
0129+  7CBE 9A 75       	oraA	>displayBcd1 + 5
0130+  7CC0 97 75       	staA	displayBcd1 + 5
0131+  7CC2             blankP4:
0132+  7CC2 86 0F       	ldaA	$0F
0133+  7CC4 9A 7C       	oraA	>displayBcd1 + 12
0134+  7CC6 97 7C       	staA	displayBcd1 + 12
0135+  7CC8 86 0F       	ldaA	$0F
0136+  7CCA 9A 7D       	oraA	>displayBcd1 + 13
0137+  7CCC 97 7D       	staA	displayBcd1 + 13
0138+  7CCE             blankDone:
0139+  7CCE 39          	rts
0140+  7CCF             	
0141+  7CCF             refreshPlayerScores:
0142+  7CCF BD 7C 00    	jsr copyScores13
0143+  7CD2 BD 7C 45    	jsr copyScores24
0144+  7CD5 BD 7C 8A    	jsr blankNonPlayerScores
0145+  7CD8 39          	rts
0146+  7CD9             	
0147+  7CD9             ; add score instantly
0148+  7CD9             ; X = place in p*_1* to add the score to
0149+  7CD9             ; A = amount to add (max 9)
0150+  7CD9             ; tail call
0151+  7CD9             _addScoreI:
0152+  7CD9 AB 00       	addA	0, X
0153+  7CDB             	ifcs ; overflowed, need to increment next number
0153+  7CDB             
0153+  7CDB 24 FE       
0154+  7CDD 8B 06       		addA	6	; adjust A back into BCD
0155+  7CDF A7 00       		staA	0, X
0156+  7CE1             addScore_carryOver:		; loop to propagate carry
0157+  7CE1 09          		deX	; go to next decimal place
0158+  7CE2 A6 00       		ldaA	0, X	
0159+  7CE4 81 F9       		cmpA	$F9
0160+  7CE6             		ifeq			; if it's already a 9, reset it and carry again
0160+  7CE6             
0160+  7CE6 26 FE       
0161+  7CE8 6F 00       			clr	0, X
0162+  7CEA 27 F5       			beq addScore_carryOver
0163+  7CEC             		else			; otherwise ++ it and done
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7             
0163+  7CE7 06          
0163+  7CEC             
0163+  7CEC 20 FE       
0163+  7CEE             
0163+  7CEE             
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0164+  7CEE 6C 00       			inc	0, X
0165+  7CF0             		endif	
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CED             
0165+  7CED 02          
0165+  7CEE             
0165+  7CEE             
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0166+  7CF0             	else
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC             
0166+  7CDC 15          
0166+  7CF0             
0166+  7CF0 20 FE       
0166+  7CF2             
0166+  7CF2             
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0167+  7CF2 81 F9       		cmpA	$F9
0168+  7CF4             		ifgt ; >9 -> need to adjust back into BCD
0168+  7CF4             
0168+  7CF4 23 FE       
0169+  7CF6 8B 06       			addA	6
0170+  7CF8 A7 00       			staA	0, X
0171+  7CFA             addScore_carryDa:
0172+  7CFA 09          			deX
0173+  7CFB A6 00       			ldaA	0, X
0174+  7CFD 81 F9       			cmpA	$F9
0175+  7CFF             			ifeq
0175+  7CFF             
0175+  7CFF 26 FE       
0176+  7D01 6F 00       				clr	0, X
0177+  7D03 27 F5       				beq 	addScore_carryDa
0178+  7D05             			else
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D00             
0178+  7D00             
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00             
0178+  7D00 06          
0178+  7D05             
0178+  7D05 20 FE       
0178+  7D07             
0178+  7D07             
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0179+  7D07 6C 00       				inc	0, X
0180+  7D09             			endif	
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D06             
0180+  7D06 02          
0180+  7D07             
0180+  7D07             
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0181+  7D09             		else
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5             
0181+  7CF5 15          
0181+  7D09             
0181+  7D09 20 FE       
0181+  7D0B             
0181+  7D0B             
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0182+  7D0B A7 00       			staA	0, X
0183+  7D0D             		endif
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0A             
0183+  7D0A 02          
0183+  7D0B             
0183+  7D0B             
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0184+  7D0D             	endif
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7CF1             
0184+  7CF1 1B          
0184+  7CF2             
0184+  7CF2             
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0185+  7D0D             
0186+  7D0D 7E 7C CF    	jmp refreshPlayerScores
0187+  7D10             	
0188+  7D10 39          	rts
0189+  7D11             	
0190+  7D11             ; t A,X
0191+  7D11             setXToCurPlayer10:
0192+  7D11 96 0F       	ldaA	>lc(8)
0193+  7D13 85 01       	bitA	0001b
0194+  7D15 27 04       	beq	_addScore10N_p2
0195+  7D17 CE 01 55    	ldX	pA_10
0196+  7D1A 39          	rts
0197+  7D1B             _addScore10N_p2:
0198+  7D1B 85 02       	bitA	0010b
0199+  7D1D 27 04       	beq	_addScore10N_p3
0200+  7D1F CE 01 5B    	ldX	pB_10
0201+  7D22 39          	rts
0202+  7D23             _addScore10N_p3:
0203+  7D23 85 04       	bitA	0100b
0204+  7D25 27 04       	beq	_addScore10N_p4
0205+  7D27 CE 01 61    	ldX	pC_10
0206+  7D2A 39          	rts
0207+  7D2B             _addScore10N_p4:
0208+  7D2B CE 01 67    	ldX	pD_10
0209+  7D2E 39          	rts
0210+  7D2F             
0211+  7D2F             ; suspends execution for A ms and returns to queue processor
0212+  7D2F             ; should only be called from switch callbacks
0213+  7D2F             ; trashes everything but B
0214+  7D2F             _delay:	
0215+  7D2F CE 00 7F    	ldX	waitLeft - 1
0216+  7D32             findEmptyLoop:
0217+  7D32 08          	inX
0218+  7D33 6D 00       	tst	0, X
0219+  7D35 26 FB       	bne 	findEmptyLoop 
0220+  7D37             	
0221+  7D37             	; X = first waitLeft that = 0
0222+  7D37 E7 18       	staB	waitReg - waitLeft, X
0223+  7D39 33          	pulB	; A = MSB of PC
0224+  7D3A E7 08       	staB	waitMsb - waitLeft, X
0225+  7D3C 33          	pulB	; A = LSB of PC
0226+  7D3D E7 10       	staB	waitLsb - waitLeft, X
0227+  7D3F A7 00       	staA	0, X
0228+  7D41             	; time and add stored
0229+  7D41 7E 79 CB    	jmp skipEvent
0230+  7D44             	
0231+  7D44             resetScores:
0232+  7D44 86 00       	ldaA	00
0233+  7D46 CE 01 55    	ldX	pA_10
0234+  7D49             _zeroScores:
0235+  7D49 A7 00       	staA	0, X
0236+  7D4B 08          	inX
0237+  7D4C 8C 01 63    	cpX	pD_1m + 1
0238+  7D4F 26 F8       	bne	_zeroScores
0239+  7D51             	
0240+  7D51 86 00       	ldaA	0
0241+  7D53 97 12       	staA	curPlayer
0242+  7D55 97 13       	staA	curPlayer + 1
0243+  7D57 86 FF       	ldaA	$FF
0244+  7D59 97 76       	staA	displayBcd1 + 6
0245+  7D5B 97 7E       	staA	displayBcd1 + 14
0246+  7D5D 97 7F       	staA	displayBcd1 + 15
0247+  7D5F             	
0248+  7D5F BD 7C CF    	jsr	refreshPlayerScores
0249+  7D62 39          	rts
0250+  7D63             
0251+  7D63             ; trash ~B
0252+  7D63             ; delay for ms (8-2000)
0253+  7D63             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0254+  7D63             	
0255+  7D63             ; trashes B (max 104ms)
0256+  7D63             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0257+  7D63             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0258+  7D63             
0259+  7D63             ; trashes AX
0260+  7D63             ; place: 1-5 = 10s thru 100ks
0261+  7D63             ; amount: 1-9
0262+  7D63             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0263+  7D63             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0264+  7D63             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0265+  7D63             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0266+  7D63             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0267+  7D63             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0268+  7D63             
0269+  7D63             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0270+  7D63             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0271+  7D63             
0272+  7D63             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0273+  7D63             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0274+  7D63             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0275+  7D63             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0006   7D63             
0007   7D63             #include "game.asm"
0001+  7D63             ; Laser Ball solenoids
0002+  7D63             ;#DEFINE KICKOUT 		01
0003+  7D63             ;#DEFINE LEFT_KICKER 	02
0004+  7D63             ;#DEFINE DROP_LA			03
0005+  7D63             ;#DEFINE DROP_SER		04
0006+  7D63             ;#DEFINE EJECT_HOLE		05
0007+  7D63             ;#DEFINE DROP_BA			06
0008+  7D63             ;#DEFINE DROP_LL			07
0009+  7D63             ;#DEFINE RIGHT_KICKER	08
0010+  7D63             ;#DEFINE SOUND1			09 ; thru 13
0011+  7D63             ;#DEFINE KNOCKER			14
0012+  7D63             ;#DEFINE	FLASHERS		15
0013+  7D63             ;#DEFINE COIN_LOCKOUT	16
0014+  7D63             
0015+  7D63             ; Hot Tip solenoids
0016+  7D63             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7D63             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7D63             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7D63             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7D63             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7D63             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7D63             #DEFINE CHIME_10	SOL(09, 16)
0023+  7D63             #DEFINE CHIME_100	SOL(10, 16)
0024+  7D63             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7D63             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7D63             #DEFINE CLICKER		SOL(13, 8)
0027+  7D63             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7D63             #DEFINE BUZZER		SOL(15, 100)
0029+  7D63             #DEFINE SHORT_PAUSE 	115
0030+  7D63             
0031+  7D63             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7D63             #DEFINE done(v)	\
0033+  7D63             #DEFCONT	#IF (v==0)
0034+  7D63             #DEFCONT		\ ldaA 10b
0035+  7D63             #DEFCONT		\ oraA >state
0036+  7D63             #DEFCONT		\ staA state
0037+  7D63             #DEFCONT	\#ENDIF
0038+  7D63             #DEFCONT	\ jmp afterQueueEvent
0039+  7D63             	
0040+  7D63             	
0041+  7D63             _addScore10N:
0042+  7D63 BD 7D 11    	jsr setXToCurPlayer10
0043+  7D66 86 01       	ldaA	1
0044+  7D68 BD 7C D9    	jsr _addScoreI
0045+  7D6B 86 02       	fireSolenoidA(CHIME_10)
0045+  7D6D B7 01 48    
0046+  7D70 39          	rts
0047+  7D71             _addScore100N:
0048+  7D71 BD 7D 11    	jsr setXToCurPlayer10
0049+  7D74 09          	deX
0050+  7D75 86 01       	ldaA	1
0051+  7D77 BD 7C D9    	jsr _addScoreI
0052+  7D7A 86 02       	fireSolenoidA(CHIME_100)	
0052+  7D7C B7 01 49    
0053+  7D7F 39          	rts
0054+  7D80             _addScore1000N:
0055+  7D80 BD 7D 11    	jsr setXToCurPlayer10
0056+  7D83 09          	deX
0057+  7D84 09          	deX
0058+  7D85 86 01       	ldaA	1
0059+  7D87 BD 7C D9    	jsr _addScoreI
0060+  7D8A 86 02       	fireSolenoidA(CHIME_1000)
0060+  7D8C B7 01 4A    
0061+  7D8F 39          	rts
0062+  7D90             #DEFINE score10() jsr _addScore10N
0063+  7D90             #DEFINE score100() jsr _addScore100N
0064+  7D90             #DEFINE score1000() jsr _addScore1000N
0065+  7D90             #DEFINE score500() \ jsr _addScore100N
0066+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7D90             #DEFCONT	\ jsr _addScore100N
0069+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7D90             #DEFCONT	\ jsr _addScore100N
0072+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7D90             #DEFCONT	\ jsr _addScore100N
0075+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7D90             #DEFCONT	\ jsr _addScore100N
0078+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7D90             
0081+  7D90             #DEFINE advBonus()	inc p_Bonus
0082+  7D90             	
0083+  7D90             ; switch callbacks:
0084+  7D90             
0085+  60C0             none:	.org $6000 + 192 ; size of callback table
0086+  60C0             	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0             
0086+  60C0 7E 79 82    
0087+  60C3             	
0088+  60C3             bonusLights:
0089+  60C3 86 00       	ldaA	0
0090+  60C5 97 0C       	staA	lc(5)
0091+  60C7 97 0D       	staA	lc(6)
0092+  60C9 7D 00 B0    	tst	p_Bonus
0093+  60CC 27 11       	beq	bonusLights_done
0094+  60CE             	
0095+  60CE 86 80       	lampOn(8,5) ; 1k
0095+  60D0 9A 0C       
0095+  60D2 97 0C       
0096+  60D4             	
0097+  60D4 96 B0       	ldaA	>p_Bonus
0098+  60D6             bonusLights_loop:
0099+  60D6 4A          	decA
0100+  60D7 27 06       	beq 	bonusLights_done
0101+  60D9 0D          	seC
0102+  60DA 79 00 0D    	rol	lc(6)
0103+  60DD 20 F7       	bra	bonusLights_loop
0104+  60DF             	
0105+  60DF             bonusLights_done
0106+  60DF             
0107+  60DF 86 09       	ldaA	9
0108+  60E1 91 B0       	cmpA	>p_Bonus
0109+  60E3             	ifge	
0109+  60E3             
0109+  60E3 25 FE       
0110+  60E5             	else	; bonus >= 10?
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E4             
0110+  60E4             
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4             
0110+  60E4 02          
0110+  60E5             
0110+  60E5 20 FE       
0110+  60E7             
0110+  60E7             
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0111+  60E7 86 0A       		ldaA	10
0112+  60E9 97 B0       		staA	p_Bonus
0113+  60EB 86 40       		lampOn(7,5) ; 10k light
0113+  60ED 9A 0C       
0113+  60EF 97 0C       
0114+  60F1             	endif
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60E6             
0114+  60E6 0A          
0114+  60E7             
0114+  60E7             
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0115+  60F1             	
0116+  60F1 39          	rts
0117+  60F2             	
0118+  60F2             	
0119+  60F2             startBall:
0120+  60F2 86 01       	ldaA	1
0121+  60F4 97 B0       	staA	p_Bonus
0122+  60F6 B6 22 03    	enablePf
0122+  60F9 8A 38       
0122+  60FB B7 22 03    
0123+  60FE             	
0124+  60FE 86 00       	ldaA	0
0125+  6100 97 B5       	staA	p_DropsDown
0126+  6102 97 AA       	staA	dropsDown
0127+  6104 86 41       	ldaA	65
0128+  6106 97 A9       	staA	dropResetTimer
0129+  6108 C6 0C       	fireSolenoid(DROP_TIP)
0129+  610A F7 01 41    
0130+  610D 86 09       	delay(75)
0130+  610F BD 7D 2F    
0131+  6112 C6 0C       	fireSolenoid(DROP_HOT)
0131+  6114 F7 01 42    
0132+  6117 86 0F       	delay(125)
0132+  6119 BD 7D 2F    
0133+  611C             	
0134+  611C 86 FF       	ldaA	$FF
0135+  611E 97 A8       	staA	lastSwitch
0136+  6120             	
0137+  6120             	; clear lights
0138+  6120 CE 00 08    	ldX	lampCol1
0139+  6123 86 00       	ldaA	0b
0140+  6125             lClearLights:
0141+  6125 A7 00       	staA	0, X
0142+  6127 A7 98       	staA	flashLampCol1 - lampCol1, X
0143+  6129 08          	inX
0144+  612A 8C 00 0E    	cpX	lc(6) + 1
0145+  612D 26 F6       	bne	lClearLights
0146+  612F             	;
0147+  612F             	
0148+  612F             	; init lights for player data
0149+  612F DE 12       	ldX	>curPlayer
0150+  6131 A6 B1       	ldaA	p_Ejects, X
0151+  6133 97 0B       	staA	lc(4)
0152+  6135 A6 B6       	ldaA	p_LampCol2, X
0153+  6137 97 09       	staA	lc(2)
0154+  6139 85 02       	bitA	lr(2)
0155+  613B             	ifne 
0155+  613B             
0155+  613B 27 FE       
0156+  613D 86 02       		lampOn(2,3)
0156+  613F 9A 0A       
0156+  6141 97 0A       
0157+  6143             	endif
0157+  6143             
0157+  6143             
0157+  6143             
0157+  6143             
0157+  6143             
0157+  6143~            	endif
0157+  6143~            	endif
0157+  6143             
0157+  6143~            	endif
0157+  6143~            	endif
0157+  6143             
0157+  613C             
0157+  613C 06          
0157+  613D             
0157+  613D             
0157+  613D~            	endif
0157+  613D~            	endif
0157+  613D~            	endif
0157+  613D             
0157+  6143             
0157+  6143~            	endif
0157+  6143~            	endif
0157+  6143             
0158+  6143             	
0159+  6143 86 40       	ldaA	lr(7) ; shoot again
0160+  6145 95 0F       	bitA	>lc(8)
0161+  6147             	ifne
0161+  6147             
0161+  6147 27 FE       
0162+  6149 86 01       		lampOn(1,3) ; shoot again
0162+  614B 9A 0A       
0162+  614D 97 0A       
0163+  614F             	endif
0163+  614F             
0163+  614F             
0163+  614F             
0163+  614F             
0163+  614F             
0163+  614F~            	endif
0163+  614F~            	endif
0163+  614F             
0163+  614F~            	endif
0163+  614F~            	endif
0163+  614F             
0163+  6148             
0163+  6148 06          
0163+  6149             
0163+  6149             
0163+  6149~            	endif
0163+  6149~            	endif
0163+  6149~            	endif
0163+  6149             
0163+  614F             
0163+  614F~            	endif
0163+  614F~            	endif
0163+  614F             
0164+  614F             	
0165+  614F             	; flash player light
0166+  614F 86 0F       	ldaA	00001111b ; player up lights
0167+  6151 9A A7       	oraA	>flc(8)
0168+  6153 97 A7       	staA	flc(8)
0169+  6155             	
0170+  6155 86 01       	ldaA	sr(1) ; check outhole
0171+  6157 95 21       	bitA	>sc(2)
0172+  6159             	ifne ; ball in hole
0172+  6159             
0172+  6159 27 FE       
0173+  615B C6 02       		fireSolenoid(OUTHOLE)
0173+  615D F7 01 44    
0174+  6160             	endif
0174+  6160             
0174+  6160             
0174+  6160             
0174+  6160             
0174+  6160             
0174+  6160~            	endif
0174+  6160~            	endif
0174+  6160             
0174+  6160~            	endif
0174+  6160~            	endif
0174+  6160             
0174+  615A             
0174+  615A 05          
0174+  615B             
0174+  615B             
0174+  615B~            	endif
0174+  615B~            	endif
0174+  615B~            	endif
0174+  615B             
0174+  6160             
0174+  6160~            	endif
0174+  6160~            	endif
0174+  6160             
0175+  6160             	
0176+  6160 39          	rts
0177+  6161             	
0178+  6161             	
0179+  6161             startGame:
0180+  6161             	
0181+  6161 C6 02       	fireSolenoid(CHIME_10)
0181+  6163 F7 01 48    
0182+  6166 86 0E       	delay(SHORT_PAUSE)
0182+  6168 BD 7D 2F    
0183+  616B C6 02       	fireSolenoid(CHIME_10)
0183+  616D F7 01 48    
0184+  6170 86 0E       	delay(SHORT_PAUSE)
0184+  6172 BD 7D 2F    
0185+  6175 C6 02       	fireSolenoid(CHIME_10)
0185+  6177 F7 01 48    
0186+  617A 86 19       	delay(200)
0186+  617C BD 7D 2F    
0187+  617F             	
0188+  617F C6 02       	fireSolenoid(CHIME_10)
0188+  6181 F7 01 48    
0189+  6184 86 0E       	delay(SHORT_PAUSE)
0189+  6186 BD 7D 2F    
0190+  6189 C6 02       	fireSolenoid(CHIME_10)
0190+  618B F7 01 48    
0191+  618E 86 0E       	delay(SHORT_PAUSE)
0191+  6190 BD 7D 2F    
0192+  6193 C6 02       	fireSolenoid(CHIME_10)
0192+  6195 F7 01 48    
0193+  6198 86 19       	delay(200)
0193+  619A BD 7D 2F    
0194+  619D             	
0195+  619D C6 02       	fireSolenoid(CHIME_10)
0195+  619F F7 01 48    
0196+  61A2 86 0E       	delay(SHORT_PAUSE)
0196+  61A4 BD 7D 2F    
0197+  61A7 C6 02       	fireSolenoid(CHIME_10)
0197+  61A9 F7 01 48    
0198+  61AC 86 0E       	delay(SHORT_PAUSE)
0198+  61AE BD 7D 2F    
0199+  61B1 C6 02       	fireSolenoid(CHIME_100)
0199+  61B3 F7 01 49    
0200+  61B6 86 19       	delay(200)
0200+  61B8 BD 7D 2F    
0201+  61BB C6 02       	fireSolenoid(CHIME_1000)
0201+  61BD F7 01 4A    
0202+  61C0 86 19       	delay(200)
0202+  61C2 BD 7D 2F    
0203+  61C5 C6 02       	fireSolenoid(CHIME_10k)
0203+  61C7 F7 01 4B    
0204+  61CA 86 12       	delay(150)
0204+  61CC BD 7D 2F    
0205+  61CF             	
0206+  61CF             	; reset scores
0207+  61CF BD 7D 44    	jsr 	resetScores
0208+  61D2             	
0209+  61D2             	; reset ball count
0210+  61D2 86 10       	ldaA	$10
0211+  61D4 97 77       	staA	ballCount	
0212+  61D6             
0213+  61D6 C6 00       	ldaB	0
0214+  61D8 D7 13       	staB	curPlayer + 1
0215+  61DA             	
0216+  61DA D7 0E       	staB	lc(7)
0217+  61DC D7 0F       	staB	lc(8)
0218+  61DE D7 A6       	staB	flc(7)
0219+  61E0 D7 A7       	staB	flc(8)
0220+  61E2             	
0221+  61E2 CE 00 00    	ldX	0
0222+  61E5             lInitPlayers:
0223+  61E5 C6 01       	ldaB	lr(1)
0224+  61E7 E7 B1       	staB	p_Ejects, X
0225+  61E9 C6 00       	ldaB	0
0226+  61EB E7 B6       	staB	p_LampCol2, X
0227+  61ED 08          	inX
0228+  61EE 8C 00 04    	cpX	4
0229+  61F1 26 F2       	bne	lInitPlayers
0230+  61F3             	
0231+  61F3 BD 60 F2    	jsr	startBall
0232+  61F6             	
0233+  61F6             	; invalidate playfield
0234+  61F6 86 01       	ldaA	lr(1)
0235+  61F8 9A 0F       	oraA	>lc(8)
0236+  61FA 97 0F       	staA	lc(8)
0237+  61FC             	
0238+  61FC 86 02       	lampOn(2,7) ; one player
0238+  61FE 9A 0E       
0238+  6200 97 0E       
0239+  6202             	
0240+  6202 86 DF       	lampOff(6,8) ; game over
0240+  6204 94 0F       
0240+  6206 97 0F       
0241+  6208             	
0242+  6208 39          	rts
0243+  6209             	
0244+  6209             
0245+  6209             	
0246+  6209             swTilt: 
0247+  6209 86 10       	lampOn(5,8) ; tilt
0247+  620B 9A 0F       
0247+  620D 97 0F       
0248+  620F B6 22 03    	disablePf
0248+  6212 84 F7       
0248+  6214 B7 22 03    
0249+  6217             	done(0)
0249+  6217             
0249+  6217 86 02       
0249+  6219 BA 01 69    
0249+  621C B7 01 69    
0249+  621F             
0249+  621F 7E 79 82    
0250+  6222             	
0251+  6222             swStart: 
0252+  6222 96 0F       	ldaA >lc(8)
0253+  6224 85 20       	bitA lr(6)
0254+  6226             	ifne ; in game over
0254+  6226             
0254+  6226 27 FE       
0255+  6228 BD 61 61    		jsr startGame
0256+  622B             	else 
0256+  622B             
0256+  622B             
0256+  622B             
0256+  622B             
0256+  6227             
0256+  6227             
0256+  6227             
0256+  6227~            	else 
0256+  6227~            	else 
0256+  6227~            	else 
0256+  6227~            	else 
0256+  6227             
0256+  6227~            	else 
0256+  6227~            	else 
0256+  6227~            	else 
0256+  6227~            	else 
0256+  6227             
0256+  6227             
0256+  6227 05          
0256+  622B             
0256+  622B 20 FE       
0256+  622D             
0256+  622D             
0256+  622D             
0256+  622D~            	else 
0256+  622D~            	else 
0256+  622D~            	else 
0256+  622D~            	else 
0256+  622D~            	else 
0256+  622D             
0256+  622D~            	else 
0256+  622D~            	else 
0256+  622D             
0256+  622D~            	else 
0256+  622D~            	else 
0256+  622D             
0257+  622D 86 10       		ldaA	$10
0258+  622F 91 77       		cmpA	>ballCount
0259+  6231             		ifeq ; add player
0259+  6231             
0259+  6231 26 FE       
0260+  6233 86 1E       			ldaA	00011110b
0261+  6235 94 0E       			andA	>lc(7) ; player count lights
0262+  6237 85 10       			bitA	lr(5)
0263+  6239             			ifeq	; if not on P4 already, add player
0263+  6239             
0263+  6239 26 FE       
0264+  623B 48          				aslA
0265+  623C C6 E1       				ldaB	11100001b
0266+  623E D4 0E       				andB	>lc(7)
0267+  6240 D7 0E       				staB	lc(7)
0268+  6242 9A 0E       				oraA	>lc(7)
0269+  6244 97 0E       				staA	lc(7)
0270+  6246             			endif
0270+  6246             
0270+  6246             
0270+  6246             
0270+  6246             
0270+  6246             
0270+  6246~            			endif
0270+  6246~            			endif
0270+  6246             
0270+  6246~            			endif
0270+  6246~            			endif
0270+  6246             
0270+  623A             
0270+  623A 0B          
0270+  623B             
0270+  623B             
0270+  623B~            			endif
0270+  623B~            			endif
0270+  623B~            			endif
0270+  623B             
0270+  6246             
0270+  6246~            			endif
0270+  6246~            			endif
0270+  6246             
0271+  6246             		else ; restart game
0271+  6246             
0271+  6246             
0271+  6246             
0271+  6246             
0271+  6232             
0271+  6232             
0271+  6232             
0271+  6232~            		else ; restart game
0271+  6232~            		else ; restart game
0271+  6232~            		else ; restart game
0271+  6232~            		else ; restart game
0271+  6232             
0271+  6232~            		else ; restart game
0271+  6232~            		else ; restart game
0271+  6232~            		else ; restart game
0271+  6232~            		else ; restart game
0271+  6232             
0271+  6232             
0271+  6232 15          
0271+  6246             
0271+  6246 20 FE       
0271+  6248             
0271+  6248             
0271+  6248             
0271+  6248~            		else ; restart game
0271+  6248~            		else ; restart game
0271+  6248~            		else ; restart game
0271+  6248~            		else ; restart game
0271+  6248~            		else ; restart game
0271+  6248             
0271+  6248~            		else ; restart game
0271+  6248~            		else ; restart game
0271+  6248             
0271+  6248~            		else ; restart game
0271+  6248~            		else ; restart game
0271+  6248             
0272+  6248 BD 61 61    			jsr startGame
0273+  624B             		endif		
0273+  624B             
0273+  624B             
0273+  624B             
0273+  624B             
0273+  624B             
0273+  624B~            		endif		
0273+  624B~            		endif		
0273+  624B             
0273+  624B~            		endif		
0273+  624B~            		endif		
0273+  624B             
0273+  6247             
0273+  6247 03          
0273+  6248             
0273+  6248             
0273+  6248~            		endif		
0273+  6248~            		endif		
0273+  6248~            		endif		
0273+  6248             
0273+  624B             
0273+  624B~            		endif		
0273+  624B~            		endif		
0273+  624B             
0274+  624B             	endif
0274+  624B             
0274+  624B             
0274+  624B             
0274+  624B             
0274+  624B             
0274+  624B~            	endif
0274+  624B~            	endif
0274+  624B             
0274+  624B~            	endif
0274+  624B~            	endif
0274+  624B             
0274+  622C             
0274+  622C 1E          
0274+  622D             
0274+  622D             
0274+  622D~            	endif
0274+  622D~            	endif
0274+  622D~            	endif
0274+  622D             
0274+  624B             
0274+  624B~            	endif
0274+  624B~            	endif
0274+  624B             
0275+  624B             	
0276+  624B BD 7C CF    	jsr refreshPlayerScores
0277+  624E             	
0278+  624E             	done(0)
0278+  624E             
0278+  624E 86 02       
0278+  6250 BA 01 69    
0278+  6253 B7 01 69    
0278+  6256             
0278+  6256 7E 79 82    
0279+  6259             	
0280+  6259             swOuthole: 
0281+  6259 86 4B       	delay(600)
0281+  625B BD 7D 2F    
0282+  625E 96 0F       	ldaA	>lc(8) ; !game over
0283+  6260 85 20       	bitA	lr(6)
0284+  6262             	ifne ; game over
0284+  6262             
0284+  6262 27 FE       
0285+  6264             		done(0)
0285+  6264             
0285+  6264 86 02       
0285+  6266 BA 01 69    
0285+  6269 B7 01 69    
0285+  626C             
0285+  626C 7E 79 82    
0286+  626F             	endif
0286+  626F             
0286+  626F             
0286+  626F             
0286+  626F             
0286+  626F             
0286+  626F~            	endif
0286+  626F~            	endif
0286+  626F             
0286+  626F~            	endif
0286+  626F~            	endif
0286+  626F             
0286+  6263             
0286+  6263 0B          
0286+  6264             
0286+  6264             
0286+  6264~            	endif
0286+  6264~            	endif
0286+  6264~            	endif
0286+  6264             
0286+  626F             
0286+  626F~            	endif
0286+  626F~            	endif
0286+  626F             
0287+  626F             	
0288+  626F             	; check ballsave
0289+  626F 86 01       	ldaA	lr(1)
0290+  6271 95 0A       	bitA	>lc(3)
0291+  6273             	ifne	; shoot again on
0291+  6273             
0291+  6273 27 FE       
0292+  6275 95 A2       		bitA	>flc(3)
0293+  6277             		ifne ; shoot again flashing
0293+  6277             
0293+  6277 27 FE       
0294+  6279             			; turn off used special
0295+  6279 86 80       			ldaA	lr(8) ; right special
0296+  627B 95 09       			bitA	>lc(2)
0297+  627D             			ifne
0297+  627D             
0297+  627D 27 FE       
0298+  627F 86 7F       				lampOff(8,2)
0298+  6281 94 09       
0298+  6283 97 09       
0299+  6285 86 7F       				flashOff(8,2)
0299+  6287 94 A1       
0299+  6289 97 A1       
0300+  628B             			endif
0300+  628B             
0300+  628B             
0300+  628B             
0300+  628B             
0300+  628B             
0300+  628B~            			endif
0300+  628B~            			endif
0300+  628B             
0300+  628B~            			endif
0300+  628B~            			endif
0300+  628B             
0300+  627E             
0300+  627E 0C          
0300+  627F             
0300+  627F             
0300+  627F~            			endif
0300+  627F~            			endif
0300+  627F~            			endif
0300+  627F             
0300+  628B             
0300+  628B~            			endif
0300+  628B~            			endif
0300+  628B             
0301+  628B 86 02       			ldaA	lr(2) ; right special
0302+  628D 95 0A       			bitA	>lc(3)
0303+  628F             			ifne
0303+  628F             
0303+  628F 27 FE       
0304+  6291 86 FD       				lampOff(2,3)
0304+  6293 94 0A       
0304+  6295 97 0A       
0305+  6297 86 FD       				flashOff(2,3)
0305+  6299 94 A2       
0305+  629B 97 A2       
0306+  629D             			endif
0306+  629D             
0306+  629D             
0306+  629D             
0306+  629D             
0306+  629D             
0306+  629D~            			endif
0306+  629D~            			endif
0306+  629D             
0306+  629D~            			endif
0306+  629D~            			endif
0306+  629D             
0306+  6290             
0306+  6290 0C          
0306+  6291             
0306+  6291             
0306+  6291~            			endif
0306+  6291~            			endif
0306+  6291~            			endif
0306+  6291             
0306+  629D             
0306+  629D~            			endif
0306+  629D~            			endif
0306+  629D             
0307+  629D             			
0308+  629D             			; flash player light
0309+  629D 86 0F       			ldaA	00001111b ; player up lights
0310+  629F 9A A7       			oraA	>flc(8)
0311+  62A1 97 A7       			staA	flc(8)
0312+  62A3             		endif
0312+  62A3             
0312+  62A3             
0312+  62A3             
0312+  62A3             
0312+  62A3             
0312+  62A3~            		endif
0312+  62A3~            		endif
0312+  62A3             
0312+  62A3~            		endif
0312+  62A3~            		endif
0312+  62A3             
0312+  6278             
0312+  6278 2A          
0312+  6279             
0312+  6279             
0312+  6279~            		endif
0312+  6279~            		endif
0312+  6279~            		endif
0312+  6279             
0312+  62A3             
0312+  62A3~            		endif
0312+  62A3~            		endif
0312+  62A3             
0313+  62A3             	endif
0313+  62A3             
0313+  62A3             
0313+  62A3             
0313+  62A3             
0313+  62A3             
0313+  62A3~            	endif
0313+  62A3~            	endif
0313+  62A3             
0313+  62A3~            	endif
0313+  62A3~            	endif
0313+  62A3             
0313+  6274             
0313+  6274 2E          
0313+  6275             
0313+  6275             
0313+  6275~            	endif
0313+  6275~            	endif
0313+  6275~            	endif
0313+  6275             
0313+  62A3             
0313+  62A3~            	endif
0313+  62A3~            	endif
0313+  62A3             
0314+  62A3             	
0315+  62A3 86 0F       	ldaA	00001111b ; player up lights
0316+  62A5 95 A7       	bitA	>flc(8)	; check if any player is flashing
0317+  62A7             	ifne ; any flashing -> playfield invalid
0317+  62A7             
0317+  62A7 27 FE       
0318+  62A9             swOuthole_save:
0319+  62A9 86 EF       		lampOff(5,8) ; tilt
0319+  62AB 94 0F       
0319+  62AD 97 0F       
0320+  62AF             		
0321+  62AF B6 22 03    		enablePf
0321+  62B2 8A 38       
0321+  62B4 B7 22 03    
0322+  62B7 C6 02       		fireSolenoid(OUTHOLE)
0322+  62B9 F7 01 44    
0323+  62BC             	else ; none flashing -> playfield valid -> end ball			
0323+  62BC             
0323+  62BC             
0323+  62BC             
0323+  62BC             
0323+  62A8             
0323+  62A8             
0323+  62A8             
0323+  62A8~            	else ; none flashing -> playfield valid -> end ball			
0323+  62A8~            	else ; none flashing -> playfield valid -> end ball			
0323+  62A8~            	else ; none flashing -> playfield valid -> end ball			
0323+  62A8~            	else ; none flashing -> playfield valid -> end ball			
0323+  62A8             
0323+  62A8~            	else ; none flashing -> playfield valid -> end ball			
0323+  62A8~            	else ; none flashing -> playfield valid -> end ball			
0323+  62A8~            	else ; none flashing -> playfield valid -> end ball			
0323+  62A8~            	else ; none flashing -> playfield valid -> end ball			
0323+  62A8             
0323+  62A8             
0323+  62A8 15          
0323+  62BC             
0323+  62BC 20 FE       
0323+  62BE             
0323+  62BE             
0323+  62BE             
0323+  62BE~            	else ; none flashing -> playfield valid -> end ball			
0323+  62BE~            	else ; none flashing -> playfield valid -> end ball			
0323+  62BE~            	else ; none flashing -> playfield valid -> end ball			
0323+  62BE~            	else ; none flashing -> playfield valid -> end ball			
0323+  62BE~            	else ; none flashing -> playfield valid -> end ball			
0323+  62BE             
0323+  62BE~            	else ; none flashing -> playfield valid -> end ball			
0323+  62BE~            	else ; none flashing -> playfield valid -> end ball			
0323+  62BE             
0323+  62BE~            	else ; none flashing -> playfield valid -> end ball			
0323+  62BE~            	else ; none flashing -> playfield valid -> end ball			
0323+  62BE             
0324+  62BE             swOuthole_bonusLoop:
0325+  62BE BD 7D 80    		score1000()
0326+  62C1 96 09       		ldaA	>lc(2) ; double bonus
0327+  62C3 85 04       		bitA	lr(3)
0328+  62C5             		ifne 
0328+  62C5             
0328+  62C5 27 FE       
0329+  62C7 86 0C       			delay(100)
0329+  62C9 BD 7D 2F    
0330+  62CC BD 7D 80    			score1000()
0331+  62CF             		endif
0331+  62CF             
0331+  62CF             
0331+  62CF             
0331+  62CF             
0331+  62CF             
0331+  62CF~            		endif
0331+  62CF~            		endif
0331+  62CF             
0331+  62CF~            		endif
0331+  62CF~            		endif
0331+  62CF             
0331+  62C6             
0331+  62C6 08          
0331+  62C7             
0331+  62C7             
0331+  62C7~            		endif
0331+  62C7~            		endif
0331+  62C7~            		endif
0331+  62C7             
0331+  62CF             
0331+  62CF~            		endif
0331+  62CF~            		endif
0331+  62CF             
0332+  62CF 7A 00 B0    		dec	p_Bonus
0333+  62D2 BD 60 C3    		jsr	bonusLights
0334+  62D5 86 19       		delay(200)
0334+  62D7 BD 7D 2F    
0335+  62DA 7D 00 B0    		tst	p_Bonus
0336+  62DD 26 DF       		bne	swOuthole_bonusLoop
0337+  62DF             	
0338+  62DF 86 0F       		ldaA	00001111b ; player up lights
0339+  62E1 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0340+  62E3 D6 0A       		ldaB	>lc(3) ; check shoot again light
0341+  62E5 C5 01       		bitB	lr(1)
0342+  62E7             		ifeq ; shoot again not lit
0342+  62E7             
0342+  62E7 26 FE       
0343+  62E9             			; store player's data
0344+  62E9 DE 12       			ldX	>curPlayer
0345+  62EB D6 0B       			ldaB	>lc(4)
0346+  62ED E7 B1       			staB	p_Ejects, X
0347+  62EF D6 0A       			ldaB	>lc(3)
0348+  62F1 C4 02       			andB	lr(2)
0349+  62F3 DA 09       			oraB	>lc(2)
0350+  62F5 E7 B6       			staB	p_LampCol2, X
0351+  62F7             			
0352+  62F7             		
0353+  62F7             			; go to next player
0354+  62F7 48          			aslA
0355+  62F8 7C 00 13    			inc	curPlayer + 1
0356+  62FB 95 0E       			bitA	>lc(7)	; is player count < player #
0357+  62FD             			ifne ; last player
0357+  62FD             
0357+  62FD 27 FE       
0358+  62FF 86 01       				ldaA	00000001b; ; back to player 1
0359+  6301 C6 00       				ldaB	0
0360+  6303 D7 13       				staB	curPlayer + 1
0361+  6305             				
0362+  6305             				; increase ball count
0363+  6305 D6 77       				ldaB	>ballCount
0364+  6307 CB 10       				addB	$10
0365+  6309 C1 40       				cmpB	$40
0366+  630B             				ifeq ; game over
0366+  630B             
0366+  630B 26 FE       
0367+  630D 86 20       					lampOn(6,8)
0367+  630F 9A 0F       
0367+  6311 97 0F       
0368+  6313 B6 22 03    					disablePf
0368+  6316 84 F7       
0368+  6318 B7 22 03    
0369+  631B             					done(1)
0369+  631B~            					done(1)
0369+  631B~            					done(1)
0369+  631B~            					done(1)
0369+  631B~            					done(1)
0369+  631B             
0369+  631B 7E 79 82    
0370+  631E             				else
0370+  631E             
0370+  631E             
0370+  631E             
0370+  631E             
0370+  630C             
0370+  630C             
0370+  630C             
0370+  630C~            				else
0370+  630C~            				else
0370+  630C~            				else
0370+  630C~            				else
0370+  630C             
0370+  630C~            				else
0370+  630C~            				else
0370+  630C~            				else
0370+  630C~            				else
0370+  630C             
0370+  630C             
0370+  630C 13          
0370+  631E             
0370+  631E 20 FE       
0370+  6320             
0370+  6320             
0370+  6320             
0370+  6320~            				else
0370+  6320~            				else
0370+  6320~            				else
0370+  6320~            				else
0370+  6320~            				else
0370+  6320             
0370+  6320~            				else
0370+  6320~            				else
0370+  6320             
0370+  6320~            				else
0370+  6320~            				else
0370+  6320             
0371+  6320 D7 77       					staB	ballCount
0372+  6322             				endif		
0372+  6322             
0372+  6322             
0372+  6322             
0372+  6322             
0372+  6322             
0372+  6322~            				endif		
0372+  6322~            				endif		
0372+  6322             
0372+  6322~            				endif		
0372+  6322~            				endif		
0372+  6322             
0372+  631F             
0372+  631F 02          
0372+  6320             
0372+  6320             
0372+  6320~            				endif		
0372+  6320~            				endif		
0372+  6320~            				endif		
0372+  6320             
0372+  6322             
0372+  6322~            				endif		
0372+  6322~            				endif		
0372+  6322             
0373+  6322             			endif
0373+  6322             
0373+  6322             
0373+  6322             
0373+  6322             
0373+  6322             
0373+  6322~            			endif
0373+  6322~            			endif
0373+  6322             
0373+  6322~            			endif
0373+  6322~            			endif
0373+  6322             
0373+  62FE             
0373+  62FE 23          
0373+  62FF             
0373+  62FF             
0373+  62FF~            			endif
0373+  62FF~            			endif
0373+  62FF~            			endif
0373+  62FF             
0373+  6322             
0373+  6322~            			endif
0373+  6322~            			endif
0373+  6322             
0374+  6322             			
0375+  6322 97 0F       			staA	lc(8)
0376+  6324             		endif
0376+  6324             
0376+  6324             
0376+  6324             
0376+  6324             
0376+  6324             
0376+  6324~            		endif
0376+  6324~            		endif
0376+  6324             
0376+  6324~            		endif
0376+  6324~            		endif
0376+  6324             
0376+  62E8             
0376+  62E8 3B          
0376+  62E9             
0376+  62E9             
0376+  62E9~            		endif
0376+  62E9~            		endif
0376+  62E9~            		endif
0376+  62E9             
0376+  6324             
0376+  6324~            		endif
0376+  6324~            		endif
0376+  6324             
0377+  6324             		
0378+  6324 BD 60 F2    		jsr	startBall
0379+  6327             	endif	
0379+  6327             
0379+  6327             
0379+  6327             
0379+  6327             
0379+  6327             
0379+  6327~            	endif	
0379+  6327~            	endif	
0379+  6327             
0379+  6327~            	endif	
0379+  6327~            	endif	
0379+  6327             
0379+  62BD             
0379+  62BD 69          
0379+  62BE             
0379+  62BE             
0379+  62BE~            	endif	
0379+  62BE~            	endif	
0379+  62BE~            	endif	
0379+  62BE             
0379+  6327             
0379+  6327~            	endif	
0379+  6327~            	endif	
0379+  6327             
0380+  6327             	done(0)
0380+  6327             
0380+  6327 86 02       
0380+  6329 BA 01 69    
0380+  632C B7 01 69    
0380+  632F             
0380+  632F 7E 79 82    
0381+  6332             	
0382+  6332             swLeftEject:
0383+  6332 96 0F       	ldaA	>lc(8)
0384+  6334 85 20       	bitA	lr(6)
0385+  6336             	ifne ; not in game
0385+  6336             
0385+  6336 27 FE       
0386+  6338 C6 03       		fireSolenoid(LEFT_EJECT)
0386+  633A F7 01 43    
0387+  633D             		done(0)
0387+  633D             
0387+  633D 86 02       
0387+  633F BA 01 69    
0387+  6342 B7 01 69    
0387+  6345             
0387+  6345 7E 79 82    
0388+  6348             	endif
0388+  6348             
0388+  6348             
0388+  6348             
0388+  6348             
0388+  6348             
0388+  6348~            	endif
0388+  6348~            	endif
0388+  6348             
0388+  6348~            	endif
0388+  6348~            	endif
0388+  6348             
0388+  6337             
0388+  6337 10          
0388+  6338             
0388+  6338             
0388+  6338~            	endif
0388+  6338~            	endif
0388+  6338~            	endif
0388+  6338             
0388+  6348             
0388+  6348~            	endif
0388+  6348~            	endif
0388+  6348             
0389+  6348             		
0390+  6348 7C 00 B0    	advBonus()
0391+  634B 86 04       	ldaA	lr(3) ; extra ball
0392+  634D 95 0A       	bitA	>lc(3)
0393+  634F             	ifne
0393+  634F             
0393+  634F 27 FE       
0394+  6351 C6 06       		fireSolenoid(KNOCKER)
0394+  6353 F7 01 4D    
0395+  6356 86 01       		lampOn(1,3) ; shoot again
0395+  6358 9A 0A       
0395+  635A 97 0A       
0396+  635C 86 40       		lampOn(7,8)
0396+  635E 9A 0F       
0396+  6360 97 0F       
0397+  6362 86 FB       		lampOff(3,3) ; extra ball
0397+  6364 94 0A       
0397+  6366 97 0A       
0398+  6368             	else
0398+  6368             
0398+  6368             
0398+  6368             
0398+  6368             
0398+  6350             
0398+  6350             
0398+  6350             
0398+  6350~            	else
0398+  6350~            	else
0398+  6350~            	else
0398+  6350~            	else
0398+  6350             
0398+  6350~            	else
0398+  6350~            	else
0398+  6350~            	else
0398+  6350~            	else
0398+  6350             
0398+  6350             
0398+  6350 19          
0398+  6368             
0398+  6368 20 FE       
0398+  636A             
0398+  636A             
0398+  636A             
0398+  636A~            	else
0398+  636A~            	else
0398+  636A~            	else
0398+  636A~            	else
0398+  636A~            	else
0398+  636A             
0398+  636A~            	else
0398+  636A~            	else
0398+  636A             
0398+  636A~            	else
0398+  636A~            	else
0398+  636A             
0399+  636A BD 66 64    		jsr	addCollect
0400+  636D             		score500()
0400+  636D BD 7D 71    
0400+  6370 C6 02       
0400+  6372 F7 01 49    
0400+  6375 86 0E       
0400+  6377 BD 7D 2F    
0400+  637A BD 7D 71    
0400+  637D C6 02       
0400+  637F F7 01 49    
0400+  6382 86 0E       
0400+  6384 BD 7D 2F    
0400+  6387 BD 7D 71    
0400+  638A C6 02       
0400+  638C F7 01 49    
0400+  638F 86 0E       
0400+  6391 BD 7D 2F    
0400+  6394 BD 7D 71    
0400+  6397 C6 02       
0400+  6399 F7 01 49    
0400+  639C 86 0E       
0400+  639E BD 7D 2F    
0400+  63A1 BD 7D 71    
0400+  63A4 C6 02       
0400+  63A6 F7 01 49    
0400+  63A9 86 0E       
0400+  63AB BD 7D 2F    
0401+  63AE             	endif
0401+  63AE             
0401+  63AE             
0401+  63AE             
0401+  63AE             
0401+  63AE             
0401+  63AE~            	endif
0401+  63AE~            	endif
0401+  63AE             
0401+  63AE~            	endif
0401+  63AE~            	endif
0401+  63AE             
0401+  6369             
0401+  6369 44          
0401+  636A             
0401+  636A             
0401+  636A~            	endif
0401+  636A~            	endif
0401+  636A~            	endif
0401+  636A             
0401+  63AE             
0401+  63AE~            	endif
0401+  63AE~            	endif
0401+  63AE             
0402+  63AE C6 03       	fireSolenoid(LEFT_EJECT)
0402+  63B0 F7 01 43    
0403+  63B3             	
0404+  63B3 86 3E       	delay(500)
0404+  63B5 BD 7D 2F    
0405+  63B8 86 C7       	ldaA	11000111b
0406+  63BA 94 A1       	andA	>flc(2)
0407+  63BC 97 A1       	staA	flc(2)
0408+  63BE             	done(1)
0408+  63BE~            	done(1)
0408+  63BE~            	done(1)
0408+  63BE~            	done(1)
0408+  63BE~            	done(1)
0408+  63BE             
0408+  63BE 7E 79 82    
0409+  63C1             	
0410+  63C1             swTopEject:
0411+  63C1 7C 00 B0    	advBonus()
0412+  63C4 D6 0B       	ldaB	>lc(4)
0413+  63C6 57          	asrB
0414+  63C7             	ifeq ; 1k
0414+  63C7             
0414+  63C7 26 FE       
0415+  63C9 BD 7D 80    		score1000()
0416+  63CC 7E 64 89    		jmp	swTopEject_scored
0417+  63CF             	endif
0417+  63CF             
0417+  63CF             
0417+  63CF             
0417+  63CF             
0417+  63CF             
0417+  63CF~            	endif
0417+  63CF~            	endif
0417+  63CF             
0417+  63CF~            	endif
0417+  63CF~            	endif
0417+  63CF             
0417+  63C8             
0417+  63C8 06          
0417+  63C9             
0417+  63C9             
0417+  63C9~            	endif
0417+  63C9~            	endif
0417+  63C9~            	endif
0417+  63C9             
0417+  63CF             
0417+  63CF~            	endif
0417+  63CF~            	endif
0417+  63CF             
0418+  63CF 57          	asrB
0419+  63D0             	ifeq  ; captive
0419+  63D0             
0419+  63D0 26 FE       
0420+  63D2 86 40       		ldaA	lr(7)
0421+  63D4 95 09       		bitA	>lc(2) ; captive ball
0422+  63D6             		ifeq	; not lit
0422+  63D6             
0422+  63D6 26 FE       
0423+  63D8 86 40       			lampOn(7,2)
0423+  63DA 9A 09       
0423+  63DC 97 09       
0424+  63DE             		else
0424+  63DE             
0424+  63DE             
0424+  63DE             
0424+  63DE             
0424+  63D7             
0424+  63D7             
0424+  63D7             
0424+  63D7~            		else
0424+  63D7~            		else
0424+  63D7~            		else
0424+  63D7~            		else
0424+  63D7             
0424+  63D7~            		else
0424+  63D7~            		else
0424+  63D7~            		else
0424+  63D7~            		else
0424+  63D7             
0424+  63D7             
0424+  63D7 08          
0424+  63DE             
0424+  63DE 20 FE       
0424+  63E0             
0424+  63E0             
0424+  63E0             
0424+  63E0~            		else
0424+  63E0~            		else
0424+  63E0~            		else
0424+  63E0~            		else
0424+  63E0~            		else
0424+  63E0             
0424+  63E0~            		else
0424+  63E0~            		else
0424+  63E0             
0424+  63E0~            		else
0424+  63E0~            		else
0424+  63E0             
0425+  63E0 86 BF       			lampOff(7,2)
0425+  63E2 94 09       
0425+  63E4 97 09       
0426+  63E6             		endif
0426+  63E6             
0426+  63E6             
0426+  63E6             
0426+  63E6             
0426+  63E6             
0426+  63E6~            		endif
0426+  63E6~            		endif
0426+  63E6             
0426+  63E6~            		endif
0426+  63E6~            		endif
0426+  63E6             
0426+  63DF             
0426+  63DF 06          
0426+  63E0             
0426+  63E0             
0426+  63E0~            		endif
0426+  63E0~            		endif
0426+  63E0~            		endif
0426+  63E0             
0426+  63E6             
0426+  63E6~            		endif
0426+  63E6~            		endif
0426+  63E6             
0427+  63E6 7E 64 89    		jmp	swTopEject_scored
0428+  63E9             	endif
0428+  63E9             
0428+  63E9             
0428+  63E9             
0428+  63E9             
0428+  63E9             
0428+  63E9~            	endif
0428+  63E9~            	endif
0428+  63E9             
0428+  63E9~            	endif
0428+  63E9~            	endif
0428+  63E9             
0428+  63D1             
0428+  63D1 17          
0428+  63D2             
0428+  63D2             
0428+  63D2~            	endif
0428+  63D2~            	endif
0428+  63D2~            	endif
0428+  63D2             
0428+  63E9             
0428+  63E9~            	endif
0428+  63E9~            	endif
0428+  63E9             
0429+  63E9 57          	asrB
0430+  63EA             	ifeq
0430+  63EA             
0430+  63EA 26 FE       
0431+  63EC             		score500()
0431+  63EC BD 7D 71    
0431+  63EF C6 02       
0431+  63F1 F7 01 49    
0431+  63F4 86 0E       
0431+  63F6 BD 7D 2F    
0431+  63F9 BD 7D 71    
0431+  63FC C6 02       
0431+  63FE F7 01 49    
0431+  6401 86 0E       
0431+  6403 BD 7D 2F    
0431+  6406 BD 7D 71    
0431+  6409 C6 02       
0431+  640B F7 01 49    
0431+  640E 86 0E       
0431+  6410 BD 7D 2F    
0431+  6413 BD 7D 71    
0431+  6416 C6 02       
0431+  6418 F7 01 49    
0431+  641B 86 0E       
0431+  641D BD 7D 2F    
0431+  6420 BD 7D 71    
0431+  6423 C6 02       
0431+  6425 F7 01 49    
0431+  6428 86 0E       
0431+  642A BD 7D 2F    
0432+  642D 20 5A       		bra	swTopEject_scored
0433+  642F             	endif
0433+  642F             
0433+  642F             
0433+  642F             
0433+  642F             
0433+  642F             
0433+  642F~            	endif
0433+  642F~            	endif
0433+  642F             
0433+  642F~            	endif
0433+  642F~            	endif
0433+  642F             
0433+  63EB             
0433+  63EB 43          
0433+  63EC             
0433+  63EC             
0433+  63EC~            	endif
0433+  63EC~            	endif
0433+  63EC~            	endif
0433+  63EC             
0433+  642F             
0433+  642F~            	endif
0433+  642F~            	endif
0433+  642F             
0434+  642F 57          	asrB
0435+  6430             	ifeq ; double
0435+  6430             
0435+  6430 26 FE       
0436+  6432 86 04       		ldaA	lr(3)
0437+  6434 95 09       		bitA	>lc(2) ; double bonus
0438+  6436             		ifeq	; not lit
0438+  6436             
0438+  6436 26 FE       
0439+  6438 86 04       			lampOn(3,2)
0439+  643A 9A 09       
0439+  643C 97 09       
0440+  643E             		else
0440+  643E             
0440+  643E             
0440+  643E             
0440+  643E             
0440+  6437             
0440+  6437             
0440+  6437             
0440+  6437~            		else
0440+  6437~            		else
0440+  6437~            		else
0440+  6437~            		else
0440+  6437             
0440+  6437~            		else
0440+  6437~            		else
0440+  6437~            		else
0440+  6437~            		else
0440+  6437             
0440+  6437             
0440+  6437 08          
0440+  643E             
0440+  643E 20 FE       
0440+  6440             
0440+  6440             
0440+  6440             
0440+  6440~            		else
0440+  6440~            		else
0440+  6440~            		else
0440+  6440~            		else
0440+  6440~            		else
0440+  6440             
0440+  6440~            		else
0440+  6440~            		else
0440+  6440             
0440+  6440~            		else
0440+  6440~            		else
0440+  6440             
0441+  6440 86 FB       			lampOff(3,2)
0441+  6442 94 09       
0441+  6444 97 09       
0442+  6446             		endif
0442+  6446             
0442+  6446             
0442+  6446             
0442+  6446             
0442+  6446             
0442+  6446~            		endif
0442+  6446~            		endif
0442+  6446             
0442+  6446~            		endif
0442+  6446~            		endif
0442+  6446             
0442+  643F             
0442+  643F 06          
0442+  6440             
0442+  6440             
0442+  6440~            		endif
0442+  6440~            		endif
0442+  6440~            		endif
0442+  6440             
0442+  6446             
0442+  6446~            		endif
0442+  6446~            		endif
0442+  6446             
0443+  6446             	else
0443+  6446             
0443+  6446             
0443+  6446             
0443+  6446             
0443+  6431             
0443+  6431             
0443+  6431             
0443+  6431~            	else
0443+  6431~            	else
0443+  6431~            	else
0443+  6431~            	else
0443+  6431             
0443+  6431~            	else
0443+  6431~            	else
0443+  6431~            	else
0443+  6431~            	else
0443+  6431             
0443+  6431             
0443+  6431 16          
0443+  6446             
0443+  6446 20 FE       
0443+  6448             
0443+  6448             
0443+  6448             
0443+  6448~            	else
0443+  6448~            	else
0443+  6448~            	else
0443+  6448~            	else
0443+  6448~            	else
0443+  6448             
0443+  6448~            	else
0443+  6448~            	else
0443+  6448             
0443+  6448~            	else
0443+  6448~            	else
0443+  6448             
0444+  6448             		score500()
0444+  6448 BD 7D 71    
0444+  644B C6 02       
0444+  644D F7 01 49    
0444+  6450 86 0E       
0444+  6452 BD 7D 2F    
0444+  6455 BD 7D 71    
0444+  6458 C6 02       
0444+  645A F7 01 49    
0444+  645D 86 0E       
0444+  645F BD 7D 2F    
0444+  6462 BD 7D 71    
0444+  6465 C6 02       
0444+  6467 F7 01 49    
0444+  646A 86 0E       
0444+  646C BD 7D 2F    
0444+  646F BD 7D 71    
0444+  6472 C6 02       
0444+  6474 F7 01 49    
0444+  6477 86 0E       
0444+  6479 BD 7D 2F    
0444+  647C BD 7D 71    
0444+  647F C6 02       
0444+  6481 F7 01 49    
0444+  6484 86 0E       
0444+  6486 BD 7D 2F    
0445+  6489             	endif
0445+  6489             
0445+  6489             
0445+  6489             
0445+  6489             
0445+  6489             
0445+  6489~            	endif
0445+  6489~            	endif
0445+  6489             
0445+  6489~            	endif
0445+  6489~            	endif
0445+  6489             
0445+  6447             
0445+  6447 41          
0445+  6448             
0445+  6448             
0445+  6448~            	endif
0445+  6448~            	endif
0445+  6448~            	endif
0445+  6448             
0445+  6489             
0445+  6489~            	endif
0445+  6489~            	endif
0445+  6489             
0446+  6489             swTopEject_scored:
0447+  6489             		
0448+  6489 C6 03       	fireSolenoid(TOP_EJECT)
0448+  648B F7 01 40    
0449+  648E             	done(1)
0449+  648E~            	done(1)
0449+  648E~            	done(1)
0449+  648E~            	done(1)
0449+  648E~            	done(1)
0449+  648E             
0449+  648E 7E 79 82    
0450+  6491             	
0451+  6491             swHotTip:
0452+  6491 7D 00 A9    	tst	dropResetTimer
0453+  6494             	ifne
0453+  6494             
0453+  6494 27 FE       
0454+  6496             		done(0)
0454+  6496             
0454+  6496 86 02       
0454+  6498 BA 01 69    
0454+  649B B7 01 69    
0454+  649E             
0454+  649E 7E 79 82    
0455+  64A1             	endif
0455+  64A1             
0455+  64A1             
0455+  64A1             
0455+  64A1             
0455+  64A1             
0455+  64A1~            	endif
0455+  64A1~            	endif
0455+  64A1             
0455+  64A1~            	endif
0455+  64A1~            	endif
0455+  64A1             
0455+  6495             
0455+  6495 0B          
0455+  6496             
0455+  6496             
0455+  6496~            	endif
0455+  6496~            	endif
0455+  6496~            	endif
0455+  6496             
0455+  64A1             
0455+  64A1~            	endif
0455+  64A1~            	endif
0455+  64A1             
0456+  64A1             	
0457+  64A1 BD 66 64    	jsr	addCollect
0458+  64A4 86 00       	ldaA	0
0459+  64A6 97 B5       	staA	p_DropsDown
0460+  64A8 97 AA       	staA	dropsDown
0461+  64AA 86 41       	ldaA	65
0462+  64AC 97 A9       	staA	dropResetTimer
0463+  64AE 86 09       	delay(75)
0463+  64B0 BD 7D 2F    
0464+  64B3 C6 0C       	fireSolenoid(DROP_HOT)
0464+  64B5 F7 01 42    
0465+  64B8 86 09       	delay(75)
0465+  64BA BD 7D 2F    
0466+  64BD C6 0C       	fireSolenoid(DROP_TIP)
0466+  64BF F7 01 41    
0467+  64C2 86 F7       	lampOff(4,3) ; spinner
0467+  64C4 94 0A       
0467+  64C6 97 0A       
0468+  64C8             	
0469+  64C8 86 57       	delay(700)
0469+  64CA BD 7D 2F    
0470+  64CD 86 C7       	ldaA	11000111b
0471+  64CF 94 A1       	andA	>flc(2)
0472+  64D1 97 A1       	staA	flc(2)
0473+  64D3             	
0474+  64D3             	done(1)
0474+  64D3~            	done(1)
0474+  64D3~            	done(1)
0474+  64D3~            	done(1)
0474+  64D3~            	done(1)
0474+  64D3             
0474+  64D3 7E 79 82    
0475+  64D6             swLeftOutlane:
0476+  64D6 86 02       	ldaA	lr(2) ; left special
0477+  64D8 95 0A       	bitA	>lc(3)
0478+  64DA             	ifne
0478+  64DA             
0478+  64DA 27 FE       
0479+  64DC 86 01       		lampOn(1,3) ; shoot again
0479+  64DE 9A 0A       
0479+  64E0 97 0A       
0480+  64E2 86 01       		flashLamp(1,3)
0480+  64E4 9A A2       
0480+  64E6 97 A2       
0481+  64E8 C6 0C       		fireSolenoid(BUZZER)
0481+  64EA F7 01 4E    
0482+  64ED 86 80       		flashLamp(8,2)
0482+  64EF 9A A1       
0482+  64F1 97 A1       
0483+  64F3             	endif
0483+  64F3             
0483+  64F3             
0483+  64F3             
0483+  64F3             
0483+  64F3             
0483+  64F3~            	endif
0483+  64F3~            	endif
0483+  64F3             
0483+  64F3~            	endif
0483+  64F3~            	endif
0483+  64F3             
0483+  64DB             
0483+  64DB 17          
0483+  64DC             
0483+  64DC             
0483+  64DC~            	endif
0483+  64DC~            	endif
0483+  64DC~            	endif
0483+  64DC             
0483+  64F3             
0483+  64F3~            	endif
0483+  64F3~            	endif
0483+  64F3             
0484+  64F3             	done(1)
0484+  64F3~            	done(1)
0484+  64F3~            	done(1)
0484+  64F3~            	done(1)
0484+  64F3~            	done(1)
0484+  64F3             
0484+  64F3 7E 79 82    
0485+  64F6             	
0486+  64F6             swRightOutlane:
0487+  64F6 86 80       	ldaA	lr(8) ; right special
0488+  64F8 95 09       	bitA	>lc(2)
0489+  64FA             	ifne
0489+  64FA             
0489+  64FA 27 FE       
0490+  64FC 86 01       		lampOn(1,3) ; shoot again
0490+  64FE 9A 0A       
0490+  6500 97 0A       
0491+  6502 86 01       		flashLamp(1,3)
0491+  6504 9A A2       
0491+  6506 97 A2       
0492+  6508 C6 0C       		fireSolenoid(BUZZER)
0492+  650A F7 01 4E    
0493+  650D 86 80       		flashLamp(8,2)
0493+  650F 9A A1       
0493+  6511 97 A1       
0494+  6513             	endif
0494+  6513             
0494+  6513             
0494+  6513             
0494+  6513             
0494+  6513             
0494+  6513~            	endif
0494+  6513~            	endif
0494+  6513             
0494+  6513~            	endif
0494+  6513~            	endif
0494+  6513             
0494+  64FB             
0494+  64FB 17          
0494+  64FC             
0494+  64FC             
0494+  64FC~            	endif
0494+  64FC~            	endif
0494+  64FC~            	endif
0494+  64FC             
0494+  6513             
0494+  6513~            	endif
0494+  6513~            	endif
0494+  6513             
0495+  6513             	done(1)
0495+  6513~            	done(1)
0495+  6513~            	done(1)
0495+  6513~            	done(1)
0495+  6513~            	done(1)
0495+  6513             
0495+  6513 7E 79 82    
0496+  6516             	
0497+  6516             swLeftInlane:
0498+  6516             swRightInlane:
0499+  6516 7C 00 B0    	advBonus()
0500+  6519 BD 7D 80    	score1000()
0501+  651C             	done(1)
0501+  651C~            	done(1)
0501+  651C~            	done(1)
0501+  651C~            	done(1)
0501+  651C~            	done(1)
0501+  651C             
0501+  651C 7E 79 82    
0502+  651F             sw10pt:
0503+  651F BD 7D 63    	score10()
0504+  6522 77 00 0B    	asr	lc(4)
0505+  6525             	ifeq ; shifted off the edge
0505+  6525             
0505+  6525 26 FE       
0506+  6527 86 10       		ldaA	00010000b
0507+  6529 97 0B       		staA	lc(4)
0508+  652B             	endif
0508+  652B             
0508+  652B             
0508+  652B             
0508+  652B             
0508+  652B             
0508+  652B~            	endif
0508+  652B~            	endif
0508+  652B             
0508+  652B~            	endif
0508+  652B~            	endif
0508+  652B             
0508+  6526             
0508+  6526 04          
0508+  6527             
0508+  6527             
0508+  6527~            	endif
0508+  6527~            	endif
0508+  6527~            	endif
0508+  6527             
0508+  652B             
0508+  652B~            	endif
0508+  652B~            	endif
0508+  652B             
0509+  652B             	done(1)
0509+  652B~            	done(1)
0509+  652B~            	done(1)
0509+  652B~            	done(1)
0509+  652B~            	done(1)
0509+  652B             
0509+  652B 7E 79 82    
0510+  652E             sw100pt:
0511+  652E BD 7D 71    	score100()
0512+  6531             	done(1)
0512+  6531~            	done(1)
0512+  6531~            	done(1)
0512+  6531~            	done(1)
0512+  6531~            	done(1)
0512+  6531             
0512+  6531 7E 79 82    
0513+  6534             sw500pt:
0514+  6534 BD 66 38    	jsr	alternate
0515+  6537             	score500()
0515+  6537 BD 7D 71    
0515+  653A C6 02       
0515+  653C F7 01 49    
0515+  653F 86 0E       
0515+  6541 BD 7D 2F    
0515+  6544 BD 7D 71    
0515+  6547 C6 02       
0515+  6549 F7 01 49    
0515+  654C 86 0E       
0515+  654E BD 7D 2F    
0515+  6551 BD 7D 71    
0515+  6554 C6 02       
0515+  6556 F7 01 49    
0515+  6559 86 0E       
0515+  655B BD 7D 2F    
0515+  655E BD 7D 71    
0515+  6561 C6 02       
0515+  6563 F7 01 49    
0515+  6566 86 0E       
0515+  6568 BD 7D 2F    
0515+  656B BD 7D 71    
0515+  656E C6 02       
0515+  6570 F7 01 49    
0515+  6573 86 0E       
0515+  6575 BD 7D 2F    
0516+  6578             	done(1)
0516+  6578~            	done(1)
0516+  6578~            	done(1)
0516+  6578~            	done(1)
0516+  6578~            	done(1)
0516+  6578             
0516+  6578 7E 79 82    
0517+  657B             swPop:
0518+  657B BD 66 38    	jsr	alternate
0519+  657E BD 7D 71    	score100()
0520+  6581             	done(1)
0520+  6581~            	done(1)
0520+  6581~            	done(1)
0520+  6581~            	done(1)
0520+  6581~            	done(1)
0520+  6581             
0520+  6581 7E 79 82    
0521+  6584             swDropTip:
0522+  6584 86 08       	ldaA	1<<3
0523+  6586 BD 65 A2    	jsr	swDrop
0524+  6589             swDropHot:
0525+  6589 86 01       	ldaA	1<<0
0526+  658B BD 65 A2    	jsr	swDrop
0527+  658E             swDroptIp:
0528+  658E 86 10       	ldaA	1<<4
0529+  6590 BD 65 A2    	jsr	swDrop
0530+  6593             swDrophOt:
0531+  6593 86 02       	ldaA	1<<1
0532+  6595 BD 65 A2    	jsr	swDrop
0533+  6598             swDroptiP:
0534+  6598 86 20       	ldaA	1<<5
0535+  659A BD 65 A2    	jsr	swDrop
0536+  659D             swDrophoT:
0537+  659D 86 04       	ldaA	1<<2
0538+  659F BD 65 A2    	jsr	swDrop
0539+  65A2             swDrop:
0540+  65A2 7D 00 A9    	tst	dropResetTimer
0541+  65A5             	ifeq
0541+  65A5             
0541+  65A5 26 FE       
0542+  65A7 95 AA       		bitA	>dropsDown
0543+  65A9             		ifne
0543+  65A9             
0543+  65A9 27 FE       
0544+  65AB             			done(0)
0544+  65AB             
0544+  65AB 86 02       
0544+  65AD BA 01 69    
0544+  65B0 B7 01 69    
0544+  65B3             
0544+  65B3 7E 79 82    
0545+  65B6             		endif
0545+  65B6             
0545+  65B6             
0545+  65B6             
0545+  65B6             
0545+  65B6             
0545+  65B6~            		endif
0545+  65B6~            		endif
0545+  65B6             
0545+  65B6~            		endif
0545+  65B6~            		endif
0545+  65B6             
0545+  65AA             
0545+  65AA 0B          
0545+  65AB             
0545+  65AB             
0545+  65AB~            		endif
0545+  65AB~            		endif
0545+  65AB~            		endif
0545+  65AB             
0545+  65B6             
0545+  65B6~            		endif
0545+  65B6~            		endif
0545+  65B6             
0546+  65B6 9A AA       		oraA	>dropsDown
0547+  65B8             		
0548+  65B8 97 AA       		staA	dropsDown
0549+  65BA 7C 00 B5    		inc	p_DropsDown
0550+  65BD 86 04       		ldaA	4
0551+  65BF 91 B5       		cmpA	>p_DropsDown
0552+  65C1             		ifgt
0552+  65C1             
0552+  65C1 23 FE       
0553+  65C3 86 F7       			lampOff(4,3) ; spinner
0553+  65C5 94 0A       
0553+  65C7 97 0A       
0554+  65C9             		else
0554+  65C9             
0554+  65C9             
0554+  65C9             
0554+  65C9             
0554+  65C2             
0554+  65C2             
0554+  65C2             
0554+  65C2~            		else
0554+  65C2~            		else
0554+  65C2~            		else
0554+  65C2~            		else
0554+  65C2             
0554+  65C2~            		else
0554+  65C2~            		else
0554+  65C2~            		else
0554+  65C2~            		else
0554+  65C2             
0554+  65C2             
0554+  65C2 08          
0554+  65C9             
0554+  65C9 20 FE       
0554+  65CB             
0554+  65CB             
0554+  65CB             
0554+  65CB~            		else
0554+  65CB~            		else
0554+  65CB~            		else
0554+  65CB~            		else
0554+  65CB~            		else
0554+  65CB             
0554+  65CB~            		else
0554+  65CB~            		else
0554+  65CB             
0554+  65CB~            		else
0554+  65CB~            		else
0554+  65CB             
0555+  65CB 86 08       			lampOn(4,3)
0555+  65CD 9A 0A       
0555+  65CF 97 0A       
0556+  65D1             		endif
0556+  65D1             
0556+  65D1             
0556+  65D1             
0556+  65D1             
0556+  65D1             
0556+  65D1~            		endif
0556+  65D1~            		endif
0556+  65D1             
0556+  65D1~            		endif
0556+  65D1~            		endif
0556+  65D1             
0556+  65CA             
0556+  65CA 06          
0556+  65CB             
0556+  65CB             
0556+  65CB~            		endif
0556+  65CB~            		endif
0556+  65CB~            		endif
0556+  65CB             
0556+  65D1             
0556+  65D1~            		endif
0556+  65D1~            		endif
0556+  65D1             
0557+  65D1             		
0558+  65D1 BD 7D 63    		score10()
0559+  65D4             		done(1)
0559+  65D4~            		done(1)
0559+  65D4~            		done(1)
0559+  65D4~            		done(1)
0559+  65D4~            		done(1)
0559+  65D4             
0559+  65D4 7E 79 82    
0560+  65D7             	else
0560+  65D7             
0560+  65D7             
0560+  65D7             
0560+  65D7             
0560+  65A6             
0560+  65A6             
0560+  65A6             
0560+  65A6~            	else
0560+  65A6~            	else
0560+  65A6~            	else
0560+  65A6~            	else
0560+  65A6             
0560+  65A6~            	else
0560+  65A6~            	else
0560+  65A6~            	else
0560+  65A6~            	else
0560+  65A6             
0560+  65A6             
0560+  65A6 32          
0560+  65D7             
0560+  65D7 20 FE       
0560+  65D9             
0560+  65D9             
0560+  65D9             
0560+  65D9~            	else
0560+  65D9~            	else
0560+  65D9~            	else
0560+  65D9~            	else
0560+  65D9~            	else
0560+  65D9             
0560+  65D9~            	else
0560+  65D9~            	else
0560+  65D9             
0560+  65D9~            	else
0560+  65D9~            	else
0560+  65D9             
0561+  65D9             		done(0)
0561+  65D9             
0561+  65D9 86 02       
0561+  65DB BA 01 69    
0561+  65DE B7 01 69    
0561+  65E1             
0561+  65E1 7E 79 82    
0562+  65E4             	endif
0562+  65E4             
0562+  65E4             
0562+  65E4             
0562+  65E4             
0562+  65E4             
0562+  65E4~            	endif
0562+  65E4~            	endif
0562+  65E4             
0562+  65E4~            	endif
0562+  65E4~            	endif
0562+  65E4             
0562+  65D8             
0562+  65D8 0B          
0562+  65D9             
0562+  65D9             
0562+  65D9~            	endif
0562+  65D9~            	endif
0562+  65D9~            	endif
0562+  65D9             
0562+  65E4             
0562+  65E4~            	endif
0562+  65E4~            	endif
0562+  65E4             
0563+  65E4             swAdvBonus:
0564+  65E4 7C 00 B0    	advBonus()
0565+  65E7             	done(1)
0565+  65E7~            	done(1)
0565+  65E7~            	done(1)
0565+  65E7~            	done(1)
0565+  65E7~            	done(1)
0565+  65E7             
0565+  65E7 7E 79 82    
0566+  65EA             swSpinner:
0567+  65EA             	;ldaA	>sc(4)
0568+  65EA             	;bitA	sr(6)
0569+  65EA             	;ifne
0570+  65EA             	;	score100()
0571+  65EA             	;	ldaA	$E
0572+  65EA             	;else
0573+  65EA             	;	noValidate
0574+  65EA             	;	ldaA	0
0575+  65EA             	;endif
0576+  65EA             	;staA	solenoid1 + CLICKER - 1
0577+  65EA             	
0578+  65EA 86 08       	ldaA	lr(4) ; spinner
0579+  65EC 95 0A       	bitA	>lc(3)
0580+  65EE             	ifne ; spinner on
0580+  65EE             
0580+  65EE 27 FE       
0581+  65F0 BD 7D 71    		score100()
0582+  65F3 C6 01       		fireSolenoid(CLICKER)
0582+  65F5 F7 01 4C    
0583+  65F8             	else
0583+  65F8             
0583+  65F8             
0583+  65F8             
0583+  65F8             
0583+  65EF             
0583+  65EF             
0583+  65EF             
0583+  65EF~            	else
0583+  65EF~            	else
0583+  65EF~            	else
0583+  65EF~            	else
0583+  65EF             
0583+  65EF~            	else
0583+  65EF~            	else
0583+  65EF~            	else
0583+  65EF~            	else
0583+  65EF             
0583+  65EF             
0583+  65EF 0A          
0583+  65F8             
0583+  65F8 20 FE       
0583+  65FA             
0583+  65FA             
0583+  65FA             
0583+  65FA~            	else
0583+  65FA~            	else
0583+  65FA~            	else
0583+  65FA~            	else
0583+  65FA~            	else
0583+  65FA             
0583+  65FA~            	else
0583+  65FA~            	else
0583+  65FA             
0583+  65FA~            	else
0583+  65FA~            	else
0583+  65FA             
0584+  65FA BD 7D 63    		score10()
0585+  65FD             	endif
0585+  65FD             
0585+  65FD             
0585+  65FD             
0585+  65FD             
0585+  65FD             
0585+  65FD~            	endif
0585+  65FD~            	endif
0585+  65FD             
0585+  65FD~            	endif
0585+  65FD~            	endif
0585+  65FD             
0585+  65F9             
0585+  65F9 03          
0585+  65FA             
0585+  65FA             
0585+  65FA~            	endif
0585+  65FA~            	endif
0585+  65FA~            	endif
0585+  65FA             
0585+  65FD             
0585+  65FD~            	endif
0585+  65FD~            	endif
0585+  65FD             
0586+  65FD             	done(1)
0586+  65FD~            	done(1)
0586+  65FD~            	done(1)
0586+  65FD~            	done(1)
0586+  65FD~            	done(1)
0586+  65FD             
0586+  65FD 7E 79 82    
0587+  6600             
0588+  6600             swCaptiveRollover:
0589+  6600 96 09       	ldaA	>lc(2)
0590+  6602 85 40       	bitA	lr(7)
0591+  6604             	ifeq ; light off
0591+  6604             
0591+  6604 26 FE       
0592+  6606 BD 7D 63    		score10()
0593+  6609             	else
0593+  6609             
0593+  6609             
0593+  6609             
0593+  6609             
0593+  6605             
0593+  6605             
0593+  6605             
0593+  6605~            	else
0593+  6605~            	else
0593+  6605~            	else
0593+  6605~            	else
0593+  6605             
0593+  6605~            	else
0593+  6605~            	else
0593+  6605~            	else
0593+  6605~            	else
0593+  6605             
0593+  6605             
0593+  6605 05          
0593+  6609             
0593+  6609 20 FE       
0593+  660B             
0593+  660B             
0593+  660B             
0593+  660B~            	else
0593+  660B~            	else
0593+  660B~            	else
0593+  660B~            	else
0593+  660B~            	else
0593+  660B             
0593+  660B~            	else
0593+  660B~            	else
0593+  660B             
0593+  660B~            	else
0593+  660B~            	else
0593+  660B             
0594+  660B BD 7D 80    		score1000()
0595+  660E 86 0E       		ldaA	14 ; captive rollover switch number
0596+  6610 91 A8       		cmpA	>lastSwitch
0597+  6612             		ifne
0597+  6612             
0597+  6612 27 FE       
0598+  6614 BD 66 31    			jsr	captiveAward
0599+  6617             		endif
0599+  6617             
0599+  6617             
0599+  6617             
0599+  6617             
0599+  6617             
0599+  6617~            		endif
0599+  6617~            		endif
0599+  6617             
0599+  6617~            		endif
0599+  6617~            		endif
0599+  6617             
0599+  6613             
0599+  6613 03          
0599+  6614             
0599+  6614             
0599+  6614~            		endif
0599+  6614~            		endif
0599+  6614~            		endif
0599+  6614             
0599+  6617             
0599+  6617~            		endif
0599+  6617~            		endif
0599+  6617             
0600+  6617             	endif
0600+  6617             
0600+  6617             
0600+  6617             
0600+  6617             
0600+  6617             
0600+  6617~            	endif
0600+  6617~            	endif
0600+  6617             
0600+  6617~            	endif
0600+  6617~            	endif
0600+  6617             
0600+  660A             
0600+  660A 0C          
0600+  660B             
0600+  660B             
0600+  660B~            	endif
0600+  660B~            	endif
0600+  660B~            	endif
0600+  660B             
0600+  6617             
0600+  6617~            	endif
0600+  6617~            	endif
0600+  6617             
0601+  6617             	done(1)
0601+  6617~            	done(1)
0601+  6617~            	done(1)
0601+  6617~            	done(1)
0601+  6617~            	done(1)
0601+  6617             
0601+  6617 7E 79 82    
0602+  661A             
0603+  661A             swCaptiveTarget:
0604+  661A 7C 00 B0    	advBonus()
0605+  661D 96 09       	ldaA	>lc(2)
0606+  661F 85 40       	bitA	lr(7)
0607+  6621             	ifeq ; light off
0607+  6621             
0607+  6621 26 FE       
0608+  6623 BD 7D 63    		score10()
0609+  6626 BD 66 31    		jsr	captiveAward
0610+  6629             	else
0610+  6629             
0610+  6629             
0610+  6629             
0610+  6629             
0610+  6622             
0610+  6622             
0610+  6622             
0610+  6622~            	else
0610+  6622~            	else
0610+  6622~            	else
0610+  6622~            	else
0610+  6622             
0610+  6622~            	else
0610+  6622~            	else
0610+  6622~            	else
0610+  6622~            	else
0610+  6622             
0610+  6622             
0610+  6622 08          
0610+  6629             
0610+  6629 20 FE       
0610+  662B             
0610+  662B             
0610+  662B             
0610+  662B~            	else
0610+  662B~            	else
0610+  662B~            	else
0610+  662B~            	else
0610+  662B~            	else
0610+  662B             
0610+  662B~            	else
0610+  662B~            	else
0610+  662B             
0610+  662B~            	else
0610+  662B~            	else
0610+  662B             
0611+  662B BD 7D 80    		score1000()
0612+  662E             	endif
0612+  662E             
0612+  662E             
0612+  662E             
0612+  662E             
0612+  662E             
0612+  662E~            	endif
0612+  662E~            	endif
0612+  662E             
0612+  662E~            	endif
0612+  662E~            	endif
0612+  662E             
0612+  662A             
0612+  662A 03          
0612+  662B             
0612+  662B             
0612+  662B~            	endif
0612+  662B~            	endif
0612+  662B~            	endif
0612+  662B             
0612+  662E             
0612+  662E~            	endif
0612+  662E~            	endif
0612+  662E             
0613+  662E             	done(1)
0613+  662E~            	done(1)
0613+  662E~            	done(1)
0613+  662E~            	done(1)
0613+  662E~            	done(1)
0613+  662E             
0613+  662E 7E 79 82    
0614+  6631             	
0615+  6631             captiveAward:
0616+  6631 86 80       	lampOn(8,2) ; right special
0616+  6633 9A 09       
0616+  6635 97 09       
0617+  6637             	
0618+  6637 39          	rts
0619+  6638             	
0620+  6638             alternate:
0621+  6638 C6 00       	ldaB	0 ; turn on left?
0622+  663A 86 80       	ldaA	lr(8) ; right special
0623+  663C 95 09       	bitA	>lc(2)
0624+  663E             	ifne
0624+  663E             
0624+  663E 27 FE       
0625+  6640 C6 01       		ldaB	1
0626+  6642 86 7F       		lampOff(8,2) ; right special
0626+  6644 94 09       
0626+  6646 97 09       
0627+  6648             	endif
0627+  6648             
0627+  6648             
0627+  6648             
0627+  6648             
0627+  6648             
0627+  6648~            	endif
0627+  6648~            	endif
0627+  6648             
0627+  6648~            	endif
0627+  6648~            	endif
0627+  6648             
0627+  663F             
0627+  663F 08          
0627+  6640             
0627+  6640             
0627+  6640~            	endif
0627+  6640~            	endif
0627+  6640~            	endif
0627+  6640             
0627+  6648             
0627+  6648~            	endif
0627+  6648~            	endif
0627+  6648             
0628+  6648 86 02       	ldaA	lr(2) ; left special
0629+  664A 95 0A       	bitA	>lc(3)
0630+  664C             	ifne
0630+  664C             
0630+  664C 27 FE       
0631+  664E 86 80       		lampOn(8,2) ; right special
0631+  6650 9A 09       
0631+  6652 97 09       
0632+  6654 86 FD       		lampOff(2,3) ; left special
0632+  6656 94 0A       
0632+  6658 97 0A       
0633+  665A             	endif
0633+  665A             
0633+  665A             
0633+  665A             
0633+  665A             
0633+  665A             
0633+  665A~            	endif
0633+  665A~            	endif
0633+  665A             
0633+  665A~            	endif
0633+  665A~            	endif
0633+  665A             
0633+  664D             
0633+  664D 0C          
0633+  664E             
0633+  664E             
0633+  664E~            	endif
0633+  664E~            	endif
0633+  664E~            	endif
0633+  664E             
0633+  665A             
0633+  665A~            	endif
0633+  665A~            	endif
0633+  665A             
0634+  665A 5D          	tstB
0635+  665B             	ifne
0635+  665B             
0635+  665B 27 FE       
0636+  665D 86 02       		lampOn(2,3) ; left special
0636+  665F 9A 0A       
0636+  6661 97 0A       
0637+  6663             	endif
0637+  6663             
0637+  6663             
0637+  6663             
0637+  6663             
0637+  6663             
0637+  6663~            	endif
0637+  6663~            	endif
0637+  6663             
0637+  6663~            	endif
0637+  6663~            	endif
0637+  6663             
0637+  665C             
0637+  665C 06          
0637+  665D             
0637+  665D             
0637+  665D~            	endif
0637+  665D~            	endif
0637+  665D~            	endif
0637+  665D             
0637+  6663             
0637+  6663~            	endif
0637+  6663~            	endif
0637+  6663             
0638+  6663 39          	rts
0639+  6664             	
0640+  6664             addCollect:
0641+  6664 96 09       	ldaA	>lc(2)
0642+  6666 85 08       	bitA	lr(4)
0643+  6668             	ifeq
0643+  6668             
0643+  6668 26 FE       
0644+  666A 86 08       		lampOn(4,2)
0644+  666C 9A 09       
0644+  666E 97 09       
0645+  6670 86 08       		flashLamp(4,2)
0645+  6672 9A A1       
0645+  6674 97 A1       
0646+  6676             	else
0646+  6676             
0646+  6676             
0646+  6676             
0646+  6676             
0646+  6669             
0646+  6669             
0646+  6669             
0646+  6669~            	else
0646+  6669~            	else
0646+  6669~            	else
0646+  6669~            	else
0646+  6669             
0646+  6669~            	else
0646+  6669~            	else
0646+  6669~            	else
0646+  6669~            	else
0646+  6669             
0646+  6669             
0646+  6669 0E          
0646+  6676             
0646+  6676 20 FE       
0646+  6678             
0646+  6678             
0646+  6678             
0646+  6678~            	else
0646+  6678~            	else
0646+  6678~            	else
0646+  6678~            	else
0646+  6678~            	else
0646+  6678             
0646+  6678~            	else
0646+  6678~            	else
0646+  6678             
0646+  6678~            	else
0646+  6678~            	else
0646+  6678             
0647+  6678 85 10       		bitA	lr(5)
0648+  667A             		ifeq
0648+  667A             
0648+  667A 26 FE       
0649+  667C 86 10       			lampOn(5,2)
0649+  667E 9A 09       
0649+  6680 97 09       
0650+  6682 86 10       			flashLamp(5,2)
0650+  6684 9A A1       
0650+  6686 97 A1       
0651+  6688             		else
0651+  6688             
0651+  6688             
0651+  6688             
0651+  6688             
0651+  667B             
0651+  667B             
0651+  667B             
0651+  667B~            		else
0651+  667B~            		else
0651+  667B~            		else
0651+  667B~            		else
0651+  667B             
0651+  667B~            		else
0651+  667B~            		else
0651+  667B~            		else
0651+  667B~            		else
0651+  667B             
0651+  667B             
0651+  667B 0E          
0651+  6688             
0651+  6688 20 FE       
0651+  668A             
0651+  668A             
0651+  668A             
0651+  668A~            		else
0651+  668A~            		else
0651+  668A~            		else
0651+  668A~            		else
0651+  668A~            		else
0651+  668A             
0651+  668A~            		else
0651+  668A~            		else
0651+  668A             
0651+  668A~            		else
0651+  668A~            		else
0651+  668A             
0652+  668A 85 20       			bitA	lr(6)
0653+  668C             			ifeq
0653+  668C             
0653+  668C 26 FE       
0654+  668E 86 20       				lampOn(6,2)
0654+  6690 9A 09       
0654+  6692 97 09       
0655+  6694 86 20       				flashLamp(6,2)
0655+  6696 9A A1       
0655+  6698 97 A1       
0656+  669A             			else
0656+  669A             
0656+  669A             
0656+  669A             
0656+  669A             
0656+  668D             
0656+  668D             
0656+  668D             
0656+  668D~            			else
0656+  668D~            			else
0656+  668D~            			else
0656+  668D~            			else
0656+  668D             
0656+  668D~            			else
0656+  668D~            			else
0656+  668D~            			else
0656+  668D~            			else
0656+  668D             
0656+  668D             
0656+  668D 0E          
0656+  669A             
0656+  669A 20 FE       
0656+  669C             
0656+  669C             
0656+  669C             
0656+  669C~            			else
0656+  669C~            			else
0656+  669C~            			else
0656+  669C~            			else
0656+  669C~            			else
0656+  669C             
0656+  669C~            			else
0656+  669C~            			else
0656+  669C             
0656+  669C~            			else
0656+  669C~            			else
0656+  669C             
0657+  669C BD 7D 80    				score1000()
0658+  669F 86 04       				lampOn(3,3)
0658+  66A1 9A 0A       
0658+  66A3 97 0A       
0659+  66A5             			endif
0659+  66A5             
0659+  66A5             
0659+  66A5             
0659+  66A5             
0659+  66A5             
0659+  66A5~            			endif
0659+  66A5~            			endif
0659+  66A5             
0659+  66A5~            			endif
0659+  66A5~            			endif
0659+  66A5             
0659+  669B             
0659+  669B 09          
0659+  669C             
0659+  669C             
0659+  669C~            			endif
0659+  669C~            			endif
0659+  669C~            			endif
0659+  669C             
0659+  66A5             
0659+  66A5~            			endif
0659+  66A5~            			endif
0659+  66A5             
0660+  66A5             		endif
0660+  66A5             
0660+  66A5             
0660+  66A5             
0660+  66A5             
0660+  66A5             
0660+  66A5~            		endif
0660+  66A5~            		endif
0660+  66A5             
0660+  66A5~            		endif
0660+  66A5~            		endif
0660+  66A5             
0660+  6689             
0660+  6689 1B          
0660+  668A             
0660+  668A             
0660+  668A~            		endif
0660+  668A~            		endif
0660+  668A~            		endif
0660+  668A             
0660+  66A5             
0660+  66A5~            		endif
0660+  66A5~            		endif
0660+  66A5             
0661+  66A5             	endif
0661+  66A5             
0661+  66A5             
0661+  66A5             
0661+  66A5             
0661+  66A5             
0661+  66A5~            	endif
0661+  66A5~            	endif
0661+  66A5             
0661+  66A5~            	endif
0661+  66A5~            	endif
0661+  66A5             
0661+  6677             
0661+  6677 2D          
0661+  6678             
0661+  6678             
0661+  6678~            	endif
0661+  6678~            	endif
0661+  6678~            	endif
0661+  6678             
0661+  66A5             
0661+  66A5~            	endif
0661+  66A5~            	endif
0661+  66A5             
0662+  66A5 39          	rts
0663+  66A6             	
0664+  66A6             ; end callbacks
0665+  66A6             	.msfirst
0666+  66A6             ; needs to be on $**00 address
0667+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0668+  6000 62 09       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0668+  6002 62 09       
0668+  6004 62 22       
0668+  6006 60 C0       
0668+  6008 60 C0       
0668+  600A 60 C0       
0668+  600C 62 09       
0668+  600E 60 C0       
0669+  6010 62 59       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0669+  6012 62 09       
0669+  6014 64 F6       
0669+  6016 65 16       
0669+  6018 65 1F       
0669+  601A 65 34       
0669+  601C 66 00       
0669+  601E 66 1A       
0670+  6020 65 84       	.dw swDropTip	\.dw swDroptIp\.dw swDroptiP\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0670+  6022 65 8E       
0670+  6024 65 98       
0670+  6026 65 E4       
0670+  6028 65 1F       
0670+  602A 63 C1       
0670+  602C 65 1F       
0670+  602E 60 C0       
0671+  6030 65 89       	.dw swDropHot	\.dw swDrophOt\.dw swDrophoT\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0671+  6032 65 93       
0671+  6034 65 9D       
0671+  6036 65 1F       
0671+  6038 63 32       
0671+  603A 65 EA       
0671+  603C 65 7B       
0671+  603E 65 34       
0672+  6040 64 D6       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0672+  6042 65 16       
0672+  6044 65 1F       
0672+  6046 60 C0       
0672+  6048 64 91       
0672+  604A 60 C0       
0672+  604C 60 C0       
0672+  604E 60 C0       
0673+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0673+  6052 60 C0       
0673+  6054 60 C0       
0673+  6056 60 C0       
0673+  6058 60 C0       
0673+  605A 60 C0       
0673+  605C 60 C0       
0673+  605E 60 C0       
0674+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0674+  6062 60 C0       
0674+  6064 60 C0       
0674+  6066 60 C0       
0674+  6068 60 C0       
0674+  606A 60 C0       
0674+  606C 60 C0       
0674+  606E 60 C0       
0675+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0675+  6072 60 C0       
0675+  6074 60 C0       
0675+  6076 60 C0       
0675+  6078 60 C0       
0675+  607A 60 C0       
0675+  607C 60 C0       
0675+  607E 60 C0       
0676+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0677+  6080             ; off = how many cycles it must be off for
0678+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0679+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0680+  6080             ; TRANSPOSED (?)
0681+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0682+  6080             settleTable: ; must be right after callbackTable
0683+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0683+  6081 87          
0683+  6082 C2          
0683+  6083 47          
0683+  6084 47          
0683+  6085 47          
0683+  6086 87          
0683+  6087 47          
0684+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0684+  6089 87          
0684+  608A 87          
0684+  608B 87          
0684+  608C 81          
0684+  608D 81          
0684+  608E 80          
0684+  608F 87          
0685+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0685+  6091 87          
0685+  6092 87          
0685+  6093 83          
0685+  6094 81          
0685+  6095 E1          
0685+  6096 81          
0685+  6097 80          
0686+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,1,1,0)
0686+  6099 87          
0686+  609A 87          
0686+  609B 81          
0686+  609C E1          
0686+  609D 80          
0686+  609E 80          
0686+  609F 81          
0687+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0687+  60A1 87          
0687+  60A2 81          
0687+  60A3 47          
0687+  60A4 80          
0687+  60A5 47          
0687+  60A6 47          
0687+  60A7 47          
0688+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0688+  60A9 47          
0688+  60AA 47          
0688+  60AB 47          
0688+  60AC 47          
0688+  60AD 47          
0688+  60AE 47          
0688+  60AF 47          
0689+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0689+  60B1 47          
0689+  60B2 47          
0689+  60B3 47          
0689+  60B4 47          
0689+  60B5 47          
0689+  60B6 47          
0689+  60B7 47          
0690+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0690+  60B9 47          
0690+  60BA 47          
0690+  60BB 47          
0690+  60BC 47          
0690+  60BD 47          
0690+  60BE 47          
0690+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 FF       	ldaA	$FF	
0102   78AF B7 28 00    	staA 	displayStrobe
0103   78B2             
0104   78B2 86 00       	ldaA	00
0105   78B4 97 07       	staA	strobe
0106   78B6 B7 01 68    	staA	displayCol
0107   78B9             	
0108   78B9 CE 00 00    	ldX 	0
0109   78BC DF 50       	stX		curCol
0110   78BE             	
0111   78BE 86 00       	ldaA	0
0112   78C0 97 10       	staA	curSwitchRowLsb
0113   78C2             	
0114   78C2             ; fill solenoid status with off
0115   78C2 86 0F       	ldaA	$F
0116   78C4 CE 01 40    	ldX	solenoid1
0117   78C7             lSolDefault:
0118   78C7 A7 00       	staA	0, X
0119   78C9 08          	inX
0120   78CA 8C 01 4F    	cpX	solenoid16
0121   78CD 26 F8       	bne	lSolDefault
0122   78CF             	
0123   78CF             ; clear 8 banks
0124   78CF 86 00       	ldaA 	0
0125   78D1 CE 00 00    	ldX	0
0126   78D4             lClear8:
0127   78D4 A7 08       	staA	lampCol1, X
0128   78D6 A7 A0       	staA	flashLampCol1, X
0129   78D8 A7 80       	staA	waitLeft, X
0130   78DA 08          	inX
0131   78DB 8C 00 08    	cpX	8
0132   78DE 26 F4       	bne 	lClear8
0133   78E0             	
0134   78E0             ; empty settle
0135   78E0 86 00       	ldaA	$00
0136   78E2 CE 01 00    	ldX	settleRow1
0137   78E5             lSettleDefault:
0138   78E5 A7 00       	staA	0, X
0139   78E7 08          	inX
0140   78E8 8C 01 3F    	cpX	settleRow8End
0141   78EB 26 F8       	bne	lSettleDefault
0142   78ED             	
0143   78ED             ; empty queue
0144   78ED 86 FF       	ldaA	$FF
0145   78EF CE 00 60    	ldX	queue
0146   78F2             lEmptyQueue:
0147   78F2 A7 00       	staA	0, X
0148   78F4 08          	inX
0149   78F5 8C 00 67    	cpX	queueEnd
0150   78F8 26 F8       	bne	lEmptyQueue
0151   78FA             	
0152   78FA 86 00       	ldaA	0
0153   78FC 97 54       	staA	queueHead + 0
0154   78FE 97 56       	staA	queueTail + 0
0155   7900 86 60       	ldaA	queue
0156   7902 97 55       	staA	queueHead + 1
0157   7904 97 57       	staA	queueTail + 1
0158   7906             	
0159   7906             ; test numbers
0160   7906 86 20       	lampOn(6,8) ; game over
0160   7908 9A 0F       
0160   790A 97 0F       
0161   790C             
0162   790C             	
0163   790C BD 7D 44    	jsr resetScores
0164   790F             	
0165   790F             ; setup complete
0166   790F 0E          	clI		; enable timer interrupt
0167   7910             	
0168   7910             	
0169   7910             end:
0170   7910 B6 01 69    	ldaA	>state
0171   7913 85 04       	bitA	100b
0172   7915             	ifne
0172   7915             
0172   7915 27 FE       
0173   7917             		; dec wait timers
0174   7917 CE 00 7F    		ldX	waitLeft - 1
0175   791A             decWaitTimers:
0176   791A 08          		inX
0177   791B A6 00       		ldaA	0, X
0178   791D             		ifne
0178   791D             
0178   791D 27 FE       
0179   791F 4A          			decA
0180   7920 A7 00       			staA	0, X
0181   7922             			ifeq
0181   7922             
0181   7922 26 FE       
0182   7924 A6 08       				ldaA	waitMsb - waitLeft, X
0183   7926 97 58       				staA	tempQ
0184   7928 A6 10       				ldaA	waitLsb - waitLeft, X
0185   792A 97 59       				staA	tempQ + 1
0186   792C E6 18       				ldaB	waitReg - waitLeft, X
0187   792E DE 58       				ldX	>tempQ
0188   7930 6E 00       				jmp	0, X
0189   7932             			endif
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7923             
0189   7923 0E          
0189   7924             
0189   7924             
0189   7924~            			endif
0189   7924~            			endif
0189   7924~            			endif
0189   7924             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0190   7932             		endif
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   791E             
0190   791E 13          
0190   791F             
0190   791F             
0190   791F~            		endif
0190   791F~            		endif
0190   791F~            		endif
0190   791F             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0191   7932 8C 00 87    		cpX	waitLeftEnd
0192   7935 26 E3       		bne	decWaitTimers
0193   7937             		
0194   7937             		
0195   7937 7A 00 A9    		dec	dropResetTimer
0196   793A             		ifmi
0196   793A             
0196   793A 2A FE       
0197   793C 7C 00 A9    			inc	dropResetTimer
0198   793F             		endif
0198   793F             
0198   793F             
0198   793F             
0198   793F             
0198   793F             
0198   793F~            		endif
0198   793F~            		endif
0198   793F             
0198   793F~            		endif
0198   793F~            		endif
0198   793F             
0198   793B             
0198   793B 03          
0198   793C             
0198   793C             
0198   793C~            		endif
0198   793C~            		endif
0198   793C~            		endif
0198   793C             
0198   793F             
0198   793F~            		endif
0198   793F~            		endif
0198   793F             
0199   793F             		
0200   793F B6 01 69    		ldaA	>state		; clear strobe reset bit
0201   7942 84 FB       		andA	11111011b
0202   7944 B7 01 69    		staA	state
0203   7947             	endif
0203   7947             
0203   7947             
0203   7947             
0203   7947             
0203   7947             
0203   7947~            	endif
0203   7947~            	endif
0203   7947             
0203   7947~            	endif
0203   7947~            	endif
0203   7947             
0203   7916             
0203   7916 30          
0203   7917             
0203   7917             
0203   7917~            	endif
0203   7917~            	endif
0203   7917~            	endif
0203   7917             
0203   7947             
0203   7947~            	endif
0203   7947~            	endif
0203   7947             
0204   7947             
0205   7947             		
0206   7947             ; pop queue
0207   7947 D6 57       	ldaB	>queueTail + 1
0208   7949 D1 55       	cmpB	>queueHead + 1
0209   794B             	ifeq
0209   794B             
0209   794B 26 FE       
0210   794D 7E 79 E1    		jmp skipQueue
0211   7950             	endif
0211   7950             
0211   7950             
0211   7950             
0211   7950             
0211   7950             
0211   7950~            	endif
0211   7950~            	endif
0211   7950             
0211   7950~            	endif
0211   7950~            	endif
0211   7950             
0211   794C             
0211   794C 03          
0211   794D             
0211   794D             
0211   794D~            	endif
0211   794D~            	endif
0211   794D~            	endif
0211   794D             
0211   7950             
0211   7950~            	endif
0211   7950~            	endif
0211   7950             
0212   7950             	
0213   7950 DE 54       	ldX	>queueHead
0214   7952 A6 00       	ldaA	0, X	; A now contains the first queue item
0215   7954             	
0216   7954 16          	tAB
0217   7955 C4 3F       	andB	00111111b ; B = callback index
0218   7957             	
0219   7957 D7 59       	staB	tempQ + 1
0220   7959 C6 60       	ldaB	callbackTable >> 8
0221   795B D7 58       	staB	tempQ + 0	; callback address LSB / 2
0222   795D DE 58       	ldX	>tempQ
0223   795F             	
0224   795F E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0225   7961 C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0226   7963             	ifne ; if closure only
0226   7963             
0226   7963 27 FE       
0227   7965 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0228   7967 26 62       		bne	skipEvent
0229   7969             	endif
0229   7969             
0229   7969             
0229   7969             
0229   7969             
0229   7969             
0229   7969~            	endif
0229   7969~            	endif
0229   7969             
0229   7969~            	endif
0229   7969~            	endif
0229   7969             
0229   7964             
0229   7964 04          
0229   7965             
0229   7965             
0229   7965~            	endif
0229   7965~            	endif
0229   7965~            	endif
0229   7965             
0229   7969             
0229   7969~            	endif
0229   7969~            	endif
0229   7969             
0230   7969             	
0231   7969 C5 40       	bitB	01000000b ; B.7 = active in game over
0232   796B             	ifeq 	 ; not active in game over
0232   796B             
0232   796B 26 FE       
0233   796D D6 0F       		ldaB	>lc(8)	; gameover mask
0234   796F C5 20       		bitB	lr(6)
0235   7971 26 58       		bne	skipEvent
0236   7973 D6 0F       		ldaB	>lc(8) ; tilt bit
0237   7975 C5 10       		bitB	lr(5)
0238   7977 26 52       		bne	skipEvent
0239   7979             	endif
0239   7979             
0239   7979             
0239   7979             
0239   7979             
0239   7979             
0239   7979~            	endif
0239   7979~            	endif
0239   7979             
0239   7979~            	endif
0239   7979~            	endif
0239   7979             
0239   796C             
0239   796C 0C          
0239   796D             
0239   796D             
0239   796D~            	endif
0239   796D~            	endif
0239   796D~            	endif
0239   796D             
0239   7979             
0239   7979~            	endif
0239   7979~            	endif
0239   7979             
0240   7979             	
0241   7979             	; checked passed, do callback
0242   7979 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0243   797C DE 58       	ldX	>tempQ
0244   797E EE 00       	ldX	0, X
0245   7980 6E 00       	jmp	0, X
0246   7982             	; everything trashed
0247   7982             afterQueueEvent:
0248   7982 BD 60 C3    	jsr 	bonusLights
0249   7985             	
0250   7985             	; update last switch
0251   7985 96 59       	ldaA	> tempQ + 1
0252   7987 44          	lsrA 	; got doubled earlier
0253   7988 97 A8       	staA	lastSwitch
0254   798A             
0255   798A 86 02       	ldaA	10b ; no validate bit
0256   798C B5 01 69    	bitA	>state
0257   798F             	ifeq ; validate pf
0257   798F             
0257   798F 26 FE       
0258   7991             		; check if playfield invalid
0259   7991 86 0F       		ldaA	00001111b ; player up
0260   7993 95 A7       		bitA	>flc(8)
0261   7995             		ifne ; any flashing -> pf invalid
0261   7995             
0261   7995 27 FE       
0262   7997 43          			comA	; turn off flashing
0263   7998 94 A7       			andA	>flc(8)
0264   799A 97 A7       			staA	flc(8)
0265   799C             			
0266   799C 86 01       			ldaA	lr(1) ; shoot again pf flashing
0267   799E 95 A2       			bitA	>flc(3)
0268   79A0             			ifne
0268   79A0             
0268   79A0 27 FE       
0269   79A2             				; turn off ball save
0270   79A2 86 FE       				flashOff(1,3)
0270   79A4 94 A2       
0270   79A6 97 A2       
0271   79A8 86 40       				ldaA	lr(7) ; shoot again backbox
0272   79AA 95 0F       				bitA	>lc(8)
0273   79AC             				ifeq
0273   79AC             
0273   79AC 26 FE       
0274   79AE 86 FE       					lampOff(1,3) ; shoot again pf
0274   79B0 94 0A       
0274   79B2 97 0A       
0275   79B4             				endif
0275   79B4             
0275   79B4             
0275   79B4             
0275   79B4             
0275   79B4             
0275   79B4~            				endif
0275   79B4~            				endif
0275   79B4             
0275   79B4~            				endif
0275   79B4~            				endif
0275   79B4             
0275   79AD             
0275   79AD 06          
0275   79AE             
0275   79AE             
0275   79AE~            				endif
0275   79AE~            				endif
0275   79AE~            				endif
0275   79AE             
0275   79B4             
0275   79B4~            				endif
0275   79B4~            				endif
0275   79B4             
0276   79B4             			else
0276   79B4             
0276   79B4             
0276   79B4             
0276   79B4             
0276   79A1             
0276   79A1             
0276   79A1             
0276   79A1~            			else
0276   79A1~            			else
0276   79A1~            			else
0276   79A1~            			else
0276   79A1             
0276   79A1~            			else
0276   79A1~            			else
0276   79A1~            			else
0276   79A1~            			else
0276   79A1             
0276   79A1             
0276   79A1 14          
0276   79B4             
0276   79B4 20 FE       
0276   79B6             
0276   79B6             
0276   79B6             
0276   79B6~            			else
0276   79B6~            			else
0276   79B6~            			else
0276   79B6~            			else
0276   79B6~            			else
0276   79B6             
0276   79B6~            			else
0276   79B6~            			else
0276   79B6             
0276   79B6~            			else
0276   79B6~            			else
0276   79B6             
0277   79B6 86 FE       				lampOff(1,3) ; shoot again
0277   79B8 94 0A       
0277   79BA 97 0A       
0278   79BC 86 BF       				lampOff(7,8)
0278   79BE 94 0F       
0278   79C0 97 0F       
0279   79C2             			endif
0279   79C2             
0279   79C2             
0279   79C2             
0279   79C2             
0279   79C2             
0279   79C2~            			endif
0279   79C2~            			endif
0279   79C2             
0279   79C2~            			endif
0279   79C2~            			endif
0279   79C2             
0279   79B5             
0279   79B5 0C          
0279   79B6             
0279   79B6             
0279   79B6~            			endif
0279   79B6~            			endif
0279   79B6~            			endif
0279   79B6             
0279   79C2             
0279   79C2~            			endif
0279   79C2~            			endif
0279   79C2             
0280   79C2             		endif
0280   79C2             
0280   79C2             
0280   79C2             
0280   79C2             
0280   79C2             
0280   79C2~            		endif
0280   79C2~            		endif
0280   79C2             
0280   79C2~            		endif
0280   79C2~            		endif
0280   79C2             
0280   7996             
0280   7996 2B          
0280   7997             
0280   7997             
0280   7997~            		endif
0280   7997~            		endif
0280   7997~            		endif
0280   7997             
0280   79C2             
0280   79C2~            		endif
0280   79C2~            		endif
0280   79C2             
0281   79C2             	else
0281   79C2             
0281   79C2             
0281   79C2             
0281   79C2             
0281   7990             
0281   7990             
0281   7990             
0281   7990~            	else
0281   7990~            	else
0281   7990~            	else
0281   7990~            	else
0281   7990             
0281   7990~            	else
0281   7990~            	else
0281   7990~            	else
0281   7990~            	else
0281   7990             
0281   7990             
0281   7990 33          
0281   79C2             
0281   79C2 20 FE       
0281   79C4             
0281   79C4             
0281   79C4             
0281   79C4~            	else
0281   79C4~            	else
0281   79C4~            	else
0281   79C4~            	else
0281   79C4~            	else
0281   79C4             
0281   79C4~            	else
0281   79C4~            	else
0281   79C4             
0281   79C4~            	else
0281   79C4~            	else
0281   79C4             
0282   79C4             		; clear don't validate bit
0283   79C4 43          		comA
0284   79C5 B4 01 69    		andA	>state
0285   79C8 B7 01 69    		staA	state
0286   79CB             	endif
0286   79CB             
0286   79CB             
0286   79CB             
0286   79CB             
0286   79CB             
0286   79CB~            	endif
0286   79CB~            	endif
0286   79CB             
0286   79CB~            	endif
0286   79CB~            	endif
0286   79CB             
0286   79C3             
0286   79C3 07          
0286   79C4             
0286   79C4             
0286   79C4~            	endif
0286   79C4~            	endif
0286   79C4~            	endif
0286   79C4             
0286   79CB             
0286   79CB~            	endif
0286   79CB~            	endif
0286   79CB             
0287   79CB             	
0288   79CB             skipEvent:
0289   79CB B6 01 69    	ldaA	>state
0290   79CE 85 04       	bitA	100b
0291   79D0             	ifeq	; don't process queue if still finishing timers
0291   79D0             
0291   79D0 26 FE       
0292   79D2 C6 67       		ldaB	queueEnd
0293   79D4 D1 55       		cmpB	>queueHead + 1
0294   79D6             		ifeq
0294   79D6             
0294   79D6 26 FE       
0295   79D8 C6 60       			ldaB	queue
0296   79DA D7 55       			staB	queueHead + 1
0297   79DC             		else
0297   79DC             
0297   79DC             
0297   79DC             
0297   79DC             
0297   79D7             
0297   79D7             
0297   79D7             
0297   79D7~            		else
0297   79D7~            		else
0297   79D7~            		else
0297   79D7~            		else
0297   79D7             
0297   79D7~            		else
0297   79D7~            		else
0297   79D7~            		else
0297   79D7~            		else
0297   79D7             
0297   79D7             
0297   79D7 06          
0297   79DC             
0297   79DC 20 FE       
0297   79DE             
0297   79DE             
0297   79DE             
0297   79DE~            		else
0297   79DE~            		else
0297   79DE~            		else
0297   79DE~            		else
0297   79DE~            		else
0297   79DE             
0297   79DE~            		else
0297   79DE~            		else
0297   79DE             
0297   79DE~            		else
0297   79DE~            		else
0297   79DE             
0298   79DE 7C 00 55    			inc	queueHead + 1
0299   79E1             		endif
0299   79E1             
0299   79E1             
0299   79E1             
0299   79E1             
0299   79E1             
0299   79E1~            		endif
0299   79E1~            		endif
0299   79E1             
0299   79E1~            		endif
0299   79E1~            		endif
0299   79E1             
0299   79DD             
0299   79DD 03          
0299   79DE             
0299   79DE             
0299   79DE~            		endif
0299   79DE~            		endif
0299   79DE~            		endif
0299   79DE             
0299   79E1             
0299   79E1~            		endif
0299   79E1~            		endif
0299   79E1             
0300   79E1             	endif
0300   79E1             
0300   79E1             
0300   79E1             
0300   79E1             
0300   79E1             
0300   79E1~            	endif
0300   79E1~            	endif
0300   79E1             
0300   79E1~            	endif
0300   79E1~            	endif
0300   79E1             
0300   79D1             
0300   79D1 0F          
0300   79D2             
0300   79D2             
0300   79D2~            	endif
0300   79D2~            	endif
0300   79D2~            	endif
0300   79D2             
0300   79E1             
0300   79E1~            	endif
0300   79E1~            	endif
0300   79E1             
0301   79E1             				
0302   79E1             skipQueue:
0303   79E1             				
0304   79E1             	
0305   79E1             				
0306   79E1 7E 79 10    	jmp		end
0307   79E4 00 00       	.dw 0
0308   79E6 00 00       	.dw 0
0309   79E8 00 00       	.dw 0
0310   79EA 00 00       	.dw 0
0311   79EC 00 00       	.dw 0
0312   79EE             		
0313   79EE             interrupt:	
0314   79EE 7C 00 02    	inc	counter
0315   79F1 86 00       	ldaA	0
0316   79F3 91 02       	cmpA	>counter
0317   79F5 26 21       	bne	counterHandled
0318   79F7 7C 00 03    	inc 	counter2
0319   79FA 86 04       	ldaA	4
0320   79FC 91 03       	cmpA	>counter2
0321   79FE 26 18       	bne	counterHandled
0322   7A00             	
0323   7A00 86 00       	ldaA	0
0324   7A02 97 03       	staA	counter2
0325   7A04 86 77       	ldaA	01110111b
0326   7A06 91 70       	cmpA	>displayBcd1
0327   7A08 27 08       	beq	on
0328   7A0A             	
0329   7A0A 86 F0       	ldaA	$F0
0330   7A0C             	;staA	lampRow1
0331   7A0C 86 77       	ldaA	01110111b
0332   7A0E 97 70       	staA	displayBcd1	
0333   7A10 20 06       	bra	counterHandled
0334   7A12             on:
0335   7A12 86 0F       	ldaA	$0F
0336   7A14             	;staA	lampRow1
0337   7A14 86 33       	ldaA	00110011b
0338   7A16 97 70       	staA	displayBcd1	
0339   7A18             
0340   7A18             counterHandled:
0341   7A18             ; move switch column
0342   7A18 96 07       	ldaA	>strobe
0343   7A1A B7 30 02    	staA	switchStrobe
0344   7A1D             	
0345   7A1D             ; update display 
0346   7A1D             	
0347   7A1D DE 50       	ldX	>curCol
0348   7A1F B6 01 68    	ldaA	>displayCol
0349   7A22 C6 FF       	ldaB 	$FF
0350   7A24 F7 28 02    	staB	displayBcd
0351   7A27 B7 28 00    	staA	displayStrobe
0352   7A2A 85 08       	bitA	00001000b
0353   7A2C             	ifeq
0353   7A2C             
0353   7A2C 26 FE       
0354   7A2E E6 70       		ldaB	displayBcd1, X
0355   7A30             	else
0355   7A30             
0355   7A30             
0355   7A30             
0355   7A30             
0355   7A2D             
0355   7A2D             
0355   7A2D             
0355   7A2D~            	else
0355   7A2D~            	else
0355   7A2D~            	else
0355   7A2D~            	else
0355   7A2D             
0355   7A2D~            	else
0355   7A2D~            	else
0355   7A2D~            	else
0355   7A2D~            	else
0355   7A2D             
0355   7A2D             
0355   7A2D 04          
0355   7A30             
0355   7A30 20 FE       
0355   7A32             
0355   7A32             
0355   7A32             
0355   7A32~            	else
0355   7A32~            	else
0355   7A32~            	else
0355   7A32~            	else
0355   7A32~            	else
0355   7A32             
0355   7A32~            	else
0355   7A32~            	else
0355   7A32             
0355   7A32~            	else
0355   7A32~            	else
0355   7A32             
0356   7A32 E6 78       		ldaB	displayBcd1 + 8, X
0357   7A34             	endif
0357   7A34             
0357   7A34             
0357   7A34             
0357   7A34             
0357   7A34             
0357   7A34~            	endif
0357   7A34~            	endif
0357   7A34             
0357   7A34~            	endif
0357   7A34~            	endif
0357   7A34             
0357   7A31             
0357   7A31 02          
0357   7A32             
0357   7A32             
0357   7A32~            	endif
0357   7A32~            	endif
0357   7A32~            	endif
0357   7A32             
0357   7A34             
0357   7A34~            	endif
0357   7A34~            	endif
0357   7A34             
0358   7A34 F7 28 02    	staB	displayBcd
0359   7A37             	
0360   7A37             ; read switches
0361   7A37             	;jmp updateLamps
0362   7A37 DE 50       	ldX	>curCol
0363   7A39 B6 30 00    	ldaA	>switchRow
0364   7A3C 16          	tab
0365   7A3D A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0366   7A3F             	
0367   7A3F D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0368   7A41 D7 01       	staB	temp + 1 			; temp = switch / 2
0369   7A43 D7 53       	staB	tempX + 1			; tempX = cRAM
0370   7A45 C6 60       	ldaB	callbackTable >> 8
0371   7A47 D7 00       	staB	temp
0372   7A49 C6 01       	ldaB	cRAM >> 8
0373   7A4B D7 52       	staB	tempX
0374   7A4D             	
0375   7A4D C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0376   7A4F             	
0377   7A4F             	; temp now contains the beginning of the row in the callbackTable
0378   7A4F             swNext:
0379   7A4F 85 01       	bitA	00000001b	 ; Z set if switch not different
0380   7A51             	ifne		; if bit set, switch different
0380   7A51             
0380   7A51 27 FE       
0381   7A53 36          		pshA ; store changed switches left
0382   7A54 DE 52       		ldX	>tempX
0383   7A56 86 18       		ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0384   7A58             				; but checking 'multiple of 8' would miss 7/8 switch
0385   7A58             				; columns completely since they're in sync
0386   7A58             				; so instead the lowest bits are empty (so that it'll
0387   7A58             				; get all switch cols) and instead it skips 7/8 groups 
0388   7A58             				; of 8 IRQs
0389   7A58 95 02       		bitA	>counter
0390   7A5A 27 08       		beq checkSettled ; counter not multiple of 8, skip settling (multiplies settle time by 8)
0391   7A5C             			; just check if this is the beginning of the settle
0392   7A5C             			;  (want to react right away when a switch closes)
0393   7A5C A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0394   7A5E 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0395   7A60 27 33       			beq 	notSettled; A=0 -> was settled, so can begin
0396   7A62 20 4B       			bra settledEnd
0397   7A64             checkSettled:
0398   7A64 A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0399   7A66 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0400   7A68 27 2B       		beq 	notSettled; A=0 -> settled
0401   7A6A             		; else A > 0 -> settling
0402   7A6A 4A          			decA
0403   7A6B A7 00       			staA	0, X	; sets Z if now A = 0
0404   7A6D             			ifeq ; A=0 -> now settled, fire event
0404   7A6D             
0404   7A6D 26 FE       
0405   7A6F             settled:		
0406   7A6F DE 50       				ldX	>curCol
0407   7A71 17          				tBA	; A now the bit in row
0408   7A72 A8 20       				eorA	switchRow1, X ; toggle bit in row
0409   7A74 A7 20       				staA	switchRow1, X ; A now state of row
0410   7A76             				
0411   7A76 F5 30 00    				bitB	>switchRow
0412   7A79             				ifne ; switch now on
0412   7A79             
0412   7A79 27 FE       
0413   7A7B 86 40       					ldaA	01000000b
0414   7A7D             				else
0414   7A7D             
0414   7A7D             
0414   7A7D             
0414   7A7D             
0414   7A7A             
0414   7A7A             
0414   7A7A             
0414   7A7A~            				else
0414   7A7A~            				else
0414   7A7A~            				else
0414   7A7A~            				else
0414   7A7A             
0414   7A7A~            				else
0414   7A7A~            				else
0414   7A7A~            				else
0414   7A7A~            				else
0414   7A7A             
0414   7A7A             
0414   7A7A 04          
0414   7A7D             
0414   7A7D 20 FE       
0414   7A7F             
0414   7A7F             
0414   7A7F             
0414   7A7F~            				else
0414   7A7F~            				else
0414   7A7F~            				else
0414   7A7F~            				else
0414   7A7F~            				else
0414   7A7F             
0414   7A7F~            				else
0414   7A7F~            				else
0414   7A7F             
0414   7A7F~            				else
0414   7A7F~            				else
0414   7A7F             
0415   7A7F 86 C0       					ldaA	11000000b
0416   7A81             				endif
0416   7A81             
0416   7A81             
0416   7A81             
0416   7A81             
0416   7A81             
0416   7A81~            				endif
0416   7A81~            				endif
0416   7A81             
0416   7A81~            				endif
0416   7A81~            				endif
0416   7A81             
0416   7A7E             
0416   7A7E 02          
0416   7A7F             
0416   7A7F             
0416   7A7F~            				endif
0416   7A7F~            				endif
0416   7A7F~            				endif
0416   7A7F             
0416   7A81             
0416   7A81~            				endif
0416   7A81~            				endif
0416   7A81             
0417   7A81 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0418   7A83             				
0419   7A83             				; store event
0420   7A83 DE 56       				ldX	>queueTail
0421   7A85 A7 00       				staA	0, X
0422   7A87 7C 00 57    				inc	queueTail + 1
0423   7A8A             				
0424   7A8A             				; wrap queueTail if necessary
0425   7A8A 8C 00 67    				cpX	queueEnd 
0426   7A8D             				ifeq
0426   7A8D             
0426   7A8D 26 FE       
0427   7A8F 86 60       					ldaA	queue 
0428   7A91 97 57       					staA	queueTail + 1
0429   7A93             				endif
0429   7A93             
0429   7A93             
0429   7A93             
0429   7A93             
0429   7A93             
0429   7A93~            				endif
0429   7A93~            				endif
0429   7A93             
0429   7A93~            				endif
0429   7A93~            				endif
0429   7A93             
0429   7A8E             
0429   7A8E 04          
0429   7A8F             
0429   7A8F             
0429   7A8F~            				endif
0429   7A8F~            				endif
0429   7A8F~            				endif
0429   7A8F             
0429   7A93             
0429   7A93~            				endif
0429   7A93~            				endif
0429   7A93             
0430   7A93             			endif
0430   7A93             
0430   7A93             
0430   7A93             
0430   7A93             
0430   7A93             
0430   7A93~            			endif
0430   7A93~            			endif
0430   7A93             
0430   7A93~            			endif
0430   7A93~            			endif
0430   7A93             
0430   7A6E             
0430   7A6E 24          
0430   7A6F             
0430   7A6F             
0430   7A6F~            			endif
0430   7A6F~            			endif
0430   7A6F~            			endif
0430   7A6F             
0430   7A93             
0430   7A93~            			endif
0430   7A93~            			endif
0430   7A93             
0431   7A93 20 1A       		bra settledEnd
0432   7A95             notSettled: ; =0 -> was settled, so now it's not
0433   7A95             			; get the settle time
0434   7A95 96 53       			ldaA	>tempX + 1
0435   7A97 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0436   7A99 DE 00       			ldX	>temp
0437   7A9B             			
0438   7A9B             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0439   7A9B A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0440   7A9D             			
0441   7A9D             			; need to get correct 3 bits from switch settings
0442   7A9D F5 30 00    			bitB	>switchRow
0443   7AA0             			ifne ; switch just turned on
0443   7AA0             
0443   7AA0 27 FE       
0444   7AA2 44          				lsrA
0445   7AA3 44          				lsrA
0446   7AA4             			else
0446   7AA4             
0446   7AA4             
0446   7AA4             
0446   7AA4             
0446   7AA1             
0446   7AA1             
0446   7AA1             
0446   7AA1~            			else
0446   7AA1~            			else
0446   7AA1~            			else
0446   7AA1~            			else
0446   7AA1             
0446   7AA1~            			else
0446   7AA1~            			else
0446   7AA1~            			else
0446   7AA1~            			else
0446   7AA1             
0446   7AA1             
0446   7AA1 04          
0446   7AA4             
0446   7AA4 20 FE       
0446   7AA6             
0446   7AA6             
0446   7AA6             
0446   7AA6~            			else
0446   7AA6~            			else
0446   7AA6~            			else
0446   7AA6~            			else
0446   7AA6~            			else
0446   7AA6             
0446   7AA6~            			else
0446   7AA6~            			else
0446   7AA6             
0446   7AA6~            			else
0446   7AA6~            			else
0446   7AA6             
0447   7AA6 48          				aslA
0448   7AA7             			endif
0448   7AA7             
0448   7AA7             
0448   7AA7             
0448   7AA7             
0448   7AA7             
0448   7AA7~            			endif
0448   7AA7~            			endif
0448   7AA7             
0448   7AA7~            			endif
0448   7AA7~            			endif
0448   7AA7             
0448   7AA5             
0448   7AA5 01          
0448   7AA6             
0448   7AA6             
0448   7AA6~            			endif
0448   7AA6~            			endif
0448   7AA6~            			endif
0448   7AA6             
0448   7AA7             
0448   7AA7~            			endif
0448   7AA7~            			endif
0448   7AA7             
0449   7AA7 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0450   7AA9             						
0451   7AA9 DE 52       			ldX	>tempX
0452   7AAB A7 00       			staA	0, X		; start settling	
0453   7AAD 27 C0       			beq	settled		; quick out for 0 settle
0454   7AAF             settledEnd:
0455   7AAF             			
0456   7AAF 32          		pulA
0457   7AB0             	endif
0457   7AB0             
0457   7AB0             
0457   7AB0             
0457   7AB0             
0457   7AB0             
0457   7AB0~            	endif
0457   7AB0~            	endif
0457   7AB0             
0457   7AB0~            	endif
0457   7AB0~            	endif
0457   7AB0             
0457   7A52             
0457   7A52 5D          
0457   7A53             
0457   7A53             
0457   7A53~            	endif
0457   7A53~            	endif
0457   7A53~            	endif
0457   7A53             
0457   7AB0             
0457   7AB0~            	endif
0457   7AB0~            	endif
0457   7AB0             
0458   7AB0 7C 00 53    	inc tempX + 1
0459   7AB3 58          	aslB
0460   7AB4 44          	lsrA			; pop lowest bit off, set Z if A is empty
0461   7AB5 26 98       	bne		swNext 	; more 'switched' bits, keep processing 
0462   7AB7             	
0463   7AB7             	
0464   7AB7             ; update lamps
0465   7AB7             updateLamps:
0466   7AB7             	;jmp updateStrobe
0467   7AB7             
0468   7AB7 DE 50       	ldX	>curCol
0469   7AB9             	
0470   7AB9 86 FF       	ldaA	$FF	;lamp row is inverted
0471   7ABB B7 24 00    	staA	lampCol
0472   7ABE 96 07       	ldaA	>strobe
0473   7AC0 B7 24 02    	staA	lampStrobe
0474   7AC3             	
0475   7AC3 D6 02       	ldaB	>counter
0476   7AC5 A6 08       	ldaA	lampCol1, X
0477   7AC7 C5 80       	bitB	10000000b 
0478   7AC9             	ifeq
0478   7AC9             
0478   7AC9 26 FE       
0479   7ACB A8 A0       		eorA	flashLampCol1, X
0480   7ACD A4 08       		andA	lampCol1, X
0481   7ACF             	endif
0481   7ACF             
0481   7ACF             
0481   7ACF             
0481   7ACF             
0481   7ACF             
0481   7ACF~            	endif
0481   7ACF~            	endif
0481   7ACF             
0481   7ACF~            	endif
0481   7ACF~            	endif
0481   7ACF             
0481   7ACA             
0481   7ACA 04          
0481   7ACB             
0481   7ACB             
0481   7ACB~            	endif
0481   7ACB~            	endif
0481   7ACB~            	endif
0481   7ACB             
0481   7ACF             
0481   7ACF~            	endif
0481   7ACF~            	endif
0481   7ACF             
0482   7ACF 43          	comA	; inverted
0483   7AD0             	
0484   7AD0 B7 24 00    	staA	lampCol
0485   7AD3 86 00       	ldaA	00
0486   7AD5             
0487   7AD5             ; update solenoids
0488   7AD5             	; if a solenoid is set to <254, --
0489   7AD5             	; if =255, off, otherwise on
0490   7AD5             	; else leave it at 254
0491   7AD5             	
0492   7AD5 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0493   7AD8 86 FE       	ldaA	254
0494   7ADA DE 50       	ldX	>curCol
0495   7ADC             	; update solenoid in current 'column' (1-8) 
0496   7ADC A1 40       	cmpA	solenoid1 - cRAM, X
0497   7ADE             	ifge 	; solenoid <=254, turn on
0497   7ADE             
0497   7ADE 25 FE       
0498   7AE0             		ifgt	; solenoid < 254, decrement
0498   7AE0             
0498   7AE0 23 FE       
0499   7AE2 6A 40       			dec	solenoid1 - cRAM, X
0500   7AE4             		endif
0500   7AE4             
0500   7AE4             
0500   7AE4             
0500   7AE4             
0500   7AE4             
0500   7AE4~            		endif
0500   7AE4~            		endif
0500   7AE4             
0500   7AE4~            		endif
0500   7AE4~            		endif
0500   7AE4             
0500   7AE1             
0500   7AE1 02          
0500   7AE2             
0500   7AE2             
0500   7AE2~            		endif
0500   7AE2~            		endif
0500   7AE2~            		endif
0500   7AE2             
0500   7AE4             
0500   7AE4~            		endif
0500   7AE4~            		endif
0500   7AE4             
0501   7AE4 0D          		sec
0502   7AE5             	else
0502   7AE5             
0502   7AE5             
0502   7AE5             
0502   7AE5             
0502   7ADF             
0502   7ADF             
0502   7ADF             
0502   7ADF~            	else
0502   7ADF~            	else
0502   7ADF~            	else
0502   7ADF~            	else
0502   7ADF             
0502   7ADF~            	else
0502   7ADF~            	else
0502   7ADF~            	else
0502   7ADF~            	else
0502   7ADF             
0502   7ADF             
0502   7ADF 07          
0502   7AE5             
0502   7AE5 20 FE       
0502   7AE7             
0502   7AE7             
0502   7AE7             
0502   7AE7~            	else
0502   7AE7~            	else
0502   7AE7~            	else
0502   7AE7~            	else
0502   7AE7~            	else
0502   7AE7             
0502   7AE7~            	else
0502   7AE7~            	else
0502   7AE7             
0502   7AE7~            	else
0502   7AE7~            	else
0502   7AE7             
0503   7AE7 0C          		clc
0504   7AE8             	endif
0504   7AE8             
0504   7AE8             
0504   7AE8             
0504   7AE8             
0504   7AE8             
0504   7AE8~            	endif
0504   7AE8~            	endif
0504   7AE8             
0504   7AE8~            	endif
0504   7AE8~            	endif
0504   7AE8             
0504   7AE6             
0504   7AE6 01          
0504   7AE7             
0504   7AE7             
0504   7AE7~            	endif
0504   7AE7~            	endif
0504   7AE7~            	endif
0504   7AE7             
0504   7AE8             
0504   7AE8~            	endif
0504   7AE8~            	endif
0504   7AE8             
0505   7AE8 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0506   7AEB             	; repeat above for second bank
0507   7AEB A1 48       	cmpA	solenoid9 - cRAM, X
0508   7AED             	ifge 	; solenoid <=254, turn on
0508   7AED             
0508   7AED 25 FE       
0509   7AEF             		ifgt	; solenoid < 254, decrement
0509   7AEF             
0509   7AEF 23 FE       
0510   7AF1 6A 48       			dec	solenoid9 - cRAM, X
0511   7AF3             		endif
0511   7AF3             
0511   7AF3             
0511   7AF3             
0511   7AF3             
0511   7AF3             
0511   7AF3~            		endif
0511   7AF3~            		endif
0511   7AF3             
0511   7AF3~            		endif
0511   7AF3~            		endif
0511   7AF3             
0511   7AF0             
0511   7AF0 02          
0511   7AF1             
0511   7AF1             
0511   7AF1~            		endif
0511   7AF1~            		endif
0511   7AF1~            		endif
0511   7AF1             
0511   7AF3             
0511   7AF3~            		endif
0511   7AF3~            		endif
0511   7AF3             
0512   7AF3 0D          		sec
0513   7AF4             	else
0513   7AF4             
0513   7AF4             
0513   7AF4             
0513   7AF4             
0513   7AEE             
0513   7AEE             
0513   7AEE             
0513   7AEE~            	else
0513   7AEE~            	else
0513   7AEE~            	else
0513   7AEE~            	else
0513   7AEE             
0513   7AEE~            	else
0513   7AEE~            	else
0513   7AEE~            	else
0513   7AEE~            	else
0513   7AEE             
0513   7AEE             
0513   7AEE 07          
0513   7AF4             
0513   7AF4 20 FE       
0513   7AF6             
0513   7AF6             
0513   7AF6             
0513   7AF6~            	else
0513   7AF6~            	else
0513   7AF6~            	else
0513   7AF6~            	else
0513   7AF6~            	else
0513   7AF6             
0513   7AF6~            	else
0513   7AF6~            	else
0513   7AF6             
0513   7AF6~            	else
0513   7AF6~            	else
0513   7AF6             
0514   7AF6 0C          		clc
0515   7AF7             	endif
0515   7AF7             
0515   7AF7             
0515   7AF7             
0515   7AF7             
0515   7AF7             
0515   7AF7~            	endif
0515   7AF7~            	endif
0515   7AF7             
0515   7AF7~            	endif
0515   7AF7~            	endif
0515   7AF7             
0515   7AF5             
0515   7AF5 01          
0515   7AF6             
0515   7AF6             
0515   7AF6~            	endif
0515   7AF6~            	endif
0515   7AF6~            	endif
0515   7AF6             
0515   7AF7             
0515   7AF7~            	endif
0515   7AF7~            	endif
0515   7AF7             
0516   7AF7 76 00 29    	ror		solBStatus	
0517   7AFA 7A 00 50    	dec		curCol ; undo inc
0518   7AFD             	
0519   7AFD             ; update strobe	
0520   7AFD             updateStrobe:
0521   7AFD             	;ldX		curCol
0522   7AFD             	;inX 	
0523   7AFD 86 08       	ldaA	8 	; pitch
0524   7AFF 9B 10       	addA	>curSwitchRowLsb
0525   7B01 97 10       	staA	curSwitchRowLsb
0526   7B03 78 00 07    	asl	strobe
0527   7B06 7C 01 68    	inc	displayCol
0528   7B09 86 00       	ldaA	0
0529   7B0B 91 07       	cmpA	>strobe ; strobe done?  reset
0530   7B0D             	ifeq		
0530   7B0D             
0530   7B0D 26 FE       
0531   7B0F 96 28       		ldaA	>solAStatus
0532   7B11 B7 22 00    		staA	solenoidA
0533   7B14 96 29       		ldaA	>solBStatus
0534   7B16 B7 22 02    		staA	solenoidB
0535   7B19             	
0536   7B19 86 01       		ldaA	00000001b
0537   7B1B 97 07       		staA	strobe
0538   7B1D             		
0539   7B1D             		;ldX 	#0
0540   7B1D             		
0541   7B1D 86 00       		ldaA	0
0542   7B1F 97 50       		staA	curCol
0543   7B21 97 51       		staA	curCol + 1
0544   7B23 97 10       		staA	curSwitchRowLsb
0545   7B25 97 28       		staA	solAStatus
0546   7B27 97 29       		staA	solBStatus
0547   7B29             		
0548   7B29 F6 01 68    		ldaB	>displayCol	; reset display col only if it's > 7 
0549   7B2C C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0550   7B2E             		ifgt
0550   7B2E             
0550   7B2E 23 FE       
0551   7B30 B7 01 68    			staA	displayCol
0552   7B33             		endif
0552   7B33             
0552   7B33             
0552   7B33             
0552   7B33             
0552   7B33             
0552   7B33~            		endif
0552   7B33~            		endif
0552   7B33             
0552   7B33~            		endif
0552   7B33~            		endif
0552   7B33             
0552   7B2F             
0552   7B2F 03          
0552   7B30             
0552   7B30             
0552   7B30~            		endif
0552   7B30~            		endif
0552   7B30~            		endif
0552   7B30             
0552   7B33             
0552   7B33~            		endif
0552   7B33~            		endif
0552   7B33             
0553   7B33             	
0554   7B33 B6 01 69    		ldaA	>state
0555   7B36 8A 04       		oraA	100b
0556   7B38 B7 01 69    		staA	state
0557   7B3B             	else
0557   7B3B             
0557   7B3B             
0557   7B3B             
0557   7B3B             
0557   7B0E             
0557   7B0E             
0557   7B0E             
0557   7B0E~            	else
0557   7B0E~            	else
0557   7B0E~            	else
0557   7B0E~            	else
0557   7B0E             
0557   7B0E~            	else
0557   7B0E~            	else
0557   7B0E~            	else
0557   7B0E~            	else
0557   7B0E             
0557   7B0E             
0557   7B0E 2E          
0557   7B3B             
0557   7B3B 20 FE       
0557   7B3D             
0557   7B3D             
0557   7B3D             
0557   7B3D~            	else
0557   7B3D~            	else
0557   7B3D~            	else
0557   7B3D~            	else
0557   7B3D~            	else
0557   7B3D             
0557   7B3D~            	else
0557   7B3D~            	else
0557   7B3D             
0557   7B3D~            	else
0557   7B3D~            	else
0557   7B3D             
0558   7B3D 7C 00 51    		inc	curCol + 1
0559   7B40             	endif
0559   7B40             
0559   7B40             
0559   7B40             
0559   7B40             
0559   7B40             
0559   7B40~            	endif
0559   7B40~            	endif
0559   7B40             
0559   7B40~            	endif
0559   7B40~            	endif
0559   7B40             
0559   7B3C             
0559   7B3C 03          
0559   7B3D             
0559   7B3D             
0559   7B3D~            	endif
0559   7B3D~            	endif
0559   7B3D~            	endif
0559   7B3D             
0559   7B40             
0559   7B40~            	endif
0559   7B40~            	endif
0559   7B40             
0560   7B40             	
0561   7B40 3B          	rti
0562   7B41             afterInterrupt:
0563   7B41             
0564   7FF8             pointers: 	.org $7FF8  	
0565   7FF8             	.msfirst
0566   7FF8 79 EE       	.dw interrupt			
0567   7FFA 79 EE       	.dw interrupt			
0568   7FFC 79 EE       	.dw interrupt			
0569   7FFE 78 00       	.dw main
0570   8000             	
0571   8000             	
0572   8000             	.endtasm: Number of errors = 0
