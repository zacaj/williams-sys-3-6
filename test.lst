0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             attractX:		.equ RAM + $2A ; +
0041+  0000             curCol:			.equ RAM + $50 ; +
0042+  0000             tempX:			.equ RAM + $52 ; +
0043+  0000             queueHead:		.equ RAM + $54 ; +
0044+  0000             queueTail:		.equ RAM + $56 ; +
0045+  0000             tempQ:			.equ RAM + $58 ; +
0046+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0047+  0000             queueEnd:		.equ RAM + $6D
0048+  0000             ;
0049+  0000             displayBcd1:	.equ RAM + $70
0050+  0000             displayBcd16:	.equ RAM + $7F
0051+  0000             ballCount:		.equ displayBcd1 + 7
0052+  0000             waitLeft: 		.equ RAM + $80 ; dec every 8ms
0053+  0000             waitLeftEnd:		.equ RAM + $87
0054+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0055+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0056+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0057+  0000             flashLampCol1:		.equ RAM + $A0
0058+  0000             flashLampCol8:		.equ RAM + $A7
0059+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0060+  0000             lastSwitch:		.equ RAM + $A8
0061+  0000             dropResetTimer:		.equ RAM + $A9 ; max 127
0062+  0000             dropsDown		.equ RAM + $AA
0063+  0000             p_Bonus:		.equ RAM + $B0
0064+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0065+  0000             p_DropsDown:		.equ RAM + $B5
0066+  0000             p_LampCol2:		.equ RAM + $B6 ; -> B9
0067+  0000             p_EachDropDown:		.equ RAM + $BA ; -> BD
0068+  0000             p_BonusLeft:		.equ RAM + $BE
0069+  0000             
0070+  0000             
0071+  0000             
0072+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0073+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0074+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0075+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0076+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0077+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0078+  0000             #DEFINE s(n) 		(0 + n)
0079+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0080+  0000             pA_10:			.equ pA_1m + 5
0081+  0000             pB_1m:			.equ pA_10 + 1
0082+  0000             pB_10:			.equ pB_1m + 5
0083+  0000             pC_1m:			.equ pB_10 + 1
0084+  0000             pC_10:			.equ pC_1m + 5
0085+  0000             pD_1m:			.equ pC_10 + 1
0086+  0000             pD_10:			.equ pD_1m + 5 
0087+  0000             ; 
0088+  0000             displayCol:		.equ cRAM + $6A
0089+  0000             state:			.equ cRAM + $6B	; ? | strobe reset | don't validate | ?
0090+  0000             
0091+  0000             instant:		.equ 4
0092+  0000             debounce:		.equ 1
0093+  0000             slow:			.equ 2
0094+  0000             
0095+  0000             switchSettle:	.equ cRAM + $30
0096+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 75    		cpX	displayBcd1 + 5
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 75    			cpX	displayBcd1 + 5
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7D    		cpX	displayBcd1 + 8 + 5
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7D    			cpX	displayBcd1 + 8 + 5
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0F       	ldaB	>lc(8) ; gameover
0101+  7C8C C5 20       	bitB	lr(6)
0102+  7C8E             	ifne
0102+  7C8E             
0102+  7C8E 27 FE       
0103+  7C90 39          		rts
0104+  7C91             	endif
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C8F             
0104+  7C8F 01          
0104+  7C90             
0104+  7C90             
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0105+  7C91             	
0106+  7C91 D6 0E       	ldaB	>lc(7)
0107+  7C93 C5 02       	bitB	lr(2)
0108+  7C95 26 1A       	bne	blankP2
0109+  7C97 C5 04       	bitB	lr(3)
0110+  7C99 26 22       	bne	blankP3
0111+  7C9B C5 08       	bitB	lr(4)
0112+  7C9D 26 2A       	bne	blankP4
0113+  7C9F C5 10       	bitB	lr(5)
0114+  7CA1 26 32       	bne	blankDone
0115+  7CA3 20 00       	bra	blankP1
0116+  7CA5             blankP1:
0117+  7CA5 86 F0       	ldaA	$F0
0118+  7CA7 9A 74       	oraA	>displayBcd1 + 4
0119+  7CA9 97 74       	staA	displayBcd1 + 4
0120+  7CAB 86 F0       	ldaA	$F0
0121+  7CAD 9A 75       	oraA	>displayBcd1 + 5
0122+  7CAF 97 75       	staA	displayBcd1 + 5
0123+  7CB1             blankP2:
0124+  7CB1 86 F0       	ldaA	$F0
0125+  7CB3 9A 7C       	oraA	>displayBcd1 + 12
0126+  7CB5 97 7C       	staA	displayBcd1 + 12
0127+  7CB7 86 F0       	ldaA	$F0
0128+  7CB9 9A 7D       	oraA	>displayBcd1 + 13
0129+  7CBB 97 7D       	staA	displayBcd1 + 13
0130+  7CBD             blankP3:
0131+  7CBD 86 0F       	ldaA	$0F
0132+  7CBF 9A 74       	oraA	>displayBcd1 + 4
0133+  7CC1 97 74       	staA	displayBcd1 + 4
0134+  7CC3 86 0F       	ldaA	$0F
0135+  7CC5 9A 75       	oraA	>displayBcd1 + 5
0136+  7CC7 97 75       	staA	displayBcd1 + 5
0137+  7CC9             blankP4:
0138+  7CC9 86 0F       	ldaA	$0F
0139+  7CCB 9A 7C       	oraA	>displayBcd1 + 12
0140+  7CCD 97 7C       	staA	displayBcd1 + 12
0141+  7CCF 86 0F       	ldaA	$0F
0142+  7CD1 9A 7D       	oraA	>displayBcd1 + 13
0143+  7CD3 97 7D       	staA	displayBcd1 + 13
0144+  7CD5             blankDone:
0145+  7CD5 39          	rts
0146+  7CD6             	
0147+  7CD6             refreshPlayerScores:
0148+  7CD6 BD 7C 00    	jsr copyScores13
0149+  7CD9 BD 7C 45    	jsr copyScores24
0150+  7CDC             	
0151+  7CDC 86 F0       	ldaA	$F0
0152+  7CDE B1 01 50    	cmpA	>pA_1m
0153+  7CE1 26 29       	bne	refresh_1m
0154+  7CE3 B1 01 56    	cmpA	>pB_1m
0155+  7CE6 26 24       	bne	refresh_1m	
0156+  7CE8 B1 01 5C    	cmpA	>pC_1m
0157+  7CEB 26 1F       	bne	refresh_1m
0158+  7CED B1 01 62    	cmpA	>pD_1m
0159+  7CF0 26 1A       	bne	refresh_1m
0160+  7CF2             	
0161+  7CF2 CE 00 70    	ldX	displayBcd1
0162+  7CF5             refresh_10xloop:
0163+  7CF5 A6 01       	ldaA	1, X
0164+  7CF7 A7 00       	staA	0,X
0165+  7CF9 A6 09       	ldaA	8 + 1, X
0166+  7CFB A7 08       	staA	8, X
0167+  7CFD 08          	inX
0168+  7CFE 8C 00 75    	cpX	displayBcd1+5
0169+  7D01 26 F2       	bne	refresh_10xloop
0170+  7D03 86 00       	ldaA	0
0171+  7D05 97 75       	staA	displayBcd1 + 5
0172+  7D07 97 7D       	staA	displayBcd1 + 5 + 8
0173+  7D09 7E 7C 8A    	jmp blankNonPlayerScores
0174+  7D0C             refresh_1m:
0175+  7D0C 7E 7C 8A    	jmp blankNonPlayerScores
0176+  7D0F             	
0177+  7D0F             	
0178+  7D0F             ; add score instantly
0179+  7D0F             ; X = place in p*_1* to add the score to
0180+  7D0F             ; A = amount to add (max 9)
0181+  7D0F             ; tail call
0182+  7D0F             _addScoreI:
0183+  7D0F AB 00       	addA	0, X
0184+  7D11 8A F0       	oraA	11110000b
0185+  7D13             	ifcs ; overflowed, need to increment next number
0185+  7D13             
0185+  7D13 24 FE       
0186+  7D15 8B 06       		addA	6	; adjust A back into BCD
0187+  7D17 A7 00       		staA	0, X
0188+  7D19             addScore_carryOver:		; loop to propagate carry
0189+  7D19 09          		deX	; go to next decimal place
0190+  7D1A A6 00       		ldaA	0, X	
0191+  7D1C 8A F0       		oraA	11110000b
0192+  7D1E 81 F9       		cmpA	$F9
0193+  7D20             		ifeq			; if it's already a 9, reset it and carry again
0193+  7D20             
0193+  7D20 26 FE       
0194+  7D22 6F 00       			clr	0, X
0195+  7D24 27 F3       			beq addScore_carryOver
0196+  7D26             		else			; otherwise ++ it and done
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D21             
0196+  7D21             
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21             
0196+  7D21 06          
0196+  7D26             
0196+  7D26 20 FE       
0196+  7D28             
0196+  7D28             
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0197+  7D28 6C 00       			inc	0, X
0198+  7D2A             		endif	
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D27             
0198+  7D27 02          
0198+  7D28             
0198+  7D28             
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0199+  7D2A             	else
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D14             
0199+  7D14             
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14             
0199+  7D14 17          
0199+  7D2A             
0199+  7D2A 20 FE       
0199+  7D2C             
0199+  7D2C             
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0200+  7D2C 81 F9       		cmpA	$F9
0201+  7D2E             		ifgt ; >9 -> need to adjust back into BCD
0201+  7D2E             
0201+  7D2E 23 FE       
0202+  7D30 8B 06       			addA	6
0203+  7D32 A7 00       			staA	0, X
0204+  7D34             addScore_carryDa:
0205+  7D34 09          			deX
0206+  7D35 A6 00       			ldaA	0, X
0207+  7D37 8A F0       			oraA	11110000b
0208+  7D39 81 F9       			cmpA	$F9
0209+  7D3B             			ifeq
0209+  7D3B             
0209+  7D3B 26 FE       
0210+  7D3D 6F 00       				clr	0, X
0211+  7D3F 27 F3       				beq 	addScore_carryDa
0212+  7D41             			else
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C             
0212+  7D3C 06          
0212+  7D41             
0212+  7D41 20 FE       
0212+  7D43             
0212+  7D43             
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0213+  7D43 6C 00       				inc	0, X
0214+  7D45             			endif	
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D42             
0214+  7D42 02          
0214+  7D43             
0214+  7D43             
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0215+  7D45             		else
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F             
0215+  7D2F 17          
0215+  7D45             
0215+  7D45 20 FE       
0215+  7D47             
0215+  7D47             
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0216+  7D47 A7 00       			staA	0, X
0217+  7D49             		endif
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D46             
0217+  7D46 02          
0217+  7D47             
0217+  7D47             
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0218+  7D49             	endif
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D2B             
0218+  7D2B 1D          
0218+  7D2C             
0218+  7D2C             
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0219+  7D49             
0220+  7D49 7E 7C D6    	jmp refreshPlayerScores
0221+  7D4C             	
0222+  7D4C 39          	rts
0223+  7D4D             	
0224+  7D4D             ; t A,X
0225+  7D4D             setXToCurPlayer10:
0226+  7D4D 96 0F       	ldaA	>lc(8)
0227+  7D4F 85 01       	bitA	0001b
0228+  7D51 27 04       	beq	_addScore10N_p2
0229+  7D53 CE 01 55    	ldX	pA_10
0230+  7D56 39          	rts
0231+  7D57             _addScore10N_p2:
0232+  7D57 85 02       	bitA	0010b
0233+  7D59 27 04       	beq	_addScore10N_p3
0234+  7D5B CE 01 5B    	ldX	pB_10
0235+  7D5E 39          	rts
0236+  7D5F             _addScore10N_p3:
0237+  7D5F 85 04       	bitA	0100b
0238+  7D61 27 04       	beq	_addScore10N_p4
0239+  7D63 CE 01 61    	ldX	pC_10
0240+  7D66 39          	rts
0241+  7D67             _addScore10N_p4:
0242+  7D67 CE 01 67    	ldX	pD_10
0243+  7D6A 39          	rts
0244+  7D6B             
0245+  7D6B             ; suspends execution for A ms and returns to queue processor
0246+  7D6B             ; should only be called from switch callbacks
0247+  7D6B             ; trashes everything but B
0248+  7D6B             _delay:	
0249+  7D6B CE 00 7F    	ldX	waitLeft - 1
0250+  7D6E             findEmptyLoop:
0251+  7D6E 08          	inX
0252+  7D6F 6D 00       	tst	0, X
0253+  7D71 26 FB       	bne 	findEmptyLoop 
0254+  7D73             	
0255+  7D73             	; X = first waitLeft that = 0
0256+  7D73 E7 18       	staB	waitReg - waitLeft, X
0257+  7D75 33          	pulB	; A = MSB of PC
0258+  7D76 E7 08       	staB	waitMsb - waitLeft, X
0259+  7D78 33          	pulB	; A = LSB of PC
0260+  7D79 E7 10       	staB	waitLsb - waitLeft, X
0261+  7D7B A7 00       	staA	0, X
0262+  7D7D             	; time and add stored
0263+  7D7D 7E 79 D3    	jmp skipEvent
0264+  7D80             	
0265+  7D80             resetScores:
0266+  7D80 86 00       	ldaA	00
0267+  7D82 CE 01 50    	ldX	pA_1m
0268+  7D85             _zeroScores:
0269+  7D85 A7 00       	staA	0, X
0270+  7D87 08          	inX
0271+  7D88 8C 01 68    	cpX	pD_10 + 1
0272+  7D8B 26 F8       	bne	_zeroScores
0273+  7D8D             	
0274+  7D8D 86 00       	ldaA	0
0275+  7D8F 97 12       	staA	curPlayer
0276+  7D91 97 13       	staA	curPlayer + 1
0277+  7D93 86 FF       	ldaA	$FF
0278+  7D95 97 76       	staA	displayBcd1 + 6
0279+  7D97 97 7E       	staA	displayBcd1 + 14
0280+  7D99 97 7F       	staA	displayBcd1 + 15
0281+  7D9B             	
0282+  7D9B BD 7C D6    	jsr	refreshPlayerScores
0283+  7D9E 39          	rts
0284+  7D9F             
0285+  7D9F             ; trash ~B
0286+  7D9F             ; delay for ms (8-2000)
0287+  7D9F             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0288+  7D9F             	
0289+  7D9F             ; trashes B (max 104ms)
0290+  7D9F             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0291+  7D9F             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0292+  7D9F             
0293+  7D9F             ; trashes AX
0294+  7D9F             ; place: 1-5 = 10s thru 100ks
0295+  7D9F             ; amount: 1-9
0296+  7D9F             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0297+  7D9F             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0298+  7D9F             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0299+  7D9F             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0300+  7D9F             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0301+  7D9F             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0302+  7D9F             
0303+  7D9F             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0304+  7D9F             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0305+  7D9F             
0306+  7D9F             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0307+  7D9F             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0308+  7D9F             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0309+  7D9F             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0310+  7D9F             
0311+  7D9F             #include "attract.asm"
0001++ 7D9F             attractStart:
0002++ 7D9F 08          	.db 00001000b
0003++ 7DA0 18          	.db 00011000b
0004++ 7DA1 10          	.db 00010000b
0005++ 7DA2 80          	.db 10000000b
0006++ 7DA3 01          	.db 00000001b
0007++ 7DA4             	
0008++ 7DA4 50          	.db 01010000b
0009++ 7DA5 40          	.db 01000000b
0010++ 7DA6 08          	.db 00001000b
0011++ 7DA7 80          	.db 10000000b
0012++ 7DA8 03          	.db 00000011b
0013++ 7DA9             	
0014++ 7DA9 20          	.db 00100000b
0015++ 7DAA 28          	.db 00101000b
0016++ 7DAB 04          	.db 00000100b
0017++ 7DAC 80          	.db 10000000b
0018++ 7DAD 07          	.db 00000111b
0019++ 7DAE             	
0020++ 7DAE 44          	.db 01000100b
0021++ 7DAF 80          	.db 10000000b
0022++ 7DB0 02          	.db 00000010b
0023++ 7DB1 80          	.db 10000000b
0024++ 7DB2 0F          	.db 00001111b
0025++ 7DB3             	
0026++ 7DB3 08          	.db 00001000b
0027++ 7DB4 18          	.db 00011000b
0028++ 7DB5 01          	.db 00000001b
0029++ 7DB6 80          	.db 10000000b
0030++ 7DB7 1F          	.db 00011111b
0031++ 7DB8             	
0032++ 7DB8 50          	.db 01010000b
0033++ 7DB9 40          	.db 01000000b
0034++ 7DBA 02          	.db 00000010b
0035++ 7DBB 80          	.db 10000000b
0036++ 7DBC 3F          	.db 00111111b
0037++ 7DBD             	
0038++ 7DBD 20          	.db 00100000b
0039++ 7DBE 28          	.db 00101000b
0040++ 7DBF 04          	.db 00000100b
0041++ 7DC0 80          	.db 10000000b
0042++ 7DC1 7F          	.db 01111111b
0043++ 7DC2             	
0044++ 7DC2 44          	.db 01000100b
0045++ 7DC3 80          	.db 10000000b
0046++ 7DC4 08          	.db 00001000b
0047++ 7DC5 80          	.db 10000000b
0048++ 7DC6 FF          	.db 11111111b
0049++ 7DC7             attractEnd:0006   7DC7             
0007   7DC7             #include "game.asm"
0001+  7DC7             ; Laser Ball solenoids
0002+  7DC7             ;#DEFINE KICKOUT 		01
0003+  7DC7             ;#DEFINE LEFT_KICKER 	02
0004+  7DC7             ;#DEFINE DROP_LA			03
0005+  7DC7             ;#DEFINE DROP_SER		04
0006+  7DC7             ;#DEFINE EJECT_HOLE		05
0007+  7DC7             ;#DEFINE DROP_BA			06
0008+  7DC7             ;#DEFINE DROP_LL			07
0009+  7DC7             ;#DEFINE RIGHT_KICKER	08
0010+  7DC7             ;#DEFINE SOUND1			09 ; thru 13
0011+  7DC7             ;#DEFINE KNOCKER			14
0012+  7DC7             ;#DEFINE	FLASHERS		15
0013+  7DC7             ;#DEFINE COIN_LOCKOUT	16
0014+  7DC7             
0015+  7DC7             ; Hot Tip solenoids
0016+  7DC7             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7DC7             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7DC7             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7DC7             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7DC7             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7DC7             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7DC7             #DEFINE CHIME_10	SOL(09, 16)
0023+  7DC7             #DEFINE CHIME_100	SOL(10, 16)
0024+  7DC7             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7DC7             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7DC7             #DEFINE CLICKER		SOL(13, 8)
0027+  7DC7             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7DC7             #DEFINE BUZZER		SOL(15, 100)
0029+  7DC7             #DEFINE SHORT_PAUSE 	115
0030+  7DC7             
0031+  7DC7             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7DC7             #DEFINE done(v)	\
0033+  7DC7             #DEFCONT	#IF (v==0)
0034+  7DC7             #DEFCONT		\ ldaA 10b
0035+  7DC7             #DEFCONT		\ oraA >state
0036+  7DC7             #DEFCONT		\ staA state
0037+  7DC7             #DEFCONT	\#ENDIF
0038+  7DC7             #DEFCONT	\ jmp afterQueueEvent
0039+  7DC7             	
0040+  7DC7             	
0041+  7DC7             _addScore10N:
0042+  7DC7 BD 7D 4D    	jsr setXToCurPlayer10
0043+  7DCA 86 01       	ldaA	1
0044+  7DCC BD 7D 0F    	jsr _addScoreI
0045+  7DCF 86 02       	fireSolenoidA(CHIME_10)
0045+  7DD1 B7 01 48    
0046+  7DD4 39          	rts
0047+  7DD5             _addScore100N:
0048+  7DD5 BD 7D 4D    	jsr setXToCurPlayer10
0049+  7DD8 09          	deX
0050+  7DD9 86 01       	ldaA	1
0051+  7DDB BD 7D 0F    	jsr _addScoreI
0052+  7DDE 86 02       	fireSolenoidA(CHIME_100)	
0052+  7DE0 B7 01 49    
0053+  7DE3 39          	rts
0054+  7DE4             _addScore1000N:
0055+  7DE4 BD 7D 4D    	jsr setXToCurPlayer10
0056+  7DE7 09          	deX
0057+  7DE8 09          	deX
0058+  7DE9 86 01       	ldaA	1
0059+  7DEB BD 7D 0F    	jsr _addScoreI
0060+  7DEE 86 02       	fireSolenoidA(CHIME_1000)
0060+  7DF0 B7 01 4A    
0061+  7DF3 39          	rts
0062+  7DF4             #DEFINE score10() jsr _addScore10N
0063+  7DF4             #DEFINE score100() jsr _addScore100N
0064+  7DF4             #DEFINE score1000() jsr _addScore1000N
0065+  7DF4             #DEFINE score500() \ jsr _addScore100N
0066+  7DF4             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7DF4             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7DF4             #DEFCONT	\ jsr _addScore100N
0069+  7DF4             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7DF4             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7DF4             #DEFCONT	\ jsr _addScore100N
0072+  7DF4             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7DF4             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7DF4             #DEFCONT	\ jsr _addScore100N
0075+  7DF4             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7DF4             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7DF4             #DEFCONT	\ jsr _addScore100N
0078+  7DF4             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7DF4             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7DF4             
0081+  7DF4             #DEFINE advBonus()	inc p_Bonus
0082+  7DF4             	
0083+  7DF4             ; switch callbacks:
0084+  7DF4             
0085+  60C0             none:	.org $6000 + 192 ; size of callback table
0086+  60C0             	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0             
0086+  60C0 7E 79 8A    
0087+  60C3             	
0088+  60C3             bonusLights:
0089+  60C3 86 00       	ldaA	0
0090+  60C5 97 0C       	staA	lc(5)
0091+  60C7 97 0D       	staA	lc(6)
0092+  60C9 7D 00 B0    	tst	p_Bonus
0093+  60CC 27 11       	beq	bonusLights_done
0094+  60CE             	
0095+  60CE 86 80       	lampOn(8,5) ; 1k
0095+  60D0 9A 0C       
0095+  60D2 97 0C       
0096+  60D4             	
0097+  60D4 96 B0       	ldaA	>p_Bonus
0098+  60D6             bonusLights_loop:
0099+  60D6 4A          	decA
0100+  60D7 27 06       	beq 	bonusLights_done
0101+  60D9 0D          	seC
0102+  60DA 79 00 0D    	rol	lc(6)
0103+  60DD 20 F7       	bra	bonusLights_loop
0104+  60DF             	
0105+  60DF             bonusLights_done
0106+  60DF             
0107+  60DF 86 09       	ldaA	9
0108+  60E1 91 B0       	cmpA	>p_Bonus
0109+  60E3             	ifge	
0109+  60E3             
0109+  60E3 25 FE       
0110+  60E5             	else	; bonus >= 10?
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E4             
0110+  60E4             
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4             
0110+  60E4 02          
0110+  60E5             
0110+  60E5 20 FE       
0110+  60E7             
0110+  60E7             
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0111+  60E7 86 0A       		ldaA	10
0112+  60E9 97 B0       		staA	p_Bonus
0113+  60EB 86 40       		lampOn(7,5) ; 10k light
0113+  60ED 9A 0C       
0113+  60EF 97 0C       
0114+  60F1             	endif
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60E6             
0114+  60E6 0A          
0114+  60E7             
0114+  60E7             
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0115+  60F1             	
0116+  60F1 39          	rts
0117+  60F2             	
0118+  60F2             	
0119+  60F2             startBall:
0120+  60F2 DE 12       	ldX	>curPlayer
0121+  60F4 86 01       	ldaA	1
0122+  60F6 97 B0       	staA	p_Bonus
0123+  60F8 B6 22 03    	enablePf
0123+  60FB 8A 38       
0123+  60FD B7 22 03    
0124+  6100             	
0125+  6100 86 00       	ldaA	0
0126+  6102 97 B5       	staA	p_DropsDown
0127+  6104 86 41       	ldaA	65
0128+  6106 97 A9       	staA	dropResetTimer
0129+  6108             	
0130+  6108 A6 BA       	ldaA	p_EachDropDown, X
0131+  610A 97 AA       	staA	dropsDown
0132+  610C 43          	comA
0133+  610D 85 07       	bitA	000111b
0134+  610F             	ifne
0134+  610F             
0134+  610F 27 FE       
0135+  6111 C6 0C       		fireSolenoid(DROP_HOT)
0135+  6113 F7 01 42    
0136+  6116 86 12       		delay(150)
0136+  6118 BD 7D 6B    
0137+  611B             	else
0137+  611B             
0137+  611B             
0137+  611B             
0137+  611B             
0137+  6110             
0137+  6110             
0137+  6110             
0137+  6110~            	else
0137+  6110~            	else
0137+  6110~            	else
0137+  6110~            	else
0137+  6110             
0137+  6110~            	else
0137+  6110~            	else
0137+  6110~            	else
0137+  6110~            	else
0137+  6110             
0137+  6110             
0137+  6110 0C          
0137+  611B             
0137+  611B 20 FE       
0137+  611D             
0137+  611D             
0137+  611D             
0137+  611D~            	else
0137+  611D~            	else
0137+  611D~            	else
0137+  611D~            	else
0137+  611D~            	else
0137+  611D             
0137+  611D~            	else
0137+  611D~            	else
0137+  611D             
0137+  611D~            	else
0137+  611D~            	else
0137+  611D             
0138+  611D 7C 00 B5    		inc	p_DropsDown
0139+  6120 7C 00 B5    		inc	p_DropsDown
0140+  6123 7C 00 B5    		inc	p_DropsDown
0141+  6126             	endif
0141+  6126             
0141+  6126             
0141+  6126             
0141+  6126             
0141+  6126             
0141+  6126~            	endif
0141+  6126~            	endif
0141+  6126             
0141+  6126~            	endif
0141+  6126~            	endif
0141+  6126             
0141+  611C             
0141+  611C 09          
0141+  611D             
0141+  611D             
0141+  611D~            	endif
0141+  611D~            	endif
0141+  611D~            	endif
0141+  611D             
0141+  6126             
0141+  6126~            	endif
0141+  6126~            	endif
0141+  6126             
0142+  6126 96 AA       	ldaA	>dropsDown
0143+  6128 43          	comA
0144+  6129 85 38       	bitA	111000b
0145+  612B             	ifne
0145+  612B             
0145+  612B 27 FE       
0146+  612D C6 0C       		fireSolenoid(DROP_TIP)
0146+  612F F7 01 41    
0147+  6132 86 12       		delay(150)
0147+  6134 BD 7D 6B    
0148+  6137             	else
0148+  6137             
0148+  6137             
0148+  6137             
0148+  6137             
0148+  612C             
0148+  612C             
0148+  612C             
0148+  612C~            	else
0148+  612C~            	else
0148+  612C~            	else
0148+  612C~            	else
0148+  612C             
0148+  612C~            	else
0148+  612C~            	else
0148+  612C~            	else
0148+  612C~            	else
0148+  612C             
0148+  612C             
0148+  612C 0C          
0148+  6137             
0148+  6137 20 FE       
0148+  6139             
0148+  6139             
0148+  6139             
0148+  6139~            	else
0148+  6139~            	else
0148+  6139~            	else
0148+  6139~            	else
0148+  6139~            	else
0148+  6139             
0148+  6139~            	else
0148+  6139~            	else
0148+  6139             
0148+  6139~            	else
0148+  6139~            	else
0148+  6139             
0149+  6139 7C 00 B5    		inc	p_DropsDown
0150+  613C 7C 00 B5    		inc	p_DropsDown
0151+  613F 7C 00 B5    		inc	p_DropsDown
0152+  6142             	endif
0152+  6142             
0152+  6142             
0152+  6142             
0152+  6142             
0152+  6142             
0152+  6142~            	endif
0152+  6142~            	endif
0152+  6142             
0152+  6142~            	endif
0152+  6142~            	endif
0152+  6142             
0152+  6138             
0152+  6138 09          
0152+  6139             
0152+  6139             
0152+  6139~            	endif
0152+  6139~            	endif
0152+  6139~            	endif
0152+  6139             
0152+  6142             
0152+  6142~            	endif
0152+  6142~            	endif
0152+  6142             
0153+  6142             	
0154+  6142 86 FF       	ldaA	$FF
0155+  6144 97 A8       	staA	lastSwitch
0156+  6146             	
0157+  6146             	; clear lights
0158+  6146 CE 00 08    	ldX	lampCol1
0159+  6149 86 00       	ldaA	0b
0160+  614B             lClearLights:
0161+  614B A7 00       	staA	0, X
0162+  614D A7 98       	staA	flashLampCol1 - lampCol1, X
0163+  614F 08          	inX
0164+  6150 8C 00 0E    	cpX	lc(6) + 1
0165+  6153 26 F6       	bne	lClearLights
0166+  6155             	;
0167+  6155             	
0168+  6155             	; init lights for player data
0169+  6155 DE 12       	ldX	>curPlayer
0170+  6157 A6 B1       	ldaA	p_Ejects, X
0171+  6159 97 0B       	staA	lc(4)
0172+  615B E6 B6       	ldaB	p_LampCol2, X
0173+  615D C5 02       	bitB	lr(2)
0174+  615F             	ifne 
0174+  615F             
0174+  615F 27 FE       
0175+  6161 86 02       		lampOn(2,3)
0175+  6163 9A 0A       
0175+  6165 97 0A       
0176+  6167 C4 FD       		andB	11111101b
0177+  6169             	endif
0177+  6169             
0177+  6169             
0177+  6169             
0177+  6169             
0177+  6169             
0177+  6169~            	endif
0177+  6169~            	endif
0177+  6169             
0177+  6169~            	endif
0177+  6169~            	endif
0177+  6169             
0177+  6160             
0177+  6160 08          
0177+  6161             
0177+  6161             
0177+  6161~            	endif
0177+  6161~            	endif
0177+  6161~            	endif
0177+  6161             
0177+  6169             
0177+  6169~            	endif
0177+  6169~            	endif
0177+  6169             
0178+  6169 D7 09       	staB	lc(2)
0179+  616B             	
0180+  616B 86 40       	ldaA	lr(7) ; shoot again
0181+  616D 95 0F       	bitA	>lc(8)
0182+  616F             	ifne
0182+  616F             
0182+  616F 27 FE       
0183+  6171 86 01       		lampOn(1,3) ; shoot again
0183+  6173 9A 0A       
0183+  6175 97 0A       
0184+  6177             	endif
0184+  6177             
0184+  6177             
0184+  6177             
0184+  6177             
0184+  6177             
0184+  6177~            	endif
0184+  6177~            	endif
0184+  6177             
0184+  6177~            	endif
0184+  6177~            	endif
0184+  6177             
0184+  6170             
0184+  6170 06          
0184+  6171             
0184+  6171             
0184+  6171~            	endif
0184+  6171~            	endif
0184+  6171~            	endif
0184+  6171             
0184+  6177             
0184+  6177~            	endif
0184+  6177~            	endif
0184+  6177             
0185+  6177             	
0186+  6177             	; flash player light
0187+  6177 86 0F       	ldaA	00001111b ; player up lights
0188+  6179 9A A7       	oraA	>flc(8)
0189+  617B 97 A7       	staA	flc(8)
0190+  617D             	
0191+  617D 86 01       	ldaA	sr(1) ; check outhole
0192+  617F 95 21       	bitA	>sc(2)
0193+  6181             	ifne ; ball in hole
0193+  6181             
0193+  6181 27 FE       
0194+  6183 C6 02       		fireSolenoid(OUTHOLE)
0194+  6185 F7 01 44    
0195+  6188             	endif
0195+  6188             
0195+  6188             
0195+  6188             
0195+  6188             
0195+  6188             
0195+  6188~            	endif
0195+  6188~            	endif
0195+  6188             
0195+  6188~            	endif
0195+  6188~            	endif
0195+  6188             
0195+  6182             
0195+  6182 05          
0195+  6183             
0195+  6183             
0195+  6183~            	endif
0195+  6183~            	endif
0195+  6183~            	endif
0195+  6183             
0195+  6188             
0195+  6188~            	endif
0195+  6188~            	endif
0195+  6188             
0196+  6188             	
0197+  6188 39          	rts
0198+  6189             	
0199+  6189             	
0200+  6189             startGame:
0201+  6189 86 02       	lampOn(2,7) ; one player
0201+  618B 9A 0E       
0201+  618D 97 0E       
0202+  618F             	
0203+  618F 86 DF       	lampOff(6,8) ; game over
0203+  6191 94 0F       
0203+  6193 97 0F       
0204+  6195             	
0205+  6195 C6 02       	fireSolenoid(CHIME_10)
0205+  6197 F7 01 48    
0206+  619A 86 0E       	delay(SHORT_PAUSE)
0206+  619C BD 7D 6B    
0207+  619F C6 02       	fireSolenoid(CHIME_10)
0207+  61A1 F7 01 48    
0208+  61A4 86 0E       	delay(SHORT_PAUSE)
0208+  61A6 BD 7D 6B    
0209+  61A9 C6 02       	fireSolenoid(CHIME_10)
0209+  61AB F7 01 48    
0210+  61AE 86 19       	delay(200)
0210+  61B0 BD 7D 6B    
0211+  61B3             	
0212+  61B3 C6 02       	fireSolenoid(CHIME_10)
0212+  61B5 F7 01 48    
0213+  61B8 86 0E       	delay(SHORT_PAUSE)
0213+  61BA BD 7D 6B    
0214+  61BD C6 02       	fireSolenoid(CHIME_10)
0214+  61BF F7 01 48    
0215+  61C2 86 0E       	delay(SHORT_PAUSE)
0215+  61C4 BD 7D 6B    
0216+  61C7 C6 02       	fireSolenoid(CHIME_10)
0216+  61C9 F7 01 48    
0217+  61CC 86 19       	delay(200)
0217+  61CE BD 7D 6B    
0218+  61D1             	
0219+  61D1 C6 02       	fireSolenoid(CHIME_10)
0219+  61D3 F7 01 48    
0220+  61D6 86 0E       	delay(SHORT_PAUSE)
0220+  61D8 BD 7D 6B    
0221+  61DB C6 02       	fireSolenoid(CHIME_10)
0221+  61DD F7 01 48    
0222+  61E0 86 0E       	delay(SHORT_PAUSE)
0222+  61E2 BD 7D 6B    
0223+  61E5 C6 02       	fireSolenoid(CHIME_100)
0223+  61E7 F7 01 49    
0224+  61EA 86 19       	delay(200)
0224+  61EC BD 7D 6B    
0225+  61EF C6 02       	fireSolenoid(CHIME_1000)
0225+  61F1 F7 01 4A    
0226+  61F4 86 19       	delay(200)
0226+  61F6 BD 7D 6B    
0227+  61F9 C6 02       	fireSolenoid(CHIME_10k)
0227+  61FB F7 01 4B    
0228+  61FE 86 12       	delay(150)
0228+  6200 BD 7D 6B    
0229+  6203             	
0230+  6203             	; reset scores
0231+  6203 BD 7D 80    	jsr 	resetScores
0232+  6206             	
0233+  6206             	; reset ball count
0234+  6206 86 10       	ldaA	$10
0235+  6208 97 77       	staA	ballCount	
0236+  620A             
0237+  620A C6 00       	ldaB	0
0238+  620C D7 13       	staB	curPlayer + 1
0239+  620E             	
0240+  620E D7 0E       	staB	lc(7)
0241+  6210 D7 0F       	staB	lc(8)
0242+  6212 D7 A6       	staB	flc(7)
0243+  6214 D7 A7       	staB	flc(8)
0244+  6216             	
0245+  6216 CE 00 00    	ldX	0
0246+  6219             lInitPlayers:
0247+  6219 C6 01       	ldaB	lr(1)
0248+  621B E7 B1       	staB	p_Ejects, X
0249+  621D C6 00       	ldaB	0
0250+  621F E7 B6       	staB	p_LampCol2, X
0251+  6221 E7 BA       	staB	p_EachDropDown, X
0252+  6223 08          	inX
0253+  6224 8C 00 04    	cpX	4
0254+  6227 26 F0       	bne	lInitPlayers
0255+  6229             	
0256+  6229 BD 60 F2    	jsr	startBall
0257+  622C             	
0258+  622C             	; invalidate playfield
0259+  622C 86 01       	ldaA	lr(1)
0260+  622E 9A 0F       	oraA	>lc(8)
0261+  6230 97 0F       	staA	lc(8)
0262+  6232             	
0263+  6232 86 02       	lampOn(2,7) ; one player
0263+  6234 9A 0E       
0263+  6236 97 0E       
0264+  6238             	
0265+  6238 86 DF       	lampOff(6,8) ; game over
0265+  623A 94 0F       
0265+  623C 97 0F       
0266+  623E             	
0267+  623E 39          	rts
0268+  623F             	
0269+  623F             
0270+  623F             	
0271+  623F             swTilt: 
0272+  623F 86 10       	lampOn(5,8) ; tilt
0272+  6241 9A 0F       
0272+  6243 97 0F       
0273+  6245 B6 22 03    	disablePf
0273+  6248 84 F7       
0273+  624A B7 22 03    
0274+  624D             	done(0)
0274+  624D             
0274+  624D 86 02       
0274+  624F BA 01 6B    
0274+  6252 B7 01 6B    
0274+  6255             
0274+  6255 7E 79 8A    
0275+  6258             	
0276+  6258             swStart: 
0277+  6258 96 0F       	ldaA >lc(8)
0278+  625A 85 20       	bitA lr(6)
0279+  625C             	ifne ; in game over
0279+  625C             
0279+  625C 27 FE       
0280+  625E BD 61 89    		jsr startGame
0281+  6261             	else 
0281+  6261             
0281+  6261             
0281+  6261             
0281+  6261             
0281+  625D             
0281+  625D             
0281+  625D             
0281+  625D~            	else 
0281+  625D~            	else 
0281+  625D~            	else 
0281+  625D~            	else 
0281+  625D             
0281+  625D~            	else 
0281+  625D~            	else 
0281+  625D~            	else 
0281+  625D~            	else 
0281+  625D             
0281+  625D             
0281+  625D 05          
0281+  6261             
0281+  6261 20 FE       
0281+  6263             
0281+  6263             
0281+  6263             
0281+  6263~            	else 
0281+  6263~            	else 
0281+  6263~            	else 
0281+  6263~            	else 
0281+  6263~            	else 
0281+  6263             
0281+  6263~            	else 
0281+  6263~            	else 
0281+  6263             
0281+  6263~            	else 
0281+  6263~            	else 
0281+  6263             
0282+  6263 86 10       		ldaA	$10
0283+  6265 91 77       		cmpA	>ballCount
0284+  6267             		ifeq ; add player
0284+  6267             
0284+  6267 26 FE       
0285+  6269 86 1E       			ldaA	00011110b
0286+  626B 94 0E       			andA	>lc(7) ; player count lights
0287+  626D 85 10       			bitA	lr(5)
0288+  626F             			ifeq	; if not on P4 already, add player
0288+  626F             
0288+  626F 26 FE       
0289+  6271 48          				aslA
0290+  6272 C6 E1       				ldaB	11100001b
0291+  6274 D4 0E       				andB	>lc(7)
0292+  6276 D7 0E       				staB	lc(7)
0293+  6278 9A 0E       				oraA	>lc(7)
0294+  627A 97 0E       				staA	lc(7)
0295+  627C             			endif
0295+  627C             
0295+  627C             
0295+  627C             
0295+  627C             
0295+  627C             
0295+  627C~            			endif
0295+  627C~            			endif
0295+  627C             
0295+  627C~            			endif
0295+  627C~            			endif
0295+  627C             
0295+  6270             
0295+  6270 0B          
0295+  6271             
0295+  6271             
0295+  6271~            			endif
0295+  6271~            			endif
0295+  6271~            			endif
0295+  6271             
0295+  627C             
0295+  627C~            			endif
0295+  627C~            			endif
0295+  627C             
0296+  627C             		else ; restart game
0296+  627C             
0296+  627C             
0296+  627C             
0296+  627C             
0296+  6268             
0296+  6268             
0296+  6268             
0296+  6268~            		else ; restart game
0296+  6268~            		else ; restart game
0296+  6268~            		else ; restart game
0296+  6268~            		else ; restart game
0296+  6268             
0296+  6268~            		else ; restart game
0296+  6268~            		else ; restart game
0296+  6268~            		else ; restart game
0296+  6268~            		else ; restart game
0296+  6268             
0296+  6268             
0296+  6268 15          
0296+  627C             
0296+  627C 20 FE       
0296+  627E             
0296+  627E             
0296+  627E             
0296+  627E~            		else ; restart game
0296+  627E~            		else ; restart game
0296+  627E~            		else ; restart game
0296+  627E~            		else ; restart game
0296+  627E~            		else ; restart game
0296+  627E             
0296+  627E~            		else ; restart game
0296+  627E~            		else ; restart game
0296+  627E             
0296+  627E~            		else ; restart game
0296+  627E~            		else ; restart game
0296+  627E             
0297+  627E BD 61 89    			jsr startGame
0298+  6281             		endif		
0298+  6281             
0298+  6281             
0298+  6281             
0298+  6281             
0298+  6281             
0298+  6281~            		endif		
0298+  6281~            		endif		
0298+  6281             
0298+  6281~            		endif		
0298+  6281~            		endif		
0298+  6281             
0298+  627D             
0298+  627D 03          
0298+  627E             
0298+  627E             
0298+  627E~            		endif		
0298+  627E~            		endif		
0298+  627E~            		endif		
0298+  627E             
0298+  6281             
0298+  6281~            		endif		
0298+  6281~            		endif		
0298+  6281             
0299+  6281             	endif
0299+  6281             
0299+  6281             
0299+  6281             
0299+  6281             
0299+  6281             
0299+  6281~            	endif
0299+  6281~            	endif
0299+  6281             
0299+  6281~            	endif
0299+  6281~            	endif
0299+  6281             
0299+  6262             
0299+  6262 1E          
0299+  6263             
0299+  6263             
0299+  6263~            	endif
0299+  6263~            	endif
0299+  6263~            	endif
0299+  6263             
0299+  6281             
0299+  6281~            	endif
0299+  6281~            	endif
0299+  6281             
0300+  6281             	
0301+  6281 BD 7C D6    	jsr refreshPlayerScores
0302+  6284             	
0303+  6284             	done(0)
0303+  6284             
0303+  6284 86 02       
0303+  6286 BA 01 6B    
0303+  6289 B7 01 6B    
0303+  628C             
0303+  628C 7E 79 8A    
0304+  628F             	
0305+  628F             swOuthole: 
0306+  628F 86 4B       	delay(600)
0306+  6291 BD 7D 6B    
0307+  6294 96 0F       	ldaA	>lc(8) ; !game over
0308+  6296 85 20       	bitA	lr(6)
0309+  6298             	ifne ; game over
0309+  6298             
0309+  6298 27 FE       
0310+  629A             		done(0)
0310+  629A             
0310+  629A 86 02       
0310+  629C BA 01 6B    
0310+  629F B7 01 6B    
0310+  62A2             
0310+  62A2 7E 79 8A    
0311+  62A5             	endif
0311+  62A5             
0311+  62A5             
0311+  62A5             
0311+  62A5             
0311+  62A5             
0311+  62A5~            	endif
0311+  62A5~            	endif
0311+  62A5             
0311+  62A5~            	endif
0311+  62A5~            	endif
0311+  62A5             
0311+  6299             
0311+  6299 0B          
0311+  629A             
0311+  629A             
0311+  629A~            	endif
0311+  629A~            	endif
0311+  629A~            	endif
0311+  629A             
0311+  62A5             
0311+  62A5~            	endif
0311+  62A5~            	endif
0311+  62A5             
0312+  62A5             	
0313+  62A5             	; check ballsave
0314+  62A5 86 01       	ldaA	lr(1)
0315+  62A7 95 0A       	bitA	>lc(3)
0316+  62A9             	ifne	; shoot again on
0316+  62A9             
0316+  62A9 27 FE       
0317+  62AB 95 A2       		bitA	>flc(3)
0318+  62AD             		ifne ; shoot again flashing
0318+  62AD             
0318+  62AD 27 FE       
0319+  62AF             			; turn off used special
0320+  62AF 86 80       			ldaA	lr(8) ; right special
0321+  62B1 95 09       			bitA	>lc(2)
0322+  62B3             			ifne
0322+  62B3             
0322+  62B3 27 FE       
0323+  62B5 86 7F       				lampOff(8,2)
0323+  62B7 94 09       
0323+  62B9 97 09       
0324+  62BB 86 7F       				flashOff(8,2)
0324+  62BD 94 A1       
0324+  62BF 97 A1       
0325+  62C1             			endif
0325+  62C1             
0325+  62C1             
0325+  62C1             
0325+  62C1             
0325+  62C1             
0325+  62C1~            			endif
0325+  62C1~            			endif
0325+  62C1             
0325+  62C1~            			endif
0325+  62C1~            			endif
0325+  62C1             
0325+  62B4             
0325+  62B4 0C          
0325+  62B5             
0325+  62B5             
0325+  62B5~            			endif
0325+  62B5~            			endif
0325+  62B5~            			endif
0325+  62B5             
0325+  62C1             
0325+  62C1~            			endif
0325+  62C1~            			endif
0325+  62C1             
0326+  62C1 86 02       			ldaA	lr(2) ; right special
0327+  62C3 95 0A       			bitA	>lc(3)
0328+  62C5             			ifne
0328+  62C5             
0328+  62C5 27 FE       
0329+  62C7 86 FD       				lampOff(2,3)
0329+  62C9 94 0A       
0329+  62CB 97 0A       
0330+  62CD 86 FD       				flashOff(2,3)
0330+  62CF 94 A2       
0330+  62D1 97 A2       
0331+  62D3             			endif
0331+  62D3             
0331+  62D3             
0331+  62D3             
0331+  62D3             
0331+  62D3             
0331+  62D3~            			endif
0331+  62D3~            			endif
0331+  62D3             
0331+  62D3~            			endif
0331+  62D3~            			endif
0331+  62D3             
0331+  62C6             
0331+  62C6 0C          
0331+  62C7             
0331+  62C7             
0331+  62C7~            			endif
0331+  62C7~            			endif
0331+  62C7~            			endif
0331+  62C7             
0331+  62D3             
0331+  62D3~            			endif
0331+  62D3~            			endif
0331+  62D3             
0332+  62D3             			
0333+  62D3             			; flash player light
0334+  62D3 86 0F       			ldaA	00001111b ; player up lights
0335+  62D5 9A A7       			oraA	>flc(8)
0336+  62D7 97 A7       			staA	flc(8)
0337+  62D9             		endif
0337+  62D9             
0337+  62D9             
0337+  62D9             
0337+  62D9             
0337+  62D9             
0337+  62D9~            		endif
0337+  62D9~            		endif
0337+  62D9             
0337+  62D9~            		endif
0337+  62D9~            		endif
0337+  62D9             
0337+  62AE             
0337+  62AE 2A          
0337+  62AF             
0337+  62AF             
0337+  62AF~            		endif
0337+  62AF~            		endif
0337+  62AF~            		endif
0337+  62AF             
0337+  62D9             
0337+  62D9~            		endif
0337+  62D9~            		endif
0337+  62D9             
0338+  62D9             	endif
0338+  62D9             
0338+  62D9             
0338+  62D9             
0338+  62D9             
0338+  62D9             
0338+  62D9~            	endif
0338+  62D9~            	endif
0338+  62D9             
0338+  62D9~            	endif
0338+  62D9~            	endif
0338+  62D9             
0338+  62AA             
0338+  62AA 2E          
0338+  62AB             
0338+  62AB             
0338+  62AB~            	endif
0338+  62AB~            	endif
0338+  62AB~            	endif
0338+  62AB             
0338+  62D9             
0338+  62D9~            	endif
0338+  62D9~            	endif
0338+  62D9             
0339+  62D9             	
0340+  62D9 86 0F       	ldaA	00001111b ; player up lights
0341+  62DB 95 A7       	bitA	>flc(8)	; check if any player is flashing
0342+  62DD             	ifne ; any flashing -> playfield invalid
0342+  62DD             
0342+  62DD 27 FE       
0343+  62DF             swOuthole_save:
0344+  62DF 86 EF       		lampOff(5,8) ; tilt
0344+  62E1 94 0F       
0344+  62E3 97 0F       
0345+  62E5             		
0346+  62E5 B6 22 03    		enablePf
0346+  62E8 8A 38       
0346+  62EA B7 22 03    
0347+  62ED C6 02       		fireSolenoid(OUTHOLE)
0347+  62EF F7 01 44    
0348+  62F2             	else ; none flashing -> playfield valid -> end ball			
0348+  62F2             
0348+  62F2             
0348+  62F2             
0348+  62F2             
0348+  62DE             
0348+  62DE             
0348+  62DE             
0348+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0348+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0348+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0348+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0348+  62DE             
0348+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0348+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0348+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0348+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0348+  62DE             
0348+  62DE             
0348+  62DE 15          
0348+  62F2             
0348+  62F2 20 FE       
0348+  62F4             
0348+  62F4             
0348+  62F4             
0348+  62F4~            	else ; none flashing -> playfield valid -> end ball			
0348+  62F4~            	else ; none flashing -> playfield valid -> end ball			
0348+  62F4~            	else ; none flashing -> playfield valid -> end ball			
0348+  62F4~            	else ; none flashing -> playfield valid -> end ball			
0348+  62F4~            	else ; none flashing -> playfield valid -> end ball			
0348+  62F4             
0348+  62F4~            	else ; none flashing -> playfield valid -> end ball			
0348+  62F4~            	else ; none flashing -> playfield valid -> end ball			
0348+  62F4             
0348+  62F4~            	else ; none flashing -> playfield valid -> end ball			
0348+  62F4~            	else ; none flashing -> playfield valid -> end ball			
0348+  62F4             
0349+  62F4             swOuthole_bonusLoop:
0350+  62F4 BD 7D E4    		score1000()
0351+  62F7 96 09       		ldaA	>lc(2) ; double bonus
0352+  62F9 85 04       		bitA	lr(3)
0353+  62FB             		ifne 
0353+  62FB             
0353+  62FB 27 FE       
0354+  62FD 86 0C       			delay(100)
0354+  62FF BD 7D 6B    
0355+  6302 BD 7D E4    			score1000()
0356+  6305             		endif
0356+  6305             
0356+  6305             
0356+  6305             
0356+  6305             
0356+  6305             
0356+  6305~            		endif
0356+  6305~            		endif
0356+  6305             
0356+  6305~            		endif
0356+  6305~            		endif
0356+  6305             
0356+  62FC             
0356+  62FC 08          
0356+  62FD             
0356+  62FD             
0356+  62FD~            		endif
0356+  62FD~            		endif
0356+  62FD~            		endif
0356+  62FD             
0356+  6305             
0356+  6305~            		endif
0356+  6305~            		endif
0356+  6305             
0357+  6305 7A 00 B0    		dec	p_Bonus
0358+  6308 BD 60 C3    		jsr	bonusLights
0359+  630B 86 19       		delay(200)
0359+  630D BD 7D 6B    
0360+  6310 7D 00 B0    		tst	p_Bonus
0361+  6313 26 DF       		bne	swOuthole_bonusLoop
0362+  6315             	
0363+  6315 86 0F       		ldaA	00001111b ; player up lights
0364+  6317 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0365+  6319 D6 0A       		ldaB	>lc(3) ; check shoot again light
0366+  631B C5 01       		bitB	lr(1)
0367+  631D             		ifeq ; shoot again not lit
0367+  631D             
0367+  631D 26 FE       
0368+  631F             			; store player's data
0369+  631F DE 12       			ldX	>curPlayer
0370+  6321 D6 0B       			ldaB	>lc(4)
0371+  6323 E7 B1       			staB	p_Ejects, X
0372+  6325 D6 0A       			ldaB	>lc(3)
0373+  6327 C4 02       			andB	lr(2)
0374+  6329 DA 09       			oraB	>lc(2)
0375+  632B E7 B6       			staB	p_LampCol2, X
0376+  632D D6 AA       			ldaB	>dropsDown
0377+  632F E7 BA       			staB	p_EachDropDown, X
0378+  6331             			
0379+  6331             		
0380+  6331             			; go to next player
0381+  6331 48          			aslA
0382+  6332 7C 00 13    			inc	curPlayer + 1
0383+  6335 95 0E       			bitA	>lc(7)	; is player count < player #
0384+  6337             			ifne ; last player
0384+  6337             
0384+  6337 27 FE       
0385+  6339 86 01       				ldaA	00000001b; ; back to player 1
0386+  633B C6 00       				ldaB	0
0387+  633D D7 13       				staB	curPlayer + 1
0388+  633F             				
0389+  633F             				; increase ball count
0390+  633F D6 77       				ldaB	>ballCount
0391+  6341 CB 10       				addB	$10
0392+  6343 C1 40       				cmpB	$40
0393+  6345             				ifeq ; game over
0393+  6345             
0393+  6345 26 FE       
0394+  6347 86 20       					lampOn(6,8)
0394+  6349 9A 0F       
0394+  634B 97 0F       
0395+  634D B6 22 03    					disablePf
0395+  6350 84 F7       
0395+  6352 B7 22 03    
0396+  6355             					done(1)
0396+  6355~            					done(1)
0396+  6355~            					done(1)
0396+  6355~            					done(1)
0396+  6355~            					done(1)
0396+  6355             
0396+  6355 7E 79 8A    
0397+  6358             				else
0397+  6358             
0397+  6358             
0397+  6358             
0397+  6358             
0397+  6346             
0397+  6346             
0397+  6346             
0397+  6346~            				else
0397+  6346~            				else
0397+  6346~            				else
0397+  6346~            				else
0397+  6346             
0397+  6346~            				else
0397+  6346~            				else
0397+  6346~            				else
0397+  6346~            				else
0397+  6346             
0397+  6346             
0397+  6346 13          
0397+  6358             
0397+  6358 20 FE       
0397+  635A             
0397+  635A             
0397+  635A             
0397+  635A~            				else
0397+  635A~            				else
0397+  635A~            				else
0397+  635A~            				else
0397+  635A~            				else
0397+  635A             
0397+  635A~            				else
0397+  635A~            				else
0397+  635A             
0397+  635A~            				else
0397+  635A~            				else
0397+  635A             
0398+  635A D7 77       					staB	ballCount
0399+  635C             				endif		
0399+  635C             
0399+  635C             
0399+  635C             
0399+  635C             
0399+  635C             
0399+  635C~            				endif		
0399+  635C~            				endif		
0399+  635C             
0399+  635C~            				endif		
0399+  635C~            				endif		
0399+  635C             
0399+  6359             
0399+  6359 02          
0399+  635A             
0399+  635A             
0399+  635A~            				endif		
0399+  635A~            				endif		
0399+  635A~            				endif		
0399+  635A             
0399+  635C             
0399+  635C~            				endif		
0399+  635C~            				endif		
0399+  635C             
0400+  635C             			endif
0400+  635C             
0400+  635C             
0400+  635C             
0400+  635C             
0400+  635C             
0400+  635C~            			endif
0400+  635C~            			endif
0400+  635C             
0400+  635C~            			endif
0400+  635C~            			endif
0400+  635C             
0400+  6338             
0400+  6338 23          
0400+  6339             
0400+  6339             
0400+  6339~            			endif
0400+  6339~            			endif
0400+  6339~            			endif
0400+  6339             
0400+  635C             
0400+  635C~            			endif
0400+  635C~            			endif
0400+  635C             
0401+  635C             			
0402+  635C 97 0F       			staA	lc(8)
0403+  635E             		endif
0403+  635E             
0403+  635E             
0403+  635E             
0403+  635E             
0403+  635E             
0403+  635E~            		endif
0403+  635E~            		endif
0403+  635E             
0403+  635E~            		endif
0403+  635E~            		endif
0403+  635E             
0403+  631E             
0403+  631E 3F          
0403+  631F             
0403+  631F             
0403+  631F~            		endif
0403+  631F~            		endif
0403+  631F~            		endif
0403+  631F             
0403+  635E             
0403+  635E~            		endif
0403+  635E~            		endif
0403+  635E             
0404+  635E             		
0405+  635E BD 60 F2    		jsr	startBall
0406+  6361             	endif	
0406+  6361             
0406+  6361             
0406+  6361             
0406+  6361             
0406+  6361             
0406+  6361~            	endif	
0406+  6361~            	endif	
0406+  6361             
0406+  6361~            	endif	
0406+  6361~            	endif	
0406+  6361             
0406+  62F3             
0406+  62F3 6D          
0406+  62F4             
0406+  62F4             
0406+  62F4~            	endif	
0406+  62F4~            	endif	
0406+  62F4~            	endif	
0406+  62F4             
0406+  6361             
0406+  6361~            	endif	
0406+  6361~            	endif	
0406+  6361             
0407+  6361             	done(0)
0407+  6361             
0407+  6361 86 02       
0407+  6363 BA 01 6B    
0407+  6366 B7 01 6B    
0407+  6369             
0407+  6369 7E 79 8A    
0408+  636C             	
0409+  636C             swLeftEject:
0410+  636C 96 0F       	ldaA	>lc(8)
0411+  636E 85 20       	bitA	lr(6)
0412+  6370             	ifne ; not in game
0412+  6370             
0412+  6370 27 FE       
0413+  6372 C6 03       		fireSolenoid(LEFT_EJECT)
0413+  6374 F7 01 43    
0414+  6377             		done(0)
0414+  6377             
0414+  6377 86 02       
0414+  6379 BA 01 6B    
0414+  637C B7 01 6B    
0414+  637F             
0414+  637F 7E 79 8A    
0415+  6382             	endif
0415+  6382             
0415+  6382             
0415+  6382             
0415+  6382             
0415+  6382             
0415+  6382~            	endif
0415+  6382~            	endif
0415+  6382             
0415+  6382~            	endif
0415+  6382~            	endif
0415+  6382             
0415+  6371             
0415+  6371 10          
0415+  6372             
0415+  6372             
0415+  6372~            	endif
0415+  6372~            	endif
0415+  6372~            	endif
0415+  6372             
0415+  6382             
0415+  6382~            	endif
0415+  6382~            	endif
0415+  6382             
0416+  6382             		
0417+  6382 7C 00 B0    	advBonus()
0418+  6385 86 04       	ldaA	lr(3) ; extra ball
0419+  6387 95 0A       	bitA	>lc(3)
0420+  6389             	ifne
0420+  6389             
0420+  6389 27 FE       
0421+  638B C6 06       		fireSolenoid(KNOCKER)
0421+  638D F7 01 4D    
0422+  6390 86 01       		lampOn(1,3) ; shoot again
0422+  6392 9A 0A       
0422+  6394 97 0A       
0423+  6396 86 40       		lampOn(7,8)
0423+  6398 9A 0F       
0423+  639A 97 0F       
0424+  639C 86 FB       		lampOff(3,3) ; extra ball
0424+  639E 94 0A       
0424+  63A0 97 0A       
0425+  63A2 86 3E       		delay(500)
0425+  63A4 BD 7D 6B    
0426+  63A7             	else
0426+  63A7             
0426+  63A7             
0426+  63A7             
0426+  63A7             
0426+  638A             
0426+  638A             
0426+  638A             
0426+  638A~            	else
0426+  638A~            	else
0426+  638A~            	else
0426+  638A~            	else
0426+  638A             
0426+  638A~            	else
0426+  638A~            	else
0426+  638A~            	else
0426+  638A~            	else
0426+  638A             
0426+  638A             
0426+  638A 1E          
0426+  63A7             
0426+  63A7 20 FE       
0426+  63A9             
0426+  63A9             
0426+  63A9             
0426+  63A9~            	else
0426+  63A9~            	else
0426+  63A9~            	else
0426+  63A9~            	else
0426+  63A9~            	else
0426+  63A9             
0426+  63A9~            	else
0426+  63A9~            	else
0426+  63A9             
0426+  63A9~            	else
0426+  63A9~            	else
0426+  63A9             
0427+  63A9 BD 67 29    		jsr	addCollect
0428+  63AC             		score500()
0428+  63AC BD 7D D5    
0428+  63AF C6 02       
0428+  63B1 F7 01 49    
0428+  63B4 86 0E       
0428+  63B6 BD 7D 6B    
0428+  63B9 BD 7D D5    
0428+  63BC C6 02       
0428+  63BE F7 01 49    
0428+  63C1 86 0E       
0428+  63C3 BD 7D 6B    
0428+  63C6 BD 7D D5    
0428+  63C9 C6 02       
0428+  63CB F7 01 49    
0428+  63CE 86 0E       
0428+  63D0 BD 7D 6B    
0428+  63D3 BD 7D D5    
0428+  63D6 C6 02       
0428+  63D8 F7 01 49    
0428+  63DB 86 0E       
0428+  63DD BD 7D 6B    
0428+  63E0 BD 7D D5    
0428+  63E3 C6 02       
0428+  63E5 F7 01 49    
0428+  63E8 86 0E       
0428+  63EA BD 7D 6B    
0429+  63ED             	endif
0429+  63ED             
0429+  63ED             
0429+  63ED             
0429+  63ED             
0429+  63ED             
0429+  63ED~            	endif
0429+  63ED~            	endif
0429+  63ED             
0429+  63ED~            	endif
0429+  63ED~            	endif
0429+  63ED             
0429+  63A8             
0429+  63A8 44          
0429+  63A9             
0429+  63A9             
0429+  63A9~            	endif
0429+  63A9~            	endif
0429+  63A9~            	endif
0429+  63A9             
0429+  63ED             
0429+  63ED~            	endif
0429+  63ED~            	endif
0429+  63ED             
0430+  63ED C6 03       	fireSolenoid(LEFT_EJECT)
0430+  63EF F7 01 43    
0431+  63F2             	
0432+  63F2 86 32       	delay(400)
0432+  63F4 BD 7D 6B    
0433+  63F7 86 C7       	ldaA	11000111b
0434+  63F9 94 A1       	andA	>flc(2)
0435+  63FB 97 A1       	staA	flc(2)
0436+  63FD             	done(1)
0436+  63FD~            	done(1)
0436+  63FD~            	done(1)
0436+  63FD~            	done(1)
0436+  63FD~            	done(1)
0436+  63FD             
0436+  63FD 7E 79 8A    
0437+  6400             	
0438+  6400             swTopEject:
0439+  6400 7C 00 B0    	advBonus()
0440+  6403 D6 0B       	ldaB	>lc(4)
0441+  6405 57          	asrB
0442+  6406             	ifeq ; 1k
0442+  6406             
0442+  6406 26 FE       
0443+  6408 BD 7D E4    		score1000()
0444+  640B 86 19       		delay(200)
0444+  640D BD 7D 6B    
0445+  6410 7E 64 D5    		jmp	swTopEject_scored
0446+  6413             	endif
0446+  6413             
0446+  6413             
0446+  6413             
0446+  6413             
0446+  6413             
0446+  6413~            	endif
0446+  6413~            	endif
0446+  6413             
0446+  6413~            	endif
0446+  6413~            	endif
0446+  6413             
0446+  6407             
0446+  6407 0B          
0446+  6408             
0446+  6408             
0446+  6408~            	endif
0446+  6408~            	endif
0446+  6408~            	endif
0446+  6408             
0446+  6413             
0446+  6413~            	endif
0446+  6413~            	endif
0446+  6413             
0447+  6413 57          	asrB
0448+  6414             	ifeq  ; captive
0448+  6414             
0448+  6414 26 FE       
0449+  6416 86 40       		ldaA	lr(7)
0450+  6418 95 09       		bitA	>lc(2) ; captive ball
0451+  641A             		ifeq	; not lit
0451+  641A             
0451+  641A 26 FE       
0452+  641C 86 40       			lampOn(7,2)
0452+  641E 9A 09       
0452+  6420 97 09       
0453+  6422 86 40       			flashLamp(7,2)
0453+  6424 9A A1       
0453+  6426 97 A1       
0454+  6428             		else
0454+  6428             
0454+  6428             
0454+  6428             
0454+  6428             
0454+  641B             
0454+  641B             
0454+  641B             
0454+  641B~            		else
0454+  641B~            		else
0454+  641B~            		else
0454+  641B~            		else
0454+  641B             
0454+  641B~            		else
0454+  641B~            		else
0454+  641B~            		else
0454+  641B~            		else
0454+  641B             
0454+  641B             
0454+  641B 0E          
0454+  6428             
0454+  6428 20 FE       
0454+  642A             
0454+  642A             
0454+  642A             
0454+  642A~            		else
0454+  642A~            		else
0454+  642A~            		else
0454+  642A~            		else
0454+  642A~            		else
0454+  642A             
0454+  642A~            		else
0454+  642A~            		else
0454+  642A             
0454+  642A~            		else
0454+  642A~            		else
0454+  642A             
0455+  642A 86 BF       			lampOff(7,2)
0455+  642C 94 09       
0455+  642E 97 09       
0456+  6430             		endif
0456+  6430             
0456+  6430             
0456+  6430             
0456+  6430             
0456+  6430             
0456+  6430~            		endif
0456+  6430~            		endif
0456+  6430             
0456+  6430~            		endif
0456+  6430~            		endif
0456+  6430             
0456+  6429             
0456+  6429 06          
0456+  642A             
0456+  642A             
0456+  642A~            		endif
0456+  642A~            		endif
0456+  642A~            		endif
0456+  642A             
0456+  6430             
0456+  6430~            		endif
0456+  6430~            		endif
0456+  6430             
0457+  6430             	score500()
0457+  6430 BD 7D D5    
0457+  6433 C6 02       
0457+  6435 F7 01 49    
0457+  6438 86 0E       
0457+  643A BD 7D 6B    
0457+  643D BD 7D D5    
0457+  6440 C6 02       
0457+  6442 F7 01 49    
0457+  6445 86 0E       
0457+  6447 BD 7D 6B    
0457+  644A BD 7D D5    
0457+  644D C6 02       
0457+  644F F7 01 49    
0457+  6452 86 0E       
0457+  6454 BD 7D 6B    
0457+  6457 BD 7D D5    
0457+  645A C6 02       
0457+  645C F7 01 49    
0457+  645F 86 0E       
0457+  6461 BD 7D 6B    
0457+  6464 BD 7D D5    
0457+  6467 C6 02       
0457+  6469 F7 01 49    
0457+  646C 86 0E       
0457+  646E BD 7D 6B    
0458+  6471 7E 64 D5    		jmp	swTopEject_scored
0459+  6474             	endif
0459+  6474             
0459+  6474             
0459+  6474             
0459+  6474             
0459+  6474             
0459+  6474~            	endif
0459+  6474~            	endif
0459+  6474             
0459+  6474~            	endif
0459+  6474~            	endif
0459+  6474             
0459+  6415             
0459+  6415 5E          
0459+  6416             
0459+  6416             
0459+  6416~            	endif
0459+  6416~            	endif
0459+  6416~            	endif
0459+  6416             
0459+  6474             
0459+  6474~            	endif
0459+  6474~            	endif
0459+  6474             
0460+  6474 57          	asrB
0461+  6475             	ifne	
0461+  6475             
0461+  6475 27 FE       
0462+  6477 57          		asrB
0463+  6478             		ifeq ; double
0463+  6478             
0463+  6478 26 FE       
0464+  647A 86 04       			ldaA	lr(3)
0465+  647C 95 09       			bitA	>lc(2) ; double bonus
0466+  647E             			ifeq	; not lit
0466+  647E             
0466+  647E 26 FE       
0467+  6480 86 04       				lampOn(3,2)
0467+  6482 9A 09       
0467+  6484 97 09       
0468+  6486 86 04       				flashLamp(3,2)
0468+  6488 9A A1       
0468+  648A 97 A1       
0469+  648C             			else
0469+  648C             
0469+  648C             
0469+  648C             
0469+  648C             
0469+  647F             
0469+  647F             
0469+  647F             
0469+  647F~            			else
0469+  647F~            			else
0469+  647F~            			else
0469+  647F~            			else
0469+  647F             
0469+  647F~            			else
0469+  647F~            			else
0469+  647F~            			else
0469+  647F~            			else
0469+  647F             
0469+  647F             
0469+  647F 0E          
0469+  648C             
0469+  648C 20 FE       
0469+  648E             
0469+  648E             
0469+  648E             
0469+  648E~            			else
0469+  648E~            			else
0469+  648E~            			else
0469+  648E~            			else
0469+  648E~            			else
0469+  648E             
0469+  648E~            			else
0469+  648E~            			else
0469+  648E             
0469+  648E~            			else
0469+  648E~            			else
0469+  648E             
0470+  648E 86 FB       				lampOff(3,2)
0470+  6490 94 09       
0470+  6492 97 09       
0471+  6494             			endif
0471+  6494             
0471+  6494             
0471+  6494             
0471+  6494             
0471+  6494             
0471+  6494~            			endif
0471+  6494~            			endif
0471+  6494             
0471+  6494~            			endif
0471+  6494~            			endif
0471+  6494             
0471+  648D             
0471+  648D 06          
0471+  648E             
0471+  648E             
0471+  648E~            			endif
0471+  648E~            			endif
0471+  648E~            			endif
0471+  648E             
0471+  6494             
0471+  6494~            			endif
0471+  6494~            			endif
0471+  6494             
0472+  6494             		endif
0472+  6494             
0472+  6494             
0472+  6494             
0472+  6494             
0472+  6494             
0472+  6494~            		endif
0472+  6494~            		endif
0472+  6494             
0472+  6494~            		endif
0472+  6494~            		endif
0472+  6494             
0472+  6479             
0472+  6479 1A          
0472+  647A             
0472+  647A             
0472+  647A~            		endif
0472+  647A~            		endif
0472+  647A~            		endif
0472+  647A             
0472+  6494             
0472+  6494~            		endif
0472+  6494~            		endif
0472+  6494             
0473+  6494             	endif
0473+  6494             
0473+  6494             
0473+  6494             
0473+  6494             
0473+  6494             
0473+  6494~            	endif
0473+  6494~            	endif
0473+  6494             
0473+  6494~            	endif
0473+  6494~            	endif
0473+  6494             
0473+  6476             
0473+  6476 1D          
0473+  6477             
0473+  6477             
0473+  6477~            	endif
0473+  6477~            	endif
0473+  6477~            	endif
0473+  6477             
0473+  6494             
0473+  6494~            	endif
0473+  6494~            	endif
0473+  6494             
0474+  6494             	score500()
0474+  6494 BD 7D D5    
0474+  6497 C6 02       
0474+  6499 F7 01 49    
0474+  649C 86 0E       
0474+  649E BD 7D 6B    
0474+  64A1 BD 7D D5    
0474+  64A4 C6 02       
0474+  64A6 F7 01 49    
0474+  64A9 86 0E       
0474+  64AB BD 7D 6B    
0474+  64AE BD 7D D5    
0474+  64B1 C6 02       
0474+  64B3 F7 01 49    
0474+  64B6 86 0E       
0474+  64B8 BD 7D 6B    
0474+  64BB BD 7D D5    
0474+  64BE C6 02       
0474+  64C0 F7 01 49    
0474+  64C3 86 0E       
0474+  64C5 BD 7D 6B    
0474+  64C8 BD 7D D5    
0474+  64CB C6 02       
0474+  64CD F7 01 49    
0474+  64D0 86 0E       
0474+  64D2 BD 7D 6B    
0475+  64D5             swTopEject_scored:
0476+  64D5 86 FB       	flashOff(3,2)
0476+  64D7 94 A1       
0476+  64D9 97 A1       
0477+  64DB 86 BF       	flashOff(7,2)
0477+  64DD 94 A1       
0477+  64DF 97 A1       
0478+  64E1 C6 03       	fireSolenoid(TOP_EJECT)
0478+  64E3 F7 01 40    
0479+  64E6             	done(1)
0479+  64E6~            	done(1)
0479+  64E6~            	done(1)
0479+  64E6~            	done(1)
0479+  64E6~            	done(1)
0479+  64E6             
0479+  64E6 7E 79 8A    
0480+  64E9             	
0481+  64E9             swHotTip:
0482+  64E9 7D 00 A9    	tst	dropResetTimer
0483+  64EC             	ifne
0483+  64EC             
0483+  64EC 27 FE       
0484+  64EE             		done(0)
0484+  64EE             
0484+  64EE 86 02       
0484+  64F0 BA 01 6B    
0484+  64F3 B7 01 6B    
0484+  64F6             
0484+  64F6 7E 79 8A    
0485+  64F9             	endif
0485+  64F9             
0485+  64F9             
0485+  64F9             
0485+  64F9             
0485+  64F9             
0485+  64F9~            	endif
0485+  64F9~            	endif
0485+  64F9             
0485+  64F9~            	endif
0485+  64F9~            	endif
0485+  64F9             
0485+  64ED             
0485+  64ED 0B          
0485+  64EE             
0485+  64EE             
0485+  64EE~            	endif
0485+  64EE~            	endif
0485+  64EE~            	endif
0485+  64EE             
0485+  64F9             
0485+  64F9~            	endif
0485+  64F9~            	endif
0485+  64F9             
0486+  64F9             	
0487+  64F9 BD 67 29    	jsr	addCollect
0488+  64FC 86 00       	ldaA	0
0489+  64FE 97 B5       	staA	p_DropsDown
0490+  6500 97 AA       	staA	dropsDown
0491+  6502 86 41       	ldaA	65
0492+  6504 97 A9       	staA	dropResetTimer
0493+  6506 86 12       	delay(150)
0493+  6508 BD 7D 6B    
0494+  650B C6 0C       	fireSolenoid(DROP_HOT)
0494+  650D F7 01 42    
0495+  6510 86 12       	delay(150)
0495+  6512 BD 7D 6B    
0496+  6515 C6 0C       	fireSolenoid(DROP_TIP)
0496+  6517 F7 01 41    
0497+  651A 86 F7       	lampOff(4,3) ; spinner
0497+  651C 94 0A       
0497+  651E 97 0A       
0498+  6520             	
0499+  6520 86 70       	delay(900)
0499+  6522 BD 7D 6B    
0500+  6525 86 C7       	ldaA	11000111b
0501+  6527 94 A1       	andA	>flc(2)
0502+  6529 97 A1       	staA	flc(2)
0503+  652B             	
0504+  652B             	done(1)
0504+  652B~            	done(1)
0504+  652B~            	done(1)
0504+  652B~            	done(1)
0504+  652B~            	done(1)
0504+  652B             
0504+  652B 7E 79 8A    
0505+  652E             swLeftOutlane:
0506+  652E 86 02       	ldaA	lr(2) ; left special
0507+  6530 95 0A       	bitA	>lc(3)
0508+  6532             	ifne
0508+  6532             
0508+  6532 27 FE       
0509+  6534 86 01       		lampOn(1,3) ; shoot again
0509+  6536 9A 0A       
0509+  6538 97 0A       
0510+  653A 86 01       		flashLamp(1,3)
0510+  653C 9A A2       
0510+  653E 97 A2       
0511+  6540 C6 0C       		fireSolenoid(BUZZER)
0511+  6542 F7 01 4E    
0512+  6545 86 02       		flashLamp(2,3)
0512+  6547 9A A2       
0512+  6549 97 A2       
0513+  654B             	endif
0513+  654B             
0513+  654B             
0513+  654B             
0513+  654B             
0513+  654B             
0513+  654B~            	endif
0513+  654B~            	endif
0513+  654B             
0513+  654B~            	endif
0513+  654B~            	endif
0513+  654B             
0513+  6533             
0513+  6533 17          
0513+  6534             
0513+  6534             
0513+  6534~            	endif
0513+  6534~            	endif
0513+  6534~            	endif
0513+  6534             
0513+  654B             
0513+  654B~            	endif
0513+  654B~            	endif
0513+  654B             
0514+  654B 7C 00 B0    	advBonus()
0515+  654E BD 7D E4    	score1000()
0516+  6551             	done(1)
0516+  6551~            	done(1)
0516+  6551~            	done(1)
0516+  6551~            	done(1)
0516+  6551~            	done(1)
0516+  6551             
0516+  6551 7E 79 8A    
0517+  6554             	
0518+  6554             swRightOutlane:
0519+  6554 86 80       	ldaA	lr(8) ; right special
0520+  6556 95 09       	bitA	>lc(2)
0521+  6558             	ifne
0521+  6558             
0521+  6558 27 FE       
0522+  655A 86 01       		lampOn(1,3) ; shoot again
0522+  655C 9A 0A       
0522+  655E 97 0A       
0523+  6560 86 01       		flashLamp(1,3)
0523+  6562 9A A2       
0523+  6564 97 A2       
0524+  6566 C6 0C       		fireSolenoid(BUZZER)
0524+  6568 F7 01 4E    
0525+  656B 86 80       		flashLamp(8,2)
0525+  656D 9A A1       
0525+  656F 97 A1       
0526+  6571             	endif
0526+  6571             
0526+  6571             
0526+  6571             
0526+  6571             
0526+  6571             
0526+  6571~            	endif
0526+  6571~            	endif
0526+  6571             
0526+  6571~            	endif
0526+  6571~            	endif
0526+  6571             
0526+  6559             
0526+  6559 17          
0526+  655A             
0526+  655A             
0526+  655A~            	endif
0526+  655A~            	endif
0526+  655A~            	endif
0526+  655A             
0526+  6571             
0526+  6571~            	endif
0526+  6571~            	endif
0526+  6571             
0527+  6571 7C 00 B0    	advBonus()
0528+  6574 BD 7D E4    	score1000()
0529+  6577             	done(1)
0529+  6577~            	done(1)
0529+  6577~            	done(1)
0529+  6577~            	done(1)
0529+  6577~            	done(1)
0529+  6577             
0529+  6577 7E 79 8A    
0530+  657A             	
0531+  657A             swLeftInlane:
0532+  657A             swRightInlane:
0533+  657A 7C 00 B0    	advBonus()
0534+  657D BD 7D E4    	score1000()
0535+  6580             	done(1)
0535+  6580~            	done(1)
0535+  6580~            	done(1)
0535+  6580~            	done(1)
0535+  6580~            	done(1)
0535+  6580             
0535+  6580 7E 79 8A    
0536+  6583             sw10pt:
0537+  6583 BD 7D C7    	score10()
0538+  6586 77 00 0B    	asr	lc(4)
0539+  6589             	ifeq ; shifted off the edge
0539+  6589             
0539+  6589 26 FE       
0540+  658B 86 10       		ldaA	00010000b
0541+  658D 97 0B       		staA	lc(4)
0542+  658F             	endif
0542+  658F             
0542+  658F             
0542+  658F             
0542+  658F             
0542+  658F             
0542+  658F~            	endif
0542+  658F~            	endif
0542+  658F             
0542+  658F~            	endif
0542+  658F~            	endif
0542+  658F             
0542+  658A             
0542+  658A 04          
0542+  658B             
0542+  658B             
0542+  658B~            	endif
0542+  658B~            	endif
0542+  658B~            	endif
0542+  658B             
0542+  658F             
0542+  658F~            	endif
0542+  658F~            	endif
0542+  658F             
0543+  658F             	done(1)
0543+  658F~            	done(1)
0543+  658F~            	done(1)
0543+  658F~            	done(1)
0543+  658F~            	done(1)
0543+  658F             
0543+  658F 7E 79 8A    
0544+  6592             sw100pt:
0545+  6592 BD 7D D5    	score100()
0546+  6595             	done(1)
0546+  6595~            	done(1)
0546+  6595~            	done(1)
0546+  6595~            	done(1)
0546+  6595~            	done(1)
0546+  6595             
0546+  6595 7E 79 8A    
0547+  6598             sw500pt:
0548+  6598 BD 66 FD    	jsr	alternate
0549+  659B             	score500()
0549+  659B BD 7D D5    
0549+  659E C6 02       
0549+  65A0 F7 01 49    
0549+  65A3 86 0E       
0549+  65A5 BD 7D 6B    
0549+  65A8 BD 7D D5    
0549+  65AB C6 02       
0549+  65AD F7 01 49    
0549+  65B0 86 0E       
0549+  65B2 BD 7D 6B    
0549+  65B5 BD 7D D5    
0549+  65B8 C6 02       
0549+  65BA F7 01 49    
0549+  65BD 86 0E       
0549+  65BF BD 7D 6B    
0549+  65C2 BD 7D D5    
0549+  65C5 C6 02       
0549+  65C7 F7 01 49    
0549+  65CA 86 0E       
0549+  65CC BD 7D 6B    
0549+  65CF BD 7D D5    
0549+  65D2 C6 02       
0549+  65D4 F7 01 49    
0549+  65D7 86 0E       
0549+  65D9 BD 7D 6B    
0550+  65DC             	done(1)
0550+  65DC~            	done(1)
0550+  65DC~            	done(1)
0550+  65DC~            	done(1)
0550+  65DC~            	done(1)
0550+  65DC             
0550+  65DC 7E 79 8A    
0551+  65DF             swPop:
0552+  65DF BD 66 FD    	jsr	alternate
0553+  65E2 BD 7D D5    	score100()
0554+  65E5             	done(1)
0554+  65E5~            	done(1)
0554+  65E5~            	done(1)
0554+  65E5~            	done(1)
0554+  65E5~            	done(1)
0554+  65E5             
0554+  65E5 7E 79 8A    
0555+  65E8             swDropTip:
0556+  65E8 86 08       	ldaA	1<<3
0557+  65EA 7E 66 06    	jmp	swDrop
0558+  65ED             swDropHot:
0559+  65ED 86 01       	ldaA	1<<0
0560+  65EF 7E 66 06    	jmp	swDrop
0561+  65F2             swDroptIp:
0562+  65F2 86 10       	ldaA	1<<4
0563+  65F4 7E 66 06    	jmp	swDrop
0564+  65F7             swDrophOt:
0565+  65F7 86 02       	ldaA	1<<1
0566+  65F9 7E 66 06    	jmp	swDrop
0567+  65FC             swDroptiP:
0568+  65FC 86 20       	ldaA	1<<5
0569+  65FE 7E 66 06    	jmp	swDrop
0570+  6601             swDrophoT:
0571+  6601 86 04       	ldaA	1<<2
0572+  6603 7E 66 06    	jmp	swDrop
0573+  6606             swDrop:
0574+  6606 7D 00 A9    	tst	dropResetTimer
0575+  6609             	ifeq
0575+  6609             
0575+  6609 26 FE       
0576+  660B 95 AA       		bitA	>dropsDown
0577+  660D             		ifne
0577+  660D             
0577+  660D 27 FE       
0578+  660F             			done(0)
0578+  660F             
0578+  660F 86 02       
0578+  6611 BA 01 6B    
0578+  6614 B7 01 6B    
0578+  6617             
0578+  6617 7E 79 8A    
0579+  661A             		endif
0579+  661A             
0579+  661A             
0579+  661A             
0579+  661A             
0579+  661A             
0579+  661A~            		endif
0579+  661A~            		endif
0579+  661A             
0579+  661A~            		endif
0579+  661A~            		endif
0579+  661A             
0579+  660E             
0579+  660E 0B          
0579+  660F             
0579+  660F             
0579+  660F~            		endif
0579+  660F~            		endif
0579+  660F~            		endif
0579+  660F             
0579+  661A             
0579+  661A~            		endif
0579+  661A~            		endif
0579+  661A             
0580+  661A 9A AA       		oraA	>dropsDown
0581+  661C             		
0582+  661C 97 AA       		staA	dropsDown
0583+  661E 7C 00 B5    		inc	p_DropsDown
0584+  6621 86 04       		ldaA	4
0585+  6623 91 B5       		cmpA	>p_DropsDown
0586+  6625             		ifgt
0586+  6625             
0586+  6625 23 FE       
0587+  6627 86 F7       			lampOff(4,3) ; spinner
0587+  6629 94 0A       
0587+  662B 97 0A       
0588+  662D             		else
0588+  662D             
0588+  662D             
0588+  662D             
0588+  662D             
0588+  6626             
0588+  6626             
0588+  6626             
0588+  6626~            		else
0588+  6626~            		else
0588+  6626~            		else
0588+  6626~            		else
0588+  6626             
0588+  6626~            		else
0588+  6626~            		else
0588+  6626~            		else
0588+  6626~            		else
0588+  6626             
0588+  6626             
0588+  6626 08          
0588+  662D             
0588+  662D 20 FE       
0588+  662F             
0588+  662F             
0588+  662F             
0588+  662F~            		else
0588+  662F~            		else
0588+  662F~            		else
0588+  662F~            		else
0588+  662F~            		else
0588+  662F             
0588+  662F~            		else
0588+  662F~            		else
0588+  662F             
0588+  662F~            		else
0588+  662F~            		else
0588+  662F             
0589+  662F 86 08       			lampOn(4,3)
0589+  6631 9A 0A       
0589+  6633 97 0A       
0590+  6635             		endif
0590+  6635             
0590+  6635             
0590+  6635             
0590+  6635             
0590+  6635             
0590+  6635~            		endif
0590+  6635~            		endif
0590+  6635             
0590+  6635~            		endif
0590+  6635~            		endif
0590+  6635             
0590+  662E             
0590+  662E 06          
0590+  662F             
0590+  662F             
0590+  662F~            		endif
0590+  662F~            		endif
0590+  662F~            		endif
0590+  662F             
0590+  6635             
0590+  6635~            		endif
0590+  6635~            		endif
0590+  6635             
0591+  6635             		
0592+  6635 BD 7D C7    		score10()
0593+  6638 7C 00 B0    		advBonus()
0594+  663B             		done(1)
0594+  663B~            		done(1)
0594+  663B~            		done(1)
0594+  663B~            		done(1)
0594+  663B~            		done(1)
0594+  663B             
0594+  663B 7E 79 8A    
0595+  663E             	else
0595+  663E             
0595+  663E             
0595+  663E             
0595+  663E             
0595+  660A             
0595+  660A             
0595+  660A             
0595+  660A~            	else
0595+  660A~            	else
0595+  660A~            	else
0595+  660A~            	else
0595+  660A             
0595+  660A~            	else
0595+  660A~            	else
0595+  660A~            	else
0595+  660A~            	else
0595+  660A             
0595+  660A             
0595+  660A 35          
0595+  663E             
0595+  663E 20 FE       
0595+  6640             
0595+  6640             
0595+  6640             
0595+  6640~            	else
0595+  6640~            	else
0595+  6640~            	else
0595+  6640~            	else
0595+  6640~            	else
0595+  6640             
0595+  6640~            	else
0595+  6640~            	else
0595+  6640             
0595+  6640~            	else
0595+  6640~            	else
0595+  6640             
0596+  6640             		done(0)
0596+  6640             
0596+  6640 86 02       
0596+  6642 BA 01 6B    
0596+  6645 B7 01 6B    
0596+  6648             
0596+  6648 7E 79 8A    
0597+  664B             	endif
0597+  664B             
0597+  664B             
0597+  664B             
0597+  664B             
0597+  664B             
0597+  664B~            	endif
0597+  664B~            	endif
0597+  664B             
0597+  664B~            	endif
0597+  664B~            	endif
0597+  664B             
0597+  663F             
0597+  663F 0B          
0597+  6640             
0597+  6640             
0597+  6640~            	endif
0597+  6640~            	endif
0597+  6640~            	endif
0597+  6640             
0597+  664B             
0597+  664B~            	endif
0597+  664B~            	endif
0597+  664B             
0598+  664B             swAdvBonus:
0599+  664B 7C 00 B0    	advBonus()
0600+  664E BD 7D E4    	score1000()
0601+  6651             	done(1)
0601+  6651~            	done(1)
0601+  6651~            	done(1)
0601+  6651~            	done(1)
0601+  6651~            	done(1)
0601+  6651             
0601+  6651 7E 79 8A    
0602+  6654             swSpinner:
0603+  6654             	;ldaA	>sc(4)
0604+  6654             	;bitA	sr(6)
0605+  6654             	;ifne
0606+  6654             	;	score100()
0607+  6654             	;	ldaA	$E
0608+  6654             	;else
0609+  6654             	;	noValidate
0610+  6654             	;	ldaA	0
0611+  6654             	;endif
0612+  6654             	;staA	solenoid1 + CLICKER - 1
0613+  6654             	
0614+  6654 86 08       	ldaA	lr(4) ; spinner
0615+  6656 95 0A       	bitA	>lc(3)
0616+  6658             	ifne ; spinner on
0616+  6658             
0616+  6658 27 FE       
0617+  665A BD 7D D5    		score100()
0618+  665D C6 01       		fireSolenoid(CLICKER)
0618+  665F F7 01 4C    
0619+  6662             	else
0619+  6662             
0619+  6662             
0619+  6662             
0619+  6662             
0619+  6659             
0619+  6659             
0619+  6659             
0619+  6659~            	else
0619+  6659~            	else
0619+  6659~            	else
0619+  6659~            	else
0619+  6659             
0619+  6659~            	else
0619+  6659~            	else
0619+  6659~            	else
0619+  6659~            	else
0619+  6659             
0619+  6659             
0619+  6659 0A          
0619+  6662             
0619+  6662 20 FE       
0619+  6664             
0619+  6664             
0619+  6664             
0619+  6664~            	else
0619+  6664~            	else
0619+  6664~            	else
0619+  6664~            	else
0619+  6664~            	else
0619+  6664             
0619+  6664~            	else
0619+  6664~            	else
0619+  6664             
0619+  6664~            	else
0619+  6664~            	else
0619+  6664             
0620+  6664 BD 7D C7    		score10()
0621+  6667             	endif
0621+  6667             
0621+  6667             
0621+  6667             
0621+  6667             
0621+  6667             
0621+  6667~            	endif
0621+  6667~            	endif
0621+  6667             
0621+  6667~            	endif
0621+  6667~            	endif
0621+  6667             
0621+  6663             
0621+  6663 03          
0621+  6664             
0621+  6664             
0621+  6664~            	endif
0621+  6664~            	endif
0621+  6664~            	endif
0621+  6664             
0621+  6667             
0621+  6667~            	endif
0621+  6667~            	endif
0621+  6667             
0622+  6667             	done(1)
0622+  6667~            	done(1)
0622+  6667~            	done(1)
0622+  6667~            	done(1)
0622+  6667~            	done(1)
0622+  6667             
0622+  6667 7E 79 8A    
0623+  666A             
0624+  666A             swCaptiveRollover:
0625+  666A 96 09       	ldaA	>lc(2)
0626+  666C 85 40       	bitA	lr(7)
0627+  666E             	ifeq ; light off
0627+  666E             
0627+  666E 26 FE       
0628+  6670 BD 7D C7    		score10()
0629+  6673             	else
0629+  6673             
0629+  6673             
0629+  6673             
0629+  6673             
0629+  666F             
0629+  666F             
0629+  666F             
0629+  666F~            	else
0629+  666F~            	else
0629+  666F~            	else
0629+  666F~            	else
0629+  666F             
0629+  666F~            	else
0629+  666F~            	else
0629+  666F~            	else
0629+  666F~            	else
0629+  666F             
0629+  666F             
0629+  666F 05          
0629+  6673             
0629+  6673 20 FE       
0629+  6675             
0629+  6675             
0629+  6675             
0629+  6675~            	else
0629+  6675~            	else
0629+  6675~            	else
0629+  6675~            	else
0629+  6675~            	else
0629+  6675             
0629+  6675~            	else
0629+  6675~            	else
0629+  6675             
0629+  6675~            	else
0629+  6675~            	else
0629+  6675             
0630+  6675 BD 7D E4    		score1000()
0631+  6678 86 0E       		ldaA	14 ; captive rollover switch number
0632+  667A 91 A8       		cmpA	>lastSwitch
0633+  667C             		ifne
0633+  667C             
0633+  667C 27 FE       
0634+  667E 86 0F       			ldaA	15 ; captive rollover switch number
0635+  6680 91 A8       			cmpA	>lastSwitch
0636+  6682             			ifne
0636+  6682             
0636+  6682 27 FE       
0637+  6684 BD 66 A1    				jsr	captiveAward
0638+  6687             			endif
0638+  6687             
0638+  6687             
0638+  6687             
0638+  6687             
0638+  6687             
0638+  6687~            			endif
0638+  6687~            			endif
0638+  6687             
0638+  6687~            			endif
0638+  6687~            			endif
0638+  6687             
0638+  6683             
0638+  6683 03          
0638+  6684             
0638+  6684             
0638+  6684~            			endif
0638+  6684~            			endif
0638+  6684~            			endif
0638+  6684             
0638+  6687             
0638+  6687~            			endif
0638+  6687~            			endif
0638+  6687             
0639+  6687             		endif
0639+  6687             
0639+  6687             
0639+  6687             
0639+  6687             
0639+  6687             
0639+  6687~            		endif
0639+  6687~            		endif
0639+  6687             
0639+  6687~            		endif
0639+  6687~            		endif
0639+  6687             
0639+  667D             
0639+  667D 09          
0639+  667E             
0639+  667E             
0639+  667E~            		endif
0639+  667E~            		endif
0639+  667E~            		endif
0639+  667E             
0639+  6687             
0639+  6687~            		endif
0639+  6687~            		endif
0639+  6687             
0640+  6687             	endif
0640+  6687             
0640+  6687             
0640+  6687             
0640+  6687             
0640+  6687             
0640+  6687~            	endif
0640+  6687~            	endif
0640+  6687             
0640+  6687~            	endif
0640+  6687~            	endif
0640+  6687             
0640+  6674             
0640+  6674 12          
0640+  6675             
0640+  6675             
0640+  6675~            	endif
0640+  6675~            	endif
0640+  6675~            	endif
0640+  6675             
0640+  6687             
0640+  6687~            	endif
0640+  6687~            	endif
0640+  6687             
0641+  6687             	done(1)
0641+  6687~            	done(1)
0641+  6687~            	done(1)
0641+  6687~            	done(1)
0641+  6687~            	done(1)
0641+  6687             
0641+  6687 7E 79 8A    
0642+  668A             
0643+  668A             swCaptiveTarget:
0644+  668A 7C 00 B0    	advBonus()
0645+  668D 96 09       	ldaA	>lc(2)
0646+  668F 85 40       	bitA	lr(7)
0647+  6691             	ifeq ; light off
0647+  6691             
0647+  6691 26 FE       
0648+  6693 BD 7D C7    		score10()
0649+  6696 BD 66 A1    		jsr	captiveAward
0650+  6699             	else
0650+  6699             
0650+  6699             
0650+  6699             
0650+  6699             
0650+  6692             
0650+  6692             
0650+  6692             
0650+  6692~            	else
0650+  6692~            	else
0650+  6692~            	else
0650+  6692~            	else
0650+  6692             
0650+  6692~            	else
0650+  6692~            	else
0650+  6692~            	else
0650+  6692~            	else
0650+  6692             
0650+  6692             
0650+  6692 08          
0650+  6699             
0650+  6699 20 FE       
0650+  669B             
0650+  669B             
0650+  669B             
0650+  669B~            	else
0650+  669B~            	else
0650+  669B~            	else
0650+  669B~            	else
0650+  669B~            	else
0650+  669B             
0650+  669B~            	else
0650+  669B~            	else
0650+  669B             
0650+  669B~            	else
0650+  669B~            	else
0650+  669B             
0651+  669B BD 7D E4    		score1000()
0652+  669E             	endif
0652+  669E             
0652+  669E             
0652+  669E             
0652+  669E             
0652+  669E             
0652+  669E~            	endif
0652+  669E~            	endif
0652+  669E             
0652+  669E~            	endif
0652+  669E~            	endif
0652+  669E             
0652+  669A             
0652+  669A 03          
0652+  669B             
0652+  669B             
0652+  669B~            	endif
0652+  669B~            	endif
0652+  669B~            	endif
0652+  669B             
0652+  669E             
0652+  669E~            	endif
0652+  669E~            	endif
0652+  669E             
0653+  669E             	done(1)
0653+  669E~            	done(1)
0653+  669E~            	done(1)
0653+  669E~            	done(1)
0653+  669E~            	done(1)
0653+  669E             
0653+  669E 7E 79 8A    
0654+  66A1             	
0655+  66A1             captiveAward:
0656+  66A1 86 80       	lampOn(8,2) ; right special
0656+  66A3 9A 09       
0656+  66A5 97 09       
0657+  66A7 96 09       	ldaA	>lc(2)
0658+  66A9 85 08       	bitA	lr(4) ; shoe 1
0659+  66AB             	ifeq
0659+  66AB             
0659+  66AB 26 FE       
0660+  66AD 39          		rts
0661+  66AE             	else
0661+  66AE             
0661+  66AE             
0661+  66AE             
0661+  66AE             
0661+  66AC             
0661+  66AC             
0661+  66AC             
0661+  66AC~            	else
0661+  66AC~            	else
0661+  66AC~            	else
0661+  66AC~            	else
0661+  66AC             
0661+  66AC~            	else
0661+  66AC~            	else
0661+  66AC~            	else
0661+  66AC~            	else
0661+  66AC             
0661+  66AC             
0661+  66AC 03          
0661+  66AE             
0661+  66AE 20 FE       
0661+  66B0             
0661+  66B0             
0661+  66B0             
0661+  66B0~            	else
0661+  66B0~            	else
0661+  66B0~            	else
0661+  66B0~            	else
0661+  66B0~            	else
0661+  66B0             
0661+  66B0~            	else
0661+  66B0~            	else
0661+  66B0             
0661+  66B0~            	else
0661+  66B0~            	else
0661+  66B0             
0662+  66B0 85 20       		bitA	lr(6)
0663+  66B2             		ifne
0663+  66B2             
0663+  66B2 27 FE       
0664+  66B4 86 20       			flashLamp(6,2)
0664+  66B6 9A A1       
0664+  66B8 97 A1       
0665+  66BA             		else
0665+  66BA             
0665+  66BA             
0665+  66BA             
0665+  66BA             
0665+  66B3             
0665+  66B3             
0665+  66B3             
0665+  66B3~            		else
0665+  66B3~            		else
0665+  66B3~            		else
0665+  66B3~            		else
0665+  66B3             
0665+  66B3~            		else
0665+  66B3~            		else
0665+  66B3~            		else
0665+  66B3~            		else
0665+  66B3             
0665+  66B3             
0665+  66B3 08          
0665+  66BA             
0665+  66BA 20 FE       
0665+  66BC             
0665+  66BC             
0665+  66BC             
0665+  66BC~            		else
0665+  66BC~            		else
0665+  66BC~            		else
0665+  66BC~            		else
0665+  66BC~            		else
0665+  66BC             
0665+  66BC~            		else
0665+  66BC~            		else
0665+  66BC             
0665+  66BC~            		else
0665+  66BC~            		else
0665+  66BC             
0666+  66BC 85 10       			bitA	lr(5)
0667+  66BE             			ifne
0667+  66BE             
0667+  66BE 27 FE       
0668+  66C0 86 10       				flashLamp(5,2)
0668+  66C2 9A A1       
0668+  66C4 97 A1       
0669+  66C6             			else
0669+  66C6             
0669+  66C6             
0669+  66C6             
0669+  66C6             
0669+  66BF             
0669+  66BF             
0669+  66BF             
0669+  66BF~            			else
0669+  66BF~            			else
0669+  66BF~            			else
0669+  66BF~            			else
0669+  66BF             
0669+  66BF~            			else
0669+  66BF~            			else
0669+  66BF~            			else
0669+  66BF~            			else
0669+  66BF             
0669+  66BF             
0669+  66BF 08          
0669+  66C6             
0669+  66C6 20 FE       
0669+  66C8             
0669+  66C8             
0669+  66C8             
0669+  66C8~            			else
0669+  66C8~            			else
0669+  66C8~            			else
0669+  66C8~            			else
0669+  66C8~            			else
0669+  66C8             
0669+  66C8~            			else
0669+  66C8~            			else
0669+  66C8             
0669+  66C8~            			else
0669+  66C8~            			else
0669+  66C8             
0670+  66C8 86 08       				flashLamp(4,2)
0670+  66CA 9A A1       
0670+  66CC 97 A1       
0671+  66CE             			endif
0671+  66CE             
0671+  66CE             
0671+  66CE             
0671+  66CE             
0671+  66CE             
0671+  66CE~            			endif
0671+  66CE~            			endif
0671+  66CE             
0671+  66CE~            			endif
0671+  66CE~            			endif
0671+  66CE             
0671+  66C7             
0671+  66C7 06          
0671+  66C8             
0671+  66C8             
0671+  66C8~            			endif
0671+  66C8~            			endif
0671+  66C8~            			endif
0671+  66C8             
0671+  66CE             
0671+  66CE~            			endif
0671+  66CE~            			endif
0671+  66CE             
0672+  66CE             		endif
0672+  66CE             
0672+  66CE             
0672+  66CE             
0672+  66CE             
0672+  66CE             
0672+  66CE~            		endif
0672+  66CE~            		endif
0672+  66CE             
0672+  66CE~            		endif
0672+  66CE~            		endif
0672+  66CE             
0672+  66BB             
0672+  66BB 12          
0672+  66BC             
0672+  66BC             
0672+  66BC~            		endif
0672+  66BC~            		endif
0672+  66BC~            		endif
0672+  66BC             
0672+  66CE             
0672+  66CE~            		endif
0672+  66CE~            		endif
0672+  66CE             
0673+  66CE             	endif
0673+  66CE             
0673+  66CE             
0673+  66CE             
0673+  66CE             
0673+  66CE             
0673+  66CE~            	endif
0673+  66CE~            	endif
0673+  66CE             
0673+  66CE~            	endif
0673+  66CE~            	endif
0673+  66CE             
0673+  66AF             
0673+  66AF 1E          
0673+  66B0             
0673+  66B0             
0673+  66B0~            	endif
0673+  66B0~            	endif
0673+  66B0~            	endif
0673+  66B0             
0673+  66CE             
0673+  66CE~            	endif
0673+  66CE~            	endif
0673+  66CE             
0674+  66CE             	
0675+  66CE 86 04       	ldaA	lr(3)
0676+  66D0 95 09       	bitA	>lc(2)
0677+  66D2             	ifne ; double bonus
0677+  66D2             
0677+  66D2 27 FE       
0678+  66D4 96 B0       		ldaA	>p_Bonus
0679+  66D6             	else
0679+  66D6             
0679+  66D6             
0679+  66D6             
0679+  66D6             
0679+  66D3             
0679+  66D3             
0679+  66D3             
0679+  66D3~            	else
0679+  66D3~            	else
0679+  66D3~            	else
0679+  66D3~            	else
0679+  66D3             
0679+  66D3~            	else
0679+  66D3~            	else
0679+  66D3~            	else
0679+  66D3~            	else
0679+  66D3             
0679+  66D3             
0679+  66D3 04          
0679+  66D6             
0679+  66D6 20 FE       
0679+  66D8             
0679+  66D8             
0679+  66D8             
0679+  66D8~            	else
0679+  66D8~            	else
0679+  66D8~            	else
0679+  66D8~            	else
0679+  66D8~            	else
0679+  66D8             
0679+  66D8~            	else
0679+  66D8~            	else
0679+  66D8             
0679+  66D8~            	else
0679+  66D8~            	else
0679+  66D8             
0680+  66D8 86 01       		ldaA	1
0681+  66DA             	endif	
0681+  66DA             
0681+  66DA             
0681+  66DA             
0681+  66DA             
0681+  66DA             
0681+  66DA~            	endif	
0681+  66DA~            	endif	
0681+  66DA             
0681+  66DA~            	endif	
0681+  66DA~            	endif	
0681+  66DA             
0681+  66D7             
0681+  66D7 02          
0681+  66D8             
0681+  66D8             
0681+  66D8~            	endif	
0681+  66D8~            	endif	
0681+  66D8~            	endif	
0681+  66D8             
0681+  66DA             
0681+  66DA~            	endif	
0681+  66DA~            	endif	
0681+  66DA             
0682+  66DA 97 BE       	staA	p_BonusLeft
0683+  66DC             	
0684+  66DC             captiveAward_bonusLoop:
0685+  66DC BD 7D E4    	score1000()
0686+  66DF 7A 00 B0    	dec	p_Bonus
0687+  66E2 BD 60 C3    	jsr	bonusLights
0688+  66E5 86 19       	delay(200)
0688+  66E7 BD 7D 6B    
0689+  66EA 7D 00 B0    	tst	p_Bonus
0690+  66ED 26 ED       	bne	captiveAward_bonusLoop
0691+  66EF             	
0692+  66EF 86 38       	ldaA	00111000b
0693+  66F1 94 A1       	andA	>flc(2)
0694+  66F3 43          	comA
0695+  66F4 94 09       	andA	>lc(2)
0696+  66F6 97 09       	staA	lc(2)
0697+  66F8             	
0698+  66F8 96 BE       	ldaA	>p_BonusLeft
0699+  66FA 97 B0       	staA	p_Bonus
0700+  66FC             	
0701+  66FC 39          	rts	
0702+  66FD             	
0703+  66FD             	
0704+  66FD             alternate:
0705+  66FD C6 00       	ldaB	0 ; turn on left?
0706+  66FF 86 80       	ldaA	lr(8) ; right special
0707+  6701 95 09       	bitA	>lc(2)
0708+  6703             	ifne
0708+  6703             
0708+  6703 27 FE       
0709+  6705 C6 01       		ldaB	1
0710+  6707 86 7F       		lampOff(8,2) ; right special
0710+  6709 94 09       
0710+  670B 97 09       
0711+  670D             	endif
0711+  670D             
0711+  670D             
0711+  670D             
0711+  670D             
0711+  670D             
0711+  670D~            	endif
0711+  670D~            	endif
0711+  670D             
0711+  670D~            	endif
0711+  670D~            	endif
0711+  670D             
0711+  6704             
0711+  6704 08          
0711+  6705             
0711+  6705             
0711+  6705~            	endif
0711+  6705~            	endif
0711+  6705~            	endif
0711+  6705             
0711+  670D             
0711+  670D~            	endif
0711+  670D~            	endif
0711+  670D             
0712+  670D 86 02       	ldaA	lr(2) ; left special
0713+  670F 95 0A       	bitA	>lc(3)
0714+  6711             	ifne
0714+  6711             
0714+  6711 27 FE       
0715+  6713 86 80       		lampOn(8,2) ; right special
0715+  6715 9A 09       
0715+  6717 97 09       
0716+  6719 86 FD       		lampOff(2,3) ; left special
0716+  671B 94 0A       
0716+  671D 97 0A       
0717+  671F             	endif
0717+  671F             
0717+  671F             
0717+  671F             
0717+  671F             
0717+  671F             
0717+  671F~            	endif
0717+  671F~            	endif
0717+  671F             
0717+  671F~            	endif
0717+  671F~            	endif
0717+  671F             
0717+  6712             
0717+  6712 0C          
0717+  6713             
0717+  6713             
0717+  6713~            	endif
0717+  6713~            	endif
0717+  6713~            	endif
0717+  6713             
0717+  671F             
0717+  671F~            	endif
0717+  671F~            	endif
0717+  671F             
0718+  671F 5D          	tstB
0719+  6720             	ifne
0719+  6720             
0719+  6720 27 FE       
0720+  6722 86 02       		lampOn(2,3) ; left special
0720+  6724 9A 0A       
0720+  6726 97 0A       
0721+  6728             	endif
0721+  6728             
0721+  6728             
0721+  6728             
0721+  6728             
0721+  6728             
0721+  6728~            	endif
0721+  6728~            	endif
0721+  6728             
0721+  6728~            	endif
0721+  6728~            	endif
0721+  6728             
0721+  6721             
0721+  6721 06          
0721+  6722             
0721+  6722             
0721+  6722~            	endif
0721+  6722~            	endif
0721+  6722~            	endif
0721+  6722             
0721+  6728             
0721+  6728~            	endif
0721+  6728~            	endif
0721+  6728             
0722+  6728 39          	rts
0723+  6729             	
0724+  6729             addCollect:
0725+  6729 96 09       	ldaA	>lc(2)
0726+  672B 85 08       	bitA	lr(4)
0727+  672D             	ifeq
0727+  672D             
0727+  672D 26 FE       
0728+  672F 86 08       		lampOn(4,2)
0728+  6731 9A 09       
0728+  6733 97 09       
0729+  6735 86 08       		flashLamp(4,2)
0729+  6737 9A A1       
0729+  6739 97 A1       
0730+  673B             	else
0730+  673B             
0730+  673B             
0730+  673B             
0730+  673B             
0730+  672E             
0730+  672E             
0730+  672E             
0730+  672E~            	else
0730+  672E~            	else
0730+  672E~            	else
0730+  672E~            	else
0730+  672E             
0730+  672E~            	else
0730+  672E~            	else
0730+  672E~            	else
0730+  672E~            	else
0730+  672E             
0730+  672E             
0730+  672E 0E          
0730+  673B             
0730+  673B 20 FE       
0730+  673D             
0730+  673D             
0730+  673D             
0730+  673D~            	else
0730+  673D~            	else
0730+  673D~            	else
0730+  673D~            	else
0730+  673D~            	else
0730+  673D             
0730+  673D~            	else
0730+  673D~            	else
0730+  673D             
0730+  673D~            	else
0730+  673D~            	else
0730+  673D             
0731+  673D 85 10       		bitA	lr(5)
0732+  673F             		ifeq
0732+  673F             
0732+  673F 26 FE       
0733+  6741 86 10       			lampOn(5,2)
0733+  6743 9A 09       
0733+  6745 97 09       
0734+  6747 86 10       			flashLamp(5,2)
0734+  6749 9A A1       
0734+  674B 97 A1       
0735+  674D             		else
0735+  674D             
0735+  674D             
0735+  674D             
0735+  674D             
0735+  6740             
0735+  6740             
0735+  6740             
0735+  6740~            		else
0735+  6740~            		else
0735+  6740~            		else
0735+  6740~            		else
0735+  6740             
0735+  6740~            		else
0735+  6740~            		else
0735+  6740~            		else
0735+  6740~            		else
0735+  6740             
0735+  6740             
0735+  6740 0E          
0735+  674D             
0735+  674D 20 FE       
0735+  674F             
0735+  674F             
0735+  674F             
0735+  674F~            		else
0735+  674F~            		else
0735+  674F~            		else
0735+  674F~            		else
0735+  674F~            		else
0735+  674F             
0735+  674F~            		else
0735+  674F~            		else
0735+  674F             
0735+  674F~            		else
0735+  674F~            		else
0735+  674F             
0736+  674F 85 20       			bitA	lr(6)
0737+  6751             			ifeq
0737+  6751             
0737+  6751 26 FE       
0738+  6753 86 20       				lampOn(6,2)
0738+  6755 9A 09       
0738+  6757 97 09       
0739+  6759 86 20       				flashLamp(6,2)
0739+  675B 9A A1       
0739+  675D 97 A1       
0740+  675F             			else
0740+  675F             
0740+  675F             
0740+  675F             
0740+  675F             
0740+  6752             
0740+  6752             
0740+  6752             
0740+  6752~            			else
0740+  6752~            			else
0740+  6752~            			else
0740+  6752~            			else
0740+  6752             
0740+  6752~            			else
0740+  6752~            			else
0740+  6752~            			else
0740+  6752~            			else
0740+  6752             
0740+  6752             
0740+  6752 0E          
0740+  675F             
0740+  675F 20 FE       
0740+  6761             
0740+  6761             
0740+  6761             
0740+  6761~            			else
0740+  6761~            			else
0740+  6761~            			else
0740+  6761~            			else
0740+  6761~            			else
0740+  6761             
0740+  6761~            			else
0740+  6761~            			else
0740+  6761             
0740+  6761~            			else
0740+  6761~            			else
0740+  6761             
0741+  6761 BD 7D E4    				score1000()
0742+  6764 86 04       				lampOn(3,3)
0742+  6766 9A 0A       
0742+  6768 97 0A       
0743+  676A             			endif
0743+  676A             
0743+  676A             
0743+  676A             
0743+  676A             
0743+  676A             
0743+  676A~            			endif
0743+  676A~            			endif
0743+  676A             
0743+  676A~            			endif
0743+  676A~            			endif
0743+  676A             
0743+  6760             
0743+  6760 09          
0743+  6761             
0743+  6761             
0743+  6761~            			endif
0743+  6761~            			endif
0743+  6761~            			endif
0743+  6761             
0743+  676A             
0743+  676A~            			endif
0743+  676A~            			endif
0743+  676A             
0744+  676A             		endif
0744+  676A             
0744+  676A             
0744+  676A             
0744+  676A             
0744+  676A             
0744+  676A~            		endif
0744+  676A~            		endif
0744+  676A             
0744+  676A~            		endif
0744+  676A~            		endif
0744+  676A             
0744+  674E             
0744+  674E 1B          
0744+  674F             
0744+  674F             
0744+  674F~            		endif
0744+  674F~            		endif
0744+  674F~            		endif
0744+  674F             
0744+  676A             
0744+  676A~            		endif
0744+  676A~            		endif
0744+  676A             
0745+  676A             	endif
0745+  676A             
0745+  676A             
0745+  676A             
0745+  676A             
0745+  676A             
0745+  676A~            	endif
0745+  676A~            	endif
0745+  676A             
0745+  676A~            	endif
0745+  676A~            	endif
0745+  676A             
0745+  673C             
0745+  673C 2D          
0745+  673D             
0745+  673D             
0745+  673D~            	endif
0745+  673D~            	endif
0745+  673D~            	endif
0745+  673D             
0745+  676A             
0745+  676A~            	endif
0745+  676A~            	endif
0745+  676A             
0746+  676A 39          	rts
0747+  676B             	
0748+  676B             ; end callbacks
0749+  676B             	.msfirst
0750+  676B             ; needs to be on $**00 address
0751+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0752+  6000 62 3F       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0752+  6002 62 3F       
0752+  6004 62 58       
0752+  6006 60 C0       
0752+  6008 60 C0       
0752+  600A 60 C0       
0752+  600C 62 3F       
0752+  600E 60 C0       
0753+  6010 62 8F       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0753+  6012 62 3F       
0753+  6014 65 54       
0753+  6016 65 7A       
0753+  6018 65 83       
0753+  601A 65 98       
0753+  601C 66 6A       
0753+  601E 66 8A       
0754+  6020 65 E8       	.dw swDropTip	\.dw swDroptIp\.dw swDroptiP\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0754+  6022 65 F2       
0754+  6024 65 FC       
0754+  6026 66 4B       
0754+  6028 65 83       
0754+  602A 64 00       
0754+  602C 65 83       
0754+  602E 60 C0       
0755+  6030 65 ED       	.dw swDropHot	\.dw swDrophOt\.dw swDrophoT\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0755+  6032 65 F7       
0755+  6034 66 01       
0755+  6036 65 83       
0755+  6038 63 6C       
0755+  603A 66 54       
0755+  603C 65 DF       
0755+  603E 65 98       
0756+  6040 65 2E       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0756+  6042 65 7A       
0756+  6044 65 83       
0756+  6046 60 C0       
0756+  6048 64 E9       
0756+  604A 60 C0       
0756+  604C 60 C0       
0756+  604E 60 C0       
0757+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0757+  6052 60 C0       
0757+  6054 60 C0       
0757+  6056 60 C0       
0757+  6058 60 C0       
0757+  605A 60 C0       
0757+  605C 60 C0       
0757+  605E 60 C0       
0758+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0758+  6062 60 C0       
0758+  6064 60 C0       
0758+  6066 60 C0       
0758+  6068 60 C0       
0758+  606A 60 C0       
0758+  606C 60 C0       
0758+  606E 60 C0       
0759+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0759+  6072 60 C0       
0759+  6074 60 C0       
0759+  6076 60 C0       
0759+  6078 60 C0       
0759+  607A 60 C0       
0759+  607C 60 C0       
0759+  607E 60 C0       
0760+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0761+  6080             ; off = how many cycles it must be off for
0762+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0763+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0764+  6080             ; TRANSPOSED (?)
0765+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0766+  6080             settleTable: ; must be right after callbackTable
0767+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0767+  6081 87          
0767+  6082 C2          
0767+  6083 47          
0767+  6084 47          
0767+  6085 47          
0767+  6086 87          
0767+  6087 47          
0768+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0768+  6089 87          
0768+  608A 87          
0768+  608B 87          
0768+  608C 81          
0768+  608D 81          
0768+  608E 80          
0768+  608F 87          
0769+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,3,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0769+  6091 87          
0769+  6092 87          
0769+  6093 83          
0769+  6094 83          
0769+  6095 E1          
0769+  6096 81          
0769+  6097 80          
0770+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,1,1,0)
0770+  6099 87          
0770+  609A 87          
0770+  609B 81          
0770+  609C E1          
0770+  609D 80          
0770+  609E 80          
0770+  609F 81          
0771+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0771+  60A1 87          
0771+  60A2 81          
0771+  60A3 47          
0771+  60A4 80          
0771+  60A5 47          
0771+  60A6 47          
0771+  60A7 47          
0772+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0772+  60A9 47          
0772+  60AA 47          
0772+  60AB 47          
0772+  60AC 47          
0772+  60AD 47          
0772+  60AE 47          
0772+  60AF 47          
0773+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0773+  60B1 47          
0773+  60B2 47          
0773+  60B3 47          
0773+  60B4 47          
0773+  60B5 47          
0773+  60B6 47          
0773+  60B7 47          
0774+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0774+  60B9 47          
0774+  60BA 47          
0774+  60BB 47          
0774+  60BC 47          
0774+  60BD 47          
0774+  60BE 47          
0774+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 7D       	ldaA	attractStart >> 8
0102   78AF 97 2A       	staA	attractX
0103   78B1 86 9F       	ldaA	attractStart&$FF
0104   78B3 97 2B       	staA	attractX + 1
0105   78B5             	
0106   78B5 86 FF       	ldaA	$FF	
0107   78B7 B7 28 00    	staA 	displayStrobe
0108   78BA             
0109   78BA 86 00       	ldaA	00
0110   78BC 97 07       	staA	strobe
0111   78BE B7 01 6A    	staA	displayCol
0112   78C1             	
0113   78C1 CE 00 00    	ldX 	0
0114   78C4 DF 50       	stX		curCol
0115   78C6             	
0116   78C6 86 00       	ldaA	0
0117   78C8 97 10       	staA	curSwitchRowLsb
0118   78CA             	
0119   78CA             ; fill solenoid status with off
0120   78CA 86 0F       	ldaA	$F
0121   78CC CE 01 40    	ldX	solenoid1
0122   78CF             lSolDefault:
0123   78CF A7 00       	staA	0, X
0124   78D1 08          	inX
0125   78D2 8C 01 4F    	cpX	solenoid16
0126   78D5 26 F8       	bne	lSolDefault
0127   78D7             	
0128   78D7             ; clear 8 banks
0129   78D7 86 00       	ldaA 	0
0130   78D9 CE 00 00    	ldX	0
0131   78DC             lClear8:
0132   78DC A7 08       	staA	lampCol1, X
0133   78DE A7 A0       	staA	flashLampCol1, X
0134   78E0 A7 80       	staA	waitLeft, X
0135   78E2 08          	inX
0136   78E3 8C 00 08    	cpX	8
0137   78E6 26 F4       	bne 	lClear8
0138   78E8             	
0139   78E8             ; empty settle
0140   78E8 86 00       	ldaA	$00
0141   78EA CE 01 00    	ldX	settleRow1
0142   78ED             lSettleDefault:
0143   78ED A7 00       	staA	0, X
0144   78EF 08          	inX
0145   78F0 8C 01 3F    	cpX	settleRow8End
0146   78F3 26 F8       	bne	lSettleDefault
0147   78F5             	
0148   78F5             ; empty queue
0149   78F5 86 FF       	ldaA	$FF
0150   78F7 CE 00 60    	ldX	queue
0151   78FA             lEmptyQueue:
0152   78FA A7 00       	staA	0, X
0153   78FC 08          	inX
0154   78FD 8C 00 6D    	cpX	queueEnd
0155   7900 26 F8       	bne	lEmptyQueue
0156   7902             	
0157   7902 86 00       	ldaA	0
0158   7904 97 54       	staA	queueHead + 0
0159   7906 97 56       	staA	queueTail + 0
0160   7908 86 60       	ldaA	queue
0161   790A 97 55       	staA	queueHead + 1
0162   790C 97 57       	staA	queueTail + 1
0163   790E             	
0164   790E             ; test numbers
0165   790E 86 20       	lampOn(6,8) ; game over
0165   7910 9A 0F       
0165   7912 97 0F       
0166   7914             
0167   7914             	
0168   7914 BD 7D 80    	jsr resetScores
0169   7917             	
0170   7917             ; setup complete
0171   7917 0E          	clI		; enable timer interrupt
0172   7918             	
0173   7918             	
0174   7918             end:
0175   7918 B6 01 6B    	ldaA	>state
0176   791B 85 04       	bitA	100b
0177   791D             	ifne
0177   791D             
0177   791D 27 FE       
0178   791F             		; dec wait timers
0179   791F CE 00 7F    		ldX	waitLeft - 1
0180   7922             decWaitTimers:
0181   7922 08          		inX
0182   7923 A6 00       		ldaA	0, X
0183   7925             		ifne
0183   7925             
0183   7925 27 FE       
0184   7927 4A          			decA
0185   7928 A7 00       			staA	0, X
0186   792A             			ifeq
0186   792A             
0186   792A 26 FE       
0187   792C A6 08       				ldaA	waitMsb - waitLeft, X
0188   792E 97 58       				staA	tempQ
0189   7930 A6 10       				ldaA	waitLsb - waitLeft, X
0190   7932 97 59       				staA	tempQ + 1
0191   7934 E6 18       				ldaB	waitReg - waitLeft, X
0192   7936 DE 58       				ldX	>tempQ
0193   7938 6E 00       				jmp	0, X
0194   793A             			endif
0194   793A             
0194   793A             
0194   793A             
0194   793A             
0194   793A             
0194   793A~            			endif
0194   793A~            			endif
0194   793A             
0194   793A~            			endif
0194   793A~            			endif
0194   793A             
0194   792B             
0194   792B 0E          
0194   792C             
0194   792C             
0194   792C~            			endif
0194   792C~            			endif
0194   792C~            			endif
0194   792C             
0194   793A             
0194   793A~            			endif
0194   793A~            			endif
0194   793A             
0195   793A             		endif
0195   793A             
0195   793A             
0195   793A             
0195   793A             
0195   793A             
0195   793A~            		endif
0195   793A~            		endif
0195   793A             
0195   793A~            		endif
0195   793A~            		endif
0195   793A             
0195   7926             
0195   7926 13          
0195   7927             
0195   7927             
0195   7927~            		endif
0195   7927~            		endif
0195   7927~            		endif
0195   7927             
0195   793A             
0195   793A~            		endif
0195   793A~            		endif
0195   793A             
0196   793A 8C 00 87    		cpX	waitLeftEnd
0197   793D 26 E3       		bne	decWaitTimers
0198   793F             		
0199   793F             		
0200   793F 7A 00 A9    		dec	dropResetTimer
0201   7942             		ifmi
0201   7942             
0201   7942 2A FE       
0202   7944 7C 00 A9    			inc	dropResetTimer
0203   7947             		endif
0203   7947             
0203   7947             
0203   7947             
0203   7947             
0203   7947             
0203   7947~            		endif
0203   7947~            		endif
0203   7947             
0203   7947~            		endif
0203   7947~            		endif
0203   7947             
0203   7943             
0203   7943 03          
0203   7944             
0203   7944             
0203   7944~            		endif
0203   7944~            		endif
0203   7944~            		endif
0203   7944             
0203   7947             
0203   7947~            		endif
0203   7947~            		endif
0203   7947             
0204   7947             		
0205   7947 B6 01 6B    		ldaA	>state		; clear strobe reset bit
0206   794A 84 FB       		andA	11111011b
0207   794C B7 01 6B    		staA	state
0208   794F             	endif
0208   794F             
0208   794F             
0208   794F             
0208   794F             
0208   794F             
0208   794F~            	endif
0208   794F~            	endif
0208   794F             
0208   794F~            	endif
0208   794F~            	endif
0208   794F             
0208   791E             
0208   791E 30          
0208   791F             
0208   791F             
0208   791F~            	endif
0208   791F~            	endif
0208   791F~            	endif
0208   791F             
0208   794F             
0208   794F~            	endif
0208   794F~            	endif
0208   794F             
0209   794F             
0210   794F             		
0211   794F             ; pop queue
0212   794F D6 57       	ldaB	>queueTail + 1
0213   7951 D1 55       	cmpB	>queueHead + 1
0214   7953             	ifeq
0214   7953             
0214   7953 26 FE       
0215   7955 7E 79 E9    		jmp skipQueue
0216   7958             	endif
0216   7958             
0216   7958             
0216   7958             
0216   7958             
0216   7958             
0216   7958~            	endif
0216   7958~            	endif
0216   7958             
0216   7958~            	endif
0216   7958~            	endif
0216   7958             
0216   7954             
0216   7954 03          
0216   7955             
0216   7955             
0216   7955~            	endif
0216   7955~            	endif
0216   7955~            	endif
0216   7955             
0216   7958             
0216   7958~            	endif
0216   7958~            	endif
0216   7958             
0217   7958             	
0218   7958 DE 54       	ldX	>queueHead
0219   795A A6 00       	ldaA	0, X	; A now contains the first queue item
0220   795C             	
0221   795C 16          	tAB
0222   795D C4 3F       	andB	00111111b ; B = callback index
0223   795F             	
0224   795F D7 59       	staB	tempQ + 1
0225   7961 C6 60       	ldaB	callbackTable >> 8
0226   7963 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0227   7965 DE 58       	ldX	>tempQ
0228   7967             	
0229   7967 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0230   7969 C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0231   796B             	ifne ; if closure only
0231   796B             
0231   796B 27 FE       
0232   796D 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0233   796F 26 62       		bne	skipEvent
0234   7971             	endif
0234   7971             
0234   7971             
0234   7971             
0234   7971             
0234   7971             
0234   7971~            	endif
0234   7971~            	endif
0234   7971             
0234   7971~            	endif
0234   7971~            	endif
0234   7971             
0234   796C             
0234   796C 04          
0234   796D             
0234   796D             
0234   796D~            	endif
0234   796D~            	endif
0234   796D~            	endif
0234   796D             
0234   7971             
0234   7971~            	endif
0234   7971~            	endif
0234   7971             
0235   7971             	
0236   7971 C5 40       	bitB	01000000b ; B.7 = active in game over
0237   7973             	ifeq 	 ; not active in game over
0237   7973             
0237   7973 26 FE       
0238   7975 D6 0F       		ldaB	>lc(8)	; gameover mask
0239   7977 C5 20       		bitB	lr(6)
0240   7979 26 58       		bne	skipEvent
0241   797B D6 0F       		ldaB	>lc(8) ; tilt bit
0242   797D C5 10       		bitB	lr(5)
0243   797F 26 52       		bne	skipEvent
0244   7981             	endif
0244   7981             
0244   7981             
0244   7981             
0244   7981             
0244   7981             
0244   7981~            	endif
0244   7981~            	endif
0244   7981             
0244   7981~            	endif
0244   7981~            	endif
0244   7981             
0244   7974             
0244   7974 0C          
0244   7975             
0244   7975             
0244   7975~            	endif
0244   7975~            	endif
0244   7975~            	endif
0244   7975             
0244   7981             
0244   7981~            	endif
0244   7981~            	endif
0244   7981             
0245   7981             	
0246   7981             	; checked passed, do callback
0247   7981 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0248   7984 DE 58       	ldX	>tempQ
0249   7986 EE 00       	ldX	0, X
0250   7988 6E 00       	jmp	0, X
0251   798A             	; everything trashed
0252   798A             afterQueueEvent:
0253   798A BD 60 C3    	jsr 	bonusLights
0254   798D             	
0255   798D             	; update last switch
0256   798D 96 59       	ldaA	> tempQ + 1
0257   798F 44          	lsrA 	; got doubled earlier
0258   7990 97 A8       	staA	lastSwitch
0259   7992             
0260   7992 86 02       	ldaA	10b ; no validate bit
0261   7994 B5 01 6B    	bitA	>state
0262   7997             	ifeq ; validate pf
0262   7997             
0262   7997 26 FE       
0263   7999             		; check if playfield invalid
0264   7999 86 0F       		ldaA	00001111b ; player up
0265   799B 95 A7       		bitA	>flc(8)
0266   799D             		ifne ; any flashing -> pf invalid
0266   799D             
0266   799D 27 FE       
0267   799F 43          			comA	; turn off flashing
0268   79A0 94 A7       			andA	>flc(8)
0269   79A2 97 A7       			staA	flc(8)
0270   79A4             			
0271   79A4 86 01       			ldaA	lr(1) ; shoot again pf flashing
0272   79A6 95 A2       			bitA	>flc(3)
0273   79A8             			ifne
0273   79A8             
0273   79A8 27 FE       
0274   79AA             				; turn off ball save
0275   79AA 86 FE       				flashOff(1,3)
0275   79AC 94 A2       
0275   79AE 97 A2       
0276   79B0 86 40       				ldaA	lr(7) ; shoot again backbox
0277   79B2 95 0F       				bitA	>lc(8)
0278   79B4             				ifeq
0278   79B4             
0278   79B4 26 FE       
0279   79B6 86 FE       					lampOff(1,3) ; shoot again pf
0279   79B8 94 0A       
0279   79BA 97 0A       
0280   79BC             				endif
0280   79BC             
0280   79BC             
0280   79BC             
0280   79BC             
0280   79BC             
0280   79BC~            				endif
0280   79BC~            				endif
0280   79BC             
0280   79BC~            				endif
0280   79BC~            				endif
0280   79BC             
0280   79B5             
0280   79B5 06          
0280   79B6             
0280   79B6             
0280   79B6~            				endif
0280   79B6~            				endif
0280   79B6~            				endif
0280   79B6             
0280   79BC             
0280   79BC~            				endif
0280   79BC~            				endif
0280   79BC             
0281   79BC             			else
0281   79BC             
0281   79BC             
0281   79BC             
0281   79BC             
0281   79A9             
0281   79A9             
0281   79A9             
0281   79A9~            			else
0281   79A9~            			else
0281   79A9~            			else
0281   79A9~            			else
0281   79A9             
0281   79A9~            			else
0281   79A9~            			else
0281   79A9~            			else
0281   79A9~            			else
0281   79A9             
0281   79A9             
0281   79A9 14          
0281   79BC             
0281   79BC 20 FE       
0281   79BE             
0281   79BE             
0281   79BE             
0281   79BE~            			else
0281   79BE~            			else
0281   79BE~            			else
0281   79BE~            			else
0281   79BE~            			else
0281   79BE             
0281   79BE~            			else
0281   79BE~            			else
0281   79BE             
0281   79BE~            			else
0281   79BE~            			else
0281   79BE             
0282   79BE 86 FE       				lampOff(1,3) ; shoot again
0282   79C0 94 0A       
0282   79C2 97 0A       
0283   79C4 86 BF       				lampOff(7,8)
0283   79C6 94 0F       
0283   79C8 97 0F       
0284   79CA             			endif
0284   79CA             
0284   79CA             
0284   79CA             
0284   79CA             
0284   79CA             
0284   79CA~            			endif
0284   79CA~            			endif
0284   79CA             
0284   79CA~            			endif
0284   79CA~            			endif
0284   79CA             
0284   79BD             
0284   79BD 0C          
0284   79BE             
0284   79BE             
0284   79BE~            			endif
0284   79BE~            			endif
0284   79BE~            			endif
0284   79BE             
0284   79CA             
0284   79CA~            			endif
0284   79CA~            			endif
0284   79CA             
0285   79CA             		endif
0285   79CA             
0285   79CA             
0285   79CA             
0285   79CA             
0285   79CA             
0285   79CA~            		endif
0285   79CA~            		endif
0285   79CA             
0285   79CA~            		endif
0285   79CA~            		endif
0285   79CA             
0285   799E             
0285   799E 2B          
0285   799F             
0285   799F             
0285   799F~            		endif
0285   799F~            		endif
0285   799F~            		endif
0285   799F             
0285   79CA             
0285   79CA~            		endif
0285   79CA~            		endif
0285   79CA             
0286   79CA             	else
0286   79CA             
0286   79CA             
0286   79CA             
0286   79CA             
0286   7998             
0286   7998             
0286   7998             
0286   7998~            	else
0286   7998~            	else
0286   7998~            	else
0286   7998~            	else
0286   7998             
0286   7998~            	else
0286   7998~            	else
0286   7998~            	else
0286   7998~            	else
0286   7998             
0286   7998             
0286   7998 33          
0286   79CA             
0286   79CA 20 FE       
0286   79CC             
0286   79CC             
0286   79CC             
0286   79CC~            	else
0286   79CC~            	else
0286   79CC~            	else
0286   79CC~            	else
0286   79CC~            	else
0286   79CC             
0286   79CC~            	else
0286   79CC~            	else
0286   79CC             
0286   79CC~            	else
0286   79CC~            	else
0286   79CC             
0287   79CC             		; clear don't validate bit
0288   79CC 43          		comA
0289   79CD B4 01 6B    		andA	>state
0290   79D0 B7 01 6B    		staA	state
0291   79D3             	endif
0291   79D3             
0291   79D3             
0291   79D3             
0291   79D3             
0291   79D3             
0291   79D3~            	endif
0291   79D3~            	endif
0291   79D3             
0291   79D3~            	endif
0291   79D3~            	endif
0291   79D3             
0291   79CB             
0291   79CB 07          
0291   79CC             
0291   79CC             
0291   79CC~            	endif
0291   79CC~            	endif
0291   79CC~            	endif
0291   79CC             
0291   79D3             
0291   79D3~            	endif
0291   79D3~            	endif
0291   79D3             
0292   79D3             	
0293   79D3             skipEvent:
0294   79D3 B6 01 6B    	ldaA	>state
0295   79D6 85 04       	bitA	100b
0296   79D8             	ifeq	; don't process queue if still finishing timers
0296   79D8             
0296   79D8 26 FE       
0297   79DA C6 6D       		ldaB	queueEnd
0298   79DC D1 55       		cmpB	>queueHead + 1
0299   79DE             		ifeq
0299   79DE             
0299   79DE 26 FE       
0300   79E0 C6 60       			ldaB	queue
0301   79E2 D7 55       			staB	queueHead + 1
0302   79E4             		else
0302   79E4             
0302   79E4             
0302   79E4             
0302   79E4             
0302   79DF             
0302   79DF             
0302   79DF             
0302   79DF~            		else
0302   79DF~            		else
0302   79DF~            		else
0302   79DF~            		else
0302   79DF             
0302   79DF~            		else
0302   79DF~            		else
0302   79DF~            		else
0302   79DF~            		else
0302   79DF             
0302   79DF             
0302   79DF 06          
0302   79E4             
0302   79E4 20 FE       
0302   79E6             
0302   79E6             
0302   79E6             
0302   79E6~            		else
0302   79E6~            		else
0302   79E6~            		else
0302   79E6~            		else
0302   79E6~            		else
0302   79E6             
0302   79E6~            		else
0302   79E6~            		else
0302   79E6             
0302   79E6~            		else
0302   79E6~            		else
0302   79E6             
0303   79E6 7C 00 55    			inc	queueHead + 1
0304   79E9             		endif
0304   79E9             
0304   79E9             
0304   79E9             
0304   79E9             
0304   79E9             
0304   79E9~            		endif
0304   79E9~            		endif
0304   79E9             
0304   79E9~            		endif
0304   79E9~            		endif
0304   79E9             
0304   79E5             
0304   79E5 03          
0304   79E6             
0304   79E6             
0304   79E6~            		endif
0304   79E6~            		endif
0304   79E6~            		endif
0304   79E6             
0304   79E9             
0304   79E9~            		endif
0304   79E9~            		endif
0304   79E9             
0305   79E9             	endif
0305   79E9             
0305   79E9             
0305   79E9             
0305   79E9             
0305   79E9             
0305   79E9~            	endif
0305   79E9~            	endif
0305   79E9             
0305   79E9~            	endif
0305   79E9~            	endif
0305   79E9             
0305   79D9             
0305   79D9 0F          
0305   79DA             
0305   79DA             
0305   79DA~            	endif
0305   79DA~            	endif
0305   79DA~            	endif
0305   79DA             
0305   79E9             
0305   79E9~            	endif
0305   79E9~            	endif
0305   79E9             
0306   79E9             				
0307   79E9             skipQueue:
0308   79E9             				
0309   79E9             	
0310   79E9             				
0311   79E9 7E 79 18    	jmp		end
0312   79EC 00 00       	.dw 0
0313   79EE 00 00       	.dw 0
0314   79F0 00 00       	.dw 0
0315   79F2 00 00       	.dw 0
0316   79F4 00 00       	.dw 0
0317   79F6             		
0318   79F6             interrupt:	
0319   79F6 7C 00 02    	inc	counter
0320   79F9 86 00       	ldaA	0
0321   79FB 91 02       	cmpA	>counter
0322   79FD 26 49       	bne	counterHandled
0323   79FF             	
0324   79FF 86 20       	ldaA	lr(6) ; gameover
0325   7A01 95 0F       		bitA	> lc(8)
0326   7A03             		ifne
0326   7A03             
0326   7A03 27 FE       
0327   7A05 DE 2A       		ldX	>attractX
0328   7A07 A6 00       		ldaA	0, X
0329   7A09 97 09       		staA	lc(2)
0330   7A0B A6 01       		ldaA	1, X
0331   7A0D 97 0A       		staA	lc(3)
0332   7A0F A6 02       		ldaA	2, X
0333   7A11 97 0B       		staA	lc(4)
0334   7A13 A6 03       		ldaA	3, X
0335   7A15 97 0C       		staA	lc(5)
0336   7A17 A6 04       		ldaA	4, X
0337   7A19 97 0D       		staA	lc(6)
0338   7A1B 96 2B       		ldaA	>attractX + 1
0339   7A1D 8B 05       		addA	5
0340   7A1F 81 C7       		cmpA	attractEnd&$FF
0341   7A21             		ifeq
0341   7A21             
0341   7A21 26 FE       
0342   7A23 86 9F       			ldaA	attractStart&$FF
0343   7A25             		endif
0343   7A25             
0343   7A25             
0343   7A25             
0343   7A25             
0343   7A25             
0343   7A25~            		endif
0343   7A25~            		endif
0343   7A25             
0343   7A25~            		endif
0343   7A25~            		endif
0343   7A25             
0343   7A22             
0343   7A22 02          
0343   7A23             
0343   7A23             
0343   7A23~            		endif
0343   7A23~            		endif
0343   7A23~            		endif
0343   7A23             
0343   7A25             
0343   7A25~            		endif
0343   7A25~            		endif
0343   7A25             
0344   7A25 97 2B       		staA	attractX + 1
0345   7A27             	endif
0345   7A27             
0345   7A27             
0345   7A27             
0345   7A27             
0345   7A27             
0345   7A27~            	endif
0345   7A27~            	endif
0345   7A27             
0345   7A27~            	endif
0345   7A27~            	endif
0345   7A27             
0345   7A04             
0345   7A04 22          
0345   7A05             
0345   7A05             
0345   7A05~            	endif
0345   7A05~            	endif
0345   7A05~            	endif
0345   7A05             
0345   7A27             
0345   7A27~            	endif
0345   7A27~            	endif
0345   7A27             
0346   7A27             	
0347   7A27 7C 00 03    	inc 	counter2
0348   7A2A 86 04       	ldaA	4
0349   7A2C 91 03       	cmpA	>counter2
0350   7A2E 26 18       	bne	counterHandled
0351   7A30             	
0352   7A30 86 00       	ldaA	0
0353   7A32 97 03       	staA	counter2
0354   7A34 86 77       	ldaA	01110111b
0355   7A36 91 7E       	cmpA	>displayBcd1 + 14
0356   7A38 27 08       	beq	on
0357   7A3A             	
0358   7A3A 86 F0       	ldaA	$F0
0359   7A3C             	;staA	lampRow1
0360   7A3C 86 77       	ldaA	01110111b
0361   7A3E 97 7E       	staA	displayBcd1	 + 14
0362   7A40 20 06       	bra	counterHandled
0363   7A42             on:
0364   7A42 86 0F       	ldaA	$0F
0365   7A44             	;staA	lampRow1
0366   7A44 86 33       	ldaA	00110011b
0367   7A46 97 7E       	staA	displayBcd1	 + 14
0368   7A48             
0369   7A48             counterHandled:
0370   7A48             ; move switch column
0371   7A48 96 07       	ldaA	>strobe
0372   7A4A B7 30 02    	staA	switchStrobe
0373   7A4D             	
0374   7A4D             ; update display 
0375   7A4D             	
0376   7A4D 96 BF       	ldaA	>$BF
0377   7A4F 97 7F       	staA	displayBcd1 + 15
0378   7A51 96 6F       	ldaA	>$6F
0379   7A53 97 76       	staA	displayBcd1 + 6
0380   7A55             	
0381   7A55 DE 50       	ldX	>curCol
0382   7A57 B6 01 6A    	ldaA	>displayCol
0383   7A5A 84 0F       	andA	1111b
0384   7A5C C6 FF       	ldaB 	$FF
0385   7A5E F7 28 02    	staB	displayBcd
0386   7A61 B7 28 00    	staA	displayStrobe
0387   7A64 85 08       	bitA	00001000b
0388   7A66             	ifeq
0388   7A66             
0388   7A66 26 FE       
0389   7A68 E6 70       		ldaB	displayBcd1, X
0390   7A6A             	else
0390   7A6A             
0390   7A6A             
0390   7A6A             
0390   7A6A             
0390   7A67             
0390   7A67             
0390   7A67             
0390   7A67~            	else
0390   7A67~            	else
0390   7A67~            	else
0390   7A67~            	else
0390   7A67             
0390   7A67~            	else
0390   7A67~            	else
0390   7A67~            	else
0390   7A67~            	else
0390   7A67             
0390   7A67             
0390   7A67 04          
0390   7A6A             
0390   7A6A 20 FE       
0390   7A6C             
0390   7A6C             
0390   7A6C             
0390   7A6C~            	else
0390   7A6C~            	else
0390   7A6C~            	else
0390   7A6C~            	else
0390   7A6C~            	else
0390   7A6C             
0390   7A6C~            	else
0390   7A6C~            	else
0390   7A6C             
0390   7A6C~            	else
0390   7A6C~            	else
0390   7A6C             
0391   7A6C E6 78       		ldaB	displayBcd1 + 8, X
0392   7A6E             	endif
0392   7A6E             
0392   7A6E             
0392   7A6E             
0392   7A6E             
0392   7A6E             
0392   7A6E~            	endif
0392   7A6E~            	endif
0392   7A6E             
0392   7A6E~            	endif
0392   7A6E~            	endif
0392   7A6E             
0392   7A6B             
0392   7A6B 02          
0392   7A6C             
0392   7A6C             
0392   7A6C~            	endif
0392   7A6C~            	endif
0392   7A6C~            	endif
0392   7A6C             
0392   7A6E             
0392   7A6E~            	endif
0392   7A6E~            	endif
0392   7A6E             
0393   7A6E F7 28 02    	staB	displayBcd
0394   7A71             	
0395   7A71             ; read switches
0396   7A71             	;jmp updateLamps
0397   7A71 DE 50       	ldX	>curCol
0398   7A73 B6 30 00    	ldaA	>switchRow
0399   7A76 16          	tab
0400   7A77 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0401   7A79             	
0402   7A79 D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0403   7A7B D7 01       	staB	temp + 1 			; temp = switch / 2
0404   7A7D D7 53       	staB	tempX + 1			; tempX = cRAM
0405   7A7F C6 60       	ldaB	callbackTable >> 8
0406   7A81 D7 00       	staB	temp
0407   7A83 C6 01       	ldaB	cRAM >> 8
0408   7A85 D7 52       	staB	tempX
0409   7A87             	
0410   7A87 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0411   7A89             	
0412   7A89             	; temp now contains the beginning of the row in the callbackTable
0413   7A89             swNext:
0414   7A89 85 01       	bitA	00000001b	 ; Z set if switch not different
0415   7A8B             	ifne		; if bit set, switch different
0415   7A8B             
0415   7A8B 27 FE       
0416   7A8D 36          		pshA ; store changed switches left
0417   7A8E DE 52       		ldX	>tempX
0418   7A90 86 18       		ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0419   7A92             				; but checking 'multiple of 8' would miss 7/8 switch
0420   7A92             				; columns completely since they're in sync
0421   7A92             				; so instead the lowest bits are empty (so that it'll
0422   7A92             				; get all switch cols) and instead it skips 7/8 groups 
0423   7A92             				; of 8 IRQs
0424   7A92 95 02       		bitA	>counter
0425   7A94 27 08       		beq checkSettled ; counter not multiple of 8, skip settling (multiplies settle time by 8)
0426   7A96             			; just check if this is the beginning of the settle
0427   7A96             			;  (want to react right away when a switch closes)
0428   7A96 A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0429   7A98 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0430   7A9A 27 33       			beq 	notSettled; A=0 -> was settled, so can begin
0431   7A9C 20 4B       			bra settledEnd
0432   7A9E             checkSettled:
0433   7A9E A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0434   7AA0 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0435   7AA2 27 2B       		beq 	notSettled; A=0 -> settled
0436   7AA4             		; else A > 0 -> settling
0437   7AA4 4A          			decA
0438   7AA5 A7 00       			staA	0, X	; sets Z if now A = 0
0439   7AA7             			ifeq ; A=0 -> now settled, fire event
0439   7AA7             
0439   7AA7 26 FE       
0440   7AA9             settled:		
0441   7AA9 DE 50       				ldX	>curCol
0442   7AAB 17          				tBA	; A now the bit in row
0443   7AAC A8 20       				eorA	switchRow1, X ; toggle bit in row
0444   7AAE A7 20       				staA	switchRow1, X ; A now state of row
0445   7AB0             				
0446   7AB0 F5 30 00    				bitB	>switchRow
0447   7AB3             				ifne ; switch now on
0447   7AB3             
0447   7AB3 27 FE       
0448   7AB5 86 40       					ldaA	01000000b
0449   7AB7             				else
0449   7AB7             
0449   7AB7             
0449   7AB7             
0449   7AB7             
0449   7AB4             
0449   7AB4             
0449   7AB4             
0449   7AB4~            				else
0449   7AB4~            				else
0449   7AB4~            				else
0449   7AB4~            				else
0449   7AB4             
0449   7AB4~            				else
0449   7AB4~            				else
0449   7AB4~            				else
0449   7AB4~            				else
0449   7AB4             
0449   7AB4             
0449   7AB4 04          
0449   7AB7             
0449   7AB7 20 FE       
0449   7AB9             
0449   7AB9             
0449   7AB9             
0449   7AB9~            				else
0449   7AB9~            				else
0449   7AB9~            				else
0449   7AB9~            				else
0449   7AB9~            				else
0449   7AB9             
0449   7AB9~            				else
0449   7AB9~            				else
0449   7AB9             
0449   7AB9~            				else
0449   7AB9~            				else
0449   7AB9             
0450   7AB9 86 C0       					ldaA	11000000b
0451   7ABB             				endif
0451   7ABB             
0451   7ABB             
0451   7ABB             
0451   7ABB             
0451   7ABB             
0451   7ABB~            				endif
0451   7ABB~            				endif
0451   7ABB             
0451   7ABB~            				endif
0451   7ABB~            				endif
0451   7ABB             
0451   7AB8             
0451   7AB8 02          
0451   7AB9             
0451   7AB9             
0451   7AB9~            				endif
0451   7AB9~            				endif
0451   7AB9~            				endif
0451   7AB9             
0451   7ABB             
0451   7ABB~            				endif
0451   7ABB~            				endif
0451   7ABB             
0452   7ABB 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0453   7ABD             				
0454   7ABD             				; store event
0455   7ABD DE 56       				ldX	>queueTail
0456   7ABF A7 00       				staA	0, X
0457   7AC1 7C 00 57    				inc	queueTail + 1
0458   7AC4             				
0459   7AC4             				; wrap queueTail if necessary
0460   7AC4 8C 00 6D    				cpX	queueEnd 
0461   7AC7             				ifeq
0461   7AC7             
0461   7AC7 26 FE       
0462   7AC9 86 60       					ldaA	queue 
0463   7ACB 97 57       					staA	queueTail + 1
0464   7ACD             				endif
0464   7ACD             
0464   7ACD             
0464   7ACD             
0464   7ACD             
0464   7ACD             
0464   7ACD~            				endif
0464   7ACD~            				endif
0464   7ACD             
0464   7ACD~            				endif
0464   7ACD~            				endif
0464   7ACD             
0464   7AC8             
0464   7AC8 04          
0464   7AC9             
0464   7AC9             
0464   7AC9~            				endif
0464   7AC9~            				endif
0464   7AC9~            				endif
0464   7AC9             
0464   7ACD             
0464   7ACD~            				endif
0464   7ACD~            				endif
0464   7ACD             
0465   7ACD             			endif
0465   7ACD             
0465   7ACD             
0465   7ACD             
0465   7ACD             
0465   7ACD             
0465   7ACD~            			endif
0465   7ACD~            			endif
0465   7ACD             
0465   7ACD~            			endif
0465   7ACD~            			endif
0465   7ACD             
0465   7AA8             
0465   7AA8 24          
0465   7AA9             
0465   7AA9             
0465   7AA9~            			endif
0465   7AA9~            			endif
0465   7AA9~            			endif
0465   7AA9             
0465   7ACD             
0465   7ACD~            			endif
0465   7ACD~            			endif
0465   7ACD             
0466   7ACD 20 1A       		bra settledEnd
0467   7ACF             notSettled: ; =0 -> was settled, so now it's not
0468   7ACF             			; get the settle time
0469   7ACF 96 53       			ldaA	>tempX + 1
0470   7AD1 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0471   7AD3 DE 00       			ldX	>temp
0472   7AD5             			
0473   7AD5             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0474   7AD5 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0475   7AD7             			
0476   7AD7             			; need to get correct 3 bits from switch settings
0477   7AD7 F5 30 00    			bitB	>switchRow
0478   7ADA             			ifne ; switch just turned on
0478   7ADA             
0478   7ADA 27 FE       
0479   7ADC 44          				lsrA
0480   7ADD 44          				lsrA
0481   7ADE             			else
0481   7ADE             
0481   7ADE             
0481   7ADE             
0481   7ADE             
0481   7ADB             
0481   7ADB             
0481   7ADB             
0481   7ADB~            			else
0481   7ADB~            			else
0481   7ADB~            			else
0481   7ADB~            			else
0481   7ADB             
0481   7ADB~            			else
0481   7ADB~            			else
0481   7ADB~            			else
0481   7ADB~            			else
0481   7ADB             
0481   7ADB             
0481   7ADB 04          
0481   7ADE             
0481   7ADE 20 FE       
0481   7AE0             
0481   7AE0             
0481   7AE0             
0481   7AE0~            			else
0481   7AE0~            			else
0481   7AE0~            			else
0481   7AE0~            			else
0481   7AE0~            			else
0481   7AE0             
0481   7AE0~            			else
0481   7AE0~            			else
0481   7AE0             
0481   7AE0~            			else
0481   7AE0~            			else
0481   7AE0             
0482   7AE0 48          				aslA
0483   7AE1             			endif
0483   7AE1             
0483   7AE1             
0483   7AE1             
0483   7AE1             
0483   7AE1             
0483   7AE1~            			endif
0483   7AE1~            			endif
0483   7AE1             
0483   7AE1~            			endif
0483   7AE1~            			endif
0483   7AE1             
0483   7ADF             
0483   7ADF 01          
0483   7AE0             
0483   7AE0             
0483   7AE0~            			endif
0483   7AE0~            			endif
0483   7AE0~            			endif
0483   7AE0             
0483   7AE1             
0483   7AE1~            			endif
0483   7AE1~            			endif
0483   7AE1             
0484   7AE1 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0485   7AE3             						
0486   7AE3 DE 52       			ldX	>tempX
0487   7AE5 A7 00       			staA	0, X		; start settling	
0488   7AE7 27 C0       			beq	settled		; quick out for 0 settle
0489   7AE9             settledEnd:
0490   7AE9             			
0491   7AE9 32          		pulA
0492   7AEA             	endif
0492   7AEA             
0492   7AEA             
0492   7AEA             
0492   7AEA             
0492   7AEA             
0492   7AEA~            	endif
0492   7AEA~            	endif
0492   7AEA             
0492   7AEA~            	endif
0492   7AEA~            	endif
0492   7AEA             
0492   7A8C             
0492   7A8C 5D          
0492   7A8D             
0492   7A8D             
0492   7A8D~            	endif
0492   7A8D~            	endif
0492   7A8D~            	endif
0492   7A8D             
0492   7AEA             
0492   7AEA~            	endif
0492   7AEA~            	endif
0492   7AEA             
0493   7AEA 7C 00 53    	inc tempX + 1
0494   7AED 58          	aslB
0495   7AEE 44          	lsrA			; pop lowest bit off, set Z if A is empty
0496   7AEF 26 98       	bne		swNext 	; more 'switched' bits, keep processing 
0497   7AF1             	
0498   7AF1             	
0499   7AF1             ; update lamps
0500   7AF1             updateLamps:
0501   7AF1             	;jmp updateStrobe
0502   7AF1             
0503   7AF1 DE 50       	ldX	>curCol
0504   7AF3             	
0505   7AF3 86 FF       	ldaA	$FF	;lamp row is inverted
0506   7AF5 B7 24 00    	staA	lampCol
0507   7AF8 96 07       	ldaA	>strobe
0508   7AFA B7 24 02    	staA	lampStrobe
0509   7AFD             	
0510   7AFD D6 02       	ldaB	>counter
0511   7AFF A6 08       	ldaA	lampCol1, X
0512   7B01 C5 80       	bitB	10000000b 
0513   7B03             	ifeq
0513   7B03             
0513   7B03 26 FE       
0514   7B05 A8 A0       		eorA	flashLampCol1, X
0515   7B07 A4 08       		andA	lampCol1, X
0516   7B09             	endif
0516   7B09             
0516   7B09             
0516   7B09             
0516   7B09             
0516   7B09             
0516   7B09~            	endif
0516   7B09~            	endif
0516   7B09             
0516   7B09~            	endif
0516   7B09~            	endif
0516   7B09             
0516   7B04             
0516   7B04 04          
0516   7B05             
0516   7B05             
0516   7B05~            	endif
0516   7B05~            	endif
0516   7B05~            	endif
0516   7B05             
0516   7B09             
0516   7B09~            	endif
0516   7B09~            	endif
0516   7B09             
0517   7B09 43          	comA	; inverted
0518   7B0A             	
0519   7B0A B7 24 00    	staA	lampCol
0520   7B0D 86 00       	ldaA	00
0521   7B0F             
0522   7B0F             ; update solenoids
0523   7B0F             	; if a solenoid is set to <254, --
0524   7B0F             	; if =255, off, otherwise on
0525   7B0F             	; else leave it at 254
0526   7B0F             	
0527   7B0F 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0528   7B12 86 FE       	ldaA	254
0529   7B14 DE 50       	ldX	>curCol
0530   7B16             	; update solenoid in current 'column' (1-8) 
0531   7B16 A1 40       	cmpA	solenoid1 - cRAM, X
0532   7B18             	ifge 	; solenoid <=254, turn on
0532   7B18             
0532   7B18 25 FE       
0533   7B1A             		ifgt	; solenoid < 254, decrement
0533   7B1A             
0533   7B1A 23 FE       
0534   7B1C 6A 40       			dec	solenoid1 - cRAM, X
0535   7B1E             		endif
0535   7B1E             
0535   7B1E             
0535   7B1E             
0535   7B1E             
0535   7B1E             
0535   7B1E~            		endif
0535   7B1E~            		endif
0535   7B1E             
0535   7B1E~            		endif
0535   7B1E~            		endif
0535   7B1E             
0535   7B1B             
0535   7B1B 02          
0535   7B1C             
0535   7B1C             
0535   7B1C~            		endif
0535   7B1C~            		endif
0535   7B1C~            		endif
0535   7B1C             
0535   7B1E             
0535   7B1E~            		endif
0535   7B1E~            		endif
0535   7B1E             
0536   7B1E 0D          		sec
0537   7B1F             	else
0537   7B1F             
0537   7B1F             
0537   7B1F             
0537   7B1F             
0537   7B19             
0537   7B19             
0537   7B19             
0537   7B19~            	else
0537   7B19~            	else
0537   7B19~            	else
0537   7B19~            	else
0537   7B19             
0537   7B19~            	else
0537   7B19~            	else
0537   7B19~            	else
0537   7B19~            	else
0537   7B19             
0537   7B19             
0537   7B19 07          
0537   7B1F             
0537   7B1F 20 FE       
0537   7B21             
0537   7B21             
0537   7B21             
0537   7B21~            	else
0537   7B21~            	else
0537   7B21~            	else
0537   7B21~            	else
0537   7B21~            	else
0537   7B21             
0537   7B21~            	else
0537   7B21~            	else
0537   7B21             
0537   7B21~            	else
0537   7B21~            	else
0537   7B21             
0538   7B21 0C          		clc
0539   7B22             	endif
0539   7B22             
0539   7B22             
0539   7B22             
0539   7B22             
0539   7B22             
0539   7B22~            	endif
0539   7B22~            	endif
0539   7B22             
0539   7B22~            	endif
0539   7B22~            	endif
0539   7B22             
0539   7B20             
0539   7B20 01          
0539   7B21             
0539   7B21             
0539   7B21~            	endif
0539   7B21~            	endif
0539   7B21~            	endif
0539   7B21             
0539   7B22             
0539   7B22~            	endif
0539   7B22~            	endif
0539   7B22             
0540   7B22 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0541   7B25             	; repeat above for second bank
0542   7B25 A1 48       	cmpA	solenoid9 - cRAM, X
0543   7B27             	ifge 	; solenoid <=254, turn on
0543   7B27             
0543   7B27 25 FE       
0544   7B29             		ifgt	; solenoid < 254, decrement
0544   7B29             
0544   7B29 23 FE       
0545   7B2B 6A 48       			dec	solenoid9 - cRAM, X
0546   7B2D             		endif
0546   7B2D             
0546   7B2D             
0546   7B2D             
0546   7B2D             
0546   7B2D             
0546   7B2D~            		endif
0546   7B2D~            		endif
0546   7B2D             
0546   7B2D~            		endif
0546   7B2D~            		endif
0546   7B2D             
0546   7B2A             
0546   7B2A 02          
0546   7B2B             
0546   7B2B             
0546   7B2B~            		endif
0546   7B2B~            		endif
0546   7B2B~            		endif
0546   7B2B             
0546   7B2D             
0546   7B2D~            		endif
0546   7B2D~            		endif
0546   7B2D             
0547   7B2D 0D          		sec
0548   7B2E             	else
0548   7B2E             
0548   7B2E             
0548   7B2E             
0548   7B2E             
0548   7B28             
0548   7B28             
0548   7B28             
0548   7B28~            	else
0548   7B28~            	else
0548   7B28~            	else
0548   7B28~            	else
0548   7B28             
0548   7B28~            	else
0548   7B28~            	else
0548   7B28~            	else
0548   7B28~            	else
0548   7B28             
0548   7B28             
0548   7B28 07          
0548   7B2E             
0548   7B2E 20 FE       
0548   7B30             
0548   7B30             
0548   7B30             
0548   7B30~            	else
0548   7B30~            	else
0548   7B30~            	else
0548   7B30~            	else
0548   7B30~            	else
0548   7B30             
0548   7B30~            	else
0548   7B30~            	else
0548   7B30             
0548   7B30~            	else
0548   7B30~            	else
0548   7B30             
0549   7B30 0C          		clc
0550   7B31             	endif
0550   7B31             
0550   7B31             
0550   7B31             
0550   7B31             
0550   7B31             
0550   7B31~            	endif
0550   7B31~            	endif
0550   7B31             
0550   7B31~            	endif
0550   7B31~            	endif
0550   7B31             
0550   7B2F             
0550   7B2F 01          
0550   7B30             
0550   7B30             
0550   7B30~            	endif
0550   7B30~            	endif
0550   7B30~            	endif
0550   7B30             
0550   7B31             
0550   7B31~            	endif
0550   7B31~            	endif
0550   7B31             
0551   7B31 76 00 29    	ror		solBStatus	
0552   7B34 7A 00 50    	dec		curCol ; undo inc
0553   7B37             	
0554   7B37             ; update strobe	
0555   7B37             updateStrobe:
0556   7B37             	;ldX		curCol
0557   7B37             	;inX 	
0558   7B37 86 08       	ldaA	8 	; pitch
0559   7B39 9B 10       	addA	>curSwitchRowLsb
0560   7B3B 97 10       	staA	curSwitchRowLsb
0561   7B3D 78 00 07    	asl	strobe
0562   7B40 7C 01 6A    	inc	displayCol
0563   7B43 86 00       	ldaA	0
0564   7B45 91 07       	cmpA	>strobe ; strobe done?  reset
0565   7B47             	ifeq		
0565   7B47             
0565   7B47 26 FE       
0566   7B49 96 28       		ldaA	>solAStatus
0567   7B4B B7 22 00    		staA	solenoidA
0568   7B4E 96 29       		ldaA	>solBStatus
0569   7B50 B7 22 02    		staA	solenoidB
0570   7B53             	
0571   7B53 86 01       		ldaA	00000001b
0572   7B55 97 07       		staA	strobe
0573   7B57             		
0574   7B57             		;ldX 	#0
0575   7B57             		
0576   7B57 86 00       		ldaA	0
0577   7B59 97 50       		staA	curCol
0578   7B5B 97 51       		staA	curCol + 1
0579   7B5D 97 10       		staA	curSwitchRowLsb
0580   7B5F 97 28       		staA	solAStatus
0581   7B61 97 29       		staA	solBStatus
0582   7B63             		
0583   7B63 F6 01 6A    		ldaB	>displayCol	; reset display col only if it's > 7 
0584   7B66 CA F0       		oraB	11110000b
0585   7B68 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0586   7B6A             		ifgt
0586   7B6A             
0586   7B6A 23 FE       
0587   7B6C B7 01 6A    			staA	displayCol
0588   7B6F             		endif
0588   7B6F             
0588   7B6F             
0588   7B6F             
0588   7B6F             
0588   7B6F             
0588   7B6F~            		endif
0588   7B6F~            		endif
0588   7B6F             
0588   7B6F~            		endif
0588   7B6F~            		endif
0588   7B6F             
0588   7B6B             
0588   7B6B 03          
0588   7B6C             
0588   7B6C             
0588   7B6C~            		endif
0588   7B6C~            		endif
0588   7B6C~            		endif
0588   7B6C             
0588   7B6F             
0588   7B6F~            		endif
0588   7B6F~            		endif
0588   7B6F             
0589   7B6F             	
0590   7B6F B6 01 6B    		ldaA	>state
0591   7B72 8A 04       		oraA	100b
0592   7B74 B7 01 6B    		staA	state
0593   7B77             	else
0593   7B77             
0593   7B77             
0593   7B77             
0593   7B77             
0593   7B48             
0593   7B48             
0593   7B48             
0593   7B48~            	else
0593   7B48~            	else
0593   7B48~            	else
0593   7B48~            	else
0593   7B48             
0593   7B48~            	else
0593   7B48~            	else
0593   7B48~            	else
0593   7B48~            	else
0593   7B48             
0593   7B48             
0593   7B48 30          
0593   7B77             
0593   7B77 20 FE       
0593   7B79             
0593   7B79             
0593   7B79             
0593   7B79~            	else
0593   7B79~            	else
0593   7B79~            	else
0593   7B79~            	else
0593   7B79~            	else
0593   7B79             
0593   7B79~            	else
0593   7B79~            	else
0593   7B79             
0593   7B79~            	else
0593   7B79~            	else
0593   7B79             
0594   7B79 7C 00 51    		inc	curCol + 1
0595   7B7C             	endif
0595   7B7C             
0595   7B7C             
0595   7B7C             
0595   7B7C             
0595   7B7C             
0595   7B7C~            	endif
0595   7B7C~            	endif
0595   7B7C             
0595   7B7C~            	endif
0595   7B7C~            	endif
0595   7B7C             
0595   7B78             
0595   7B78 03          
0595   7B79             
0595   7B79             
0595   7B79~            	endif
0595   7B79~            	endif
0595   7B79~            	endif
0595   7B79             
0595   7B7C             
0595   7B7C~            	endif
0595   7B7C~            	endif
0595   7B7C             
0596   7B7C             	
0597   7B7C 3B          	rti
0598   7B7D             afterInterrupt:
0599   7B7D             
0600   7FF8             pointers: 	.org $7FF8  	
0601   7FF8             	.msfirst
0602   7FF8 79 F6       	.dw interrupt			
0603   7FFA 79 F6       	.dw interrupt			
0604   7FFC 79 F6       	.dw interrupt			
0605   7FFE 78 00       	.dw main
0606   8000             	
0607   8000             	
0608   8000             	.endtasm: Number of errors = 0
