0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             curCol:			.equ RAM + $50 ; +
0041+  0000             tempX:			.equ RAM + $52 ; +
0042+  0000             queueHead:		.equ RAM + $54 ; +
0043+  0000             queueTail:		.equ RAM + $56 ; +
0044+  0000             tempQ:			.equ RAM + $58 ; +
0045+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0046+  0000             queueEnd:		.equ RAM + $67
0047+  0000             ;
0048+  0000             displayBcd1:	.equ RAM + $70
0049+  0000             displayBcd16:	.equ RAM + $7F
0050+  0000             ballCount:		.equ displayBcd1 + 7
0051+  0000             waitLeft: 		.equ RAM + $80
0052+  0000             waitLeftEnd:		.equ RAM + $87
0053+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0054+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0055+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0056+  0000             flashLampCol1:		.equ RAM + $A0
0057+  0000             flashLampCol8:		.equ RAM + $A7
0058+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0059+  0000             lastSwitch:		.equ RAM + $A8
0060+  0000             
0061+  0000             p_Bonus:		.equ RAM + $B0
0062+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0063+  0000             
0064+  0000             
0065+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0066+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0067+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0068+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0069+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0070+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0071+  0000             #DEFINE s(n) 		(0 + n)
0072+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0073+  0000             pA_10:			.equ pA_1m + 5
0074+  0000             pB_1m:			.equ pA_10 + 1
0075+  0000             pB_10:			.equ pB_1m + 5
0076+  0000             pC_1m:			.equ pB_10 + 1
0077+  0000             pC_10:			.equ pC_1m + 5
0078+  0000             pD_1m:			.equ pC_10 + 1
0079+  0000             pD_10:			.equ pD_1m + 5  
0080+  0000             displayCol:		.equ cRAM + $68
0081+  0000             state:			.equ cRAM + $69	; ? | strobe reset | don't validate | ?
0082+  0000             
0083+  0000             instant:		.equ 4
0084+  0000             debounce:		.equ 1
0085+  0000             slow:			.equ 2
0086+  0000             
0087+  0000             switchSettle:	.equ cRAM + $30
0088+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 74    		cpX	displayBcd1 + 4
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 74    			cpX	displayBcd1 + 4
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7C    		cpX	displayBcd1 + 8 + 4
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7C    			cpX	displayBcd1 + 8 + 4
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0E       	ldaB	>lc(7)
0101+  7C8C C5 02       	bitB	lr(2)
0102+  7C8E 26 1A       	bne	blankP2
0103+  7C90 C5 04       	bitB	lr(3)
0104+  7C92 26 22       	bne	blankP3
0105+  7C94 C5 08       	bitB	lr(4)
0106+  7C96 26 2A       	bne	blankP4
0107+  7C98 C5 10       	bitB	lr(5)
0108+  7C9A 26 32       	bne	blankDone
0109+  7C9C 20 00       	bra	blankP1
0110+  7C9E             blankP1:
0111+  7C9E 86 F0       	ldaA	$F0
0112+  7CA0 9A 74       	oraA	>displayBcd1 + 4
0113+  7CA2 97 74       	staA	displayBcd1 + 4
0114+  7CA4 86 F0       	ldaA	$F0
0115+  7CA6 9A 75       	oraA	>displayBcd1 + 5
0116+  7CA8 97 75       	staA	displayBcd1 + 5
0117+  7CAA             blankP2:
0118+  7CAA 86 F0       	ldaA	$F0
0119+  7CAC 9A 7C       	oraA	>displayBcd1 + 12
0120+  7CAE 97 7C       	staA	displayBcd1 + 12
0121+  7CB0 86 F0       	ldaA	$F0
0122+  7CB2 9A 7D       	oraA	>displayBcd1 + 13
0123+  7CB4 97 7D       	staA	displayBcd1 + 13
0124+  7CB6             blankP3:
0125+  7CB6 86 0F       	ldaA	$0F
0126+  7CB8 9A 74       	oraA	>displayBcd1 + 4
0127+  7CBA 97 74       	staA	displayBcd1 + 4
0128+  7CBC 86 0F       	ldaA	$0F
0129+  7CBE 9A 75       	oraA	>displayBcd1 + 5
0130+  7CC0 97 75       	staA	displayBcd1 + 5
0131+  7CC2             blankP4:
0132+  7CC2 86 0F       	ldaA	$0F
0133+  7CC4 9A 7C       	oraA	>displayBcd1 + 12
0134+  7CC6 97 7C       	staA	displayBcd1 + 12
0135+  7CC8 86 0F       	ldaA	$0F
0136+  7CCA 9A 7D       	oraA	>displayBcd1 + 13
0137+  7CCC 97 7D       	staA	displayBcd1 + 13
0138+  7CCE             blankDone:
0139+  7CCE 39          	rts
0140+  7CCF             	
0141+  7CCF             refreshPlayerScores:
0142+  7CCF BD 7C 00    	jsr copyScores13
0143+  7CD2 BD 7C 45    	jsr copyScores24
0144+  7CD5 BD 7C 8A    	jsr blankNonPlayerScores
0145+  7CD8 39          	rts
0146+  7CD9             	
0147+  7CD9             ; add score instantly
0148+  7CD9             ; X = place in p*_1* to add the score to
0149+  7CD9             ; A = amount to add (max 9)
0150+  7CD9             ; tail call
0151+  7CD9             _addScoreI:
0152+  7CD9 AB 00       	addA	0, X
0153+  7CDB             	ifcs ; overflowed, need to increment next number
0153+  7CDB             
0153+  7CDB 24 FE       
0154+  7CDD 8B 06       		addA	6	; adjust A back into BCD
0155+  7CDF A7 00       		staA	0, X
0156+  7CE1             addScore_carryOver:		; loop to propagate carry
0157+  7CE1 09          		deX	; go to next decimal place
0158+  7CE2 A6 00       		ldaA	0, X	
0159+  7CE4 81 F9       		cmpA	$F9
0160+  7CE6             		ifeq			; if it's already a 9, reset it and carry again
0160+  7CE6             
0160+  7CE6 26 FE       
0161+  7CE8 6F 00       			clr	0, X
0162+  7CEA 27 F5       			beq addScore_carryOver
0163+  7CEC             		else			; otherwise ++ it and done
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7             
0163+  7CE7 06          
0163+  7CEC             
0163+  7CEC 20 FE       
0163+  7CEE             
0163+  7CEE             
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0164+  7CEE 6C 00       			inc	0, X
0165+  7CF0             		endif	
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CED             
0165+  7CED 02          
0165+  7CEE             
0165+  7CEE             
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0166+  7CF0             	else
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC             
0166+  7CDC 15          
0166+  7CF0             
0166+  7CF0 20 FE       
0166+  7CF2             
0166+  7CF2             
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0167+  7CF2 81 F9       		cmpA	$F9
0168+  7CF4             		ifgt ; >9 -> need to adjust back into BCD
0168+  7CF4             
0168+  7CF4 23 FE       
0169+  7CF6 8B 06       			addA	6
0170+  7CF8 A7 00       			staA	0, X
0171+  7CFA             addScore_carryDa:
0172+  7CFA 09          			deX
0173+  7CFB A6 00       			ldaA	0, X
0174+  7CFD 81 F9       			cmpA	$F9
0175+  7CFF             			ifeq
0175+  7CFF             
0175+  7CFF 26 FE       
0176+  7D01 6F 00       				clr	0, X
0177+  7D03 27 F5       				beq 	addScore_carryDa
0178+  7D05             			else
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D00             
0178+  7D00             
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00             
0178+  7D00 06          
0178+  7D05             
0178+  7D05 20 FE       
0178+  7D07             
0178+  7D07             
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0179+  7D07 6C 00       				inc	0, X
0180+  7D09             			endif	
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D06             
0180+  7D06 02          
0180+  7D07             
0180+  7D07             
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0181+  7D09             		else
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5             
0181+  7CF5 15          
0181+  7D09             
0181+  7D09 20 FE       
0181+  7D0B             
0181+  7D0B             
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0182+  7D0B A7 00       			staA	0, X
0183+  7D0D             		endif
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0A             
0183+  7D0A 02          
0183+  7D0B             
0183+  7D0B             
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0184+  7D0D             	endif
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7CF1             
0184+  7CF1 1B          
0184+  7CF2             
0184+  7CF2             
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0185+  7D0D             
0186+  7D0D 7E 7C CF    	jmp refreshPlayerScores
0187+  7D10             	
0188+  7D10 39          	rts
0189+  7D11             	
0190+  7D11             ; t A,X
0191+  7D11             setXToCurPlayer10:
0192+  7D11 96 0F       	ldaA	>lc(8)
0193+  7D13 85 01       	bitA	0001b
0194+  7D15 27 04       	beq	_addScore10N_p2
0195+  7D17 CE 01 55    	ldX	pA_10
0196+  7D1A 39          	rts
0197+  7D1B             _addScore10N_p2:
0198+  7D1B 85 02       	bitA	0010b
0199+  7D1D 27 04       	beq	_addScore10N_p3
0200+  7D1F CE 01 5B    	ldX	pB_10
0201+  7D22 39          	rts
0202+  7D23             _addScore10N_p3:
0203+  7D23 85 04       	bitA	0100b
0204+  7D25 27 04       	beq	_addScore10N_p4
0205+  7D27 CE 01 61    	ldX	pC_10
0206+  7D2A 39          	rts
0207+  7D2B             _addScore10N_p4:
0208+  7D2B CE 01 67    	ldX	pD_10
0209+  7D2E 39          	rts
0210+  7D2F             
0211+  7D2F             ; suspends execution for A ms and returns to queue processor
0212+  7D2F             ; should only be called from switch callbacks
0213+  7D2F             ; trashes everything but B
0214+  7D2F             _delay:	
0215+  7D2F CE 00 7F    	ldX	waitLeft - 1
0216+  7D32             findEmptyLoop:
0217+  7D32 08          	inX
0218+  7D33 6D 00       	tst	0, X
0219+  7D35 26 FB       	bne 	findEmptyLoop 
0220+  7D37             	
0221+  7D37             	; X = first waitLeft that = 0
0222+  7D37 E7 18       	staB	waitReg - waitLeft, X
0223+  7D39 33          	pulB	; A = MSB of PC
0224+  7D3A E7 08       	staB	waitMsb - waitLeft, X
0225+  7D3C 33          	pulB	; A = LSB of PC
0226+  7D3D E7 10       	staB	waitLsb - waitLeft, X
0227+  7D3F A7 00       	staA	0, X
0228+  7D41             	; time and add stored
0229+  7D41 7E 79 C3    	jmp skipEvent
0230+  7D44             	
0231+  7D44             resetScores:
0232+  7D44 86 00       	ldaA	00
0233+  7D46 CE 01 55    	ldX	pA_10
0234+  7D49             _zeroScores:
0235+  7D49 A7 00       	staA	0, X
0236+  7D4B 08          	inX
0237+  7D4C 8C 01 63    	cpX	pD_1m + 1
0238+  7D4F 26 F8       	bne	_zeroScores
0239+  7D51             	
0240+  7D51 86 00       	ldaA	0
0241+  7D53 97 12       	staA	curPlayer
0242+  7D55 97 13       	staA	curPlayer + 1
0243+  7D57 86 FF       	ldaA	$FF
0244+  7D59 97 76       	staA	displayBcd1 + 6
0245+  7D5B 97 7E       	staA	displayBcd1 + 14
0246+  7D5D 97 7F       	staA	displayBcd1 + 15
0247+  7D5F             	
0248+  7D5F BD 7C CF    	jsr	refreshPlayerScores
0249+  7D62 39          	rts
0250+  7D63             
0251+  7D63             ; trash ~B
0252+  7D63             ; delay for ms (8-2000)
0253+  7D63             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0254+  7D63             	
0255+  7D63             ; trashes B (max 104ms)
0256+  7D63             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0257+  7D63             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0258+  7D63             
0259+  7D63             ; trashes AX
0260+  7D63             ; place: 1-5 = 10s thru 100ks
0261+  7D63             ; amount: 1-9
0262+  7D63             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0263+  7D63             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0264+  7D63             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0265+  7D63             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0266+  7D63             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0267+  7D63             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0268+  7D63             
0269+  7D63             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0270+  7D63             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0271+  7D63             
0272+  7D63             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0273+  7D63             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0274+  7D63             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0275+  7D63             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0006   7D63             
0007   7D63             #include "game.asm"
0001+  7D63             ; Laser Ball solenoids
0002+  7D63             ;#DEFINE KICKOUT 		01
0003+  7D63             ;#DEFINE LEFT_KICKER 	02
0004+  7D63             ;#DEFINE DROP_LA			03
0005+  7D63             ;#DEFINE DROP_SER		04
0006+  7D63             ;#DEFINE EJECT_HOLE		05
0007+  7D63             ;#DEFINE DROP_BA			06
0008+  7D63             ;#DEFINE DROP_LL			07
0009+  7D63             ;#DEFINE RIGHT_KICKER	08
0010+  7D63             ;#DEFINE SOUND1			09 ; thru 13
0011+  7D63             ;#DEFINE KNOCKER			14
0012+  7D63             ;#DEFINE	FLASHERS		15
0013+  7D63             ;#DEFINE COIN_LOCKOUT	16
0014+  7D63             
0015+  7D63             ; Hot Tip solenoids
0016+  7D63             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7D63             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7D63             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7D63             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7D63             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7D63             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7D63             #DEFINE CHIME_10	SOL(09, 16)
0023+  7D63             #DEFINE CHIME_100	SOL(10, 16)
0024+  7D63             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7D63             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7D63             #DEFINE CLICKER		SOL(13, 8)
0027+  7D63             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7D63             #DEFINE BUZZER		SOL(15, 100)
0029+  7D63             #DEFINE SHORT_PAUSE 	115
0030+  7D63             
0031+  7D63             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7D63             #DEFINE done(v)	\
0033+  7D63             #DEFCONT	#IF (v==0)
0034+  7D63             #DEFCONT		\ ldaA 10b
0035+  7D63             #DEFCONT		\ oraA >state
0036+  7D63             #DEFCONT		\ staA state
0037+  7D63             #DEFCONT	\#ENDIF
0038+  7D63             #DEFCONT	\ jmp afterQueueEvent
0039+  7D63             	
0040+  7D63             	
0041+  7D63             _addScore10N:
0042+  7D63 BD 7D 11    	jsr setXToCurPlayer10
0043+  7D66 86 01       	ldaA	1
0044+  7D68 BD 7C D9    	jsr _addScoreI
0045+  7D6B 86 02       	fireSolenoidA(CHIME_10)
0045+  7D6D B7 01 48    
0046+  7D70 39          	rts
0047+  7D71             _addScore100N:
0048+  7D71 BD 7D 11    	jsr setXToCurPlayer10
0049+  7D74 09          	deX
0050+  7D75 86 01       	ldaA	1
0051+  7D77 BD 7C D9    	jsr _addScoreI
0052+  7D7A 86 02       	fireSolenoidA(CHIME_100)	
0052+  7D7C B7 01 49    
0053+  7D7F 39          	rts
0054+  7D80             _addScore1000N:
0055+  7D80 BD 7D 11    	jsr setXToCurPlayer10
0056+  7D83 09          	deX
0057+  7D84 09          	deX
0058+  7D85 86 01       	ldaA	1
0059+  7D87 BD 7C D9    	jsr _addScoreI
0060+  7D8A 86 02       	fireSolenoidA(CHIME_1000)
0060+  7D8C B7 01 4A    
0061+  7D8F 39          	rts
0062+  7D90             #DEFINE score10() jsr _addScore10N
0063+  7D90             #DEFINE score100() jsr _addScore100N
0064+  7D90             #DEFINE score1000() jsr _addScore1000N
0065+  7D90             #DEFINE score500() \ jsr _addScore100N
0066+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7D90             #DEFCONT	\ jsr _addScore100N
0069+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7D90             #DEFCONT	\ jsr _addScore100N
0072+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7D90             #DEFCONT	\ jsr _addScore100N
0075+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7D90             #DEFCONT	\ jsr _addScore100N
0078+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7D90             
0081+  7D90             #DEFINE advBonus()	inc p_Bonus
0082+  7D90             	
0083+  7D90             ; switch callbacks:
0084+  7D90             
0085+  60C0             none:	.org $6000 + 192 ; size of callback table
0086+  60C0             	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0             
0086+  60C0 7E 79 7A    
0087+  60C3             	
0088+  60C3             bonusLights:
0089+  60C3 86 00       	ldaA	0
0090+  60C5 97 0C       	staA	lc(5)
0091+  60C7 97 0D       	staA	lc(6)
0092+  60C9 7D 00 B0    	tst	p_Bonus
0093+  60CC 27 11       	beq	bonusLights_done
0094+  60CE             	
0095+  60CE 86 80       	lampOn(8,5) ; 1k
0095+  60D0 9A 0C       
0095+  60D2 97 0C       
0096+  60D4             	
0097+  60D4 96 B0       	ldaA	>p_Bonus
0098+  60D6             bonusLights_loop:
0099+  60D6 4A          	decA
0100+  60D7 27 06       	beq 	bonusLights_done
0101+  60D9 0D          	seC
0102+  60DA 79 00 0D    	rol	lc(6)
0103+  60DD 20 F7       	bra	bonusLights_loop
0104+  60DF             	
0105+  60DF             bonusLights_done
0106+  60DF             
0107+  60DF 86 09       	ldaA	9
0108+  60E1 91 B0       	cmpA	>p_Bonus
0109+  60E3             	ifge	
0109+  60E3             
0109+  60E3 25 FE       
0110+  60E5             	else	; bonus >= 10?
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E4             
0110+  60E4             
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4             
0110+  60E4 02          
0110+  60E5             
0110+  60E5 20 FE       
0110+  60E7             
0110+  60E7             
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0111+  60E7 86 0A       		ldaA	10
0112+  60E9 97 B0       		staA	p_Bonus
0113+  60EB 86 40       		lampOn(7,5) ; 10k light
0113+  60ED 9A 0C       
0113+  60EF 97 0C       
0114+  60F1             	endif
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60E6             
0114+  60E6 0A          
0114+  60E7             
0114+  60E7             
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0115+  60F1             	
0116+  60F1 39          	rts
0117+  60F2             	
0118+  60F2             	
0119+  60F2             startBall:
0120+  60F2 86 01       	ldaA	1
0121+  60F4 97 B0       	staA	p_Bonus
0122+  60F6 B6 22 03    	enablePf
0122+  60F9 8A 38       
0122+  60FB B7 22 03    
0123+  60FE             	
0124+  60FE C6 0C       	fireSolenoid(DROP_TIP)
0124+  6100 F7 01 41    
0125+  6103 86 09       	delay(75)
0125+  6105 BD 7D 2F    
0126+  6108 C6 0C       	fireSolenoid(DROP_HOT)
0126+  610A F7 01 42    
0127+  610D 86 0F       	delay(125)
0127+  610F BD 7D 2F    
0128+  6112             	
0129+  6112 86 FF       	ldaA	$FF
0130+  6114 97 A8       	staA	lastSwitch
0131+  6116             	
0132+  6116             	; clear lights
0133+  6116 CE 00 08    	ldX	lampCol1
0134+  6119 86 00       	ldaA	0b
0135+  611B             lClearLights:
0136+  611B A7 00       	staA	0, X
0137+  611D A7 98       	staA	flashLampCol1 - lampCol1, X
0138+  611F 08          	inX
0139+  6120 8C 00 0E    	cpX	lc(6) + 1
0140+  6123 26 F6       	bne	lClearLights
0141+  6125             	;
0142+  6125             	
0143+  6125             	; init lights for player data
0144+  6125 DE 12       	ldX	>curPlayer
0145+  6127 A6 B1       	ldaA	p_Ejects, X
0146+  6129 97 0B       	staA	lc(4)
0147+  612B             	
0148+  612B 86 40       	ldaA	lr(7) ; shoot again
0149+  612D 95 0F       	bitA	>lc(8)
0150+  612F             	ifne
0150+  612F             
0150+  612F 27 FE       
0151+  6131 86 01       		lampOn(1,3) ; shoot again
0151+  6133 9A 0A       
0151+  6135 97 0A       
0152+  6137             	endif
0152+  6137             
0152+  6137             
0152+  6137             
0152+  6137             
0152+  6137             
0152+  6137~            	endif
0152+  6137~            	endif
0152+  6137             
0152+  6137~            	endif
0152+  6137~            	endif
0152+  6137             
0152+  6130             
0152+  6130 06          
0152+  6131             
0152+  6131             
0152+  6131~            	endif
0152+  6131~            	endif
0152+  6131~            	endif
0152+  6131             
0152+  6137             
0152+  6137~            	endif
0152+  6137~            	endif
0152+  6137             
0153+  6137             	
0154+  6137             	; flash player light
0155+  6137 86 0F       	ldaA	00001111b ; player up lights
0156+  6139 9A A7       	oraA	>flc(8)
0157+  613B 97 A7       	staA	flc(8)
0158+  613D             	
0159+  613D 86 01       	ldaA	sr(1) ; check outhole
0160+  613F 95 21       	bitA	>sc(2)
0161+  6141             	ifne ; ball in hole
0161+  6141             
0161+  6141 27 FE       
0162+  6143 C6 02       		fireSolenoid(OUTHOLE)
0162+  6145 F7 01 44    
0163+  6148             	endif
0163+  6148             
0163+  6148             
0163+  6148             
0163+  6148             
0163+  6148             
0163+  6148~            	endif
0163+  6148~            	endif
0163+  6148             
0163+  6148~            	endif
0163+  6148~            	endif
0163+  6148             
0163+  6142             
0163+  6142 05          
0163+  6143             
0163+  6143             
0163+  6143~            	endif
0163+  6143~            	endif
0163+  6143~            	endif
0163+  6143             
0163+  6148             
0163+  6148~            	endif
0163+  6148~            	endif
0163+  6148             
0164+  6148             	
0165+  6148 39          	rts
0166+  6149             	
0167+  6149             	
0168+  6149             startGame:
0169+  6149             	
0170+  6149 C6 02       	fireSolenoid(CHIME_10)
0170+  614B F7 01 48    
0171+  614E 86 0E       	delay(SHORT_PAUSE)
0171+  6150 BD 7D 2F    
0172+  6153 C6 02       	fireSolenoid(CHIME_10)
0172+  6155 F7 01 48    
0173+  6158 86 0E       	delay(SHORT_PAUSE)
0173+  615A BD 7D 2F    
0174+  615D C6 02       	fireSolenoid(CHIME_10)
0174+  615F F7 01 48    
0175+  6162 86 19       	delay(200)
0175+  6164 BD 7D 2F    
0176+  6167             	
0177+  6167 C6 02       	fireSolenoid(CHIME_10)
0177+  6169 F7 01 48    
0178+  616C 86 0E       	delay(SHORT_PAUSE)
0178+  616E BD 7D 2F    
0179+  6171 C6 02       	fireSolenoid(CHIME_10)
0179+  6173 F7 01 48    
0180+  6176 86 0E       	delay(SHORT_PAUSE)
0180+  6178 BD 7D 2F    
0181+  617B C6 02       	fireSolenoid(CHIME_10)
0181+  617D F7 01 48    
0182+  6180 86 19       	delay(200)
0182+  6182 BD 7D 2F    
0183+  6185             	
0184+  6185 C6 02       	fireSolenoid(CHIME_10)
0184+  6187 F7 01 48    
0185+  618A 86 0E       	delay(SHORT_PAUSE)
0185+  618C BD 7D 2F    
0186+  618F C6 02       	fireSolenoid(CHIME_10)
0186+  6191 F7 01 48    
0187+  6194 86 0E       	delay(SHORT_PAUSE)
0187+  6196 BD 7D 2F    
0188+  6199 C6 02       	fireSolenoid(CHIME_100)
0188+  619B F7 01 49    
0189+  619E 86 19       	delay(200)
0189+  61A0 BD 7D 2F    
0190+  61A3 C6 02       	fireSolenoid(CHIME_1000)
0190+  61A5 F7 01 4A    
0191+  61A8 86 19       	delay(200)
0191+  61AA BD 7D 2F    
0192+  61AD C6 02       	fireSolenoid(CHIME_10k)
0192+  61AF F7 01 4B    
0193+  61B2 86 12       	delay(150)
0193+  61B4 BD 7D 2F    
0194+  61B7             	
0195+  61B7             	; reset scores
0196+  61B7 BD 7D 44    	jsr 	resetScores
0197+  61BA             	
0198+  61BA             	; reset ball count
0199+  61BA 86 10       	ldaA	$10
0200+  61BC 97 77       	staA	ballCount	
0201+  61BE             
0202+  61BE C6 00       	ldaB	0
0203+  61C0 D7 13       	staB	curPlayer + 1
0204+  61C2             	
0205+  61C2 D7 0E       	staB	lc(7)
0206+  61C4 D7 0F       	staB	lc(8)
0207+  61C6 D7 A6       	staB	flc(7)
0208+  61C8 D7 A7       	staB	flc(8)
0209+  61CA             	
0210+  61CA CE 00 00    	ldX	0
0211+  61CD             lInitPlayers:
0212+  61CD C6 01       	ldaB	lr(1)
0213+  61CF E7 B1       	staB	p_Ejects, X
0214+  61D1 08          	inX
0215+  61D2 8C 00 04    	cpX	4
0216+  61D5 26 F6       	bne	lInitPlayers
0217+  61D7             	
0218+  61D7 BD 60 F2    	jsr	startBall
0219+  61DA             	
0220+  61DA             	; invalidate playfield
0221+  61DA 86 01       	ldaA	lr(1)
0222+  61DC 9A 0F       	oraA	>lc(8)
0223+  61DE 97 0F       	staA	lc(8)
0224+  61E0             	
0225+  61E0 86 02       	lampOn(2,7) ; one player
0225+  61E2 9A 0E       
0225+  61E4 97 0E       
0226+  61E6             	
0227+  61E6 86 DF       	lampOff(6,8) ; game over
0227+  61E8 94 0F       
0227+  61EA 97 0F       
0228+  61EC             	
0229+  61EC 39          	rts
0230+  61ED             	
0231+  61ED             
0232+  61ED             	
0233+  61ED             swTilt: 
0234+  61ED 86 10       	lampOn(5,8) ; tilt
0234+  61EF 9A 0F       
0234+  61F1 97 0F       
0235+  61F3 B6 22 03    	disablePf
0235+  61F6 84 F7       
0235+  61F8 B7 22 03    
0236+  61FB             	done(0)
0236+  61FB             
0236+  61FB 86 02       
0236+  61FD BA 01 69    
0236+  6200 B7 01 69    
0236+  6203             
0236+  6203 7E 79 7A    
0237+  6206             	
0238+  6206             swStart: 
0239+  6206 96 0F       	ldaA >lc(8)
0240+  6208 85 20       	bitA lr(6)
0241+  620A             	ifne ; in game over
0241+  620A             
0241+  620A 27 FE       
0242+  620C BD 61 49    		jsr startGame
0243+  620F             	else 
0243+  620F             
0243+  620F             
0243+  620F             
0243+  620F             
0243+  620B             
0243+  620B             
0243+  620B             
0243+  620B~            	else 
0243+  620B~            	else 
0243+  620B~            	else 
0243+  620B~            	else 
0243+  620B             
0243+  620B~            	else 
0243+  620B~            	else 
0243+  620B~            	else 
0243+  620B~            	else 
0243+  620B             
0243+  620B             
0243+  620B 05          
0243+  620F             
0243+  620F 20 FE       
0243+  6211             
0243+  6211             
0243+  6211             
0243+  6211~            	else 
0243+  6211~            	else 
0243+  6211~            	else 
0243+  6211~            	else 
0243+  6211~            	else 
0243+  6211             
0243+  6211~            	else 
0243+  6211~            	else 
0243+  6211             
0243+  6211~            	else 
0243+  6211~            	else 
0243+  6211             
0244+  6211 86 10       		ldaA	$10
0245+  6213 91 77       		cmpA	>ballCount
0246+  6215             		ifeq ; add player
0246+  6215             
0246+  6215 26 FE       
0247+  6217 86 1E       			ldaA	00011110b
0248+  6219 94 0E       			andA	>lc(7) ; player count lights
0249+  621B 85 10       			bitA	lr(5)
0250+  621D             			ifeq	; if not on P4 already, add player
0250+  621D             
0250+  621D 26 FE       
0251+  621F 48          				aslA
0252+  6220 C6 E1       				ldaB	11100001b
0253+  6222 D4 0E       				andB	>lc(7)
0254+  6224 D7 0E       				staB	lc(7)
0255+  6226 9A 0E       				oraA	>lc(7)
0256+  6228 97 0E       				staA	lc(7)
0257+  622A             			endif
0257+  622A             
0257+  622A             
0257+  622A             
0257+  622A             
0257+  622A             
0257+  622A~            			endif
0257+  622A~            			endif
0257+  622A             
0257+  622A~            			endif
0257+  622A~            			endif
0257+  622A             
0257+  621E             
0257+  621E 0B          
0257+  621F             
0257+  621F             
0257+  621F~            			endif
0257+  621F~            			endif
0257+  621F~            			endif
0257+  621F             
0257+  622A             
0257+  622A~            			endif
0257+  622A~            			endif
0257+  622A             
0258+  622A             		else ; restart game
0258+  622A             
0258+  622A             
0258+  622A             
0258+  622A             
0258+  6216             
0258+  6216             
0258+  6216             
0258+  6216~            		else ; restart game
0258+  6216~            		else ; restart game
0258+  6216~            		else ; restart game
0258+  6216~            		else ; restart game
0258+  6216             
0258+  6216~            		else ; restart game
0258+  6216~            		else ; restart game
0258+  6216~            		else ; restart game
0258+  6216~            		else ; restart game
0258+  6216             
0258+  6216             
0258+  6216 15          
0258+  622A             
0258+  622A 20 FE       
0258+  622C             
0258+  622C             
0258+  622C             
0258+  622C~            		else ; restart game
0258+  622C~            		else ; restart game
0258+  622C~            		else ; restart game
0258+  622C~            		else ; restart game
0258+  622C~            		else ; restart game
0258+  622C             
0258+  622C~            		else ; restart game
0258+  622C~            		else ; restart game
0258+  622C             
0258+  622C~            		else ; restart game
0258+  622C~            		else ; restart game
0258+  622C             
0259+  622C BD 61 49    			jsr startGame
0260+  622F             		endif		
0260+  622F             
0260+  622F             
0260+  622F             
0260+  622F             
0260+  622F             
0260+  622F~            		endif		
0260+  622F~            		endif		
0260+  622F             
0260+  622F~            		endif		
0260+  622F~            		endif		
0260+  622F             
0260+  622B             
0260+  622B 03          
0260+  622C             
0260+  622C             
0260+  622C~            		endif		
0260+  622C~            		endif		
0260+  622C~            		endif		
0260+  622C             
0260+  622F             
0260+  622F~            		endif		
0260+  622F~            		endif		
0260+  622F             
0261+  622F             	endif
0261+  622F             
0261+  622F             
0261+  622F             
0261+  622F             
0261+  622F             
0261+  622F~            	endif
0261+  622F~            	endif
0261+  622F             
0261+  622F~            	endif
0261+  622F~            	endif
0261+  622F             
0261+  6210             
0261+  6210 1E          
0261+  6211             
0261+  6211             
0261+  6211~            	endif
0261+  6211~            	endif
0261+  6211~            	endif
0261+  6211             
0261+  622F             
0261+  622F~            	endif
0261+  622F~            	endif
0261+  622F             
0262+  622F             	
0263+  622F BD 7C CF    	jsr refreshPlayerScores
0264+  6232             	
0265+  6232             	done(0)
0265+  6232             
0265+  6232 86 02       
0265+  6234 BA 01 69    
0265+  6237 B7 01 69    
0265+  623A             
0265+  623A 7E 79 7A    
0266+  623D             	
0267+  623D             swOuthole: 
0268+  623D 86 4B       	delay(600)
0268+  623F BD 7D 2F    
0269+  6242 96 0F       	ldaA	>lc(8) ; !game over
0270+  6244 85 20       	bitA	lr(6)
0271+  6246             	ifne ; game over
0271+  6246             
0271+  6246 27 FE       
0272+  6248             		done(0)
0272+  6248             
0272+  6248 86 02       
0272+  624A BA 01 69    
0272+  624D B7 01 69    
0272+  6250             
0272+  6250 7E 79 7A    
0273+  6253             	endif
0273+  6253             
0273+  6253             
0273+  6253             
0273+  6253             
0273+  6253             
0273+  6253~            	endif
0273+  6253~            	endif
0273+  6253             
0273+  6253~            	endif
0273+  6253~            	endif
0273+  6253             
0273+  6247             
0273+  6247 0B          
0273+  6248             
0273+  6248             
0273+  6248~            	endif
0273+  6248~            	endif
0273+  6248~            	endif
0273+  6248             
0273+  6253             
0273+  6253~            	endif
0273+  6253~            	endif
0273+  6253             
0274+  6253             	
0275+  6253             	; check ballsave
0276+  6253 86 01       	ldaA	lr(1)
0277+  6255 95 0A       	bitA	>lc(3)
0278+  6257             	ifne	; shoot again on
0278+  6257             
0278+  6257 27 FE       
0279+  6259 95 A2       		bitA	>flc(3)
0280+  625B             		ifne ; shoot again flashing
0280+  625B             
0280+  625B 27 FE       
0281+  625D             			; turn off used special
0282+  625D 86 80       			ldaA	lr(8) ; right special
0283+  625F 95 09       			bitA	>lc(2)
0284+  6261             			ifne
0284+  6261             
0284+  6261 27 FE       
0285+  6263 86 7F       				lampOff(8,2)
0285+  6265 94 09       
0285+  6267 97 09       
0286+  6269 86 7F       				flashOff(8,2)
0286+  626B 94 A1       
0286+  626D 97 A1       
0287+  626F             			endif
0287+  626F             
0287+  626F             
0287+  626F             
0287+  626F             
0287+  626F             
0287+  626F~            			endif
0287+  626F~            			endif
0287+  626F             
0287+  626F~            			endif
0287+  626F~            			endif
0287+  626F             
0287+  6262             
0287+  6262 0C          
0287+  6263             
0287+  6263             
0287+  6263~            			endif
0287+  6263~            			endif
0287+  6263~            			endif
0287+  6263             
0287+  626F             
0287+  626F~            			endif
0287+  626F~            			endif
0287+  626F             
0288+  626F 86 02       			ldaA	lr(2) ; right special
0289+  6271 95 0A       			bitA	>lc(3)
0290+  6273             			ifne
0290+  6273             
0290+  6273 27 FE       
0291+  6275 86 FD       				lampOff(2,3)
0291+  6277 94 0A       
0291+  6279 97 0A       
0292+  627B 86 FD       				flashOff(2,3)
0292+  627D 94 A2       
0292+  627F 97 A2       
0293+  6281             			endif
0293+  6281             
0293+  6281             
0293+  6281             
0293+  6281             
0293+  6281             
0293+  6281~            			endif
0293+  6281~            			endif
0293+  6281             
0293+  6281~            			endif
0293+  6281~            			endif
0293+  6281             
0293+  6274             
0293+  6274 0C          
0293+  6275             
0293+  6275             
0293+  6275~            			endif
0293+  6275~            			endif
0293+  6275~            			endif
0293+  6275             
0293+  6281             
0293+  6281~            			endif
0293+  6281~            			endif
0293+  6281             
0294+  6281             			
0295+  6281             			; flash player light
0296+  6281 86 0F       			ldaA	00001111b ; player up lights
0297+  6283 9A A7       			oraA	>flc(8)
0298+  6285 97 A7       			staA	flc(8)
0299+  6287             		endif
0299+  6287             
0299+  6287             
0299+  6287             
0299+  6287             
0299+  6287             
0299+  6287~            		endif
0299+  6287~            		endif
0299+  6287             
0299+  6287~            		endif
0299+  6287~            		endif
0299+  6287             
0299+  625C             
0299+  625C 2A          
0299+  625D             
0299+  625D             
0299+  625D~            		endif
0299+  625D~            		endif
0299+  625D~            		endif
0299+  625D             
0299+  6287             
0299+  6287~            		endif
0299+  6287~            		endif
0299+  6287             
0300+  6287             	endif
0300+  6287             
0300+  6287             
0300+  6287             
0300+  6287             
0300+  6287             
0300+  6287~            	endif
0300+  6287~            	endif
0300+  6287             
0300+  6287~            	endif
0300+  6287~            	endif
0300+  6287             
0300+  6258             
0300+  6258 2E          
0300+  6259             
0300+  6259             
0300+  6259~            	endif
0300+  6259~            	endif
0300+  6259~            	endif
0300+  6259             
0300+  6287             
0300+  6287~            	endif
0300+  6287~            	endif
0300+  6287             
0301+  6287             	
0302+  6287 86 0F       	ldaA	00001111b ; player up lights
0303+  6289 95 A7       	bitA	>flc(8)	; check if any player is flashing
0304+  628B             	ifne ; any flashing -> playfield invalid
0304+  628B             
0304+  628B 27 FE       
0305+  628D             swOuthole_save:
0306+  628D 86 EF       		lampOff(5,8) ; tilt
0306+  628F 94 0F       
0306+  6291 97 0F       
0307+  6293             		
0308+  6293 B6 22 03    		enablePf
0308+  6296 8A 38       
0308+  6298 B7 22 03    
0309+  629B C6 02       		fireSolenoid(OUTHOLE)
0309+  629D F7 01 44    
0310+  62A0             	else ; none flashing -> playfield valid -> end ball			
0310+  62A0             
0310+  62A0             
0310+  62A0             
0310+  62A0             
0310+  628C             
0310+  628C             
0310+  628C             
0310+  628C~            	else ; none flashing -> playfield valid -> end ball			
0310+  628C~            	else ; none flashing -> playfield valid -> end ball			
0310+  628C~            	else ; none flashing -> playfield valid -> end ball			
0310+  628C~            	else ; none flashing -> playfield valid -> end ball			
0310+  628C             
0310+  628C~            	else ; none flashing -> playfield valid -> end ball			
0310+  628C~            	else ; none flashing -> playfield valid -> end ball			
0310+  628C~            	else ; none flashing -> playfield valid -> end ball			
0310+  628C~            	else ; none flashing -> playfield valid -> end ball			
0310+  628C             
0310+  628C             
0310+  628C 15          
0310+  62A0             
0310+  62A0 20 FE       
0310+  62A2             
0310+  62A2             
0310+  62A2             
0310+  62A2~            	else ; none flashing -> playfield valid -> end ball			
0310+  62A2~            	else ; none flashing -> playfield valid -> end ball			
0310+  62A2~            	else ; none flashing -> playfield valid -> end ball			
0310+  62A2~            	else ; none flashing -> playfield valid -> end ball			
0310+  62A2~            	else ; none flashing -> playfield valid -> end ball			
0310+  62A2             
0310+  62A2~            	else ; none flashing -> playfield valid -> end ball			
0310+  62A2~            	else ; none flashing -> playfield valid -> end ball			
0310+  62A2             
0310+  62A2~            	else ; none flashing -> playfield valid -> end ball			
0310+  62A2~            	else ; none flashing -> playfield valid -> end ball			
0310+  62A2             
0311+  62A2             swOuthole_bonusLoop:
0312+  62A2 BD 7D 80    		score1000()
0313+  62A5 96 09       		ldaA	>lc(2) ; double bonus
0314+  62A7 85 04       		bitA	lr(3)
0315+  62A9             		ifne 
0315+  62A9             
0315+  62A9 27 FE       
0316+  62AB 86 0C       			delay(100)
0316+  62AD BD 7D 2F    
0317+  62B0 BD 7D 80    			score1000()
0318+  62B3             		endif
0318+  62B3             
0318+  62B3             
0318+  62B3             
0318+  62B3             
0318+  62B3             
0318+  62B3~            		endif
0318+  62B3~            		endif
0318+  62B3             
0318+  62B3~            		endif
0318+  62B3~            		endif
0318+  62B3             
0318+  62AA             
0318+  62AA 08          
0318+  62AB             
0318+  62AB             
0318+  62AB~            		endif
0318+  62AB~            		endif
0318+  62AB~            		endif
0318+  62AB             
0318+  62B3             
0318+  62B3~            		endif
0318+  62B3~            		endif
0318+  62B3             
0319+  62B3 7A 00 B0    		dec	p_Bonus
0320+  62B6             		;jsr	bonusLights
0321+  62B6 86 19       		delay(200)
0321+  62B8 BD 7D 2F    
0322+  62BB 7D 00 B0    		tst	p_Bonus
0323+  62BE 26 E2       		bne	swOuthole_bonusLoop
0324+  62C0             	
0325+  62C0 86 0F       		ldaA	00001111b ; player up lights
0326+  62C2 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0327+  62C4 D6 0A       		ldaB	>lc(3) ; check shoot again light
0328+  62C6 C5 01       		bitB	lr(1)
0329+  62C8             		ifeq ; shoot again not lit
0329+  62C8             
0329+  62C8 26 FE       
0330+  62CA             			; store player's data
0331+  62CA DE 12       			ldX	>curPlayer
0332+  62CC D6 0B       			ldaB	>lc(4)
0333+  62CE E7 B1       			staB	p_Ejects, X
0334+  62D0             		
0335+  62D0             			; go to next player
0336+  62D0 48          			aslA
0337+  62D1 7C 00 13    			inc	curPlayer + 1
0338+  62D4 95 0E       			bitA	>lc(7)	; is player count < player #
0339+  62D6             			ifne ; last player
0339+  62D6             
0339+  62D6 27 FE       
0340+  62D8 86 01       				ldaA	00000001b; ; back to player 1
0341+  62DA C6 00       				ldaB	0
0342+  62DC D7 13       				staB	curPlayer + 1
0343+  62DE             				
0344+  62DE             				; increase ball count
0345+  62DE D6 77       				ldaB	>ballCount
0346+  62E0 CB 10       				addB	$10
0347+  62E2 C1 40       				cmpB	$40
0348+  62E4             				ifeq ; game over
0348+  62E4             
0348+  62E4 26 FE       
0349+  62E6 86 20       					lampOn(6,8)
0349+  62E8 9A 0F       
0349+  62EA 97 0F       
0350+  62EC B6 22 03    					disablePf
0350+  62EF 84 F7       
0350+  62F1 B7 22 03    
0351+  62F4             					done(1)
0351+  62F4~            					done(1)
0351+  62F4~            					done(1)
0351+  62F4~            					done(1)
0351+  62F4~            					done(1)
0351+  62F4             
0351+  62F4 7E 79 7A    
0352+  62F7             				else
0352+  62F7             
0352+  62F7             
0352+  62F7             
0352+  62F7             
0352+  62E5             
0352+  62E5             
0352+  62E5             
0352+  62E5~            				else
0352+  62E5~            				else
0352+  62E5~            				else
0352+  62E5~            				else
0352+  62E5             
0352+  62E5~            				else
0352+  62E5~            				else
0352+  62E5~            				else
0352+  62E5~            				else
0352+  62E5             
0352+  62E5             
0352+  62E5 13          
0352+  62F7             
0352+  62F7 20 FE       
0352+  62F9             
0352+  62F9             
0352+  62F9             
0352+  62F9~            				else
0352+  62F9~            				else
0352+  62F9~            				else
0352+  62F9~            				else
0352+  62F9~            				else
0352+  62F9             
0352+  62F9~            				else
0352+  62F9~            				else
0352+  62F9             
0352+  62F9~            				else
0352+  62F9~            				else
0352+  62F9             
0353+  62F9 D7 77       					staB	ballCount
0354+  62FB             				endif		
0354+  62FB             
0354+  62FB             
0354+  62FB             
0354+  62FB             
0354+  62FB             
0354+  62FB~            				endif		
0354+  62FB~            				endif		
0354+  62FB             
0354+  62FB~            				endif		
0354+  62FB~            				endif		
0354+  62FB             
0354+  62F8             
0354+  62F8 02          
0354+  62F9             
0354+  62F9             
0354+  62F9~            				endif		
0354+  62F9~            				endif		
0354+  62F9~            				endif		
0354+  62F9             
0354+  62FB             
0354+  62FB~            				endif		
0354+  62FB~            				endif		
0354+  62FB             
0355+  62FB             			endif
0355+  62FB             
0355+  62FB             
0355+  62FB             
0355+  62FB             
0355+  62FB             
0355+  62FB~            			endif
0355+  62FB~            			endif
0355+  62FB             
0355+  62FB~            			endif
0355+  62FB~            			endif
0355+  62FB             
0355+  62D7             
0355+  62D7 23          
0355+  62D8             
0355+  62D8             
0355+  62D8~            			endif
0355+  62D8~            			endif
0355+  62D8~            			endif
0355+  62D8             
0355+  62FB             
0355+  62FB~            			endif
0355+  62FB~            			endif
0355+  62FB             
0356+  62FB             			
0357+  62FB 97 0F       			staA	lc(8)
0358+  62FD             		endif
0358+  62FD             
0358+  62FD             
0358+  62FD             
0358+  62FD             
0358+  62FD             
0358+  62FD~            		endif
0358+  62FD~            		endif
0358+  62FD             
0358+  62FD~            		endif
0358+  62FD~            		endif
0358+  62FD             
0358+  62C9             
0358+  62C9 33          
0358+  62CA             
0358+  62CA             
0358+  62CA~            		endif
0358+  62CA~            		endif
0358+  62CA~            		endif
0358+  62CA             
0358+  62FD             
0358+  62FD~            		endif
0358+  62FD~            		endif
0358+  62FD             
0359+  62FD             		
0360+  62FD BD 60 F2    		jsr	startBall
0361+  6300             	endif	
0361+  6300             
0361+  6300             
0361+  6300             
0361+  6300             
0361+  6300             
0361+  6300~            	endif	
0361+  6300~            	endif	
0361+  6300             
0361+  6300~            	endif	
0361+  6300~            	endif	
0361+  6300             
0361+  62A1             
0361+  62A1 5E          
0361+  62A2             
0361+  62A2             
0361+  62A2~            	endif	
0361+  62A2~            	endif	
0361+  62A2~            	endif	
0361+  62A2             
0361+  6300             
0361+  6300~            	endif	
0361+  6300~            	endif	
0361+  6300             
0362+  6300             	done(0)
0362+  6300             
0362+  6300 86 02       
0362+  6302 BA 01 69    
0362+  6305 B7 01 69    
0362+  6308             
0362+  6308 7E 79 7A    
0363+  630B             	
0364+  630B             swLeftEject:
0365+  630B 7C 00 B0    	advBonus()
0366+  630E C6 06       	fireSolenoid(KNOCKER)
0366+  6310 F7 01 4D    
0367+  6313 96 0F       	ldaA	>lc(8)
0368+  6315 85 20       	bitA	lr(6)
0369+  6317             	ifeq ; in game
0369+  6317             
0369+  6317 26 FE       
0370+  6319 86 01       		lampOn(1,3)
0370+  631B 9A 0A       
0370+  631D 97 0A       
0371+  631F 86 40       		lampOn(7,8)
0371+  6321 9A 0F       
0371+  6323 97 0F       
0372+  6325             	endif
0372+  6325             
0372+  6325             
0372+  6325             
0372+  6325             
0372+  6325             
0372+  6325~            	endif
0372+  6325~            	endif
0372+  6325             
0372+  6325~            	endif
0372+  6325~            	endif
0372+  6325             
0372+  6318             
0372+  6318 0C          
0372+  6319             
0372+  6319             
0372+  6319~            	endif
0372+  6319~            	endif
0372+  6319~            	endif
0372+  6319             
0372+  6325             
0372+  6325~            	endif
0372+  6325~            	endif
0372+  6325             
0373+  6325             	score500()
0373+  6325 BD 7D 71    
0373+  6328 C6 02       
0373+  632A F7 01 49    
0373+  632D 86 0E       
0373+  632F BD 7D 2F    
0373+  6332 BD 7D 71    
0373+  6335 C6 02       
0373+  6337 F7 01 49    
0373+  633A 86 0E       
0373+  633C BD 7D 2F    
0373+  633F BD 7D 71    
0373+  6342 C6 02       
0373+  6344 F7 01 49    
0373+  6347 86 0E       
0373+  6349 BD 7D 2F    
0373+  634C BD 7D 71    
0373+  634F C6 02       
0373+  6351 F7 01 49    
0373+  6354 86 0E       
0373+  6356 BD 7D 2F    
0373+  6359 BD 7D 71    
0373+  635C C6 02       
0373+  635E F7 01 49    
0373+  6361 86 0E       
0373+  6363 BD 7D 2F    
0374+  6366 C6 03       	fireSolenoid(LEFT_EJECT)
0374+  6368 F7 01 43    
0375+  636B             	done(1)
0375+  636B~            	done(1)
0375+  636B~            	done(1)
0375+  636B~            	done(1)
0375+  636B~            	done(1)
0375+  636B             
0375+  636B 7E 79 7A    
0376+  636E             	
0377+  636E             swTopEject:
0378+  636E 7C 00 B0    	advBonus()
0379+  6371 D6 0B       	ldaB	>lc(4)
0380+  6373 57          	asrB
0381+  6374             	ifeq ; 1k
0381+  6374             
0381+  6374 26 FE       
0382+  6376 BD 7D 80    		score1000()
0383+  6379 7E 64 36    		jmp	swTopEject_scored
0384+  637C             	endif
0384+  637C             
0384+  637C             
0384+  637C             
0384+  637C             
0384+  637C             
0384+  637C~            	endif
0384+  637C~            	endif
0384+  637C             
0384+  637C~            	endif
0384+  637C~            	endif
0384+  637C             
0384+  6375             
0384+  6375 06          
0384+  6376             
0384+  6376             
0384+  6376~            	endif
0384+  6376~            	endif
0384+  6376~            	endif
0384+  6376             
0384+  637C             
0384+  637C~            	endif
0384+  637C~            	endif
0384+  637C             
0385+  637C 57          	asrB
0386+  637D             	ifeq  ; captive
0386+  637D             
0386+  637D 26 FE       
0387+  637F 86 40       		ldaA	lr(7)
0388+  6381 95 09       		bitA	>lc(2) ; captive ball
0389+  6383             		ifeq	; not lit
0389+  6383             
0389+  6383 26 FE       
0390+  6385 86 40       			lampOn(7,2)
0390+  6387 9A 09       
0390+  6389 97 09       
0391+  638B             		else
0391+  638B             
0391+  638B             
0391+  638B             
0391+  638B             
0391+  6384             
0391+  6384             
0391+  6384             
0391+  6384~            		else
0391+  6384~            		else
0391+  6384~            		else
0391+  6384~            		else
0391+  6384             
0391+  6384~            		else
0391+  6384~            		else
0391+  6384~            		else
0391+  6384~            		else
0391+  6384             
0391+  6384             
0391+  6384 08          
0391+  638B             
0391+  638B 20 FE       
0391+  638D             
0391+  638D             
0391+  638D             
0391+  638D~            		else
0391+  638D~            		else
0391+  638D~            		else
0391+  638D~            		else
0391+  638D~            		else
0391+  638D             
0391+  638D~            		else
0391+  638D~            		else
0391+  638D             
0391+  638D~            		else
0391+  638D~            		else
0391+  638D             
0392+  638D 86 BF       			lampOff(7,2)
0392+  638F 94 09       
0392+  6391 97 09       
0393+  6393             		endif
0393+  6393             
0393+  6393             
0393+  6393             
0393+  6393             
0393+  6393             
0393+  6393~            		endif
0393+  6393~            		endif
0393+  6393             
0393+  6393~            		endif
0393+  6393~            		endif
0393+  6393             
0393+  638C             
0393+  638C 06          
0393+  638D             
0393+  638D             
0393+  638D~            		endif
0393+  638D~            		endif
0393+  638D~            		endif
0393+  638D             
0393+  6393             
0393+  6393~            		endif
0393+  6393~            		endif
0393+  6393             
0394+  6393 7E 64 36    		jmp	swTopEject_scored
0395+  6396             	endif
0395+  6396             
0395+  6396             
0395+  6396             
0395+  6396             
0395+  6396             
0395+  6396~            	endif
0395+  6396~            	endif
0395+  6396             
0395+  6396~            	endif
0395+  6396~            	endif
0395+  6396             
0395+  637E             
0395+  637E 17          
0395+  637F             
0395+  637F             
0395+  637F~            	endif
0395+  637F~            	endif
0395+  637F~            	endif
0395+  637F             
0395+  6396             
0395+  6396~            	endif
0395+  6396~            	endif
0395+  6396             
0396+  6396 57          	asrB
0397+  6397             	ifeq
0397+  6397             
0397+  6397 26 FE       
0398+  6399             		score500()
0398+  6399 BD 7D 71    
0398+  639C C6 02       
0398+  639E F7 01 49    
0398+  63A1 86 0E       
0398+  63A3 BD 7D 2F    
0398+  63A6 BD 7D 71    
0398+  63A9 C6 02       
0398+  63AB F7 01 49    
0398+  63AE 86 0E       
0398+  63B0 BD 7D 2F    
0398+  63B3 BD 7D 71    
0398+  63B6 C6 02       
0398+  63B8 F7 01 49    
0398+  63BB 86 0E       
0398+  63BD BD 7D 2F    
0398+  63C0 BD 7D 71    
0398+  63C3 C6 02       
0398+  63C5 F7 01 49    
0398+  63C8 86 0E       
0398+  63CA BD 7D 2F    
0398+  63CD BD 7D 71    
0398+  63D0 C6 02       
0398+  63D2 F7 01 49    
0398+  63D5 86 0E       
0398+  63D7 BD 7D 2F    
0399+  63DA 20 5A       		bra	swTopEject_scored
0400+  63DC             	endif
0400+  63DC             
0400+  63DC             
0400+  63DC             
0400+  63DC             
0400+  63DC             
0400+  63DC~            	endif
0400+  63DC~            	endif
0400+  63DC             
0400+  63DC~            	endif
0400+  63DC~            	endif
0400+  63DC             
0400+  6398             
0400+  6398 43          
0400+  6399             
0400+  6399             
0400+  6399~            	endif
0400+  6399~            	endif
0400+  6399~            	endif
0400+  6399             
0400+  63DC             
0400+  63DC~            	endif
0400+  63DC~            	endif
0400+  63DC             
0401+  63DC 57          	asrB
0402+  63DD             	ifeq ; double
0402+  63DD             
0402+  63DD 26 FE       
0403+  63DF 86 04       		ldaA	lr(3)
0404+  63E1 95 09       		bitA	>lc(2) ; double bonus
0405+  63E3             		ifeq	; not lit
0405+  63E3             
0405+  63E3 26 FE       
0406+  63E5 86 04       			lampOn(3,2)
0406+  63E7 9A 09       
0406+  63E9 97 09       
0407+  63EB             		else
0407+  63EB             
0407+  63EB             
0407+  63EB             
0407+  63EB             
0407+  63E4             
0407+  63E4             
0407+  63E4             
0407+  63E4~            		else
0407+  63E4~            		else
0407+  63E4~            		else
0407+  63E4~            		else
0407+  63E4             
0407+  63E4~            		else
0407+  63E4~            		else
0407+  63E4~            		else
0407+  63E4~            		else
0407+  63E4             
0407+  63E4             
0407+  63E4 08          
0407+  63EB             
0407+  63EB 20 FE       
0407+  63ED             
0407+  63ED             
0407+  63ED             
0407+  63ED~            		else
0407+  63ED~            		else
0407+  63ED~            		else
0407+  63ED~            		else
0407+  63ED~            		else
0407+  63ED             
0407+  63ED~            		else
0407+  63ED~            		else
0407+  63ED             
0407+  63ED~            		else
0407+  63ED~            		else
0407+  63ED             
0408+  63ED 86 FB       			lampOff(3,2)
0408+  63EF 94 09       
0408+  63F1 97 09       
0409+  63F3             		endif
0409+  63F3             
0409+  63F3             
0409+  63F3             
0409+  63F3             
0409+  63F3             
0409+  63F3~            		endif
0409+  63F3~            		endif
0409+  63F3             
0409+  63F3~            		endif
0409+  63F3~            		endif
0409+  63F3             
0409+  63EC             
0409+  63EC 06          
0409+  63ED             
0409+  63ED             
0409+  63ED~            		endif
0409+  63ED~            		endif
0409+  63ED~            		endif
0409+  63ED             
0409+  63F3             
0409+  63F3~            		endif
0409+  63F3~            		endif
0409+  63F3             
0410+  63F3             	else
0410+  63F3             
0410+  63F3             
0410+  63F3             
0410+  63F3             
0410+  63DE             
0410+  63DE             
0410+  63DE             
0410+  63DE~            	else
0410+  63DE~            	else
0410+  63DE~            	else
0410+  63DE~            	else
0410+  63DE             
0410+  63DE~            	else
0410+  63DE~            	else
0410+  63DE~            	else
0410+  63DE~            	else
0410+  63DE             
0410+  63DE             
0410+  63DE 16          
0410+  63F3             
0410+  63F3 20 FE       
0410+  63F5             
0410+  63F5             
0410+  63F5             
0410+  63F5~            	else
0410+  63F5~            	else
0410+  63F5~            	else
0410+  63F5~            	else
0410+  63F5~            	else
0410+  63F5             
0410+  63F5~            	else
0410+  63F5~            	else
0410+  63F5             
0410+  63F5~            	else
0410+  63F5~            	else
0410+  63F5             
0411+  63F5             		score500()
0411+  63F5 BD 7D 71    
0411+  63F8 C6 02       
0411+  63FA F7 01 49    
0411+  63FD 86 0E       
0411+  63FF BD 7D 2F    
0411+  6402 BD 7D 71    
0411+  6405 C6 02       
0411+  6407 F7 01 49    
0411+  640A 86 0E       
0411+  640C BD 7D 2F    
0411+  640F BD 7D 71    
0411+  6412 C6 02       
0411+  6414 F7 01 49    
0411+  6417 86 0E       
0411+  6419 BD 7D 2F    
0411+  641C BD 7D 71    
0411+  641F C6 02       
0411+  6421 F7 01 49    
0411+  6424 86 0E       
0411+  6426 BD 7D 2F    
0411+  6429 BD 7D 71    
0411+  642C C6 02       
0411+  642E F7 01 49    
0411+  6431 86 0E       
0411+  6433 BD 7D 2F    
0412+  6436             	endif
0412+  6436             
0412+  6436             
0412+  6436             
0412+  6436             
0412+  6436             
0412+  6436~            	endif
0412+  6436~            	endif
0412+  6436             
0412+  6436~            	endif
0412+  6436~            	endif
0412+  6436             
0412+  63F4             
0412+  63F4 41          
0412+  63F5             
0412+  63F5             
0412+  63F5~            	endif
0412+  63F5~            	endif
0412+  63F5~            	endif
0412+  63F5             
0412+  6436             
0412+  6436~            	endif
0412+  6436~            	endif
0412+  6436             
0413+  6436             swTopEject_scored:
0414+  6436             		
0415+  6436 C6 03       	fireSolenoid(TOP_EJECT)
0415+  6438 F7 01 40    
0416+  643B             	done(1)
0416+  643B~            	done(1)
0416+  643B~            	done(1)
0416+  643B~            	done(1)
0416+  643B~            	done(1)
0416+  643B             
0416+  643B 7E 79 7A    
0417+  643E             	
0418+  643E             swHotTip:
0419+  643E 86 09       	delay(75)
0419+  6440 BD 7D 2F    
0420+  6443 C6 0C       	fireSolenoid(DROP_HOT)
0420+  6445 F7 01 42    
0421+  6448 86 09       	delay(75)
0421+  644A BD 7D 2F    
0422+  644D C6 0C       	fireSolenoid(DROP_TIP)
0422+  644F F7 01 41    
0423+  6452             	done(1)
0423+  6452~            	done(1)
0423+  6452~            	done(1)
0423+  6452~            	done(1)
0423+  6452~            	done(1)
0423+  6452             
0423+  6452 7E 79 7A    
0424+  6455             swLeftOutlane:
0425+  6455 86 02       	ldaA	lr(2) ; left special
0426+  6457 95 0A       	bitA	>lc(3)
0427+  6459             	ifne
0427+  6459             
0427+  6459 27 FE       
0428+  645B 86 01       		lampOn(1,3) ; shoot again
0428+  645D 9A 0A       
0428+  645F 97 0A       
0429+  6461 86 01       		flashLamp(1,3)
0429+  6463 9A A2       
0429+  6465 97 A2       
0430+  6467 C6 0C       		fireSolenoid(BUZZER)
0430+  6469 F7 01 4E    
0431+  646C 86 80       		flashLamp(8,2)
0431+  646E 9A A1       
0431+  6470 97 A1       
0432+  6472             	endif
0432+  6472             
0432+  6472             
0432+  6472             
0432+  6472             
0432+  6472             
0432+  6472~            	endif
0432+  6472~            	endif
0432+  6472             
0432+  6472~            	endif
0432+  6472~            	endif
0432+  6472             
0432+  645A             
0432+  645A 17          
0432+  645B             
0432+  645B             
0432+  645B~            	endif
0432+  645B~            	endif
0432+  645B~            	endif
0432+  645B             
0432+  6472             
0432+  6472~            	endif
0432+  6472~            	endif
0432+  6472             
0433+  6472             	done(1)
0433+  6472~            	done(1)
0433+  6472~            	done(1)
0433+  6472~            	done(1)
0433+  6472~            	done(1)
0433+  6472             
0433+  6472 7E 79 7A    
0434+  6475             	
0435+  6475             swRightOutlane:
0436+  6475 86 80       	ldaA	lr(8) ; right special
0437+  6477 95 09       	bitA	>lc(2)
0438+  6479             	ifne
0438+  6479             
0438+  6479 27 FE       
0439+  647B 86 01       		lampOn(1,3) ; shoot again
0439+  647D 9A 0A       
0439+  647F 97 0A       
0440+  6481 86 01       		flashLamp(1,3)
0440+  6483 9A A2       
0440+  6485 97 A2       
0441+  6487 C6 0C       		fireSolenoid(BUZZER)
0441+  6489 F7 01 4E    
0442+  648C 86 80       		flashLamp(8,2)
0442+  648E 9A A1       
0442+  6490 97 A1       
0443+  6492             	endif
0443+  6492             
0443+  6492             
0443+  6492             
0443+  6492             
0443+  6492             
0443+  6492~            	endif
0443+  6492~            	endif
0443+  6492             
0443+  6492~            	endif
0443+  6492~            	endif
0443+  6492             
0443+  647A             
0443+  647A 17          
0443+  647B             
0443+  647B             
0443+  647B~            	endif
0443+  647B~            	endif
0443+  647B~            	endif
0443+  647B             
0443+  6492             
0443+  6492~            	endif
0443+  6492~            	endif
0443+  6492             
0444+  6492             	done(1)
0444+  6492~            	done(1)
0444+  6492~            	done(1)
0444+  6492~            	done(1)
0444+  6492~            	done(1)
0444+  6492             
0444+  6492 7E 79 7A    
0445+  6495             	
0446+  6495             swLeftInlane:
0447+  6495             swRightInlane:
0448+  6495 7C 00 B0    	advBonus()
0449+  6498 BD 7D 80    	score1000()
0450+  649B             	done(1)
0450+  649B~            	done(1)
0450+  649B~            	done(1)
0450+  649B~            	done(1)
0450+  649B~            	done(1)
0450+  649B             
0450+  649B 7E 79 7A    
0451+  649E             sw10pt:
0452+  649E BD 7D 63    	score10()
0453+  64A1 77 00 0B    	asr	lc(4)
0454+  64A4             	ifeq ; shifted off the edge
0454+  64A4             
0454+  64A4 26 FE       
0455+  64A6 86 10       		ldaA	00010000b
0456+  64A8 97 0B       		staA	lc(4)
0457+  64AA             	endif
0457+  64AA             
0457+  64AA             
0457+  64AA             
0457+  64AA             
0457+  64AA             
0457+  64AA~            	endif
0457+  64AA~            	endif
0457+  64AA             
0457+  64AA~            	endif
0457+  64AA~            	endif
0457+  64AA             
0457+  64A5             
0457+  64A5 04          
0457+  64A6             
0457+  64A6             
0457+  64A6~            	endif
0457+  64A6~            	endif
0457+  64A6~            	endif
0457+  64A6             
0457+  64AA             
0457+  64AA~            	endif
0457+  64AA~            	endif
0457+  64AA             
0458+  64AA             	done(1)
0458+  64AA~            	done(1)
0458+  64AA~            	done(1)
0458+  64AA~            	done(1)
0458+  64AA~            	done(1)
0458+  64AA             
0458+  64AA 7E 79 7A    
0459+  64AD             sw100pt:
0460+  64AD BD 7D 71    	score100()
0461+  64B0             	done(1)
0461+  64B0~            	done(1)
0461+  64B0~            	done(1)
0461+  64B0~            	done(1)
0461+  64B0~            	done(1)
0461+  64B0             
0461+  64B0 7E 79 7A    
0462+  64B3             sw500pt:
0463+  64B3 BD 65 6A    	jsr	alternate
0464+  64B6             	score500()
0464+  64B6 BD 7D 71    
0464+  64B9 C6 02       
0464+  64BB F7 01 49    
0464+  64BE 86 0E       
0464+  64C0 BD 7D 2F    
0464+  64C3 BD 7D 71    
0464+  64C6 C6 02       
0464+  64C8 F7 01 49    
0464+  64CB 86 0E       
0464+  64CD BD 7D 2F    
0464+  64D0 BD 7D 71    
0464+  64D3 C6 02       
0464+  64D5 F7 01 49    
0464+  64D8 86 0E       
0464+  64DA BD 7D 2F    
0464+  64DD BD 7D 71    
0464+  64E0 C6 02       
0464+  64E2 F7 01 49    
0464+  64E5 86 0E       
0464+  64E7 BD 7D 2F    
0464+  64EA BD 7D 71    
0464+  64ED C6 02       
0464+  64EF F7 01 49    
0464+  64F2 86 0E       
0464+  64F4 BD 7D 2F    
0465+  64F7             	done(1)
0465+  64F7~            	done(1)
0465+  64F7~            	done(1)
0465+  64F7~            	done(1)
0465+  64F7~            	done(1)
0465+  64F7             
0465+  64F7 7E 79 7A    
0466+  64FA             swPop:
0467+  64FA BD 65 6A    	jsr	alternate
0468+  64FD BD 7D 71    	score100()
0469+  6500             	done(1)
0469+  6500~            	done(1)
0469+  6500~            	done(1)
0469+  6500~            	done(1)
0469+  6500~            	done(1)
0469+  6500             
0469+  6500 7E 79 7A    
0470+  6503             swDropTip:
0471+  6503 BD 7D 63    	score10()
0472+  6506             	done(1)
0472+  6506~            	done(1)
0472+  6506~            	done(1)
0472+  6506~            	done(1)
0472+  6506~            	done(1)
0472+  6506             
0472+  6506 7E 79 7A    
0473+  6509             swDropHot:
0474+  6509 BD 7D 63    	score10()
0475+  650C             	done(1)
0475+  650C~            	done(1)
0475+  650C~            	done(1)
0475+  650C~            	done(1)
0475+  650C~            	done(1)
0475+  650C             
0475+  650C 7E 79 7A    
0476+  650F             swAdvBonus:
0477+  650F 7C 00 B0    	advBonus()
0478+  6512             	done(1)
0478+  6512~            	done(1)
0478+  6512~            	done(1)
0478+  6512~            	done(1)
0478+  6512~            	done(1)
0478+  6512             
0478+  6512 7E 79 7A    
0479+  6515             swSpinner:
0480+  6515 96 23       	ldaA	>sc(4)
0481+  6517 85 20       	bitA	sr(6)
0482+  6519             	ifne
0482+  6519             
0482+  6519 27 FE       
0483+  651B BD 7D 71    		score100()
0484+  651E 86 0E       		ldaA	$E
0485+  6520             	else
0485+  6520             
0485+  6520             
0485+  6520             
0485+  6520             
0485+  651A             
0485+  651A             
0485+  651A             
0485+  651A~            	else
0485+  651A~            	else
0485+  651A~            	else
0485+  651A~            	else
0485+  651A             
0485+  651A~            	else
0485+  651A~            	else
0485+  651A~            	else
0485+  651A~            	else
0485+  651A             
0485+  651A             
0485+  651A 07          
0485+  6520             
0485+  6520 20 FE       
0485+  6522             
0485+  6522             
0485+  6522             
0485+  6522~            	else
0485+  6522~            	else
0485+  6522~            	else
0485+  6522~            	else
0485+  6522~            	else
0485+  6522             
0485+  6522~            	else
0485+  6522~            	else
0485+  6522             
0485+  6522~            	else
0485+  6522~            	else
0485+  6522             
0486+  6522 86 02       		noValidate
0486+  6524 BA 01 69    
0486+  6527 B7 01 69    
0487+  652A 86 00       		ldaA	0
0488+  652C             	endif
0488+  652C             
0488+  652C             
0488+  652C             
0488+  652C             
0488+  652C             
0488+  652C~            	endif
0488+  652C~            	endif
0488+  652C             
0488+  652C~            	endif
0488+  652C~            	endif
0488+  652C             
0488+  6521             
0488+  6521 0A          
0488+  6522             
0488+  6522             
0488+  6522~            	endif
0488+  6522~            	endif
0488+  6522~            	endif
0488+  6522             
0488+  652C             
0488+  652C~            	endif
0488+  652C~            	endif
0488+  652C             
0489+  652C B7 0E 47    	staA	solenoid1 + CLICKER - 1
0490+  652F             	done(1)
0490+  652F~            	done(1)
0490+  652F~            	done(1)
0490+  652F~            	done(1)
0490+  652F~            	done(1)
0490+  652F             
0490+  652F 7E 79 7A    
0491+  6532             
0492+  6532             swCaptiveRollover:
0493+  6532 96 09       	ldaA	>lc(2)
0494+  6534 85 40       	bitA	lr(7)
0495+  6536             	ifeq ; light off
0495+  6536             
0495+  6536 26 FE       
0496+  6538 BD 7D 63    		score10()
0497+  653B             	else
0497+  653B             
0497+  653B             
0497+  653B             
0497+  653B             
0497+  6537             
0497+  6537             
0497+  6537             
0497+  6537~            	else
0497+  6537~            	else
0497+  6537~            	else
0497+  6537~            	else
0497+  6537             
0497+  6537~            	else
0497+  6537~            	else
0497+  6537~            	else
0497+  6537~            	else
0497+  6537             
0497+  6537             
0497+  6537 05          
0497+  653B             
0497+  653B 20 FE       
0497+  653D             
0497+  653D             
0497+  653D             
0497+  653D~            	else
0497+  653D~            	else
0497+  653D~            	else
0497+  653D~            	else
0497+  653D~            	else
0497+  653D             
0497+  653D~            	else
0497+  653D~            	else
0497+  653D             
0497+  653D~            	else
0497+  653D~            	else
0497+  653D             
0498+  653D BD 7D 80    		score1000()
0499+  6540 86 0E       		ldaA	14 ; captive rollover switch number
0500+  6542 91 A8       		cmpA	>lastSwitch
0501+  6544             		ifne
0501+  6544             
0501+  6544 27 FE       
0502+  6546 BD 65 63    			jsr	captiveAward
0503+  6549             		endif
0503+  6549             
0503+  6549             
0503+  6549             
0503+  6549             
0503+  6549             
0503+  6549~            		endif
0503+  6549~            		endif
0503+  6549             
0503+  6549~            		endif
0503+  6549~            		endif
0503+  6549             
0503+  6545             
0503+  6545 03          
0503+  6546             
0503+  6546             
0503+  6546~            		endif
0503+  6546~            		endif
0503+  6546~            		endif
0503+  6546             
0503+  6549             
0503+  6549~            		endif
0503+  6549~            		endif
0503+  6549             
0504+  6549             	endif
0504+  6549             
0504+  6549             
0504+  6549             
0504+  6549             
0504+  6549             
0504+  6549~            	endif
0504+  6549~            	endif
0504+  6549             
0504+  6549~            	endif
0504+  6549~            	endif
0504+  6549             
0504+  653C             
0504+  653C 0C          
0504+  653D             
0504+  653D             
0504+  653D~            	endif
0504+  653D~            	endif
0504+  653D~            	endif
0504+  653D             
0504+  6549             
0504+  6549~            	endif
0504+  6549~            	endif
0504+  6549             
0505+  6549             	done(1)
0505+  6549~            	done(1)
0505+  6549~            	done(1)
0505+  6549~            	done(1)
0505+  6549~            	done(1)
0505+  6549             
0505+  6549 7E 79 7A    
0506+  654C             
0507+  654C             swCaptiveTarget:
0508+  654C 7C 00 B0    	advBonus()
0509+  654F 96 09       	ldaA	>lc(2)
0510+  6551 85 40       	bitA	lr(7)
0511+  6553             	ifeq ; light off
0511+  6553             
0511+  6553 26 FE       
0512+  6555 BD 7D 63    		score10()
0513+  6558 BD 65 63    		jsr	captiveAward
0514+  655B             	else
0514+  655B             
0514+  655B             
0514+  655B             
0514+  655B             
0514+  6554             
0514+  6554             
0514+  6554             
0514+  6554~            	else
0514+  6554~            	else
0514+  6554~            	else
0514+  6554~            	else
0514+  6554             
0514+  6554~            	else
0514+  6554~            	else
0514+  6554~            	else
0514+  6554~            	else
0514+  6554             
0514+  6554             
0514+  6554 08          
0514+  655B             
0514+  655B 20 FE       
0514+  655D             
0514+  655D             
0514+  655D             
0514+  655D~            	else
0514+  655D~            	else
0514+  655D~            	else
0514+  655D~            	else
0514+  655D~            	else
0514+  655D             
0514+  655D~            	else
0514+  655D~            	else
0514+  655D             
0514+  655D~            	else
0514+  655D~            	else
0514+  655D             
0515+  655D BD 7D 80    		score1000()
0516+  6560             	endif
0516+  6560             
0516+  6560             
0516+  6560             
0516+  6560             
0516+  6560             
0516+  6560~            	endif
0516+  6560~            	endif
0516+  6560             
0516+  6560~            	endif
0516+  6560~            	endif
0516+  6560             
0516+  655C             
0516+  655C 03          
0516+  655D             
0516+  655D             
0516+  655D~            	endif
0516+  655D~            	endif
0516+  655D~            	endif
0516+  655D             
0516+  6560             
0516+  6560~            	endif
0516+  6560~            	endif
0516+  6560             
0517+  6560             	done(1)
0517+  6560~            	done(1)
0517+  6560~            	done(1)
0517+  6560~            	done(1)
0517+  6560~            	done(1)
0517+  6560             
0517+  6560 7E 79 7A    
0518+  6563             	
0519+  6563             captiveAward:
0520+  6563 86 80       	lampOn(8,2) ; right special
0520+  6565 9A 09       
0520+  6567 97 09       
0521+  6569             	
0522+  6569 39          	rts
0523+  656A             	
0524+  656A             alternate:
0525+  656A C6 00       	ldaB	0 ; turn on left?
0526+  656C 86 80       	ldaA	lr(8) ; right special
0527+  656E 95 09       	bitA	>lc(2)
0528+  6570             	ifne
0528+  6570             
0528+  6570 27 FE       
0529+  6572 C6 01       		ldaB	1
0530+  6574 86 7F       		lampOff(8,2) ; right special
0530+  6576 94 09       
0530+  6578 97 09       
0531+  657A             	endif
0531+  657A             
0531+  657A             
0531+  657A             
0531+  657A             
0531+  657A             
0531+  657A~            	endif
0531+  657A~            	endif
0531+  657A             
0531+  657A~            	endif
0531+  657A~            	endif
0531+  657A             
0531+  6571             
0531+  6571 08          
0531+  6572             
0531+  6572             
0531+  6572~            	endif
0531+  6572~            	endif
0531+  6572~            	endif
0531+  6572             
0531+  657A             
0531+  657A~            	endif
0531+  657A~            	endif
0531+  657A             
0532+  657A 86 02       	ldaA	lr(2) ; left special
0533+  657C 95 0A       	bitA	>lc(3)
0534+  657E             	ifne
0534+  657E             
0534+  657E 27 FE       
0535+  6580 86 80       		lampOn(8,2) ; right special
0535+  6582 9A 09       
0535+  6584 97 09       
0536+  6586 86 FD       		lampOff(2,3) ; left special
0536+  6588 94 0A       
0536+  658A 97 0A       
0537+  658C             	endif
0537+  658C             
0537+  658C             
0537+  658C             
0537+  658C             
0537+  658C             
0537+  658C~            	endif
0537+  658C~            	endif
0537+  658C             
0537+  658C~            	endif
0537+  658C~            	endif
0537+  658C             
0537+  657F             
0537+  657F 0C          
0537+  6580             
0537+  6580             
0537+  6580~            	endif
0537+  6580~            	endif
0537+  6580~            	endif
0537+  6580             
0537+  658C             
0537+  658C~            	endif
0537+  658C~            	endif
0537+  658C             
0538+  658C 5D          	tstB
0539+  658D             	ifne
0539+  658D             
0539+  658D 27 FE       
0540+  658F 86 02       		lampOn(2,3) ; left special
0540+  6591 9A 0A       
0540+  6593 97 0A       
0541+  6595             	endif
0541+  6595             
0541+  6595             
0541+  6595             
0541+  6595             
0541+  6595             
0541+  6595~            	endif
0541+  6595~            	endif
0541+  6595             
0541+  6595~            	endif
0541+  6595~            	endif
0541+  6595             
0541+  658E             
0541+  658E 06          
0541+  658F             
0541+  658F             
0541+  658F~            	endif
0541+  658F~            	endif
0541+  658F~            	endif
0541+  658F             
0541+  6595             
0541+  6595~            	endif
0541+  6595~            	endif
0541+  6595             
0542+  6595 39          	rts
0543+  6596             	
0544+  6596             	
0545+  6596             ; end callbacks
0546+  6596             	.msfirst
0547+  6596             ; needs to be on $**00 address
0548+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0549+  6000 61 ED       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0549+  6002 61 ED       
0549+  6004 62 06       
0549+  6006 60 C0       
0549+  6008 60 C0       
0549+  600A 60 C0       
0549+  600C 61 ED       
0549+  600E 60 C0       
0550+  6010 62 3D       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0550+  6012 61 ED       
0550+  6014 64 75       
0550+  6016 64 95       
0550+  6018 64 9E       
0550+  601A 64 B3       
0550+  601C 65 32       
0550+  601E 65 4C       
0551+  6020 65 03       	.dw swDropTip	\.dw swDropTip\.dw swDropTip\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0551+  6022 65 03       
0551+  6024 65 03       
0551+  6026 65 0F       
0551+  6028 64 9E       
0551+  602A 63 6E       
0551+  602C 64 9E       
0551+  602E 60 C0       
0552+  6030 65 09       	.dw swDropHot	\.dw swDropHot\.dw swDropHot\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0552+  6032 65 09       
0552+  6034 65 09       
0552+  6036 64 9E       
0552+  6038 63 0B       
0552+  603A 65 15       
0552+  603C 64 FA       
0552+  603E 64 B3       
0553+  6040 64 55       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0553+  6042 64 95       
0553+  6044 64 9E       
0553+  6046 60 C0       
0553+  6048 64 3E       
0553+  604A 60 C0       
0553+  604C 60 C0       
0553+  604E 60 C0       
0554+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0554+  6052 60 C0       
0554+  6054 60 C0       
0554+  6056 60 C0       
0554+  6058 60 C0       
0554+  605A 60 C0       
0554+  605C 60 C0       
0554+  605E 60 C0       
0555+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0555+  6062 60 C0       
0555+  6064 60 C0       
0555+  6066 60 C0       
0555+  6068 60 C0       
0555+  606A 60 C0       
0555+  606C 60 C0       
0555+  606E 60 C0       
0556+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0556+  6072 60 C0       
0556+  6074 60 C0       
0556+  6076 60 C0       
0556+  6078 60 C0       
0556+  607A 60 C0       
0556+  607C 60 C0       
0556+  607E 60 C0       
0557+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0558+  6080             ; off = how many cycles it must be off for
0559+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0560+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0561+  6080             ; TRANSPOSED (?)
0562+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0563+  6080             settleTable: ; must be right after callbackTable
0564+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0564+  6081 87          
0564+  6082 C2          
0564+  6083 47          
0564+  6084 47          
0564+  6085 47          
0564+  6086 87          
0564+  6087 47          
0565+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0565+  6089 87          
0565+  608A 87          
0565+  608B 87          
0565+  608C 81          
0565+  608D 81          
0565+  608E 80          
0565+  608F 87          
0566+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0566+  6091 87          
0566+  6092 87          
0566+  6093 83          
0566+  6094 81          
0566+  6095 E1          
0566+  6096 81          
0566+  6097 80          
0567+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,0,0)\SW(0,0,1,0)\SW(0,1,1,0)
0567+  6099 87          
0567+  609A 87          
0567+  609B 81          
0567+  609C E1          
0567+  609D 00          
0567+  609E 80          
0567+  609F 81          
0568+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0568+  60A1 87          
0568+  60A2 81          
0568+  60A3 47          
0568+  60A4 80          
0568+  60A5 47          
0568+  60A6 47          
0568+  60A7 47          
0569+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0569+  60A9 47          
0569+  60AA 47          
0569+  60AB 47          
0569+  60AC 47          
0569+  60AD 47          
0569+  60AE 47          
0569+  60AF 47          
0570+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0570+  60B1 47          
0570+  60B2 47          
0570+  60B3 47          
0570+  60B4 47          
0570+  60B5 47          
0570+  60B6 47          
0570+  60B7 47          
0571+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0571+  60B9 47          
0571+  60BA 47          
0571+  60BB 47          
0571+  60BC 47          
0571+  60BD 47          
0571+  60BE 47          
0571+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 FF       	ldaA	$FF	
0102   78AF B7 28 00    	staA 	displayStrobe
0103   78B2             
0104   78B2 86 00       	ldaA	00
0105   78B4 97 07       	staA	strobe
0106   78B6 B7 01 68    	staA	displayCol
0107   78B9             	
0108   78B9 CE 00 00    	ldX 	0
0109   78BC DF 50       	stX		curCol
0110   78BE             	
0111   78BE 86 00       	ldaA	0
0112   78C0 97 10       	staA	curSwitchRowLsb
0113   78C2             	
0114   78C2             ; fill solenoid status with off
0115   78C2 86 0F       	ldaA	$F
0116   78C4 CE 01 40    	ldX	solenoid1
0117   78C7             lSolDefault:
0118   78C7 A7 00       	staA	0, X
0119   78C9 08          	inX
0120   78CA 8C 01 4F    	cpX	solenoid16
0121   78CD 26 F8       	bne	lSolDefault
0122   78CF             	
0123   78CF             ; clear 8 banks
0124   78CF 86 00       	ldaA 	0
0125   78D1 CE 00 00    	ldX	0
0126   78D4             lClear8:
0127   78D4 A7 08       	staA	lampCol1, X
0128   78D6 A7 A0       	staA	flashLampCol1, X
0129   78D8 A7 80       	staA	waitLeft, X
0130   78DA 08          	inX
0131   78DB 8C 00 08    	cpX	8
0132   78DE 26 F4       	bne 	lClear8
0133   78E0             	
0134   78E0             ; empty settle
0135   78E0 86 00       	ldaA	$00
0136   78E2 CE 01 00    	ldX	settleRow1
0137   78E5             lSettleDefault:
0138   78E5 A7 00       	staA	0, X
0139   78E7 08          	inX
0140   78E8 8C 01 3F    	cpX	settleRow8End
0141   78EB 26 F8       	bne	lSettleDefault
0142   78ED             	
0143   78ED             ; empty queue
0144   78ED 86 FF       	ldaA	$FF
0145   78EF CE 00 60    	ldX	queue
0146   78F2             lEmptyQueue:
0147   78F2 A7 00       	staA	0, X
0148   78F4 08          	inX
0149   78F5 8C 00 67    	cpX	queueEnd
0150   78F8 26 F8       	bne	lEmptyQueue
0151   78FA             	
0152   78FA 86 00       	ldaA	0
0153   78FC 97 54       	staA	queueHead + 0
0154   78FE 97 56       	staA	queueTail + 0
0155   7900 86 60       	ldaA	queue
0156   7902 97 55       	staA	queueHead + 1
0157   7904 97 57       	staA	queueTail + 1
0158   7906             	
0159   7906             ; test numbers
0160   7906 86 20       	lampOn(6,8) ; game over
0160   7908 9A 0F       
0160   790A 97 0F       
0161   790C             
0162   790C             	
0163   790C BD 7D 44    	jsr resetScores
0164   790F             	
0165   790F             ; setup complete
0166   790F 0E          	clI		; enable timer interrupt
0167   7910             	
0168   7910             	
0169   7910             end:
0170   7910 B6 01 69    	ldaA	>state
0171   7913 85 04       	bitA	100b
0172   7915             	ifne
0172   7915             
0172   7915 27 FE       
0173   7917             		; dec wait timers
0174   7917 CE 00 7F    		ldX	waitLeft - 1
0175   791A             decWaitTimers:
0176   791A 08          		inX
0177   791B A6 00       		ldaA	0, X
0178   791D             		ifne
0178   791D             
0178   791D 27 FE       
0179   791F 4A          			decA
0180   7920 A7 00       			staA	0, X
0181   7922             			ifeq
0181   7922             
0181   7922 26 FE       
0182   7924 A6 08       				ldaA	waitMsb - waitLeft, X
0183   7926 97 58       				staA	tempQ
0184   7928 A6 10       				ldaA	waitLsb - waitLeft, X
0185   792A 97 59       				staA	tempQ + 1
0186   792C E6 18       				ldaB	waitReg - waitLeft, X
0187   792E DE 58       				ldX	>tempQ
0188   7930 6E 00       				jmp	0, X
0189   7932             			endif
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7923             
0189   7923 0E          
0189   7924             
0189   7924             
0189   7924~            			endif
0189   7924~            			endif
0189   7924~            			endif
0189   7924             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0190   7932             		endif
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   791E             
0190   791E 13          
0190   791F             
0190   791F             
0190   791F~            		endif
0190   791F~            		endif
0190   791F~            		endif
0190   791F             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0191   7932 8C 00 87    		cpX	waitLeftEnd
0192   7935 26 E3       		bne	decWaitTimers
0193   7937             		
0194   7937 B6 01 69    		ldaA	>state		; clear strobe reset bit
0195   793A 84 FB       		andA	11111011b
0196   793C B7 01 69    		staA	state
0197   793F             	endif
0197   793F             
0197   793F             
0197   793F             
0197   793F             
0197   793F             
0197   793F~            	endif
0197   793F~            	endif
0197   793F             
0197   793F~            	endif
0197   793F~            	endif
0197   793F             
0197   7916             
0197   7916 28          
0197   7917             
0197   7917             
0197   7917~            	endif
0197   7917~            	endif
0197   7917~            	endif
0197   7917             
0197   793F             
0197   793F~            	endif
0197   793F~            	endif
0197   793F             
0198   793F             
0199   793F             		
0200   793F             ; pop queue
0201   793F D6 57       	ldaB	>queueTail + 1
0202   7941 D1 55       	cmpB	>queueHead + 1
0203   7943             	ifeq
0203   7943             
0203   7943 26 FE       
0204   7945 7E 79 D9    		jmp skipQueue
0205   7948             	endif
0205   7948             
0205   7948             
0205   7948             
0205   7948             
0205   7948             
0205   7948~            	endif
0205   7948~            	endif
0205   7948             
0205   7948~            	endif
0205   7948~            	endif
0205   7948             
0205   7944             
0205   7944 03          
0205   7945             
0205   7945             
0205   7945~            	endif
0205   7945~            	endif
0205   7945~            	endif
0205   7945             
0205   7948             
0205   7948~            	endif
0205   7948~            	endif
0205   7948             
0206   7948             	
0207   7948 DE 54       	ldX	>queueHead
0208   794A A6 00       	ldaA	0, X	; A now contains the first queue item
0209   794C             	
0210   794C 16          	tAB
0211   794D C4 3F       	andB	00111111b ; B = callback index
0212   794F             	
0213   794F D7 59       	staB	tempQ + 1
0214   7951 C6 60       	ldaB	callbackTable >> 8
0215   7953 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0216   7955 DE 58       	ldX	>tempQ
0217   7957             	
0218   7957 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0219   7959 C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0220   795B             	ifne ; if closure only
0220   795B             
0220   795B 27 FE       
0221   795D 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0222   795F 26 62       		bne	skipEvent
0223   7961             	endif
0223   7961             
0223   7961             
0223   7961             
0223   7961             
0223   7961             
0223   7961~            	endif
0223   7961~            	endif
0223   7961             
0223   7961~            	endif
0223   7961~            	endif
0223   7961             
0223   795C             
0223   795C 04          
0223   795D             
0223   795D             
0223   795D~            	endif
0223   795D~            	endif
0223   795D~            	endif
0223   795D             
0223   7961             
0223   7961~            	endif
0223   7961~            	endif
0223   7961             
0224   7961             	
0225   7961 C5 40       	bitB	01000000b ; B.7 = active in game over
0226   7963             	ifeq 	 ; not active in game over
0226   7963             
0226   7963 26 FE       
0227   7965 D6 0F       		ldaB	>lc(8)	; gameover mask
0228   7967 C5 20       		bitB	lr(6)
0229   7969 26 58       		bne	skipEvent
0230   796B D6 0F       		ldaB	>lc(8) ; tilt bit
0231   796D C5 10       		bitB	lr(5)
0232   796F 26 52       		bne	skipEvent
0233   7971             	endif
0233   7971             
0233   7971             
0233   7971             
0233   7971             
0233   7971             
0233   7971~            	endif
0233   7971~            	endif
0233   7971             
0233   7971~            	endif
0233   7971~            	endif
0233   7971             
0233   7964             
0233   7964 0C          
0233   7965             
0233   7965             
0233   7965~            	endif
0233   7965~            	endif
0233   7965~            	endif
0233   7965             
0233   7971             
0233   7971~            	endif
0233   7971~            	endif
0233   7971             
0234   7971             	
0235   7971             	; checked passed, do callback
0236   7971 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0237   7974 DE 58       	ldX	>tempQ
0238   7976 EE 00       	ldX	0, X
0239   7978 6E 00       	jmp	0, X
0240   797A             	; everything trashed
0241   797A             afterQueueEvent:
0242   797A BD 60 C3    	jsr 	bonusLights
0243   797D             	
0244   797D             	; update last switch
0245   797D 96 59       	ldaA	> tempQ + 1
0246   797F 44          	lsrA 	; got doubled earlier
0247   7980 97 A8       	staA	lastSwitch
0248   7982             
0249   7982 86 02       	ldaA	10b ; no validate bit
0250   7984 B5 01 69    	bitA	>state
0251   7987             	ifeq ; validate pf
0251   7987             
0251   7987 26 FE       
0252   7989             		; check if playfield invalid
0253   7989 86 0F       		ldaA	00001111b ; player up
0254   798B 95 A7       		bitA	>flc(8)
0255   798D             		ifne ; any flashing -> pf invalid
0255   798D             
0255   798D 27 FE       
0256   798F 43          			comA	; turn off flashing
0257   7990 94 A7       			andA	>flc(8)
0258   7992 97 A7       			staA	flc(8)
0259   7994             			
0260   7994 86 01       			ldaA	lr(1) ; shoot again pf flashing
0261   7996 95 A2       			bitA	>flc(3)
0262   7998             			ifne
0262   7998             
0262   7998 27 FE       
0263   799A             				; turn off ball save
0264   799A 86 FE       				flashOff(1,3)
0264   799C 94 A2       
0264   799E 97 A2       
0265   79A0 86 40       				ldaA	lr(7) ; shoot again backbox
0266   79A2 95 0F       				bitA	>lc(8)
0267   79A4             				ifeq
0267   79A4             
0267   79A4 26 FE       
0268   79A6 86 FE       					lampOff(1,3) ; shoot again pf
0268   79A8 94 0A       
0268   79AA 97 0A       
0269   79AC             				endif
0269   79AC             
0269   79AC             
0269   79AC             
0269   79AC             
0269   79AC             
0269   79AC~            				endif
0269   79AC~            				endif
0269   79AC             
0269   79AC~            				endif
0269   79AC~            				endif
0269   79AC             
0269   79A5             
0269   79A5 06          
0269   79A6             
0269   79A6             
0269   79A6~            				endif
0269   79A6~            				endif
0269   79A6~            				endif
0269   79A6             
0269   79AC             
0269   79AC~            				endif
0269   79AC~            				endif
0269   79AC             
0270   79AC             			else
0270   79AC             
0270   79AC             
0270   79AC             
0270   79AC             
0270   7999             
0270   7999             
0270   7999             
0270   7999~            			else
0270   7999~            			else
0270   7999~            			else
0270   7999~            			else
0270   7999             
0270   7999~            			else
0270   7999~            			else
0270   7999~            			else
0270   7999~            			else
0270   7999             
0270   7999             
0270   7999 14          
0270   79AC             
0270   79AC 20 FE       
0270   79AE             
0270   79AE             
0270   79AE             
0270   79AE~            			else
0270   79AE~            			else
0270   79AE~            			else
0270   79AE~            			else
0270   79AE~            			else
0270   79AE             
0270   79AE~            			else
0270   79AE~            			else
0270   79AE             
0270   79AE~            			else
0270   79AE~            			else
0270   79AE             
0271   79AE 86 FE       				lampOff(1,3) ; shoot again
0271   79B0 94 0A       
0271   79B2 97 0A       
0272   79B4 86 BF       				lampOff(7,8)
0272   79B6 94 0F       
0272   79B8 97 0F       
0273   79BA             			endif
0273   79BA             
0273   79BA             
0273   79BA             
0273   79BA             
0273   79BA             
0273   79BA~            			endif
0273   79BA~            			endif
0273   79BA             
0273   79BA~            			endif
0273   79BA~            			endif
0273   79BA             
0273   79AD             
0273   79AD 0C          
0273   79AE             
0273   79AE             
0273   79AE~            			endif
0273   79AE~            			endif
0273   79AE~            			endif
0273   79AE             
0273   79BA             
0273   79BA~            			endif
0273   79BA~            			endif
0273   79BA             
0274   79BA             		endif
0274   79BA             
0274   79BA             
0274   79BA             
0274   79BA             
0274   79BA             
0274   79BA~            		endif
0274   79BA~            		endif
0274   79BA             
0274   79BA~            		endif
0274   79BA~            		endif
0274   79BA             
0274   798E             
0274   798E 2B          
0274   798F             
0274   798F             
0274   798F~            		endif
0274   798F~            		endif
0274   798F~            		endif
0274   798F             
0274   79BA             
0274   79BA~            		endif
0274   79BA~            		endif
0274   79BA             
0275   79BA             	else
0275   79BA             
0275   79BA             
0275   79BA             
0275   79BA             
0275   7988             
0275   7988             
0275   7988             
0275   7988~            	else
0275   7988~            	else
0275   7988~            	else
0275   7988~            	else
0275   7988             
0275   7988~            	else
0275   7988~            	else
0275   7988~            	else
0275   7988~            	else
0275   7988             
0275   7988             
0275   7988 33          
0275   79BA             
0275   79BA 20 FE       
0275   79BC             
0275   79BC             
0275   79BC             
0275   79BC~            	else
0275   79BC~            	else
0275   79BC~            	else
0275   79BC~            	else
0275   79BC~            	else
0275   79BC             
0275   79BC~            	else
0275   79BC~            	else
0275   79BC             
0275   79BC~            	else
0275   79BC~            	else
0275   79BC             
0276   79BC             		; clear don't validate bit
0277   79BC 43          		comA
0278   79BD B4 01 69    		andA	>state
0279   79C0 B7 01 69    		staA	>state
0280   79C3             	endif
0280   79C3             
0280   79C3             
0280   79C3             
0280   79C3             
0280   79C3             
0280   79C3~            	endif
0280   79C3~            	endif
0280   79C3             
0280   79C3~            	endif
0280   79C3~            	endif
0280   79C3             
0280   79BB             
0280   79BB 07          
0280   79BC             
0280   79BC             
0280   79BC~            	endif
0280   79BC~            	endif
0280   79BC~            	endif
0280   79BC             
0280   79C3             
0280   79C3~            	endif
0280   79C3~            	endif
0280   79C3             
0281   79C3             	
0282   79C3             skipEvent:
0283   79C3 B6 01 69    	ldaA	>state
0284   79C6 85 04       	bitA	100b
0285   79C8             	ifeq	; don't process queue if still finishing timers
0285   79C8             
0285   79C8 26 FE       
0286   79CA C6 67       		ldaB	queueEnd
0287   79CC D1 55       		cmpB	>queueHead + 1
0288   79CE             		ifeq
0288   79CE             
0288   79CE 26 FE       
0289   79D0 C6 60       			ldaB	queue
0290   79D2 D7 55       			staB	queueHead + 1
0291   79D4             		else
0291   79D4             
0291   79D4             
0291   79D4             
0291   79D4             
0291   79CF             
0291   79CF             
0291   79CF             
0291   79CF~            		else
0291   79CF~            		else
0291   79CF~            		else
0291   79CF~            		else
0291   79CF             
0291   79CF~            		else
0291   79CF~            		else
0291   79CF~            		else
0291   79CF~            		else
0291   79CF             
0291   79CF             
0291   79CF 06          
0291   79D4             
0291   79D4 20 FE       
0291   79D6             
0291   79D6             
0291   79D6             
0291   79D6~            		else
0291   79D6~            		else
0291   79D6~            		else
0291   79D6~            		else
0291   79D6~            		else
0291   79D6             
0291   79D6~            		else
0291   79D6~            		else
0291   79D6             
0291   79D6~            		else
0291   79D6~            		else
0291   79D6             
0292   79D6 7C 00 55    			inc	queueHead + 1
0293   79D9             		endif
0293   79D9             
0293   79D9             
0293   79D9             
0293   79D9             
0293   79D9             
0293   79D9~            		endif
0293   79D9~            		endif
0293   79D9             
0293   79D9~            		endif
0293   79D9~            		endif
0293   79D9             
0293   79D5             
0293   79D5 03          
0293   79D6             
0293   79D6             
0293   79D6~            		endif
0293   79D6~            		endif
0293   79D6~            		endif
0293   79D6             
0293   79D9             
0293   79D9~            		endif
0293   79D9~            		endif
0293   79D9             
0294   79D9             	endif
0294   79D9             
0294   79D9             
0294   79D9             
0294   79D9             
0294   79D9             
0294   79D9~            	endif
0294   79D9~            	endif
0294   79D9             
0294   79D9~            	endif
0294   79D9~            	endif
0294   79D9             
0294   79C9             
0294   79C9 0F          
0294   79CA             
0294   79CA             
0294   79CA~            	endif
0294   79CA~            	endif
0294   79CA~            	endif
0294   79CA             
0294   79D9             
0294   79D9~            	endif
0294   79D9~            	endif
0294   79D9             
0295   79D9             				
0296   79D9             skipQueue:
0297   79D9             				
0298   79D9             	
0299   79D9             				
0300   79D9 7E 79 10    	jmp		end
0301   79DC 00 00       	.dw 0
0302   79DE 00 00       	.dw 0
0303   79E0 00 00       	.dw 0
0304   79E2 00 00       	.dw 0
0305   79E4 00 00       	.dw 0
0306   79E6             		
0307   79E6             interrupt:	
0308   79E6 7C 00 02    	inc	counter
0309   79E9 86 00       	ldaA	0
0310   79EB 91 02       	cmpA	>counter
0311   79ED 26 21       	bne	counterHandled
0312   79EF 7C 00 03    	inc 	counter2
0313   79F2 86 04       	ldaA	4
0314   79F4 91 03       	cmpA	>counter2
0315   79F6 26 18       	bne	counterHandled
0316   79F8             	
0317   79F8 86 00       	ldaA	0
0318   79FA 97 03       	staA	counter2
0319   79FC 86 77       	ldaA	01110111b
0320   79FE 91 70       	cmpA	>displayBcd1
0321   7A00 27 08       	beq	on
0322   7A02             	
0323   7A02 86 F0       	ldaA	$F0
0324   7A04             	;staA	lampRow1
0325   7A04 86 77       	ldaA	01110111b
0326   7A06 97 70       	staA	displayBcd1	
0327   7A08 20 06       	bra	counterHandled
0328   7A0A             on:
0329   7A0A 86 0F       	ldaA	$0F
0330   7A0C             	;staA	lampRow1
0331   7A0C 86 33       	ldaA	00110011b
0332   7A0E 97 70       	staA	displayBcd1	
0333   7A10             
0334   7A10             counterHandled:
0335   7A10             ; move switch column
0336   7A10 96 07       	ldaA	>strobe
0337   7A12 B7 30 02    	staA	switchStrobe
0338   7A15             	
0339   7A15             ; update display 
0340   7A15             	
0341   7A15 DE 50       	ldX	>curCol
0342   7A17 B6 01 68    	ldaA	>displayCol
0343   7A1A C6 FF       	ldaB 	$FF
0344   7A1C F7 28 02    	staB	displayBcd
0345   7A1F B7 28 00    	staA	displayStrobe
0346   7A22 85 08       	bitA	00001000b
0347   7A24             	ifeq
0347   7A24             
0347   7A24 26 FE       
0348   7A26 E6 70       		ldaB	displayBcd1, X
0349   7A28             	else
0349   7A28             
0349   7A28             
0349   7A28             
0349   7A28             
0349   7A25             
0349   7A25             
0349   7A25             
0349   7A25~            	else
0349   7A25~            	else
0349   7A25~            	else
0349   7A25~            	else
0349   7A25             
0349   7A25~            	else
0349   7A25~            	else
0349   7A25~            	else
0349   7A25~            	else
0349   7A25             
0349   7A25             
0349   7A25 04          
0349   7A28             
0349   7A28 20 FE       
0349   7A2A             
0349   7A2A             
0349   7A2A             
0349   7A2A~            	else
0349   7A2A~            	else
0349   7A2A~            	else
0349   7A2A~            	else
0349   7A2A~            	else
0349   7A2A             
0349   7A2A~            	else
0349   7A2A~            	else
0349   7A2A             
0349   7A2A~            	else
0349   7A2A~            	else
0349   7A2A             
0350   7A2A E6 78       		ldaB	displayBcd1 + 8, X
0351   7A2C             	endif
0351   7A2C             
0351   7A2C             
0351   7A2C             
0351   7A2C             
0351   7A2C             
0351   7A2C~            	endif
0351   7A2C~            	endif
0351   7A2C             
0351   7A2C~            	endif
0351   7A2C~            	endif
0351   7A2C             
0351   7A29             
0351   7A29 02          
0351   7A2A             
0351   7A2A             
0351   7A2A~            	endif
0351   7A2A~            	endif
0351   7A2A~            	endif
0351   7A2A             
0351   7A2C             
0351   7A2C~            	endif
0351   7A2C~            	endif
0351   7A2C             
0352   7A2C F7 28 02    	staB	displayBcd
0353   7A2F             	
0354   7A2F             ; read switches
0355   7A2F             	;jmp updateLamps
0356   7A2F DE 50       	ldX	>curCol
0357   7A31 B6 30 00    	ldaA	>switchRow
0358   7A34 16          	tab
0359   7A35 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0360   7A37             	
0361   7A37 D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0362   7A39 D7 01       	staB	temp + 1 			; temp = switch / 2
0363   7A3B D7 53       	staB	tempX + 1			; tempX = cRAM
0364   7A3D C6 60       	ldaB	callbackTable >> 8
0365   7A3F D7 00       	staB	temp
0366   7A41 C6 01       	ldaB	cRAM >> 8
0367   7A43 D7 52       	staB	tempX
0368   7A45             	
0369   7A45 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0370   7A47             	
0371   7A47             	; temp now contains the beginning of the row in the callbackTable
0372   7A47             swNext:
0373   7A47 85 01       	bitA	00000001b	 ; Z set if switch not different
0374   7A49             	ifne		; if bit set, switch different
0374   7A49             
0374   7A49 27 FE       
0375   7A4B 36          		pshA ; store changed switches left
0376   7A4C DE 52       		ldX	>tempX
0377   7A4E 86 18       		ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0378   7A50             				; but checking 'multiple of 8' would miss 7/8 switch
0379   7A50             				; columns completely since they're in sync
0380   7A50             				; so instead the lowest bits are empty (so that it'll
0381   7A50             				; get all switch cols) and instead it skips 7/8 groups 
0382   7A50             				; of 8 IRQs
0383   7A50 95 02       		bitA	>counter
0384   7A52 27 08       		beq checkSettled ; counter not multiple of 8, skip settling (multiplies settle time by 8)
0385   7A54             			; just check if this is the beginning of the settle
0386   7A54             			;  (want to react right away when a switch closes)
0387   7A54 A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0388   7A56 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0389   7A58 27 33       			beq 	notSettled; A=0 -> was settled, so can begin
0390   7A5A 20 4B       			bra settledEnd
0391   7A5C             checkSettled:
0392   7A5C A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0393   7A5E 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0394   7A60 27 2B       		beq 	notSettled; A=0 -> settled
0395   7A62             		; else A > 0 -> settling
0396   7A62 4A          			decA
0397   7A63 A7 00       			staA	0, X	; sets Z if now A = 0
0398   7A65             			ifeq ; A=0 -> now settled, fire event
0398   7A65             
0398   7A65 26 FE       
0399   7A67             settled:		
0400   7A67 DE 50       				ldX	>curCol
0401   7A69 17          				tBA	; A now the bit in row
0402   7A6A A8 20       				eorA	switchRow1, X ; toggle bit in row
0403   7A6C A7 20       				staA	switchRow1, X ; A now state of row
0404   7A6E             				
0405   7A6E F5 30 00    				bitB	>switchRow
0406   7A71             				ifne ; switch now on
0406   7A71             
0406   7A71 27 FE       
0407   7A73 86 40       					ldaA	01000000b
0408   7A75             				else
0408   7A75             
0408   7A75             
0408   7A75             
0408   7A75             
0408   7A72             
0408   7A72             
0408   7A72             
0408   7A72~            				else
0408   7A72~            				else
0408   7A72~            				else
0408   7A72~            				else
0408   7A72             
0408   7A72~            				else
0408   7A72~            				else
0408   7A72~            				else
0408   7A72~            				else
0408   7A72             
0408   7A72             
0408   7A72 04          
0408   7A75             
0408   7A75 20 FE       
0408   7A77             
0408   7A77             
0408   7A77             
0408   7A77~            				else
0408   7A77~            				else
0408   7A77~            				else
0408   7A77~            				else
0408   7A77~            				else
0408   7A77             
0408   7A77~            				else
0408   7A77~            				else
0408   7A77             
0408   7A77~            				else
0408   7A77~            				else
0408   7A77             
0409   7A77 86 C0       					ldaA	11000000b
0410   7A79             				endif
0410   7A79             
0410   7A79             
0410   7A79             
0410   7A79             
0410   7A79             
0410   7A79~            				endif
0410   7A79~            				endif
0410   7A79             
0410   7A79~            				endif
0410   7A79~            				endif
0410   7A79             
0410   7A76             
0410   7A76 02          
0410   7A77             
0410   7A77             
0410   7A77~            				endif
0410   7A77~            				endif
0410   7A77~            				endif
0410   7A77             
0410   7A79             
0410   7A79~            				endif
0410   7A79~            				endif
0410   7A79             
0411   7A79 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0412   7A7B             				
0413   7A7B             				; store event
0414   7A7B DE 56       				ldX	>queueTail
0415   7A7D A7 00       				staA	0, X
0416   7A7F 7C 00 57    				inc	queueTail + 1
0417   7A82             				
0418   7A82             				; wrap queueTail if necessary
0419   7A82 8C 00 67    				cpX	queueEnd 
0420   7A85             				ifeq
0420   7A85             
0420   7A85 26 FE       
0421   7A87 86 60       					ldaA	queue 
0422   7A89 97 57       					staA	queueTail + 1
0423   7A8B             				endif
0423   7A8B             
0423   7A8B             
0423   7A8B             
0423   7A8B             
0423   7A8B             
0423   7A8B~            				endif
0423   7A8B~            				endif
0423   7A8B             
0423   7A8B~            				endif
0423   7A8B~            				endif
0423   7A8B             
0423   7A86             
0423   7A86 04          
0423   7A87             
0423   7A87             
0423   7A87~            				endif
0423   7A87~            				endif
0423   7A87~            				endif
0423   7A87             
0423   7A8B             
0423   7A8B~            				endif
0423   7A8B~            				endif
0423   7A8B             
0424   7A8B             			endif
0424   7A8B             
0424   7A8B             
0424   7A8B             
0424   7A8B             
0424   7A8B             
0424   7A8B~            			endif
0424   7A8B~            			endif
0424   7A8B             
0424   7A8B~            			endif
0424   7A8B~            			endif
0424   7A8B             
0424   7A66             
0424   7A66 24          
0424   7A67             
0424   7A67             
0424   7A67~            			endif
0424   7A67~            			endif
0424   7A67~            			endif
0424   7A67             
0424   7A8B             
0424   7A8B~            			endif
0424   7A8B~            			endif
0424   7A8B             
0425   7A8B 20 1A       		bra settledEnd
0426   7A8D             notSettled: ; =0 -> was settled, so now it's not
0427   7A8D             			; get the settle time
0428   7A8D 96 53       			ldaA	>tempX + 1
0429   7A8F 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0430   7A91 DE 00       			ldX	>temp
0431   7A93             			
0432   7A93             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0433   7A93 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0434   7A95             			
0435   7A95             			; need to get correct 3 bits from switch settings
0436   7A95 F5 30 00    			bitB	>switchRow
0437   7A98             			ifne ; switch just turned on
0437   7A98             
0437   7A98 27 FE       
0438   7A9A 44          				lsrA
0439   7A9B 44          				lsrA
0440   7A9C             			else
0440   7A9C             
0440   7A9C             
0440   7A9C             
0440   7A9C             
0440   7A99             
0440   7A99             
0440   7A99             
0440   7A99~            			else
0440   7A99~            			else
0440   7A99~            			else
0440   7A99~            			else
0440   7A99             
0440   7A99~            			else
0440   7A99~            			else
0440   7A99~            			else
0440   7A99~            			else
0440   7A99             
0440   7A99             
0440   7A99 04          
0440   7A9C             
0440   7A9C 20 FE       
0440   7A9E             
0440   7A9E             
0440   7A9E             
0440   7A9E~            			else
0440   7A9E~            			else
0440   7A9E~            			else
0440   7A9E~            			else
0440   7A9E~            			else
0440   7A9E             
0440   7A9E~            			else
0440   7A9E~            			else
0440   7A9E             
0440   7A9E~            			else
0440   7A9E~            			else
0440   7A9E             
0441   7A9E 48          				aslA
0442   7A9F             			endif
0442   7A9F             
0442   7A9F             
0442   7A9F             
0442   7A9F             
0442   7A9F             
0442   7A9F~            			endif
0442   7A9F~            			endif
0442   7A9F             
0442   7A9F~            			endif
0442   7A9F~            			endif
0442   7A9F             
0442   7A9D             
0442   7A9D 01          
0442   7A9E             
0442   7A9E             
0442   7A9E~            			endif
0442   7A9E~            			endif
0442   7A9E~            			endif
0442   7A9E             
0442   7A9F             
0442   7A9F~            			endif
0442   7A9F~            			endif
0442   7A9F             
0443   7A9F 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0444   7AA1             						
0445   7AA1 DE 52       			ldX	>tempX
0446   7AA3 A7 00       			staA	0, X		; start settling	
0447   7AA5 27 C0       			beq	settled		; quick out for 0 settle
0448   7AA7             settledEnd:
0449   7AA7             			
0450   7AA7 32          		pulA
0451   7AA8             	endif
0451   7AA8             
0451   7AA8             
0451   7AA8             
0451   7AA8             
0451   7AA8             
0451   7AA8~            	endif
0451   7AA8~            	endif
0451   7AA8             
0451   7AA8~            	endif
0451   7AA8~            	endif
0451   7AA8             
0451   7A4A             
0451   7A4A 5D          
0451   7A4B             
0451   7A4B             
0451   7A4B~            	endif
0451   7A4B~            	endif
0451   7A4B~            	endif
0451   7A4B             
0451   7AA8             
0451   7AA8~            	endif
0451   7AA8~            	endif
0451   7AA8             
0452   7AA8 7C 00 53    	inc tempX + 1
0453   7AAB 58          	aslB
0454   7AAC 44          	lsrA			; pop lowest bit off, set Z if A is empty
0455   7AAD 26 98       	bne		swNext 	; more 'switched' bits, keep processing 
0456   7AAF             	
0457   7AAF             	
0458   7AAF             ; update lamps
0459   7AAF             updateLamps:
0460   7AAF             	;jmp updateStrobe
0461   7AAF             
0462   7AAF DE 50       	ldX	>curCol
0463   7AB1             	
0464   7AB1 86 FF       	ldaA	$FF	;lamp row is inverted
0465   7AB3 B7 24 00    	staA	lampCol
0466   7AB6 96 07       	ldaA	>strobe
0467   7AB8 B7 24 02    	staA	lampStrobe
0468   7ABB             	
0469   7ABB D6 02       	ldaB	>counter
0470   7ABD A6 08       	ldaA	lampCol1, X
0471   7ABF C5 80       	bitB	10000000b 
0472   7AC1             	ifeq
0472   7AC1             
0472   7AC1 26 FE       
0473   7AC3 A8 A0       		eorA	flashLampCol1, X
0474   7AC5 A4 08       		andA	lampCol1, X
0475   7AC7             	endif
0475   7AC7             
0475   7AC7             
0475   7AC7             
0475   7AC7             
0475   7AC7             
0475   7AC7~            	endif
0475   7AC7~            	endif
0475   7AC7             
0475   7AC7~            	endif
0475   7AC7~            	endif
0475   7AC7             
0475   7AC2             
0475   7AC2 04          
0475   7AC3             
0475   7AC3             
0475   7AC3~            	endif
0475   7AC3~            	endif
0475   7AC3~            	endif
0475   7AC3             
0475   7AC7             
0475   7AC7~            	endif
0475   7AC7~            	endif
0475   7AC7             
0476   7AC7 43          	comA	; inverted
0477   7AC8             	
0478   7AC8 B7 24 00    	staA	lampCol
0479   7ACB 86 00       	ldaA	00
0480   7ACD             
0481   7ACD             ; update solenoids
0482   7ACD             	; if a solenoid is set to <254, --
0483   7ACD             	; if =255, off, otherwise on
0484   7ACD             	; else leave it at 254
0485   7ACD             	
0486   7ACD 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0487   7AD0 86 FE       	ldaA	254
0488   7AD2 DE 50       	ldX	>curCol
0489   7AD4             	; update solenoid in current 'column' (1-8) 
0490   7AD4 A1 40       	cmpA	solenoid1 - cRAM, X
0491   7AD6             	ifge 	; solenoid <=254, turn on
0491   7AD6             
0491   7AD6 25 FE       
0492   7AD8             		ifgt	; solenoid < 254, decrement
0492   7AD8             
0492   7AD8 23 FE       
0493   7ADA 6A 40       			dec	solenoid1 - cRAM, X
0494   7ADC             		endif
0494   7ADC             
0494   7ADC             
0494   7ADC             
0494   7ADC             
0494   7ADC             
0494   7ADC~            		endif
0494   7ADC~            		endif
0494   7ADC             
0494   7ADC~            		endif
0494   7ADC~            		endif
0494   7ADC             
0494   7AD9             
0494   7AD9 02          
0494   7ADA             
0494   7ADA             
0494   7ADA~            		endif
0494   7ADA~            		endif
0494   7ADA~            		endif
0494   7ADA             
0494   7ADC             
0494   7ADC~            		endif
0494   7ADC~            		endif
0494   7ADC             
0495   7ADC 0D          		sec
0496   7ADD             	else
0496   7ADD             
0496   7ADD             
0496   7ADD             
0496   7ADD             
0496   7AD7             
0496   7AD7             
0496   7AD7             
0496   7AD7~            	else
0496   7AD7~            	else
0496   7AD7~            	else
0496   7AD7~            	else
0496   7AD7             
0496   7AD7~            	else
0496   7AD7~            	else
0496   7AD7~            	else
0496   7AD7~            	else
0496   7AD7             
0496   7AD7             
0496   7AD7 07          
0496   7ADD             
0496   7ADD 20 FE       
0496   7ADF             
0496   7ADF             
0496   7ADF             
0496   7ADF~            	else
0496   7ADF~            	else
0496   7ADF~            	else
0496   7ADF~            	else
0496   7ADF~            	else
0496   7ADF             
0496   7ADF~            	else
0496   7ADF~            	else
0496   7ADF             
0496   7ADF~            	else
0496   7ADF~            	else
0496   7ADF             
0497   7ADF 0C          		clc
0498   7AE0             	endif
0498   7AE0             
0498   7AE0             
0498   7AE0             
0498   7AE0             
0498   7AE0             
0498   7AE0~            	endif
0498   7AE0~            	endif
0498   7AE0             
0498   7AE0~            	endif
0498   7AE0~            	endif
0498   7AE0             
0498   7ADE             
0498   7ADE 01          
0498   7ADF             
0498   7ADF             
0498   7ADF~            	endif
0498   7ADF~            	endif
0498   7ADF~            	endif
0498   7ADF             
0498   7AE0             
0498   7AE0~            	endif
0498   7AE0~            	endif
0498   7AE0             
0499   7AE0 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0500   7AE3             	; repeat above for second bank
0501   7AE3 A1 48       	cmpA	solenoid9 - cRAM, X
0502   7AE5             	ifge 	; solenoid <=254, turn on
0502   7AE5             
0502   7AE5 25 FE       
0503   7AE7             		ifgt	; solenoid < 254, decrement
0503   7AE7             
0503   7AE7 23 FE       
0504   7AE9 6A 48       			dec	solenoid9 - cRAM, X
0505   7AEB             		endif
0505   7AEB             
0505   7AEB             
0505   7AEB             
0505   7AEB             
0505   7AEB             
0505   7AEB~            		endif
0505   7AEB~            		endif
0505   7AEB             
0505   7AEB~            		endif
0505   7AEB~            		endif
0505   7AEB             
0505   7AE8             
0505   7AE8 02          
0505   7AE9             
0505   7AE9             
0505   7AE9~            		endif
0505   7AE9~            		endif
0505   7AE9~            		endif
0505   7AE9             
0505   7AEB             
0505   7AEB~            		endif
0505   7AEB~            		endif
0505   7AEB             
0506   7AEB 0D          		sec
0507   7AEC             	else
0507   7AEC             
0507   7AEC             
0507   7AEC             
0507   7AEC             
0507   7AE6             
0507   7AE6             
0507   7AE6             
0507   7AE6~            	else
0507   7AE6~            	else
0507   7AE6~            	else
0507   7AE6~            	else
0507   7AE6             
0507   7AE6~            	else
0507   7AE6~            	else
0507   7AE6~            	else
0507   7AE6~            	else
0507   7AE6             
0507   7AE6             
0507   7AE6 07          
0507   7AEC             
0507   7AEC 20 FE       
0507   7AEE             
0507   7AEE             
0507   7AEE             
0507   7AEE~            	else
0507   7AEE~            	else
0507   7AEE~            	else
0507   7AEE~            	else
0507   7AEE~            	else
0507   7AEE             
0507   7AEE~            	else
0507   7AEE~            	else
0507   7AEE             
0507   7AEE~            	else
0507   7AEE~            	else
0507   7AEE             
0508   7AEE 0C          		clc
0509   7AEF             	endif
0509   7AEF             
0509   7AEF             
0509   7AEF             
0509   7AEF             
0509   7AEF             
0509   7AEF~            	endif
0509   7AEF~            	endif
0509   7AEF             
0509   7AEF~            	endif
0509   7AEF~            	endif
0509   7AEF             
0509   7AED             
0509   7AED 01          
0509   7AEE             
0509   7AEE             
0509   7AEE~            	endif
0509   7AEE~            	endif
0509   7AEE~            	endif
0509   7AEE             
0509   7AEF             
0509   7AEF~            	endif
0509   7AEF~            	endif
0509   7AEF             
0510   7AEF 76 00 29    	ror		solBStatus	
0511   7AF2 7A 00 50    	dec		curCol ; undo inc
0512   7AF5             	
0513   7AF5             ; update strobe	
0514   7AF5             updateStrobe:
0515   7AF5             	;ldX		curCol
0516   7AF5             	;inX 	
0517   7AF5 86 08       	ldaA	8 	; pitch
0518   7AF7 9B 10       	addA	>curSwitchRowLsb
0519   7AF9 97 10       	staA	curSwitchRowLsb
0520   7AFB 78 00 07    	asl	strobe
0521   7AFE 7C 01 68    	inc	displayCol
0522   7B01 86 00       	ldaA	0
0523   7B03 91 07       	cmpA	>strobe ; strobe done?  reset
0524   7B05             	ifeq		
0524   7B05             
0524   7B05 26 FE       
0525   7B07 96 28       		ldaA	>solAStatus
0526   7B09 B7 22 00    		staA	solenoidA
0527   7B0C 96 29       		ldaA	>solBStatus
0528   7B0E B7 22 02    		staA	solenoidB
0529   7B11             	
0530   7B11 86 01       		ldaA	00000001b
0531   7B13 97 07       		staA	strobe
0532   7B15             		
0533   7B15             		;ldX 	#0
0534   7B15             		
0535   7B15 86 00       		ldaA	0
0536   7B17 97 50       		staA	curCol
0537   7B19 97 51       		staA	curCol + 1
0538   7B1B 97 10       		staA	curSwitchRowLsb
0539   7B1D 97 28       		staA	solAStatus
0540   7B1F 97 29       		staA	solBStatus
0541   7B21             		
0542   7B21 F6 01 68    		ldaB	>displayCol	; reset display col only if it's > 7 
0543   7B24 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0544   7B26             		ifgt
0544   7B26             
0544   7B26 23 FE       
0545   7B28 B7 01 68    			staA	displayCol
0546   7B2B             		endif
0546   7B2B             
0546   7B2B             
0546   7B2B             
0546   7B2B             
0546   7B2B             
0546   7B2B~            		endif
0546   7B2B~            		endif
0546   7B2B             
0546   7B2B~            		endif
0546   7B2B~            		endif
0546   7B2B             
0546   7B27             
0546   7B27 03          
0546   7B28             
0546   7B28             
0546   7B28~            		endif
0546   7B28~            		endif
0546   7B28~            		endif
0546   7B28             
0546   7B2B             
0546   7B2B~            		endif
0546   7B2B~            		endif
0546   7B2B             
0547   7B2B             	
0548   7B2B B6 01 69    		ldaA	>state
0549   7B2E 8A 04       		oraA	100b
0550   7B30 B7 01 69    		staA	state
0551   7B33             	else
0551   7B33             
0551   7B33             
0551   7B33             
0551   7B33             
0551   7B06             
0551   7B06             
0551   7B06             
0551   7B06~            	else
0551   7B06~            	else
0551   7B06~            	else
0551   7B06~            	else
0551   7B06             
0551   7B06~            	else
0551   7B06~            	else
0551   7B06~            	else
0551   7B06~            	else
0551   7B06             
0551   7B06             
0551   7B06 2E          
0551   7B33             
0551   7B33 20 FE       
0551   7B35             
0551   7B35             
0551   7B35             
0551   7B35~            	else
0551   7B35~            	else
0551   7B35~            	else
0551   7B35~            	else
0551   7B35~            	else
0551   7B35             
0551   7B35~            	else
0551   7B35~            	else
0551   7B35             
0551   7B35~            	else
0551   7B35~            	else
0551   7B35             
0552   7B35 7C 00 51    		inc	curCol + 1
0553   7B38             	endif
0553   7B38             
0553   7B38             
0553   7B38             
0553   7B38             
0553   7B38             
0553   7B38~            	endif
0553   7B38~            	endif
0553   7B38             
0553   7B38~            	endif
0553   7B38~            	endif
0553   7B38             
0553   7B34             
0553   7B34 03          
0553   7B35             
0553   7B35             
0553   7B35~            	endif
0553   7B35~            	endif
0553   7B35~            	endif
0553   7B35             
0553   7B38             
0553   7B38~            	endif
0553   7B38~            	endif
0553   7B38             
0554   7B38             	
0555   7B38 3B          	rti
0556   7B39             afterInterrupt:
0557   7B39             
0558   7FF8             pointers: 	.org $7FF8  	
0559   7FF8             	.msfirst
0560   7FF8 79 E6       	.dw interrupt			
0561   7FFA 79 E6       	.dw interrupt			
0562   7FFC 79 E6       	.dw interrupt			
0563   7FFE 78 00       	.dw main
0564   8000             	
0565   8000             	
0566   8000             	.endtasm: Number of errors = 0
