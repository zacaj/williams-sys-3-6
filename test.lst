0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             curCol:			.equ RAM + $50 ; +
0041+  0000             tempX:			.equ RAM + $52 ; +
0042+  0000             queueHead:		.equ RAM + $54 ; +
0043+  0000             queueTail:		.equ RAM + $56 ; +
0044+  0000             tempQ:			.equ RAM + $58 ; +
0045+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0046+  0000             queueEnd:		.equ RAM + $67
0047+  0000             ;
0048+  0000             displayBcd1:	.equ RAM + $70
0049+  0000             displayBcd16:	.equ RAM + $7F
0050+  0000             ballCount:		.equ displayBcd1 + 7
0051+  0000             waitLeft: 		.equ RAM + $80
0052+  0000             waitLeftEnd:		.equ RAM + $87
0053+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0054+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0055+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0056+  0000             flashLampCol1:		.equ RAM + $A0
0057+  0000             flashLampCol8:		.equ RAM + $A7
0058+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0059+  0000             
0060+  0000             
0061+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0062+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0063+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0064+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0065+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0066+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0067+  0000             #DEFINE s(n) 		(0 + n)
0068+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0069+  0000             pA_10:			.equ pA_1m + 5
0070+  0000             pB_1m:			.equ pA_10 + 1
0071+  0000             pB_10:			.equ pB_1m + 5
0072+  0000             pC_1m:			.equ pB_10 + 1
0073+  0000             pC_10:			.equ pC_1m + 5
0074+  0000             pD_1m:			.equ pC_10 + 1
0075+  0000             pD_10:			.equ pD_1m + 5  
0076+  0000             displayCol:		.equ cRAM + $68
0077+  0000             state:			.equ cRAM + $69	; ? | strobe reset | don't validate | ?
0078+  0000             
0079+  0000             instant:		.equ 4
0080+  0000             debounce:		.equ 1
0081+  0000             slow:			.equ 2
0082+  0000             
0083+  0000             switchSettle:	.equ cRAM + $30
0084+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 74    		cpX	displayBcd1 + 4
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 74    			cpX	displayBcd1 + 4
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7C    		cpX	displayBcd1 + 8 + 4
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7C    			cpX	displayBcd1 + 8 + 4
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0E       	ldaB	>lc(7)
0101+  7C8C C5 02       	bitB	lr(2)
0102+  7C8E 26 1A       	bne	blankP2
0103+  7C90 C5 04       	bitB	lr(3)
0104+  7C92 26 22       	bne	blankP3
0105+  7C94 C5 08       	bitB	lr(4)
0106+  7C96 26 2A       	bne	blankP4
0107+  7C98 C5 10       	bitB	lr(5)
0108+  7C9A 26 32       	bne	blankDone
0109+  7C9C 20 00       	bra	blankP1
0110+  7C9E             blankP1:
0111+  7C9E 86 F0       	ldaA	$F0
0112+  7CA0 9A 74       	oraA	>displayBcd1 + 4
0113+  7CA2 97 74       	staA	displayBcd1 + 4
0114+  7CA4 86 F0       	ldaA	$F0
0115+  7CA6 9A 75       	oraA	>displayBcd1 + 5
0116+  7CA8 97 75       	staA	displayBcd1 + 5
0117+  7CAA             blankP2:
0118+  7CAA 86 F0       	ldaA	$F0
0119+  7CAC 9A 7C       	oraA	>displayBcd1 + 12
0120+  7CAE 97 7C       	staA	displayBcd1 + 12
0121+  7CB0 86 F0       	ldaA	$F0
0122+  7CB2 9A 7D       	oraA	>displayBcd1 + 13
0123+  7CB4 97 7D       	staA	displayBcd1 + 13
0124+  7CB6             blankP3:
0125+  7CB6 86 0F       	ldaA	$0F
0126+  7CB8 9A 74       	oraA	>displayBcd1 + 4
0127+  7CBA 97 74       	staA	displayBcd1 + 4
0128+  7CBC 86 0F       	ldaA	$0F
0129+  7CBE 9A 75       	oraA	>displayBcd1 + 5
0130+  7CC0 97 75       	staA	displayBcd1 + 5
0131+  7CC2             blankP4:
0132+  7CC2 86 0F       	ldaA	$0F
0133+  7CC4 9A 7C       	oraA	>displayBcd1 + 12
0134+  7CC6 97 7C       	staA	displayBcd1 + 12
0135+  7CC8 86 0F       	ldaA	$0F
0136+  7CCA 9A 7D       	oraA	>displayBcd1 + 13
0137+  7CCC 97 7D       	staA	displayBcd1 + 13
0138+  7CCE             blankDone:
0139+  7CCE 39          	rts
0140+  7CCF             	
0141+  7CCF             refreshPlayerScores:
0142+  7CCF BD 7C 00    	jsr copyScores13
0143+  7CD2 BD 7C 45    	jsr copyScores24
0144+  7CD5 BD 7C 8A    	jsr blankNonPlayerScores
0145+  7CD8 39          	rts
0146+  7CD9             	
0147+  7CD9             ; add score instantly
0148+  7CD9             ; X = place in p*_1* to add the score to
0149+  7CD9             ; A = amount to add (max 9)
0150+  7CD9             ; tail call
0151+  7CD9             _addScoreI:
0152+  7CD9 AB 00       	addA	0, X
0153+  7CDB             	ifcs ; overflowed, need to increment next number
0153+  7CDB             
0153+  7CDB 24 FE       
0154+  7CDD 8B 06       		addA	6	; adjust A back into BCD
0155+  7CDF A7 00       		staA	0, X
0156+  7CE1             addScore_carryOver:		; loop to propagate carry
0157+  7CE1 09          		deX	; go to next decimal place
0158+  7CE2 A6 00       		ldaA	0, X	
0159+  7CE4 81 F9       		cmpA	$F9
0160+  7CE6             		ifeq			; if it's already a 9, reset it and carry again
0160+  7CE6             
0160+  7CE6 26 FE       
0161+  7CE8 6F 00       			clr	0, X
0162+  7CEA 27 F5       			beq addScore_carryOver
0163+  7CEC             		else			; otherwise ++ it and done
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7             
0163+  7CE7 06          
0163+  7CEC             
0163+  7CEC 20 FE       
0163+  7CEE             
0163+  7CEE             
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0164+  7CEE 6C 00       			inc	0, X
0165+  7CF0             		endif	
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CED             
0165+  7CED 02          
0165+  7CEE             
0165+  7CEE             
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0166+  7CF0             	else
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC             
0166+  7CDC 15          
0166+  7CF0             
0166+  7CF0 20 FE       
0166+  7CF2             
0166+  7CF2             
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0167+  7CF2 81 F9       		cmpA	$F9
0168+  7CF4             		ifgt ; >9 -> need to adjust back into BCD
0168+  7CF4             
0168+  7CF4 23 FE       
0169+  7CF6 8B 06       			addA	6
0170+  7CF8 A7 00       			staA	0, X
0171+  7CFA             addScore_carryDa:
0172+  7CFA 09          			deX
0173+  7CFB A6 00       			ldaA	0, X
0174+  7CFD 81 F9       			cmpA	$F9
0175+  7CFF             			ifeq
0175+  7CFF             
0175+  7CFF 26 FE       
0176+  7D01 6F 00       				clr	0, X
0177+  7D03 27 F5       				beq 	addScore_carryDa
0178+  7D05             			else
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D00             
0178+  7D00             
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00             
0178+  7D00 06          
0178+  7D05             
0178+  7D05 20 FE       
0178+  7D07             
0178+  7D07             
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0179+  7D07 6C 00       				inc	0, X
0180+  7D09             			endif	
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D06             
0180+  7D06 02          
0180+  7D07             
0180+  7D07             
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0181+  7D09             		else
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5             
0181+  7CF5 15          
0181+  7D09             
0181+  7D09 20 FE       
0181+  7D0B             
0181+  7D0B             
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0182+  7D0B A7 00       			staA	0, X
0183+  7D0D             		endif
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0A             
0183+  7D0A 02          
0183+  7D0B             
0183+  7D0B             
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0184+  7D0D             	endif
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7CF1             
0184+  7CF1 1B          
0184+  7CF2             
0184+  7CF2             
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0185+  7D0D             
0186+  7D0D 7E 7C CF    	jmp refreshPlayerScores
0187+  7D10             	
0188+  7D10 39          	rts
0189+  7D11             	
0190+  7D11             ; t A,X
0191+  7D11             setXToCurPlayer10:
0192+  7D11 96 0F       	ldaA	>lc(8)
0193+  7D13 85 01       	bitA	0001b
0194+  7D15 27 04       	beq	_addScore10N_p2
0195+  7D17 CE 01 55    	ldX	pA_10
0196+  7D1A 39          	rts
0197+  7D1B             _addScore10N_p2:
0198+  7D1B 85 02       	bitA	0010b
0199+  7D1D 27 04       	beq	_addScore10N_p3
0200+  7D1F CE 01 5B    	ldX	pB_10
0201+  7D22 39          	rts
0202+  7D23             _addScore10N_p3:
0203+  7D23 85 04       	bitA	0100b
0204+  7D25 27 04       	beq	_addScore10N_p4
0205+  7D27 CE 01 61    	ldX	pC_10
0206+  7D2A 39          	rts
0207+  7D2B             _addScore10N_p4:
0208+  7D2B CE 01 67    	ldX	pD_10
0209+  7D2E 39          	rts
0210+  7D2F             
0211+  7D2F             ; suspends execution for A ms and returns to queue processor
0212+  7D2F             ; should only be called from switch callbacks
0213+  7D2F             ; trashes everything but B
0214+  7D2F             _delay:	
0215+  7D2F CE 00 7F    	ldX	waitLeft - 1
0216+  7D32             findEmptyLoop:
0217+  7D32 08          	inX
0218+  7D33 6D 00       	tst	0, X
0219+  7D35 26 FB       	bne 	findEmptyLoop 
0220+  7D37             	
0221+  7D37             	; X = first waitLeft that = 0
0222+  7D37 E7 18       	staB	waitReg - waitLeft, X
0223+  7D39 33          	pulB	; A = MSB of PC
0224+  7D3A E7 08       	staB	waitMsb - waitLeft, X
0225+  7D3C 33          	pulB	; A = LSB of PC
0226+  7D3D E7 10       	staB	waitLsb - waitLeft, X
0227+  7D3F A7 00       	staA	0, X
0228+  7D41             	; time and add stored
0229+  7D41 7E 79 84    	jmp skipEvent
0230+  7D44             	
0231+  7D44             resetScores:
0232+  7D44 86 00       	ldaA	00
0233+  7D46 CE 01 55    	ldX	pA_10
0234+  7D49             _zeroScores:
0235+  7D49 A7 00       	staA	0, X
0236+  7D4B 08          	inX
0237+  7D4C 8C 01 63    	cpX	pD_1m + 1
0238+  7D4F 26 F8       	bne	_zeroScores
0239+  7D51             	
0240+  7D51 86 00       	ldaA	0
0241+  7D53 97 12       	staA	curPlayer
0242+  7D55 97 13       	staA	curPlayer + 1
0243+  7D57 86 FF       	ldaA	$FF
0244+  7D59 97 76       	staA	displayBcd1 + 6
0245+  7D5B 97 7E       	staA	displayBcd1 + 14
0246+  7D5D 97 7F       	staA	displayBcd1 + 15
0247+  7D5F             	
0248+  7D5F BD 7C CF    	jsr	refreshPlayerScores
0249+  7D62 39          	rts
0250+  7D63             
0251+  7D63             ; trash all
0252+  7D63             ; delay for ms (8-2000)
0253+  7D63             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0254+  7D63             	
0255+  7D63             ; trashes B (max 104ms)
0256+  7D63             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0257+  7D63             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0258+  7D63             
0259+  7D63             ; trashes AX
0260+  7D63             ; place: 1-5 = 10s thru 100ks
0261+  7D63             ; amount: 1-9
0262+  7D63             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0263+  7D63             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0264+  7D63             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0265+  7D63             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0266+  7D63             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0267+  7D63             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0268+  7D63             
0269+  7D63             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0270+  7D63             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0271+  7D63             
0272+  7D63             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0273+  7D63             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0006   7D63             
0007   7D63             #include "game.asm"
0001+  7D63             ; Laser Ball solenoids
0002+  7D63             ;#DEFINE KICKOUT 		01
0003+  7D63             ;#DEFINE LEFT_KICKER 	02
0004+  7D63             ;#DEFINE DROP_LA			03
0005+  7D63             ;#DEFINE DROP_SER		04
0006+  7D63             ;#DEFINE EJECT_HOLE		05
0007+  7D63             ;#DEFINE DROP_BA			06
0008+  7D63             ;#DEFINE DROP_LL			07
0009+  7D63             ;#DEFINE RIGHT_KICKER	08
0010+  7D63             ;#DEFINE SOUND1			09 ; thru 13
0011+  7D63             ;#DEFINE KNOCKER			14
0012+  7D63             ;#DEFINE	FLASHERS		15
0013+  7D63             ;#DEFINE COIN_LOCKOUT	16
0014+  7D63             
0015+  7D63             ; Hot Tip solenoids
0016+  7D63             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7D63             #DEFINE TOP_EJECT 	SOL(01, 32)
0018+  7D63             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7D63             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7D63             #DEFINE LEFT_EJECT	SOL(04, 32)
0021+  7D63             #DEFINE OUTHOLE		SOL(05, 10)
0022+  7D63             #DEFINE CHIME_10	SOL(09, 16)
0023+  7D63             #DEFINE CHIME_100	SOL(10, 16)
0024+  7D63             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7D63             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7D63             #DEFINE CLICKER		SOL(13, 8)
0027+  7D63             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7D63             #DEFINE BUZZER		SOL(15, 100)
0029+  7D63             #DEFINE SHORT_PAUSE 	150
0030+  7D63             
0031+  7D63             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7D63             #DEFINE done(v)	\
0033+  7D63             #DEFCONT	#IF (v==0)
0034+  7D63             #DEFCONT		\ ldaA 10b
0035+  7D63             #DEFCONT		\ oraA >state
0036+  7D63             #DEFCONT		\ staA state
0037+  7D63             #DEFCONT	\#ENDIF
0038+  7D63             #DEFCONT	\ jmp afterQueueEvent
0039+  7D63             	
0040+  7D63             	
0041+  7D63             _addScore10N:
0042+  7D63 BD 7D 11    	jsr setXToCurPlayer10
0043+  7D66 86 01       	ldaA	1
0044+  7D68 BD 7C D9    	jsr _addScoreI
0045+  7D6B 86 02       	fireSolenoidA(CHIME_10)
0045+  7D6D B7 01 48    
0046+  7D70 39          	rts
0047+  7D71             _addScore100N:
0048+  7D71 BD 7D 11    	jsr setXToCurPlayer10
0049+  7D74 09          	deX
0050+  7D75 86 01       	ldaA	1
0051+  7D77 BD 7C D9    	jsr _addScoreI
0052+  7D7A 86 02       	fireSolenoidA(CHIME_100)	
0052+  7D7C B7 01 49    
0053+  7D7F 39          	rts
0054+  7D80             _addScore1000N:
0055+  7D80 BD 7D 11    	jsr setXToCurPlayer10
0056+  7D83 09          	deX
0057+  7D84 09          	deX
0058+  7D85 86 01       	ldaA	1
0059+  7D87 BD 7C D9    	jsr _addScoreI
0060+  7D8A 86 02       	fireSolenoidA(CHIME_1000)
0060+  7D8C B7 01 4A    
0061+  7D8F 39          	rts
0062+  7D90             #DEFINE score10() jsr _addScore10N
0063+  7D90             #DEFINE score100() jsr _addScore100N
0064+  7D90             #DEFINE score1000() jsr _addScore1000N
0065+  7D90             #DEFINE score500() \ jsr _addScore100N
0066+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7D90             #DEFCONT	\ jsr _addScore100N
0069+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7D90             #DEFCONT	\ jsr _addScore100N
0072+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7D90             #DEFCONT	\ jsr _addScore100N
0075+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7D90             #DEFCONT	\ jsr _addScore100N
0078+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7D90             
0081+  7D90             #DEFINE advBonus()
0082+  7D90             	
0083+  7D90             ; switch callbacks:
0084+  7D90             
0085+  60C0             none:	.org $6000 + 192 ; size of callback table
0086+  60C0             	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0             
0086+  60C0 7E 79 5D    
0087+  60C3             	
0088+  60C3             	
0089+  60C3             startGame:
0090+  60C3 86 DF       	lampOff(6,8) ; game over
0090+  60C5 94 0F       
0090+  60C7 97 0F       
0091+  60C9             	
0092+  60C9 C6 02       	fireSolenoid(CHIME_10)
0092+  60CB F7 01 48    
0093+  60CE 86 12       	delay(SHORT_PAUSE)
0093+  60D0 BD 7D 2F    
0094+  60D3 C6 02       	fireSolenoid(CHIME_10)
0094+  60D5 F7 01 48    
0095+  60D8 86 12       	delay(SHORT_PAUSE)
0095+  60DA BD 7D 2F    
0096+  60DD C6 02       	fireSolenoid(CHIME_10)
0096+  60DF F7 01 48    
0097+  60E2 86 25       	delay(SHORT_PAUSE*2)
0097+  60E4 BD 7D 2F    
0098+  60E7             	
0099+  60E7 C6 02       	fireSolenoid(CHIME_10)
0099+  60E9 F7 01 48    
0100+  60EC 86 12       	delay(SHORT_PAUSE)
0100+  60EE BD 7D 2F    
0101+  60F1 C6 02       	fireSolenoid(CHIME_10)
0101+  60F3 F7 01 48    
0102+  60F6 86 12       	delay(SHORT_PAUSE)
0102+  60F8 BD 7D 2F    
0103+  60FB C6 02       	fireSolenoid(CHIME_10)
0103+  60FD F7 01 48    
0104+  6100 86 25       	delay(SHORT_PAUSE*2)
0104+  6102 BD 7D 2F    
0105+  6105             	
0106+  6105 C6 02       	fireSolenoid(CHIME_10)
0106+  6107 F7 01 48    
0107+  610A 86 12       	delay(SHORT_PAUSE)
0107+  610C BD 7D 2F    
0108+  610F C6 02       	fireSolenoid(CHIME_10)
0108+  6111 F7 01 48    
0109+  6114 86 12       	delay(SHORT_PAUSE)
0109+  6116 BD 7D 2F    
0110+  6119 C6 02       	fireSolenoid(CHIME_100)
0110+  611B F7 01 49    
0111+  611E 86 12       	delay(SHORT_PAUSE)
0111+  6120 BD 7D 2F    
0112+  6123 C6 02       	fireSolenoid(CHIME_1000)
0112+  6125 F7 01 4A    
0113+  6128 86 12       	delay(SHORT_PAUSE)
0113+  612A BD 7D 2F    
0114+  612D C6 02       	fireSolenoid(CHIME_10k)
0114+  612F F7 01 4B    
0115+  6132 86 12       	delay(SHORT_PAUSE)
0115+  6134 BD 7D 2F    
0116+  6137             	
0117+  6137             	
0118+  6137 B6 22 03    	enablePf
0118+  613A 8A 38       
0118+  613C B7 22 03    
0119+  613F             	
0120+  613F C6 00       	fireSolenoid(2)
0120+  6141 F7 01 3F    
0121+  6144 C6 00       	fireSolenoid(3)
0121+  6146 F7 01 3F    
0122+  6149             	
0123+  6149             	; clear lights
0124+  6149 CE 00 08    	ldX	lampCol1
0125+  614C 86 00       	ldaA	0b
0126+  614E             lClearLights:
0127+  614E A7 00       	staA	0, X
0128+  6150 A7 98       	staA	flashLampCol1 - lampCol1, X
0129+  6152 08          	inX
0130+  6153 8C 00 10    	cpX	lampCol8 + 1
0131+  6156 26 F6       	bne	lClearLights
0132+  6158             	;
0133+  6158             	
0134+  6158             	; reset scores
0135+  6158 BD 7D 44    	jsr 	resetScores
0136+  615B             	
0137+  615B             	; reset ball count
0138+  615B 86 10       	ldaA	$10
0139+  615D 97 77       	staA	ballCount
0140+  615F             
0141+  615F C6 00       	ldaB	0
0142+  6161 D7 13       	staB	curPlayer + 1
0143+  6163             	
0144+  6163             	; invalidate playfield
0145+  6163 86 01       	ldaA	lr(1)
0146+  6165 9A A7       	oraA	>flc(8)
0147+  6167 97 A7       	staA	flc(8)
0148+  6169 9A 0F       	oraA	>lc(8)
0149+  616B 97 0F       	staA	lc(8)
0150+  616D             	
0151+  616D 86 02       	lampOn(2,7) ; one player
0151+  616F 9A 0E       
0151+  6171 97 0E       
0152+  6173             	
0153+  6173 86 01       	ldaA	sr(1) ; check outhole
0154+  6175 95 21       	bitA	>sc(2)
0155+  6177             	ifne ; ball in hole
0155+  6177             
0155+  6177 27 FE       
0156+  6179 C6 00       		fireSolenoid(5)
0156+  617B F7 01 3F    
0157+  617E             	endif
0157+  617E             
0157+  617E             
0157+  617E             
0157+  617E             
0157+  617E             
0157+  617E~            	endif
0157+  617E~            	endif
0157+  617E             
0157+  617E~            	endif
0157+  617E~            	endif
0157+  617E             
0157+  6178             
0157+  6178 05          
0157+  6179             
0157+  6179             
0157+  6179~            	endif
0157+  6179~            	endif
0157+  6179~            	endif
0157+  6179             
0157+  617E             
0157+  617E~            	endif
0157+  617E~            	endif
0157+  617E             
0158+  617E             	
0159+  617E 39          	rts
0160+  617F             	
0161+  617F             
0162+  617F             	
0163+  617F             swTilt: 
0164+  617F 86 10       	lampOn(5,8) ; tilt
0164+  6181 9A 0F       
0164+  6183 97 0F       
0165+  6185 B6 22 03    	disablePf
0165+  6188 84 F7       
0165+  618A B7 22 03    
0166+  618D             	done(0)
0166+  618D             
0166+  618D 86 02       
0166+  618F BA 01 69    
0166+  6192 B7 01 69    
0166+  6195             
0166+  6195 7E 79 5D    
0167+  6198             	
0168+  6198             swStart: 
0169+  6198 96 0F       	ldaA >lc(8)
0170+  619A 85 20       	bitA lr(6)
0171+  619C             	ifne ; in game over
0171+  619C             
0171+  619C 27 FE       
0172+  619E BD 60 C3    		jsr startGame
0173+  61A1             	else 
0173+  61A1             
0173+  61A1             
0173+  61A1             
0173+  61A1             
0173+  619D             
0173+  619D             
0173+  619D             
0173+  619D~            	else 
0173+  619D~            	else 
0173+  619D~            	else 
0173+  619D~            	else 
0173+  619D             
0173+  619D~            	else 
0173+  619D~            	else 
0173+  619D~            	else 
0173+  619D~            	else 
0173+  619D             
0173+  619D             
0173+  619D 05          
0173+  61A1             
0173+  61A1 20 FE       
0173+  61A3             
0173+  61A3             
0173+  61A3             
0173+  61A3~            	else 
0173+  61A3~            	else 
0173+  61A3~            	else 
0173+  61A3~            	else 
0173+  61A3~            	else 
0173+  61A3             
0173+  61A3~            	else 
0173+  61A3~            	else 
0173+  61A3             
0173+  61A3~            	else 
0173+  61A3~            	else 
0173+  61A3             
0174+  61A3 86 10       		ldaA	$10
0175+  61A5 91 77       		cmpA	>ballCount
0176+  61A7             		ifeq ; add player
0176+  61A7             
0176+  61A7 26 FE       
0177+  61A9 86 1E       			ldaA	00011110b
0178+  61AB 94 0E       			andA	>lc(7) ; player count lights
0179+  61AD 85 10       			bitA	lr(5)
0180+  61AF             			ifeq	; if not on P4 already, add player
0180+  61AF             
0180+  61AF 26 FE       
0181+  61B1 48          				aslA
0182+  61B2 C6 E1       				ldaB	11100001b
0183+  61B4 D4 0E       				andB	>lc(7)
0184+  61B6 D7 0E       				staB	lc(7)
0185+  61B8 9A 0E       				oraA	>lc(7)
0186+  61BA 97 0E       				staA	lc(7)
0187+  61BC             			endif
0187+  61BC             
0187+  61BC             
0187+  61BC             
0187+  61BC             
0187+  61BC             
0187+  61BC~            			endif
0187+  61BC~            			endif
0187+  61BC             
0187+  61BC~            			endif
0187+  61BC~            			endif
0187+  61BC             
0187+  61B0             
0187+  61B0 0B          
0187+  61B1             
0187+  61B1             
0187+  61B1~            			endif
0187+  61B1~            			endif
0187+  61B1~            			endif
0187+  61B1             
0187+  61BC             
0187+  61BC~            			endif
0187+  61BC~            			endif
0187+  61BC             
0188+  61BC             		else ; restart game
0188+  61BC             
0188+  61BC             
0188+  61BC             
0188+  61BC             
0188+  61A8             
0188+  61A8             
0188+  61A8             
0188+  61A8~            		else ; restart game
0188+  61A8~            		else ; restart game
0188+  61A8~            		else ; restart game
0188+  61A8~            		else ; restart game
0188+  61A8             
0188+  61A8~            		else ; restart game
0188+  61A8~            		else ; restart game
0188+  61A8~            		else ; restart game
0188+  61A8~            		else ; restart game
0188+  61A8             
0188+  61A8             
0188+  61A8 15          
0188+  61BC             
0188+  61BC 20 FE       
0188+  61BE             
0188+  61BE             
0188+  61BE             
0188+  61BE~            		else ; restart game
0188+  61BE~            		else ; restart game
0188+  61BE~            		else ; restart game
0188+  61BE~            		else ; restart game
0188+  61BE~            		else ; restart game
0188+  61BE             
0188+  61BE~            		else ; restart game
0188+  61BE~            		else ; restart game
0188+  61BE             
0188+  61BE~            		else ; restart game
0188+  61BE~            		else ; restart game
0188+  61BE             
0189+  61BE BD 60 C3    			jsr startGame
0190+  61C1             		endif		
0190+  61C1             
0190+  61C1             
0190+  61C1             
0190+  61C1             
0190+  61C1             
0190+  61C1~            		endif		
0190+  61C1~            		endif		
0190+  61C1             
0190+  61C1~            		endif		
0190+  61C1~            		endif		
0190+  61C1             
0190+  61BD             
0190+  61BD 03          
0190+  61BE             
0190+  61BE             
0190+  61BE~            		endif		
0190+  61BE~            		endif		
0190+  61BE~            		endif		
0190+  61BE             
0190+  61C1             
0190+  61C1~            		endif		
0190+  61C1~            		endif		
0190+  61C1             
0191+  61C1             	endif
0191+  61C1             
0191+  61C1             
0191+  61C1             
0191+  61C1             
0191+  61C1             
0191+  61C1~            	endif
0191+  61C1~            	endif
0191+  61C1             
0191+  61C1~            	endif
0191+  61C1~            	endif
0191+  61C1             
0191+  61A2             
0191+  61A2 1E          
0191+  61A3             
0191+  61A3             
0191+  61A3~            	endif
0191+  61A3~            	endif
0191+  61A3~            	endif
0191+  61A3             
0191+  61C1             
0191+  61C1~            	endif
0191+  61C1~            	endif
0191+  61C1             
0192+  61C1             	
0193+  61C1 BD 7C CF    	jsr refreshPlayerScores
0194+  61C4             	
0195+  61C4             	done(0)
0195+  61C4             
0195+  61C4 86 02       
0195+  61C6 BA 01 69    
0195+  61C9 B7 01 69    
0195+  61CC             
0195+  61CC 7E 79 5D    
0196+  61CF             	
0197+  61CF             swOuthole: 
0198+  61CF 86 4B       	delay(600)
0198+  61D1 BD 7D 2F    
0199+  61D4 96 0F       	ldaA	>lc(8) ; !game over
0200+  61D6 85 20       	bitA	lr(6)
0201+  61D8             	ifeq ; !game over
0201+  61D8             
0201+  61D8 26 FE       
0202+  61DA 86 0F       		ldaA	00001111b ; player up lights
0203+  61DC 95 A7       		bitA	>flc(8)	; check if any player is flashing
0204+  61DE             		ifne ; any flashing -> playfield invalid
0204+  61DE             
0204+  61DE 27 FE       
0205+  61E0 86 EF       			lampOff(5,8) ; tilt
0205+  61E2 94 0F       
0205+  61E4 97 0F       
0206+  61E6             			
0207+  61E6 B6 22 03    			enablePf
0207+  61E9 8A 38       
0207+  61EB B7 22 03    
0208+  61EE C6 01       			fireSolenoid(OUTHOLE)
0208+  61F0 F7 01 44    
0209+  61F3             		else ; none flashing -> playfield valid -> end ball
0209+  61F3             
0209+  61F3             
0209+  61F3             
0209+  61F3             
0209+  61DF             
0209+  61DF             
0209+  61DF             
0209+  61DF~            		else ; none flashing -> playfield valid -> end ball
0209+  61DF~            		else ; none flashing -> playfield valid -> end ball
0209+  61DF~            		else ; none flashing -> playfield valid -> end ball
0209+  61DF~            		else ; none flashing -> playfield valid -> end ball
0209+  61DF             
0209+  61DF~            		else ; none flashing -> playfield valid -> end ball
0209+  61DF~            		else ; none flashing -> playfield valid -> end ball
0209+  61DF~            		else ; none flashing -> playfield valid -> end ball
0209+  61DF~            		else ; none flashing -> playfield valid -> end ball
0209+  61DF             
0209+  61DF             
0209+  61DF 15          
0209+  61F3             
0209+  61F3 20 FE       
0209+  61F5             
0209+  61F5             
0209+  61F5             
0209+  61F5~            		else ; none flashing -> playfield valid -> end ball
0209+  61F5~            		else ; none flashing -> playfield valid -> end ball
0209+  61F5~            		else ; none flashing -> playfield valid -> end ball
0209+  61F5~            		else ; none flashing -> playfield valid -> end ball
0209+  61F5~            		else ; none flashing -> playfield valid -> end ball
0209+  61F5             
0209+  61F5~            		else ; none flashing -> playfield valid -> end ball
0209+  61F5~            		else ; none flashing -> playfield valid -> end ball
0209+  61F5             
0209+  61F5~            		else ; none flashing -> playfield valid -> end ball
0209+  61F5~            		else ; none flashing -> playfield valid -> end ball
0209+  61F5             
0210+  61F5 94 0F       			andA	>lc(8)
0211+  61F7 D6 0A       			ldaB	>lc(3)
0212+  61F9 C5 01       			bitB	lr(1)
0213+  61FB             			ifeq ; shoot again not lit
0213+  61FB             
0213+  61FB 26 FE       
0214+  61FD             				; go to next player
0215+  61FD 48          				aslA
0216+  61FE 7C 00 13    				inc	curPlayer + 1
0217+  6201 95 0E       				bitA	>lc(7)	; is player count < player #
0218+  6203             				ifne ; last player
0218+  6203             
0218+  6203 27 FE       
0219+  6205 86 01       					ldaA	00000001b; ; back to player 1
0220+  6207 C6 00       					ldaB	0
0221+  6209 D7 13       					staB	curPlayer + 1
0222+  620B             					
0223+  620B             					; increase ball count
0224+  620B D6 77       					ldaB	>ballCount
0225+  620D CB 10       					addB	$10
0226+  620F C1 40       					cmpB	$40
0227+  6211             					ifeq ; game over
0227+  6211             
0227+  6211 26 FE       
0228+  6213 86 20       						lampOn(6,8)
0228+  6215 9A 0F       
0228+  6217 97 0F       
0229+  6219 B6 22 03    						disablePf
0229+  621C 84 F7       
0229+  621E B7 22 03    
0230+  6221             						done(1)
0230+  6221~            						done(1)
0230+  6221~            						done(1)
0230+  6221~            						done(1)
0230+  6221~            						done(1)
0230+  6221             
0230+  6221 7E 79 5D    
0231+  6224             					else
0231+  6224             
0231+  6224             
0231+  6224             
0231+  6224             
0231+  6212             
0231+  6212             
0231+  6212             
0231+  6212~            					else
0231+  6212~            					else
0231+  6212~            					else
0231+  6212~            					else
0231+  6212             
0231+  6212~            					else
0231+  6212~            					else
0231+  6212~            					else
0231+  6212~            					else
0231+  6212             
0231+  6212             
0231+  6212 13          
0231+  6224             
0231+  6224 20 FE       
0231+  6226             
0231+  6226             
0231+  6226             
0231+  6226~            					else
0231+  6226~            					else
0231+  6226~            					else
0231+  6226~            					else
0231+  6226~            					else
0231+  6226             
0231+  6226~            					else
0231+  6226~            					else
0231+  6226             
0231+  6226~            					else
0231+  6226~            					else
0231+  6226             
0232+  6226 D7 77       						staB	ballCount
0233+  6228             					endif		
0233+  6228             
0233+  6228             
0233+  6228             
0233+  6228             
0233+  6228             
0233+  6228~            					endif		
0233+  6228~            					endif		
0233+  6228             
0233+  6228~            					endif		
0233+  6228~            					endif		
0233+  6228             
0233+  6225             
0233+  6225 02          
0233+  6226             
0233+  6226             
0233+  6226~            					endif		
0233+  6226~            					endif		
0233+  6226~            					endif		
0233+  6226             
0233+  6228             
0233+  6228~            					endif		
0233+  6228~            					endif		
0233+  6228             
0234+  6228             				endif
0234+  6228             
0234+  6228             
0234+  6228             
0234+  6228             
0234+  6228             
0234+  6228~            				endif
0234+  6228~            				endif
0234+  6228             
0234+  6228~            				endif
0234+  6228~            				endif
0234+  6228             
0234+  6204             
0234+  6204 23          
0234+  6205             
0234+  6205             
0234+  6205~            				endif
0234+  6205~            				endif
0234+  6205~            				endif
0234+  6205             
0234+  6228             
0234+  6228~            				endif
0234+  6228~            				endif
0234+  6228             
0235+  6228             				
0236+  6228 97 0F       				staA	lc(8)
0237+  622A             			endif
0237+  622A             
0237+  622A             
0237+  622A             
0237+  622A             
0237+  622A             
0237+  622A~            			endif
0237+  622A~            			endif
0237+  622A             
0237+  622A~            			endif
0237+  622A~            			endif
0237+  622A             
0237+  61FC             
0237+  61FC 2D          
0237+  61FD             
0237+  61FD             
0237+  61FD~            			endif
0237+  61FD~            			endif
0237+  61FD~            			endif
0237+  61FD             
0237+  622A             
0237+  622A~            			endif
0237+  622A~            			endif
0237+  622A             
0238+  622A             			
0239+  622A             			; flash player light
0240+  622A 86 0F       			ldaA	00001111b ; player up lights
0241+  622C 9A A7       			oraA	>flc(8)
0242+  622E 97 A7       			staA	flc(8)
0243+  6230             			
0244+  6230             			
0245+  6230 B6 22 03    			enablePf
0245+  6233 8A 38       
0245+  6235 B7 22 03    
0246+  6238             			
0247+  6238 C6 01       			fireSolenoid(OUTHOLE)
0247+  623A F7 01 44    
0248+  623D             		endif
0248+  623D             
0248+  623D             
0248+  623D             
0248+  623D             
0248+  623D             
0248+  623D~            		endif
0248+  623D~            		endif
0248+  623D             
0248+  623D~            		endif
0248+  623D~            		endif
0248+  623D             
0248+  61F4             
0248+  61F4 48          
0248+  61F5             
0248+  61F5             
0248+  61F5~            		endif
0248+  61F5~            		endif
0248+  61F5~            		endif
0248+  61F5             
0248+  623D             
0248+  623D~            		endif
0248+  623D~            		endif
0248+  623D             
0249+  623D             	endif		
0249+  623D             
0249+  623D             
0249+  623D             
0249+  623D             
0249+  623D             
0249+  623D~            	endif		
0249+  623D~            	endif		
0249+  623D             
0249+  623D~            	endif		
0249+  623D~            	endif		
0249+  623D             
0249+  61D9             
0249+  61D9 63          
0249+  61DA             
0249+  61DA             
0249+  61DA~            	endif		
0249+  61DA~            	endif		
0249+  61DA~            	endif		
0249+  61DA             
0249+  623D             
0249+  623D~            	endif		
0249+  623D~            	endif		
0249+  623D             
0250+  623D             	done(0)
0250+  623D             
0250+  623D 86 02       
0250+  623F BA 01 69    
0250+  6242 B7 01 69    
0250+  6245             
0250+  6245 7E 79 5D    
0251+  6248             	
0252+  6248             swLeftEject:
0253+  6248 96 0F       	ldaA	>lc(8)
0254+  624A 85 20       	bitA	lr(6)
0255+  624C             	ifeq ; in game
0255+  624C             
0255+  624C 26 FE       
0256+  624E 86 01       		lampOn(1,3)
0256+  6250 9A 0A       
0256+  6252 97 0A       
0257+  6254 86 40       		lampOn(7,8)
0257+  6256 9A 0F       
0257+  6258 97 0F       
0258+  625A             	endif
0258+  625A             
0258+  625A             
0258+  625A             
0258+  625A             
0258+  625A             
0258+  625A~            	endif
0258+  625A~            	endif
0258+  625A             
0258+  625A~            	endif
0258+  625A~            	endif
0258+  625A             
0258+  624D             
0258+  624D 0C          
0258+  624E             
0258+  624E             
0258+  624E~            	endif
0258+  624E~            	endif
0258+  624E~            	endif
0258+  624E             
0258+  625A             
0258+  625A~            	endif
0258+  625A~            	endif
0258+  625A             
0259+  625A             	score500()
0259+  625A BD 7D 71    
0259+  625D C6 02       
0259+  625F F7 01 49    
0259+  6262 86 12       
0259+  6264 BD 7D 2F    
0259+  6267 BD 7D 71    
0259+  626A C6 02       
0259+  626C F7 01 49    
0259+  626F 86 12       
0259+  6271 BD 7D 2F    
0259+  6274 BD 7D 71    
0259+  6277 C6 02       
0259+  6279 F7 01 49    
0259+  627C 86 12       
0259+  627E BD 7D 2F    
0259+  6281 BD 7D 71    
0259+  6284 C6 02       
0259+  6286 F7 01 49    
0259+  6289 86 12       
0259+  628B BD 7D 2F    
0259+  628E BD 7D 71    
0259+  6291 C6 02       
0259+  6293 F7 01 49    
0259+  6296 86 12       
0259+  6298 BD 7D 2F    
0260+  629B C6 04       	fireSolenoid(LEFT_EJECT)
0260+  629D F7 01 43    
0261+  62A0             	done(1)
0261+  62A0~            	done(1)
0261+  62A0~            	done(1)
0261+  62A0~            	done(1)
0261+  62A0~            	done(1)
0261+  62A0             
0261+  62A0 7E 79 5D    
0262+  62A3             	
0263+  62A3             swTopEject:
0264+  62A3             	score500()
0264+  62A3 BD 7D 71    
0264+  62A6 C6 02       
0264+  62A8 F7 01 49    
0264+  62AB 86 12       
0264+  62AD BD 7D 2F    
0264+  62B0 BD 7D 71    
0264+  62B3 C6 02       
0264+  62B5 F7 01 49    
0264+  62B8 86 12       
0264+  62BA BD 7D 2F    
0264+  62BD BD 7D 71    
0264+  62C0 C6 02       
0264+  62C2 F7 01 49    
0264+  62C5 86 12       
0264+  62C7 BD 7D 2F    
0264+  62CA BD 7D 71    
0264+  62CD C6 02       
0264+  62CF F7 01 49    
0264+  62D2 86 12       
0264+  62D4 BD 7D 2F    
0264+  62D7 BD 7D 71    
0264+  62DA C6 02       
0264+  62DC F7 01 49    
0264+  62DF 86 12       
0264+  62E1 BD 7D 2F    
0265+  62E4 C6 04       	fireSolenoid(TOP_EJECT)
0265+  62E6 F7 01 40    
0266+  62E9             	done(1)
0266+  62E9~            	done(1)
0266+  62E9~            	done(1)
0266+  62E9~            	done(1)
0266+  62E9~            	done(1)
0266+  62E9             
0266+  62E9 7E 79 5D    
0267+  62EC             	
0268+  62EC             swHotTip:
0269+  62EC 86 32       	delay(400)
0269+  62EE BD 7D 2F    
0270+  62F1 C6 0C       	fireSolenoid(DROP_HOT)
0270+  62F3 F7 01 42    
0271+  62F6 C6 0C       	fireSolenoid(DROP_TIP)
0271+  62F8 F7 01 41    
0272+  62FB             	done(1)
0272+  62FB~            	done(1)
0272+  62FB~            	done(1)
0272+  62FB~            	done(1)
0272+  62FB~            	done(1)
0272+  62FB             
0272+  62FB 7E 79 5D    
0273+  62FE             swLeftOutlane:
0274+  62FE             swRightOutlane:
0275+  62FE             swLeftInlane:
0276+  62FE             swRightInlane:
0277+  62FE BD 7D 80    	score1000()
0278+  6301             	done(1)
0278+  6301~            	done(1)
0278+  6301~            	done(1)
0278+  6301~            	done(1)
0278+  6301~            	done(1)
0278+  6301             
0278+  6301 7E 79 5D    
0279+  6304             sw10pt:
0280+  6304 BD 7D 63    	score10()
0281+  6307             	done(1)
0281+  6307~            	done(1)
0281+  6307~            	done(1)
0281+  6307~            	done(1)
0281+  6307~            	done(1)
0281+  6307             
0281+  6307 7E 79 5D    
0282+  630A             sw100pt:
0283+  630A BD 7D 71    	score100()
0284+  630D             	done(1)
0284+  630D~            	done(1)
0284+  630D~            	done(1)
0284+  630D~            	done(1)
0284+  630D~            	done(1)
0284+  630D             
0284+  630D 7E 79 5D    
0285+  6310             sw500pt:
0286+  6310             	score500();
0286+  6310 BD 7D 71    
0286+  6313 C6 02       
0286+  6315 F7 01 49    
0286+  6318 86 12       
0286+  631A BD 7D 2F    
0286+  631D BD 7D 71    
0286+  6320 C6 02       
0286+  6322 F7 01 49    
0286+  6325 86 12       
0286+  6327 BD 7D 2F    
0286+  632A BD 7D 71    
0286+  632D C6 02       
0286+  632F F7 01 49    
0286+  6332 86 12       
0286+  6334 BD 7D 2F    
0286+  6337 BD 7D 71    
0286+  633A C6 02       
0286+  633C F7 01 49    
0286+  633F 86 12       
0286+  6341 BD 7D 2F    
0286+  6344 BD 7D 71    
0286+  6347 C6 02       
0286+  6349 F7 01 49    
0286+  634C 86 12       
0286+  634E BD 7D 2F    
0287+  6351             	done(1)
0287+  6351~            	done(1)
0287+  6351~            	done(1)
0287+  6351~            	done(1)
0287+  6351~            	done(1)
0287+  6351             
0287+  6351 7E 79 5D    
0288+  6354             swDropTip:
0289+  6354 BD 7D 63    	score10()
0290+  6357             	done(1)
0290+  6357~            	done(1)
0290+  6357~            	done(1)
0290+  6357~            	done(1)
0290+  6357~            	done(1)
0290+  6357             
0290+  6357 7E 79 5D    
0291+  635A             swDropHot:
0292+  635A BD 7D 63    	score10()
0293+  635D             	done(1)
0293+  635D~            	done(1)
0293+  635D~            	done(1)
0293+  635D~            	done(1)
0293+  635D~            	done(1)
0293+  635D             
0293+  635D 7E 79 5D    
0294+  6360             swAdvBonus:
0295+  6360             	advBonus()
0296+  6360             	done(1)
0296+  6360~            	done(1)
0296+  6360~            	done(1)
0296+  6360~            	done(1)
0296+  6360~            	done(1)
0296+  6360             
0296+  6360 7E 79 5D    
0297+  6363             swSpinner:
0298+  6363 96 23       	ldaA	>sc(4)
0299+  6365 85 20       	bitA	sr(6)
0300+  6367             	ifne
0300+  6367             
0300+  6367 27 FE       
0301+  6369 BD 7D 71    		score100()
0302+  636C 86 0E       		ldaA	$E
0303+  636E             	else
0303+  636E             
0303+  636E             
0303+  636E             
0303+  636E             
0303+  6368             
0303+  6368             
0303+  6368             
0303+  6368~            	else
0303+  6368~            	else
0303+  6368~            	else
0303+  6368~            	else
0303+  6368             
0303+  6368~            	else
0303+  6368~            	else
0303+  6368~            	else
0303+  6368~            	else
0303+  6368             
0303+  6368             
0303+  6368 07          
0303+  636E             
0303+  636E 20 FE       
0303+  6370             
0303+  6370             
0303+  6370             
0303+  6370~            	else
0303+  6370~            	else
0303+  6370~            	else
0303+  6370~            	else
0303+  6370~            	else
0303+  6370             
0303+  6370~            	else
0303+  6370~            	else
0303+  6370             
0303+  6370~            	else
0303+  6370~            	else
0303+  6370             
0304+  6370 86 02       		noValidate
0304+  6372 BA 01 69    
0304+  6375 B7 01 69    
0305+  6378 86 00       		ldaA	0
0306+  637A             	endif
0306+  637A             
0306+  637A             
0306+  637A             
0306+  637A             
0306+  637A             
0306+  637A~            	endif
0306+  637A~            	endif
0306+  637A             
0306+  637A~            	endif
0306+  637A~            	endif
0306+  637A             
0306+  636F             
0306+  636F 0A          
0306+  6370             
0306+  6370             
0306+  6370~            	endif
0306+  6370~            	endif
0306+  6370~            	endif
0306+  6370             
0306+  637A             
0306+  637A~            	endif
0306+  637A~            	endif
0306+  637A             
0307+  637A B7 0E 47    	staA	solenoid1 + CLICKER - 1
0308+  637D             	done(1)
0308+  637D~            	done(1)
0308+  637D~            	done(1)
0308+  637D~            	done(1)
0308+  637D~            	done(1)
0308+  637D             
0308+  637D 7E 79 5D    
0309+  6380             
0310+  6380             	
0311+  6380             	
0312+  6380             ; end callbacks
0313+  6380             	.msfirst
0314+  6380             ; needs to be on $**00 address
0315+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0316+  6000 61 7F       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0316+  6002 61 7F       
0316+  6004 61 98       
0316+  6006 60 C0       
0316+  6008 60 C0       
0316+  600A 60 C0       
0316+  600C 61 7F       
0316+  600E 60 C0       
0317+  6010 61 CF       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw none\.dw none
0317+  6012 61 7F       
0317+  6014 62 FE       
0317+  6016 62 FE       
0317+  6018 63 04       
0317+  601A 63 10       
0317+  601C 60 C0       
0317+  601E 60 C0       
0318+  6020 63 54       	.dw swDropTip	\.dw swDropTip\.dw swDropTip\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0318+  6022 63 54       
0318+  6024 63 54       
0318+  6026 63 60       
0318+  6028 63 04       
0318+  602A 62 A3       
0318+  602C 63 04       
0318+  602E 60 C0       
0319+  6030 63 5A       	.dw swDropHot	\.dw swDropHot\.dw swDropHot\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw sw100pt\.dw sw500pt
0319+  6032 63 5A       
0319+  6034 63 5A       
0319+  6036 63 04       
0319+  6038 62 48       
0319+  603A 63 63       
0319+  603C 63 0A       
0319+  603E 63 10       
0320+  6040 62 FE       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0320+  6042 62 FE       
0320+  6044 63 04       
0320+  6046 60 C0       
0320+  6048 62 EC       
0320+  604A 60 C0       
0320+  604C 60 C0       
0320+  604E 60 C0       
0321+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0321+  6052 60 C0       
0321+  6054 60 C0       
0321+  6056 60 C0       
0321+  6058 60 C0       
0321+  605A 60 C0       
0321+  605C 60 C0       
0321+  605E 60 C0       
0322+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0322+  6062 60 C0       
0322+  6064 60 C0       
0322+  6066 60 C0       
0322+  6068 60 C0       
0322+  606A 60 C0       
0322+  606C 60 C0       
0322+  606E 60 C0       
0323+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0323+  6072 60 C0       
0323+  6074 60 C0       
0323+  6076 60 C0       
0323+  6078 60 C0       
0323+  607A 60 C0       
0323+  607C 60 C0       
0323+  607E 60 C0       
0324+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0325+  6080             ; off = how many cycles it must be off for
0326+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0327+  6080             ; gameover = whether the switch is active in gameover or tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0328+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0329+  6080             settleTable: ; must be right after callbackTable
0330+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(1,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0330+  6081 87          
0330+  6082 CA          
0330+  6083 47          
0330+  6084 47          
0330+  6085 47          
0330+  6086 87          
0330+  6087 47          
0331+  6088 FF          	SW(7,7,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0331+  6089 87          
0331+  608A 87          
0331+  608B 87          
0331+  608C 81          
0331+  608D 81          
0331+  608E 80          
0331+  608F 87          
0332+  6090 80          	SW(0,0,1,0)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,3,1,0)\SW(0,1,1,0)\SW(7,7,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0332+  6091 80          
0332+  6092 80          
0332+  6093 83          
0332+  6094 81          
0332+  6095 FF          
0332+  6096 81          
0332+  6097 80          
0333+  6098 80          	SW(0,0,1,0)\SW(0,7,1,0)\SW(0,0,1,0)\SW(0,1,1,0)\SW(7,7,1,1)\SW(0,0,0,0)\SW(0,0,1,0)\SW(0,1,1,0)
0333+  6099 87          
0333+  609A 80          
0333+  609B 81          
0333+  609C FF          
0333+  609D 00          
0333+  609E 80          
0333+  609F 81          
0334+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(7,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0334+  60A1 87          
0334+  60A2 81          
0334+  60A3 47          
0334+  60A4 B8          
0334+  60A5 47          
0334+  60A6 47          
0334+  60A7 47          
0335+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0335+  60A9 47          
0335+  60AA 47          
0335+  60AB 47          
0335+  60AC 47          
0335+  60AD 47          
0335+  60AE 47          
0335+  60AF 47          
0336+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0336+  60B1 47          
0336+  60B2 47          
0336+  60B3 47          
0336+  60B4 47          
0336+  60B5 47          
0336+  60B6 47          
0336+  60B7 47          
0337+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0337+  60B9 47          
0337+  60BA 47          
0337+  60BB 47          
0337+  60BC 47          
0337+  60BD 47          
0337+  60BE 47          
0337+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             resetRam:
0011   7800 CE 00 00    	ldX	RAM
0012   7803 86 00       	ldaA	0
0013   7805             resetRamLoop:
0014   7805 A7 00       	staA	0, X
0015   7807 08          	inX
0016   7808 8C 02 00    	cpX	RAMEnd + 1
0017   780B 26 F8       	bne	resetRamLoop
0018   780D             	
0019   780D             	
0020   780D 86 00       	ldaA 	0
0021   780F 97 00       	staA	temp
0022   7811 86 FF       	ldaA	$FF
0023   7813 97 01       	staA	temp + 1
0024   7815 9E 00       	ldS	>temp
0025   7817             
0026   7817             test:
0027   7817             	
0028   7817             piaSetup:
0029   7817 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0030   7819 B7 28 01    	staA 	displayStrobeC
0031   781C 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0032   781E B7 28 00    	staA 	displayStrobe
0033   7821 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0034   7823 B7 28 01    	staA 	displayStrobeC
0035   7826             	
0036   7826 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0037   7828 B7 28 03    	staA 	displayBcdC
0038   782B 86 FF       	ldaA 	11111111b	;set display BCD to output
0039   782D B7 28 02    	staA 	displayBcd
0040   7830 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0041   7832 B7 28 03    	staA 	displayBcdC
0042   7835             	
0043   7835 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0044   7837 B7 24 01    	staA 	lampColC
0045   783A 86 FF       	ldaA 	11111111b	;set to output
0046   783C B7 24 00    	staA 	lampCol
0047   783F 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0048   7841 B7 24 01    	staA 	lampColC
0049   7844             	
0050   7844 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7846 B7 24 03    	staA 	lampStrobeC
0052   7849 86 FF       	ldaA 	11111111b	;set to output
0053   784B B7 24 02    	staA 	lampStrobe
0054   784E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   7850 B7 24 03    	staA 	lampStrobeC
0056   7853             	
0057   7853 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0058   7855 B7 30 03    	staA 	switchStrobeC
0059   7858 86 FF       	ldaA 	11111111b	;set to output
0060   785A B7 30 02    	staA 	switchStrobe
0061   785D 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0062   785F B7 30 03    	staA 	switchStrobeC
0063   7862             	
0064   7862 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0065   7864 B7 30 01    	staA 	switchRowC
0066   7867 86 00       	ldaA 	00000000b	;set to input
0067   7869 B7 30 00    	staA 	switchRow
0068   786C 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0069   786E B7 30 01    	staA 	switchRowC
0070   7871             	
0071   7871 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0072   7873 B7 22 01    	staA 	solenoidAC
0073   7876 B7 22 03    	staA	solenoidBC
0074   7879 86 FF       	ldaA 	11111111b	;set to output
0075   787B B7 22 00    	staA 	solenoidA
0076   787E B7 22 02    	staA 	solenoidB
0077   7881 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0078   7883 B7 22 01    	staA 	solenoidAC
0079   7886 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0080   7888 B7 22 03    	staA 	solenoidBC
0081   788B             	
0082   788B             ;
0083   788B             
0084   788B 86 00       	ldaA	00
0085   788D D7 70       	staB	displayBcd1
0086   788F             	
0087   788F 86 FF       	ldaA	$FF	
0088   7891 B7 28 00    	staA 	displayStrobe
0089   7894             
0090   7894 86 00       	ldaA	00
0091   7896 97 07       	staA	strobe
0092   7898 B7 01 68    	staA	displayCol
0093   789B             	
0094   789B CE 00 00    	ldX 	0
0095   789E DF 50       	stX		curCol
0096   78A0             	
0097   78A0 86 00       	ldaA	0
0098   78A2 97 10       	staA	curSwitchRowLsb
0099   78A4             	
0100   78A4             ; fill solenoid status with off
0101   78A4 86 0F       	ldaA	$F
0102   78A6 CE 01 40    	ldX	solenoid1
0103   78A9             lSolDefault:
0104   78A9 A7 00       	staA	0, X
0105   78AB 08          	inX
0106   78AC 8C 01 4F    	cpX	solenoid16
0107   78AF 26 F8       	bne	lSolDefault
0108   78B1             	
0109   78B1             ; clear 8 banks
0110   78B1 86 00       	ldaA 	0
0111   78B3 CE 00 00    	ldX	0
0112   78B6             lClear8:
0113   78B6 A7 08       	staA	lampCol1, X
0114   78B8 A7 A0       	staA	flashLampCol1, X
0115   78BA A7 80       	staA	waitLeft, X
0116   78BC 08          	inX
0117   78BD 8C 00 08    	cpX	8
0118   78C0 26 F4       	bne 	lClear8
0119   78C2             	
0120   78C2             ; empty settle
0121   78C2 86 00       	ldaA	$00
0122   78C4 CE 01 00    	ldX	settleRow1
0123   78C7             lSettleDefault:
0124   78C7 A7 00       	staA	0, X
0125   78C9 08          	inX
0126   78CA 8C 01 3F    	cpX	settleRow8End
0127   78CD 26 F8       	bne	lSettleDefault
0128   78CF             	
0129   78CF             ; empty queue
0130   78CF 86 FF       	ldaA	$FF
0131   78D1 CE 00 60    	ldX	queue
0132   78D4             lEmptyQueue:
0133   78D4 A7 00       	staA	0, X
0134   78D6 08          	inX
0135   78D7 8C 00 67    	cpX	queueEnd
0136   78DA 26 F8       	bne	lEmptyQueue
0137   78DC             	
0138   78DC 86 00       	ldaA	0
0139   78DE 97 54       	staA	queueHead + 0
0140   78E0 97 56       	staA	queueTail + 0
0141   78E2 86 60       	ldaA	queue
0142   78E4 97 55       	staA	queueHead + 1
0143   78E6 97 57       	staA	queueTail + 1
0144   78E8             	
0145   78E8             ; test numbers
0146   78E8 86 20       	lampOn(6,8) ; game over
0146   78EA 9A 0F       
0146   78EC 97 0F       
0147   78EE             
0148   78EE             	
0149   78EE BD 7D 44    	jsr resetScores
0150   78F1             	
0151   78F1             ; setup complete
0152   78F1 0E          	clI		; enable timer interrupt
0153   78F2             	
0154   78F2             	
0155   78F2             end:
0156   78F2 B6 01 69    	ldaA	>state
0157   78F5 85 04       	bitA	100b
0158   78F7             	ifne
0158   78F7             
0158   78F7 27 FE       
0159   78F9             		; dec wait timers
0160   78F9 CE 00 7F    		ldX	waitLeft - 1
0161   78FC             decWaitTimers:
0162   78FC 08          		inX
0163   78FD A6 00       		ldaA	0, X
0164   78FF             		ifne
0164   78FF             
0164   78FF 27 FE       
0165   7901 4A          			decA
0166   7902 A7 00       			staA	0, X
0167   7904             			ifeq
0167   7904             
0167   7904 26 FE       
0168   7906 A6 08       				ldaA	waitMsb - waitLeft, X
0169   7908 97 58       				staA	tempQ
0170   790A A6 10       				ldaA	waitLsb - waitLeft, X
0171   790C 97 59       				staA	tempQ + 1
0172   790E E6 18       				ldaB	waitReg - waitLeft, X
0173   7910 DE 58       				ldX	>tempQ
0174   7912 6E 00       				jmp	0, X
0175   7914             			endif
0175   7914             
0175   7914             
0175   7914             
0175   7914             
0175   7914             
0175   7914~            			endif
0175   7914~            			endif
0175   7914             
0175   7914~            			endif
0175   7914~            			endif
0175   7914             
0175   7905             
0175   7905 0E          
0175   7906             
0175   7906             
0175   7906~            			endif
0175   7906~            			endif
0175   7906~            			endif
0175   7906             
0175   7914             
0175   7914~            			endif
0175   7914~            			endif
0175   7914             
0176   7914             		endif
0176   7914             
0176   7914             
0176   7914             
0176   7914             
0176   7914             
0176   7914~            		endif
0176   7914~            		endif
0176   7914             
0176   7914~            		endif
0176   7914~            		endif
0176   7914             
0176   7900             
0176   7900 13          
0176   7901             
0176   7901             
0176   7901~            		endif
0176   7901~            		endif
0176   7901~            		endif
0176   7901             
0176   7914             
0176   7914~            		endif
0176   7914~            		endif
0176   7914             
0177   7914 8C 00 87    		cpX	waitLeftEnd
0178   7917 26 E3       		bne	decWaitTimers
0179   7919             		
0180   7919 B6 01 69    		ldaA	>state		; clear strobe reset bit
0181   791C 84 FB       		andA	11111011b
0182   791E B7 01 69    		staA	state
0183   7921             	endif
0183   7921             
0183   7921             
0183   7921             
0183   7921             
0183   7921             
0183   7921~            	endif
0183   7921~            	endif
0183   7921             
0183   7921~            	endif
0183   7921~            	endif
0183   7921             
0183   78F8             
0183   78F8 28          
0183   78F9             
0183   78F9             
0183   78F9~            	endif
0183   78F9~            	endif
0183   78F9~            	endif
0183   78F9             
0183   7921             
0183   7921~            	endif
0183   7921~            	endif
0183   7921             
0184   7921             
0185   7921             		
0186   7921             ; pop queue
0187   7921 D6 57       	ldaB	>queueTail + 1
0188   7923 D1 55       	cmpB	>queueHead + 1
0189   7925 27 73       	beq 	skipQueue
0190   7927             	
0191   7927 DE 54       	ldX	>queueHead
0192   7929 A6 00       	ldaA	0, X	; A now contains the first queue item
0193   792B             	
0194   792B 16          	tAB
0195   792C C4 3F       	andB	00111111b ; B = callback index
0196   792E             	
0197   792E D7 59       	staB	tempQ + 1
0198   7930 C6 60       	ldaB	callbackTable >> 8
0199   7932 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0200   7934 DE 58       	ldX	>tempQ
0201   7936             	
0202   7936 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0203   7938 C4 80       	andB 	10000000b ; B set if switch limited to closures
0204   793A             	ifne
0204   793A             
0204   793A 27 FE       
0205   793C DE 54       		ldX	>queueHead
0206   793E E4 00       		andB	0, X	; B set if switch limited to closures and event was not a closure
0207   7940 26 42       		bne	skipEvent
0208   7942             	endif
0208   7942             
0208   7942             
0208   7942             
0208   7942             
0208   7942             
0208   7942~            	endif
0208   7942~            	endif
0208   7942             
0208   7942~            	endif
0208   7942~            	endif
0208   7942             
0208   793B             
0208   793B 06          
0208   793C             
0208   793C             
0208   793C~            	endif
0208   793C~            	endif
0208   793C~            	endif
0208   793C             
0208   7942             
0208   7942~            	endif
0208   7942~            	endif
0208   7942             
0209   7942             	
0210   7942 D6 0F       	ldaB	>lc(8)	; gameover mask
0211   7944 C5 20       	bitB	lr(6)
0212   7946 26 08       	bne	inGameover
0213   7948 D6 0F       	ldaB	>lc(8) ; tilt bit
0214   794A C5 10       	bitB	lr(5)
0215   794C 26 02       	bne	inGameover
0216   794E 20 04       	bra gameoverPassed
0217   7950             inGameover:
0218   7950 85 40       	bitA 	01000000b
0219   7952 27 30       	beq	skipEvent	; skip if callback not active in game over
0220   7954             gameoverPassed:
0221   7954             	
0222   7954             	; checked passed, do callback
0223   7954 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0224   7957 DE 58       	ldX	>tempQ
0225   7959 EE 00       	ldX	0, X
0226   795B 6E 00       	jmp	0, X
0227   795D             	; everything trashed
0228   795D             afterQueueEvent:
0229   795D 86 02       	ldaA	10b ; no validate bit
0230   795F B5 01 69    	bitA	>state
0231   7962             	ifeq ; validate pf
0231   7962             
0231   7962 26 FE       
0232   7964             		; check if playfield invalid
0233   7964 86 0F       		ldaA	00001111b ; player up
0234   7966 95 A7       		bitA	>flc(8)
0235   7968             		ifne ; any flashing -> pf invalid
0235   7968             
0235   7968 27 FE       
0236   796A 43          			comA	; turn off flashing
0237   796B 94 A7       			andA	>flc(8)
0238   796D 97 A7       			staA	flc(8)
0239   796F 86 FE       			lampOff(1,3) ; shoot again
0239   7971 94 0A       
0239   7973 97 0A       
0240   7975 86 BF       			lampOff(7,8)
0240   7977 94 0F       
0240   7979 97 0F       
0241   797B             		endif
0241   797B             
0241   797B             
0241   797B             
0241   797B             
0241   797B             
0241   797B~            		endif
0241   797B~            		endif
0241   797B             
0241   797B~            		endif
0241   797B~            		endif
0241   797B             
0241   7969             
0241   7969 11          
0241   796A             
0241   796A             
0241   796A~            		endif
0241   796A~            		endif
0241   796A~            		endif
0241   796A             
0241   797B             
0241   797B~            		endif
0241   797B~            		endif
0241   797B             
0242   797B             	else
0242   797B             
0242   797B             
0242   797B             
0242   797B             
0242   7963             
0242   7963             
0242   7963             
0242   7963~            	else
0242   7963~            	else
0242   7963~            	else
0242   7963~            	else
0242   7963             
0242   7963~            	else
0242   7963~            	else
0242   7963~            	else
0242   7963~            	else
0242   7963             
0242   7963             
0242   7963 19          
0242   797B             
0242   797B 20 FE       
0242   797D             
0242   797D             
0242   797D             
0242   797D~            	else
0242   797D~            	else
0242   797D~            	else
0242   797D~            	else
0242   797D~            	else
0242   797D             
0242   797D~            	else
0242   797D~            	else
0242   797D             
0242   797D~            	else
0242   797D~            	else
0242   797D             
0243   797D             		; clear don't validate bit
0244   797D 43          		comA
0245   797E B4 01 69    		andA	>state
0246   7981 B7 01 69    		staA	>state
0247   7984             	endif
0247   7984             
0247   7984             
0247   7984             
0247   7984             
0247   7984             
0247   7984~            	endif
0247   7984~            	endif
0247   7984             
0247   7984~            	endif
0247   7984~            	endif
0247   7984             
0247   797C             
0247   797C 07          
0247   797D             
0247   797D             
0247   797D~            	endif
0247   797D~            	endif
0247   797D~            	endif
0247   797D             
0247   7984             
0247   7984~            	endif
0247   7984~            	endif
0247   7984             
0248   7984             	
0249   7984             skipEvent:
0250   7984 B6 01 69    	ldaA	>state
0251   7987 85 04       	bitA	100b
0252   7989             	ifeq	; don't process queue if still finishing timers
0252   7989             
0252   7989 26 FE       
0253   798B C6 67       		ldaB	queueEnd
0254   798D D1 55       		cmpB	>queueHead + 1
0255   798F             		ifeq
0255   798F             
0255   798F 26 FE       
0256   7991 C6 60       			ldaB	queue
0257   7993 D7 55       			staB	queueHead + 1
0258   7995             		else
0258   7995             
0258   7995             
0258   7995             
0258   7995             
0258   7990             
0258   7990             
0258   7990             
0258   7990~            		else
0258   7990~            		else
0258   7990~            		else
0258   7990~            		else
0258   7990             
0258   7990~            		else
0258   7990~            		else
0258   7990~            		else
0258   7990~            		else
0258   7990             
0258   7990             
0258   7990 06          
0258   7995             
0258   7995 20 FE       
0258   7997             
0258   7997             
0258   7997             
0258   7997~            		else
0258   7997~            		else
0258   7997~            		else
0258   7997~            		else
0258   7997~            		else
0258   7997             
0258   7997~            		else
0258   7997~            		else
0258   7997             
0258   7997~            		else
0258   7997~            		else
0258   7997             
0259   7997 7C 00 55    			inc	queueHead + 1
0260   799A             		endif
0260   799A             
0260   799A             
0260   799A             
0260   799A             
0260   799A             
0260   799A~            		endif
0260   799A~            		endif
0260   799A             
0260   799A~            		endif
0260   799A~            		endif
0260   799A             
0260   7996             
0260   7996 03          
0260   7997             
0260   7997             
0260   7997~            		endif
0260   7997~            		endif
0260   7997~            		endif
0260   7997             
0260   799A             
0260   799A~            		endif
0260   799A~            		endif
0260   799A             
0261   799A             	endif
0261   799A             
0261   799A             
0261   799A             
0261   799A             
0261   799A             
0261   799A~            	endif
0261   799A~            	endif
0261   799A             
0261   799A~            	endif
0261   799A~            	endif
0261   799A             
0261   798A             
0261   798A 0F          
0261   798B             
0261   798B             
0261   798B~            	endif
0261   798B~            	endif
0261   798B~            	endif
0261   798B             
0261   799A             
0261   799A~            	endif
0261   799A~            	endif
0261   799A             
0262   799A             				
0263   799A             skipQueue:
0264   799A             				
0265   799A             	
0266   799A             				
0267   799A 7E 78 F2    	jmp		end
0268   799D 00 00       	.dw 0
0269   799F 00 00       	.dw 0
0270   79A1 00 00       	.dw 0
0271   79A3 00 00       	.dw 0
0272   79A5 00 00       	.dw 0
0273   79A7             		
0274   79A7             interrupt:	
0275   79A7 7C 00 02    	inc	counter
0276   79AA 86 00       	ldaA	0
0277   79AC 91 02       	cmpA	>counter
0278   79AE 26 21       	bne	counterHandled
0279   79B0 7C 00 03    	inc 	counter2
0280   79B3 86 04       	ldaA	4
0281   79B5 91 03       	cmpA	>counter2
0282   79B7 26 18       	bne	counterHandled
0283   79B9             	
0284   79B9 86 00       	ldaA	0
0285   79BB 97 03       	staA	counter2
0286   79BD 86 77       	ldaA	01110111b
0287   79BF 91 70       	cmpA	>displayBcd1
0288   79C1 27 08       	beq	on
0289   79C3             	
0290   79C3 86 F0       	ldaA	$F0
0291   79C5             	;staA	lampRow1
0292   79C5 86 77       	ldaA	01110111b
0293   79C7 97 70       	staA	displayBcd1	
0294   79C9 20 06       	bra	counterHandled
0295   79CB             on:
0296   79CB 86 0F       	ldaA	$0F
0297   79CD             	;staA	lampRow1
0298   79CD 86 33       	ldaA	00110011b
0299   79CF 97 70       	staA	displayBcd1	
0300   79D1             
0301   79D1             counterHandled:
0302   79D1             ; move switch column
0303   79D1 96 07       	ldaA	>strobe
0304   79D3 B7 30 02    	staA	switchStrobe
0305   79D6             	
0306   79D6             ; update display 
0307   79D6             	
0308   79D6 DE 50       	ldX	>curCol
0309   79D8 B6 01 68    	ldaA	>displayCol
0310   79DB C6 FF       	ldaB 	$FF
0311   79DD F7 28 02    	staB	displayBcd
0312   79E0 B7 28 00    	staA	displayStrobe
0313   79E3 85 08       	bitA	00001000b
0314   79E5             	ifeq
0314   79E5             
0314   79E5 26 FE       
0315   79E7 E6 70       		ldaB	displayBcd1, X
0316   79E9             	else
0316   79E9             
0316   79E9             
0316   79E9             
0316   79E9             
0316   79E6             
0316   79E6             
0316   79E6             
0316   79E6~            	else
0316   79E6~            	else
0316   79E6~            	else
0316   79E6~            	else
0316   79E6             
0316   79E6~            	else
0316   79E6~            	else
0316   79E6~            	else
0316   79E6~            	else
0316   79E6             
0316   79E6             
0316   79E6 04          
0316   79E9             
0316   79E9 20 FE       
0316   79EB             
0316   79EB             
0316   79EB             
0316   79EB~            	else
0316   79EB~            	else
0316   79EB~            	else
0316   79EB~            	else
0316   79EB~            	else
0316   79EB             
0316   79EB~            	else
0316   79EB~            	else
0316   79EB             
0316   79EB~            	else
0316   79EB~            	else
0316   79EB             
0317   79EB E6 78       		ldaB	displayBcd1 + 8, X
0318   79ED             	endif
0318   79ED             
0318   79ED             
0318   79ED             
0318   79ED             
0318   79ED             
0318   79ED~            	endif
0318   79ED~            	endif
0318   79ED             
0318   79ED~            	endif
0318   79ED~            	endif
0318   79ED             
0318   79EA             
0318   79EA 02          
0318   79EB             
0318   79EB             
0318   79EB~            	endif
0318   79EB~            	endif
0318   79EB~            	endif
0318   79EB             
0318   79ED             
0318   79ED~            	endif
0318   79ED~            	endif
0318   79ED             
0319   79ED F7 28 02    	staB	displayBcd
0320   79F0             	
0321   79F0             ; read switches
0322   79F0             	;jmp updateLamps
0323   79F0 DE 50       	ldX	>curCol
0324   79F2 B6 30 00    	ldaA	>switchRow
0325   79F5 16          	tab
0326   79F6 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0327   79F8             	
0328   79F8 D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0329   79FA D7 01       	staB	temp + 1 			; temp = switch / 2
0330   79FC D7 53       	staB	tempX + 1			; tempX = cRAM
0331   79FE C6 60       	ldaB	callbackTable >> 8
0332   7A00 D7 00       	staB	temp
0333   7A02 C6 01       	ldaB	cRAM >> 8
0334   7A04 D7 52       	staB	tempX
0335   7A06             	
0336   7A06 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0337   7A08             	
0338   7A08             	; temp now contains the beginning of the row in the callbackTable
0339   7A08             swNext:
0340   7A08 85 01       	bitA	00000001b	 ; Z set if switch not different
0341   7A0A             	ifne		; if bit set, switch different
0341   7A0A             
0341   7A0A 27 FE       
0342   7A0C 36          		pshA ; store changed switches left
0343   7A0D DE 52       		ldX	>tempX
0344   7A0F 86 18       		ldaA	11000b
0345   7A11 95 02       		bitA	>counter
0346   7A13 27 08       		beq checkSettled ;  skip settling (multiplies settle time by 8)
0347   7A15             			; just check if it's currently settled
0348   7A15 A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0349   7A17 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0350   7A19 27 33       			beq 	notSettled; A=0 -> settled
0351   7A1B 20 4C       			bra settledEnd
0352   7A1D             checkSettled:
0353   7A1D A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0354   7A1F 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0355   7A21 27 2B       		beq 	notSettled; A=0 -> settled
0356   7A23             		; else A > 0 -> settling
0357   7A23 4A          			decA
0358   7A24 A7 00       			staA	0, X	; sets Z if now A = 0
0359   7A26             			ifeq ; A=0 -> now settled, fire event
0359   7A26             
0359   7A26 26 FE       
0360   7A28             settled:		
0361   7A28 DE 50       				ldX	>curCol
0362   7A2A 17          				tBA	; A now the bit in row
0363   7A2B A8 20       				eorA	switchRow1, X ; toggle bit in row
0364   7A2D A7 20       				staA	switchRow1, X ; A now state of row
0365   7A2F             				
0366   7A2F F5 30 00    				bitB	>switchRow
0367   7A32             				ifne ; switch now on
0367   7A32             
0367   7A32 27 FE       
0368   7A34 86 40       					ldaA	01000000b
0369   7A36             				else
0369   7A36             
0369   7A36             
0369   7A36             
0369   7A36             
0369   7A33             
0369   7A33             
0369   7A33             
0369   7A33~            				else
0369   7A33~            				else
0369   7A33~            				else
0369   7A33~            				else
0369   7A33             
0369   7A33~            				else
0369   7A33~            				else
0369   7A33~            				else
0369   7A33~            				else
0369   7A33             
0369   7A33             
0369   7A33 04          
0369   7A36             
0369   7A36 20 FE       
0369   7A38             
0369   7A38             
0369   7A38             
0369   7A38~            				else
0369   7A38~            				else
0369   7A38~            				else
0369   7A38~            				else
0369   7A38~            				else
0369   7A38             
0369   7A38~            				else
0369   7A38~            				else
0369   7A38             
0369   7A38~            				else
0369   7A38~            				else
0369   7A38             
0370   7A38 86 C0       					ldaA	11000000b
0371   7A3A             				endif
0371   7A3A             
0371   7A3A             
0371   7A3A             
0371   7A3A             
0371   7A3A             
0371   7A3A~            				endif
0371   7A3A~            				endif
0371   7A3A             
0371   7A3A~            				endif
0371   7A3A~            				endif
0371   7A3A             
0371   7A37             
0371   7A37 02          
0371   7A38             
0371   7A38             
0371   7A38~            				endif
0371   7A38~            				endif
0371   7A38~            				endif
0371   7A38             
0371   7A3A             
0371   7A3A~            				endif
0371   7A3A~            				endif
0371   7A3A             
0372   7A3A 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0373   7A3C             				
0374   7A3C             				; store event
0375   7A3C DE 56       				ldX	>queueTail
0376   7A3E A7 00       				staA	0, X
0377   7A40 7C 00 57    				inc	queueTail + 1
0378   7A43             				
0379   7A43             				; wrap queueTail if necessary
0380   7A43 8C 00 67    				cpX	queueEnd 
0381   7A46             				ifeq
0381   7A46             
0381   7A46 26 FE       
0382   7A48 86 60       					ldaA	queue 
0383   7A4A 97 57       					staA	queueTail + 1
0384   7A4C             				endif
0384   7A4C             
0384   7A4C             
0384   7A4C             
0384   7A4C             
0384   7A4C             
0384   7A4C~            				endif
0384   7A4C~            				endif
0384   7A4C             
0384   7A4C~            				endif
0384   7A4C~            				endif
0384   7A4C             
0384   7A47             
0384   7A47 04          
0384   7A48             
0384   7A48             
0384   7A48~            				endif
0384   7A48~            				endif
0384   7A48~            				endif
0384   7A48             
0384   7A4C             
0384   7A4C~            				endif
0384   7A4C~            				endif
0384   7A4C             
0385   7A4C             			endif
0385   7A4C             
0385   7A4C             
0385   7A4C             
0385   7A4C             
0385   7A4C             
0385   7A4C~            			endif
0385   7A4C~            			endif
0385   7A4C             
0385   7A4C~            			endif
0385   7A4C~            			endif
0385   7A4C             
0385   7A27             
0385   7A27 24          
0385   7A28             
0385   7A28             
0385   7A28~            			endif
0385   7A28~            			endif
0385   7A28~            			endif
0385   7A28             
0385   7A4C             
0385   7A4C~            			endif
0385   7A4C~            			endif
0385   7A4C             
0386   7A4C 20 1B       		bra settledEnd
0387   7A4E             notSettled: ; =0 -> was settled, so now it's not
0388   7A4E             			; get the settle time
0389   7A4E 96 53       			ldaA	>tempX + 1
0390   7A50 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0391   7A52 CE 00 00    			ldX	temp
0392   7A55             			
0393   7A55             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0394   7A55 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0395   7A57             			
0396   7A57             			; need to get correct 3 bits from switch settings
0397   7A57 F5 30 00    			bitB	>switchRow
0398   7A5A             			ifne ; switch just turned on
0398   7A5A             
0398   7A5A 27 FE       
0399   7A5C 44          				lsrA
0400   7A5D 44          				lsrA
0401   7A5E             			else
0401   7A5E             
0401   7A5E             
0401   7A5E             
0401   7A5E             
0401   7A5B             
0401   7A5B             
0401   7A5B             
0401   7A5B~            			else
0401   7A5B~            			else
0401   7A5B~            			else
0401   7A5B~            			else
0401   7A5B             
0401   7A5B~            			else
0401   7A5B~            			else
0401   7A5B~            			else
0401   7A5B~            			else
0401   7A5B             
0401   7A5B             
0401   7A5B 04          
0401   7A5E             
0401   7A5E 20 FE       
0401   7A60             
0401   7A60             
0401   7A60             
0401   7A60~            			else
0401   7A60~            			else
0401   7A60~            			else
0401   7A60~            			else
0401   7A60~            			else
0401   7A60             
0401   7A60~            			else
0401   7A60~            			else
0401   7A60             
0401   7A60~            			else
0401   7A60~            			else
0401   7A60             
0402   7A60 48          				aslA
0403   7A61             			endif
0403   7A61             
0403   7A61             
0403   7A61             
0403   7A61             
0403   7A61             
0403   7A61~            			endif
0403   7A61~            			endif
0403   7A61             
0403   7A61~            			endif
0403   7A61~            			endif
0403   7A61             
0403   7A5F             
0403   7A5F 01          
0403   7A60             
0403   7A60             
0403   7A60~            			endif
0403   7A60~            			endif
0403   7A60~            			endif
0403   7A60             
0403   7A61             
0403   7A61~            			endif
0403   7A61~            			endif
0403   7A61             
0404   7A61 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0405   7A63             						
0406   7A63 DE 52       			ldX	>tempX
0407   7A65 A7 00       			staA	0, X		; start settling	
0408   7A67 27 BF       			beq	settled		; quick out for 0 settle
0409   7A69             settledEnd:
0410   7A69             			
0411   7A69 32          		pulA
0412   7A6A             	endif
0412   7A6A             
0412   7A6A             
0412   7A6A             
0412   7A6A             
0412   7A6A             
0412   7A6A~            	endif
0412   7A6A~            	endif
0412   7A6A             
0412   7A6A~            	endif
0412   7A6A~            	endif
0412   7A6A             
0412   7A0B             
0412   7A0B 5E          
0412   7A0C             
0412   7A0C             
0412   7A0C~            	endif
0412   7A0C~            	endif
0412   7A0C~            	endif
0412   7A0C             
0412   7A6A             
0412   7A6A~            	endif
0412   7A6A~            	endif
0412   7A6A             
0413   7A6A 7C 00 53    	inc tempX + 1
0414   7A6D 58          	aslB
0415   7A6E 44          	lsrA			; pop lowest bit off, set Z if A is empty
0416   7A6F 26 97       	bne		swNext 	; more 'switched' bits, keep processing 
0417   7A71             	
0418   7A71             	
0419   7A71             ; update lamps
0420   7A71             updateLamps:
0421   7A71             	;jmp updateStrobe
0422   7A71             
0423   7A71 DE 50       	ldX	>curCol
0424   7A73             	
0425   7A73 86 FF       	ldaA	$FF	;lamp row is inverted
0426   7A75 B7 24 00    	staA	lampCol
0427   7A78 96 07       	ldaA	>strobe
0428   7A7A B7 24 02    	staA	lampStrobe
0429   7A7D             	
0430   7A7D D6 03       	ldaB	>counter2
0431   7A7F A6 08       	ldaA	lampCol1, X
0432   7A81 C5 01       	bitB	1b 
0433   7A83             	ifeq
0433   7A83             
0433   7A83 26 FE       
0434   7A85 A8 A0       		eorA	flashLampCol1, X
0435   7A87 A4 08       		andA	lampCol1, X
0436   7A89             	endif
0436   7A89             
0436   7A89             
0436   7A89             
0436   7A89             
0436   7A89             
0436   7A89~            	endif
0436   7A89~            	endif
0436   7A89             
0436   7A89~            	endif
0436   7A89~            	endif
0436   7A89             
0436   7A84             
0436   7A84 04          
0436   7A85             
0436   7A85             
0436   7A85~            	endif
0436   7A85~            	endif
0436   7A85~            	endif
0436   7A85             
0436   7A89             
0436   7A89~            	endif
0436   7A89~            	endif
0436   7A89             
0437   7A89 43          	comA	; inverted
0438   7A8A             	
0439   7A8A B7 24 00    	staA	lampCol
0440   7A8D 86 00       	ldaA	00
0441   7A8F             
0442   7A8F             ; update solenoids
0443   7A8F             	; if a solenoid is set to <254, --
0444   7A8F             	; if =255, off, otherwise on
0445   7A8F             	; else leave it at 254
0446   7A8F             	
0447   7A8F 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0448   7A92 86 FE       	ldaA	254
0449   7A94 DE 50       	ldX	>curCol
0450   7A96             	; update solenoid in current 'column' (1-8) 
0451   7A96 A1 40       	cmpA	solenoid1 - cRAM, X
0452   7A98             	ifge 	; solenoid <=254, turn on
0452   7A98             
0452   7A98 25 FE       
0453   7A9A             		ifgt	; solenoid < 254, decrement
0453   7A9A             
0453   7A9A 23 FE       
0454   7A9C 6A 40       			dec	solenoid1 - cRAM, X
0455   7A9E             		endif
0455   7A9E             
0455   7A9E             
0455   7A9E             
0455   7A9E             
0455   7A9E             
0455   7A9E~            		endif
0455   7A9E~            		endif
0455   7A9E             
0455   7A9E~            		endif
0455   7A9E~            		endif
0455   7A9E             
0455   7A9B             
0455   7A9B 02          
0455   7A9C             
0455   7A9C             
0455   7A9C~            		endif
0455   7A9C~            		endif
0455   7A9C~            		endif
0455   7A9C             
0455   7A9E             
0455   7A9E~            		endif
0455   7A9E~            		endif
0455   7A9E             
0456   7A9E 0D          		sec
0457   7A9F             	else
0457   7A9F             
0457   7A9F             
0457   7A9F             
0457   7A9F             
0457   7A99             
0457   7A99             
0457   7A99             
0457   7A99~            	else
0457   7A99~            	else
0457   7A99~            	else
0457   7A99~            	else
0457   7A99             
0457   7A99~            	else
0457   7A99~            	else
0457   7A99~            	else
0457   7A99~            	else
0457   7A99             
0457   7A99             
0457   7A99 07          
0457   7A9F             
0457   7A9F 20 FE       
0457   7AA1             
0457   7AA1             
0457   7AA1             
0457   7AA1~            	else
0457   7AA1~            	else
0457   7AA1~            	else
0457   7AA1~            	else
0457   7AA1~            	else
0457   7AA1             
0457   7AA1~            	else
0457   7AA1~            	else
0457   7AA1             
0457   7AA1~            	else
0457   7AA1~            	else
0457   7AA1             
0458   7AA1 0C          		clc
0459   7AA2             	endif
0459   7AA2             
0459   7AA2             
0459   7AA2             
0459   7AA2             
0459   7AA2             
0459   7AA2~            	endif
0459   7AA2~            	endif
0459   7AA2             
0459   7AA2~            	endif
0459   7AA2~            	endif
0459   7AA2             
0459   7AA0             
0459   7AA0 01          
0459   7AA1             
0459   7AA1             
0459   7AA1~            	endif
0459   7AA1~            	endif
0459   7AA1~            	endif
0459   7AA1             
0459   7AA2             
0459   7AA2~            	endif
0459   7AA2~            	endif
0459   7AA2             
0460   7AA2 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0461   7AA5             	; repeat above for second bank
0462   7AA5 A1 48       	cmpA	solenoid9 - cRAM, X
0463   7AA7             	ifge 	; solenoid <=254, turn on
0463   7AA7             
0463   7AA7 25 FE       
0464   7AA9             		ifgt	; solenoid < 254, decrement
0464   7AA9             
0464   7AA9 23 FE       
0465   7AAB 6A 48       			dec	solenoid9 - cRAM, X
0466   7AAD             		endif
0466   7AAD             
0466   7AAD             
0466   7AAD             
0466   7AAD             
0466   7AAD             
0466   7AAD~            		endif
0466   7AAD~            		endif
0466   7AAD             
0466   7AAD~            		endif
0466   7AAD~            		endif
0466   7AAD             
0466   7AAA             
0466   7AAA 02          
0466   7AAB             
0466   7AAB             
0466   7AAB~            		endif
0466   7AAB~            		endif
0466   7AAB~            		endif
0466   7AAB             
0466   7AAD             
0466   7AAD~            		endif
0466   7AAD~            		endif
0466   7AAD             
0467   7AAD 0D          		sec
0468   7AAE             	else
0468   7AAE             
0468   7AAE             
0468   7AAE             
0468   7AAE             
0468   7AA8             
0468   7AA8             
0468   7AA8             
0468   7AA8~            	else
0468   7AA8~            	else
0468   7AA8~            	else
0468   7AA8~            	else
0468   7AA8             
0468   7AA8~            	else
0468   7AA8~            	else
0468   7AA8~            	else
0468   7AA8~            	else
0468   7AA8             
0468   7AA8             
0468   7AA8 07          
0468   7AAE             
0468   7AAE 20 FE       
0468   7AB0             
0468   7AB0             
0468   7AB0             
0468   7AB0~            	else
0468   7AB0~            	else
0468   7AB0~            	else
0468   7AB0~            	else
0468   7AB0~            	else
0468   7AB0             
0468   7AB0~            	else
0468   7AB0~            	else
0468   7AB0             
0468   7AB0~            	else
0468   7AB0~            	else
0468   7AB0             
0469   7AB0 0C          		clc
0470   7AB1             	endif
0470   7AB1             
0470   7AB1             
0470   7AB1             
0470   7AB1             
0470   7AB1             
0470   7AB1~            	endif
0470   7AB1~            	endif
0470   7AB1             
0470   7AB1~            	endif
0470   7AB1~            	endif
0470   7AB1             
0470   7AAF             
0470   7AAF 01          
0470   7AB0             
0470   7AB0             
0470   7AB0~            	endif
0470   7AB0~            	endif
0470   7AB0~            	endif
0470   7AB0             
0470   7AB1             
0470   7AB1~            	endif
0470   7AB1~            	endif
0470   7AB1             
0471   7AB1 76 00 29    	ror		solBStatus	
0472   7AB4 7A 00 50    	dec		curCol ; undo inc
0473   7AB7             	
0474   7AB7             ; update strobe	
0475   7AB7             updateStrobe:
0476   7AB7             	;ldX		curCol
0477   7AB7             	;inX 	
0478   7AB7 86 08       	ldaA	8 	; pitch
0479   7AB9 9B 10       	addA	>curSwitchRowLsb
0480   7ABB 97 10       	staA	curSwitchRowLsb
0481   7ABD 78 00 07    	asl	strobe
0482   7AC0 7C 01 68    	inc	displayCol
0483   7AC3 86 00       	ldaA	0
0484   7AC5 91 07       	cmpA	>strobe ; strobe done?  reset
0485   7AC7             	ifeq		
0485   7AC7             
0485   7AC7 26 FE       
0486   7AC9 96 28       		ldaA	>solAStatus
0487   7ACB B7 22 00    		staA	solenoidA
0488   7ACE 96 29       		ldaA	>solBStatus
0489   7AD0 B7 22 02    		staA	solenoidB
0490   7AD3             	
0491   7AD3 86 01       		ldaA	00000001b
0492   7AD5 97 07       		staA	strobe
0493   7AD7             		
0494   7AD7             		;ldX 	#0
0495   7AD7             		
0496   7AD7 86 00       		ldaA	0
0497   7AD9 97 50       		staA	curCol
0498   7ADB 97 51       		staA	curCol + 1
0499   7ADD 97 10       		staA	curSwitchRowLsb
0500   7ADF 97 28       		staA	solAStatus
0501   7AE1 97 29       		staA	solBStatus
0502   7AE3             		
0503   7AE3 F6 01 68    		ldaB	>displayCol	; reset display col only if it's > 7 
0504   7AE6 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0505   7AE8             		ifgt
0505   7AE8             
0505   7AE8 23 FE       
0506   7AEA B7 01 68    			staA	displayCol
0507   7AED             		endif
0507   7AED             
0507   7AED             
0507   7AED             
0507   7AED             
0507   7AED             
0507   7AED~            		endif
0507   7AED~            		endif
0507   7AED             
0507   7AED~            		endif
0507   7AED~            		endif
0507   7AED             
0507   7AE9             
0507   7AE9 03          
0507   7AEA             
0507   7AEA             
0507   7AEA~            		endif
0507   7AEA~            		endif
0507   7AEA~            		endif
0507   7AEA             
0507   7AED             
0507   7AED~            		endif
0507   7AED~            		endif
0507   7AED             
0508   7AED             	
0509   7AED B6 01 69    		ldaA	>state
0510   7AF0 8A 04       		oraA	100b
0511   7AF2 B7 01 69    		staA	state
0512   7AF5             	else
0512   7AF5             
0512   7AF5             
0512   7AF5             
0512   7AF5             
0512   7AC8             
0512   7AC8             
0512   7AC8             
0512   7AC8~            	else
0512   7AC8~            	else
0512   7AC8~            	else
0512   7AC8~            	else
0512   7AC8             
0512   7AC8~            	else
0512   7AC8~            	else
0512   7AC8~            	else
0512   7AC8~            	else
0512   7AC8             
0512   7AC8             
0512   7AC8 2E          
0512   7AF5             
0512   7AF5 20 FE       
0512   7AF7             
0512   7AF7             
0512   7AF7             
0512   7AF7~            	else
0512   7AF7~            	else
0512   7AF7~            	else
0512   7AF7~            	else
0512   7AF7~            	else
0512   7AF7             
0512   7AF7~            	else
0512   7AF7~            	else
0512   7AF7             
0512   7AF7~            	else
0512   7AF7~            	else
0512   7AF7             
0513   7AF7 7C 00 51    		inc	curCol + 1
0514   7AFA             	endif
0514   7AFA             
0514   7AFA             
0514   7AFA             
0514   7AFA             
0514   7AFA             
0514   7AFA~            	endif
0514   7AFA~            	endif
0514   7AFA             
0514   7AFA~            	endif
0514   7AFA~            	endif
0514   7AFA             
0514   7AF6             
0514   7AF6 03          
0514   7AF7             
0514   7AF7             
0514   7AF7~            	endif
0514   7AF7~            	endif
0514   7AF7~            	endif
0514   7AF7             
0514   7AFA             
0514   7AFA~            	endif
0514   7AFA~            	endif
0514   7AFA             
0515   7AFA             	
0516   7AFA 3B          	rti
0517   7AFB             afterInterrupt:
0518   7AFB             
0519   7FF8             pointers: 	.org $7FF8  	
0520   7FF8             	.msfirst
0521   7FF8 79 A7       	.dw interrupt			
0522   7FFA 79 A7       	.dw interrupt			
0523   7FFC 79 A7       	.dw interrupt			
0524   7FFE 78 00       	.dw main
0525   8000             	
0526   8000             	
0527   8000             	.endtasm: Number of errors = 0
