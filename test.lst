0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampRow:		.equ $2400
0007+  0000             lampRowC:		.equ $2401
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000
0013+  0000             switchRowC:		.equ $3001
0014+  0000             solenoidA:		.equ $2200
0015+  0000             solenoidAC		.equ $2201
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             temp:			.equ RAM + $00 ; 01
0022+  0000             counter:		.equ RAM + $02
0023+  0000             counter2:		.equ RAM + $03
0024+  0000             strobe:			.equ RAM + $07
0025+  0000             lampRow1:		.equ RAM + $08
0026+  0000             lampRow8:		.equ lampRow1 + 7 
0027+  0000             curSwitchRowLsb	.equ RAM + $10
0028+  0000             ; 10 - 1F
0029+  0000             switchRow1:		.equ RAM + $20
0030+  0000             switchRow8:		.equ switchRow1 + 7 
0031+  0000             solAStatus:		.equ RAM + $28
0032+  0000             solBStatus:		.equ RAM + $29
0033+  0000             curCol:			.equ RAM + $50 ; +
0034+  0000             tempX:			.equ RAM + $52 ; +
0035+  0000             queueHead:		.equ RAM + $54 ; +
0036+  0000             queueTail:		.equ RAM + $56 ; +
0037+  0000             tempQ:			.equ RAM + $58 ; +
0038+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0039+  0000             queueEnd:		.equ RAM + $6F
0040+  0000             displayBcd1:	.equ RAM + $70
0041+  0000             displayBcd16:	.equ RAM + $7F
0042+  0000             ballCount:		.equ displayBcd1 + 7
0043+  0000             
0044+  0000             
0045+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0046+  0000             settleRow8:		.equ settleRow1+  8*8-1
0047+  0000             solenoid1:		.equ cRAM + $40
0048+  0000             solenoid8:		.equ solenoid1 + 7
0049+  0000             solenoid9:		.equ solenoid1 + 8
0050+  0000             solenoid16:		.equ solenoid1 + 15
0051+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0052+  0000             pA_10:			.equ pA_1m + 5
0053+  0000             pB_1m:			.equ pA_10 + 1
0054+  0000             pB_10:			.equ pB_1m + 5
0055+  0000             pC_1m:			.equ pB_10 + 1
0056+  0000             pC_10:			.equ pC_1m + 5
0057+  0000             pD_1m:			.equ pC_10 + 1
0058+  0000             pD_10:			.equ pD_1m + 5  
0059+  0000             displayCol:		.equ cRAM + $68
0060+  0000             state:			.equ cRAM + $69	; !gameover | ? | ? | ?
0061+  0000             playerCount:	.equ cRAM + $70
0062+  0000             curPlayer:		.equ cRAM + $71
0063+  0000             
0064+  0000             instant:		.equ 4
0065+  0000             debounce:		.equ 1
0066+  0000             slow:			.equ 2
0067+  0000             
0068+  0000             switchSettle:	.equ cRAM + $30
0069+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7B00             utils:	.org $7B00
0002+  7B00             
0003+  7B00             ; copy players' scores to display 
0004+  7B00             copyScores13:
0005+  7B00 CE 00 70    	ldX		#displayBcd1
0006+  7B03 C6 FF       	ldaB	#$FF	; blank(F) until a number >0 is found then 0
0007+  7B05             copy13Loop:
0008+  7B05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7B07 81 F0       	cmpA	#$F0 
0010+  7B09             	ifeq ; if pA score = 0?
0010+  7B09             
0010+  7B09 26 FE       
0011+  7B0B 8C 00 74    		cpX		#displayBcd1 + 4
0012+  7B0E             		ifeq
0012+  7B0E             
0012+  7B0E 26 FE       
0013+  7B10 C4 0F       			andB	#00001111b 
0014+  7B12 86 0F       			ldaA	#$0F
0015+  7B14             		else
0015+  7B14             
0015+  7B14             
0015+  7B14             
0015+  7B14             
0015+  7B0F             
0015+  7B0F             
0015+  7B0F             
0015+  7B0F~            		else
0015+  7B0F~            		else
0015+  7B0F~            		else
0015+  7B0F~            		else
0015+  7B0F             
0015+  7B0F~            		else
0015+  7B0F~            		else
0015+  7B0F~            		else
0015+  7B0F~            		else
0015+  7B0F             
0015+  7B0F             
0015+  7B0F 06          
0015+  7B14             
0015+  7B14 20 FE       
0015+  7B16             
0015+  7B16             
0015+  7B16             
0015+  7B16~            		else
0015+  7B16~            		else
0015+  7B16~            		else
0015+  7B16~            		else
0015+  7B16~            		else
0015+  7B16             
0015+  7B16~            		else
0015+  7B16~            		else
0015+  7B16             
0015+  7B16~            		else
0015+  7B16~            		else
0015+  7B16             
0016+  7B16 17          			tBA	; replace 0 with blank/0
0017+  7B17             		endif
0017+  7B17             
0017+  7B17             
0017+  7B17             
0017+  7B17             
0017+  7B17             
0017+  7B17~            		endif
0017+  7B17~            		endif
0017+  7B17             
0017+  7B17~            		endif
0017+  7B17~            		endif
0017+  7B17             
0017+  7B15             
0017+  7B15 01          
0017+  7B16             
0017+  7B16             
0017+  7B16~            		endif
0017+  7B16~            		endif
0017+  7B16~            		endif
0017+  7B16             
0017+  7B17             
0017+  7B17~            		endif
0017+  7B17~            		endif
0017+  7B17             
0018+  7B17             	else
0018+  7B17             
0018+  7B17             
0018+  7B17             
0018+  7B17             
0018+  7B0A             
0018+  7B0A             
0018+  7B0A             
0018+  7B0A~            	else
0018+  7B0A~            	else
0018+  7B0A~            	else
0018+  7B0A~            	else
0018+  7B0A             
0018+  7B0A~            	else
0018+  7B0A~            	else
0018+  7B0A~            	else
0018+  7B0A~            	else
0018+  7B0A             
0018+  7B0A             
0018+  7B0A 0E          
0018+  7B17             
0018+  7B17 20 FE       
0018+  7B19             
0018+  7B19             
0018+  7B19             
0018+  7B19~            	else
0018+  7B19~            	else
0018+  7B19~            	else
0018+  7B19~            	else
0018+  7B19~            	else
0018+  7B19             
0018+  7B19~            	else
0018+  7B19~            	else
0018+  7B19             
0018+  7B19~            	else
0018+  7B19~            	else
0018+  7B19             
0019+  7B19 48          		aslA
0020+  7B1A 48          		aslA
0021+  7B1B 48          		aslA
0022+  7B1C 48          		aslA
0023+  7B1D C4 0F       		andB	#00001111b ; mark upper half of B as 0 since number found
0024+  7B1F 8A 0F       		oraA	#00001111b
0025+  7B21             	endif
0025+  7B21             
0025+  7B21             
0025+  7B21             
0025+  7B21             
0025+  7B21             
0025+  7B21~            	endif
0025+  7B21~            	endif
0025+  7B21             
0025+  7B21~            	endif
0025+  7B21~            	endif
0025+  7B21             
0025+  7B18             
0025+  7B18 08          
0025+  7B19             
0025+  7B19             
0025+  7B19~            	endif
0025+  7B19~            	endif
0025+  7B19~            	endif
0025+  7B19             
0025+  7B21             
0025+  7B21~            	endif
0025+  7B21~            	endif
0025+  7B21             
0026+  7B21 A4 EC       	andA	pC_1m - displayBcd1, X
0027+  7B23 85 0F       	bitA	#00001111b
0028+  7B25             	ifeq ; pC is 0
0028+  7B25             
0028+  7B25 26 FE       
0029+  7B27 C5 0F       		bitB	#1111b
0030+  7B29             		ifne
0030+  7B29             
0030+  7B29 27 FE       
0031+  7B2B 8C 00 74    			cpX		#displayBcd1 + 4
0032+  7B2E             			ifeq
0032+  7B2E             
0032+  7B2E 26 FE       
0033+  7B30 C4 F0       				andB	#11110000b
0034+  7B32             			else
0034+  7B32             
0034+  7B32             
0034+  7B32             
0034+  7B32             
0034+  7B2F             
0034+  7B2F             
0034+  7B2F             
0034+  7B2F~            			else
0034+  7B2F~            			else
0034+  7B2F~            			else
0034+  7B2F~            			else
0034+  7B2F             
0034+  7B2F~            			else
0034+  7B2F~            			else
0034+  7B2F~            			else
0034+  7B2F~            			else
0034+  7B2F             
0034+  7B2F             
0034+  7B2F 04          
0034+  7B32             
0034+  7B32 20 FE       
0034+  7B34             
0034+  7B34             
0034+  7B34             
0034+  7B34~            			else
0034+  7B34~            			else
0034+  7B34~            			else
0034+  7B34~            			else
0034+  7B34~            			else
0034+  7B34             
0034+  7B34~            			else
0034+  7B34~            			else
0034+  7B34             
0034+  7B34~            			else
0034+  7B34~            			else
0034+  7B34             
0035+  7B34 8A 0F       				oraA	#$F
0036+  7B36             			endif
0036+  7B36             
0036+  7B36             
0036+  7B36             
0036+  7B36             
0036+  7B36             
0036+  7B36~            			endif
0036+  7B36~            			endif
0036+  7B36             
0036+  7B36~            			endif
0036+  7B36~            			endif
0036+  7B36             
0036+  7B33             
0036+  7B33 02          
0036+  7B34             
0036+  7B34             
0036+  7B34~            			endif
0036+  7B34~            			endif
0036+  7B34~            			endif
0036+  7B34             
0036+  7B36             
0036+  7B36~            			endif
0036+  7B36~            			endif
0036+  7B36             
0037+  7B36             		endif
0037+  7B36             
0037+  7B36             
0037+  7B36             
0037+  7B36             
0037+  7B36             
0037+  7B36~            		endif
0037+  7B36~            		endif
0037+  7B36             
0037+  7B36~            		endif
0037+  7B36~            		endif
0037+  7B36             
0037+  7B2A             
0037+  7B2A 0B          
0037+  7B2B             
0037+  7B2B             
0037+  7B2B~            		endif
0037+  7B2B~            		endif
0037+  7B2B~            		endif
0037+  7B2B             
0037+  7B36             
0037+  7B36~            		endif
0037+  7B36~            		endif
0037+  7B36             
0038+  7B36             	else
0038+  7B36             
0038+  7B36             
0038+  7B36             
0038+  7B36             
0038+  7B26             
0038+  7B26             
0038+  7B26             
0038+  7B26~            	else
0038+  7B26~            	else
0038+  7B26~            	else
0038+  7B26~            	else
0038+  7B26             
0038+  7B26~            	else
0038+  7B26~            	else
0038+  7B26~            	else
0038+  7B26~            	else
0038+  7B26             
0038+  7B26             
0038+  7B26 11          
0038+  7B36             
0038+  7B36 20 FE       
0038+  7B38             
0038+  7B38             
0038+  7B38             
0038+  7B38~            	else
0038+  7B38~            	else
0038+  7B38~            	else
0038+  7B38~            	else
0038+  7B38~            	else
0038+  7B38             
0038+  7B38~            	else
0038+  7B38~            	else
0038+  7B38             
0038+  7B38~            	else
0038+  7B38~            	else
0038+  7B38             
0039+  7B38 C4 F0       		andB	#11110000b
0040+  7B3A             	endif
0040+  7B3A             
0040+  7B3A             
0040+  7B3A             
0040+  7B3A             
0040+  7B3A             
0040+  7B3A~            	endif
0040+  7B3A~            	endif
0040+  7B3A             
0040+  7B3A~            	endif
0040+  7B3A~            	endif
0040+  7B3A             
0040+  7B37             
0040+  7B37 02          
0040+  7B38             
0040+  7B38             
0040+  7B38~            	endif
0040+  7B38~            	endif
0040+  7B38~            	endif
0040+  7B38             
0040+  7B3A             
0040+  7B3A~            	endif
0040+  7B3A~            	endif
0040+  7B3A             
0041+  7B3A A7 00       	staA	0, X
0042+  7B3C             	
0043+  7B3C 08          	inX
0044+  7B3D 8C 00 76    	cpX		#displayBcd1 + 6
0045+  7B40 2F C3       	ble copy13Loop
0046+  7B42             	
0047+  7B42 39          	rts
0048+  7B43             
0049+  7B43             copyScores24:
0050+  7B43 CE 00 78    	ldX		#displayBcd1 + 8
0051+  7B46 C6 FF       	ldaB	#$FF	; blank(F) until a number >0 is found then 0
0052+  7B48             copy24Loop:
0053+  7B48 A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0054+  7B4A 81 F0       	cmpA	#$F0 ; is pA score 0?
0055+  7B4C             	ifeq ; if pA score = 0?
0055+  7B4C             
0055+  7B4C 26 FE       
0056+  7B4E 8C 00 7C    		cpX		#displayBcd1 + 8 + 4
0057+  7B51             		ifeq
0057+  7B51             
0057+  7B51 26 FE       
0058+  7B53 C4 0F       			andB	#00001111b 
0059+  7B55 86 0F       			ldaA	#$0F
0060+  7B57             		else
0060+  7B57             
0060+  7B57             
0060+  7B57             
0060+  7B57             
0060+  7B52             
0060+  7B52             
0060+  7B52             
0060+  7B52~            		else
0060+  7B52~            		else
0060+  7B52~            		else
0060+  7B52~            		else
0060+  7B52             
0060+  7B52~            		else
0060+  7B52~            		else
0060+  7B52~            		else
0060+  7B52~            		else
0060+  7B52             
0060+  7B52             
0060+  7B52 06          
0060+  7B57             
0060+  7B57 20 FE       
0060+  7B59             
0060+  7B59             
0060+  7B59             
0060+  7B59~            		else
0060+  7B59~            		else
0060+  7B59~            		else
0060+  7B59~            		else
0060+  7B59~            		else
0060+  7B59             
0060+  7B59~            		else
0060+  7B59~            		else
0060+  7B59             
0060+  7B59~            		else
0060+  7B59~            		else
0060+  7B59             
0061+  7B59 17          			tBA	; replace 0 with blank/0
0062+  7B5A             		endif
0062+  7B5A             
0062+  7B5A             
0062+  7B5A             
0062+  7B5A             
0062+  7B5A             
0062+  7B5A~            		endif
0062+  7B5A~            		endif
0062+  7B5A             
0062+  7B5A~            		endif
0062+  7B5A~            		endif
0062+  7B5A             
0062+  7B58             
0062+  7B58 01          
0062+  7B59             
0062+  7B59             
0062+  7B59~            		endif
0062+  7B59~            		endif
0062+  7B59~            		endif
0062+  7B59             
0062+  7B5A             
0062+  7B5A~            		endif
0062+  7B5A~            		endif
0062+  7B5A             
0063+  7B5A             	else
0063+  7B5A             
0063+  7B5A             
0063+  7B5A             
0063+  7B5A             
0063+  7B4D             
0063+  7B4D             
0063+  7B4D             
0063+  7B4D~            	else
0063+  7B4D~            	else
0063+  7B4D~            	else
0063+  7B4D~            	else
0063+  7B4D             
0063+  7B4D~            	else
0063+  7B4D~            	else
0063+  7B4D~            	else
0063+  7B4D~            	else
0063+  7B4D             
0063+  7B4D             
0063+  7B4D 0E          
0063+  7B5A             
0063+  7B5A 20 FE       
0063+  7B5C             
0063+  7B5C             
0063+  7B5C             
0063+  7B5C~            	else
0063+  7B5C~            	else
0063+  7B5C~            	else
0063+  7B5C~            	else
0063+  7B5C~            	else
0063+  7B5C             
0063+  7B5C~            	else
0063+  7B5C~            	else
0063+  7B5C             
0063+  7B5C~            	else
0063+  7B5C~            	else
0063+  7B5C             
0064+  7B5C 48          		aslA
0065+  7B5D 48          		aslA
0066+  7B5E 48          		aslA
0067+  7B5F 48          		aslA
0068+  7B60 C4 0F       		andB	#00001111b ; mark upper half of B as 0 since number found
0069+  7B62 8A 0F       		oraA	#00001111b
0070+  7B64             	endif
0070+  7B64             
0070+  7B64             
0070+  7B64             
0070+  7B64             
0070+  7B64             
0070+  7B64~            	endif
0070+  7B64~            	endif
0070+  7B64             
0070+  7B64~            	endif
0070+  7B64~            	endif
0070+  7B64             
0070+  7B5B             
0070+  7B5B 08          
0070+  7B5C             
0070+  7B5C             
0070+  7B5C~            	endif
0070+  7B5C~            	endif
0070+  7B5C~            	endif
0070+  7B5C             
0070+  7B64             
0070+  7B64~            	endif
0070+  7B64~            	endif
0070+  7B64             
0071+  7B64 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0072+  7B66 85 0F       	bitA	#00001111b
0073+  7B68             	ifeq ; pC is 0
0073+  7B68             
0073+  7B68 26 FE       
0074+  7B6A C5 0F       		bitB	#1111b
0075+  7B6C             		ifne
0075+  7B6C             
0075+  7B6C 27 FE       
0076+  7B6E 8C 00 7C    			cpX		#displayBcd1 + 8 + 4
0077+  7B71             			ifeq
0077+  7B71             
0077+  7B71 26 FE       
0078+  7B73 C4 F0       				andB	#11110000b
0079+  7B75             			else
0079+  7B75             
0079+  7B75             
0079+  7B75             
0079+  7B75             
0079+  7B72             
0079+  7B72             
0079+  7B72             
0079+  7B72~            			else
0079+  7B72~            			else
0079+  7B72~            			else
0079+  7B72~            			else
0079+  7B72             
0079+  7B72~            			else
0079+  7B72~            			else
0079+  7B72~            			else
0079+  7B72~            			else
0079+  7B72             
0079+  7B72             
0079+  7B72 04          
0079+  7B75             
0079+  7B75 20 FE       
0079+  7B77             
0079+  7B77             
0079+  7B77             
0079+  7B77~            			else
0079+  7B77~            			else
0079+  7B77~            			else
0079+  7B77~            			else
0079+  7B77~            			else
0079+  7B77             
0079+  7B77~            			else
0079+  7B77~            			else
0079+  7B77             
0079+  7B77~            			else
0079+  7B77~            			else
0079+  7B77             
0080+  7B77 8A 0F       				oraA	#$F
0081+  7B79             			endif
0081+  7B79             
0081+  7B79             
0081+  7B79             
0081+  7B79             
0081+  7B79             
0081+  7B79~            			endif
0081+  7B79~            			endif
0081+  7B79             
0081+  7B79~            			endif
0081+  7B79~            			endif
0081+  7B79             
0081+  7B76             
0081+  7B76 02          
0081+  7B77             
0081+  7B77             
0081+  7B77~            			endif
0081+  7B77~            			endif
0081+  7B77~            			endif
0081+  7B77             
0081+  7B79             
0081+  7B79~            			endif
0081+  7B79~            			endif
0081+  7B79             
0082+  7B79             		endif
0082+  7B79             
0082+  7B79             
0082+  7B79             
0082+  7B79             
0082+  7B79             
0082+  7B79~            		endif
0082+  7B79~            		endif
0082+  7B79             
0082+  7B79~            		endif
0082+  7B79~            		endif
0082+  7B79             
0082+  7B6D             
0082+  7B6D 0B          
0082+  7B6E             
0082+  7B6E             
0082+  7B6E~            		endif
0082+  7B6E~            		endif
0082+  7B6E~            		endif
0082+  7B6E             
0082+  7B79             
0082+  7B79~            		endif
0082+  7B79~            		endif
0082+  7B79             
0083+  7B79             	else
0083+  7B79             
0083+  7B79             
0083+  7B79             
0083+  7B79             
0083+  7B69             
0083+  7B69             
0083+  7B69             
0083+  7B69~            	else
0083+  7B69~            	else
0083+  7B69~            	else
0083+  7B69~            	else
0083+  7B69             
0083+  7B69~            	else
0083+  7B69~            	else
0083+  7B69~            	else
0083+  7B69~            	else
0083+  7B69             
0083+  7B69             
0083+  7B69 11          
0083+  7B79             
0083+  7B79 20 FE       
0083+  7B7B             
0083+  7B7B             
0083+  7B7B             
0083+  7B7B~            	else
0083+  7B7B~            	else
0083+  7B7B~            	else
0083+  7B7B~            	else
0083+  7B7B~            	else
0083+  7B7B             
0083+  7B7B~            	else
0083+  7B7B~            	else
0083+  7B7B             
0083+  7B7B~            	else
0083+  7B7B~            	else
0083+  7B7B             
0084+  7B7B C4 F0       		andB	#11110000b
0085+  7B7D             	endif
0085+  7B7D             
0085+  7B7D             
0085+  7B7D             
0085+  7B7D             
0085+  7B7D             
0085+  7B7D~            	endif
0085+  7B7D~            	endif
0085+  7B7D             
0085+  7B7D~            	endif
0085+  7B7D~            	endif
0085+  7B7D             
0085+  7B7A             
0085+  7B7A 02          
0085+  7B7B             
0085+  7B7B             
0085+  7B7B~            	endif
0085+  7B7B~            	endif
0085+  7B7B~            	endif
0085+  7B7B             
0085+  7B7D             
0085+  7B7D~            	endif
0085+  7B7D~            	endif
0085+  7B7D             
0086+  7B7D A7 00       	staA  0, X 
0087+  7B7F             	
0088+  7B7F 08          	inX
0089+  7B80 8C 00 7E    	cpX		#displayBcd1 + 14
0090+  7B83 2F C3       	ble copy24Loop	
0091+  7B85             	
0092+  7B85 39          	rts
0093+  7B86             	
0094+  7B86             blankNonPlayerScores:
0095+  7B86 F6 01 70    	ldaB	playerCount
0096+  7B89 C1 F0       	cmpB	#$F0
0097+  7B8B 27 0E       	beq		blankP1
0098+  7B8D C1 F1       	cmpB	#$F1
0099+  7B8F 27 16       	beq		blankP2
0100+  7B91 C1 F2       	cmpB 	#$F2
0101+  7B93 27 1E       	beq 	blankP3
0102+  7B95 C1 F3       	cmpB	#$F3
0103+  7B97 27 26       	beq 	blankP4
0104+  7B99 20 30       	bra		blankDone	
0105+  7B9B             blankP1:
0106+  7B9B 86 F0       	ldaA	#$F0
0107+  7B9D 9A 74       	oraA	displayBcd1 + 4
0108+  7B9F 97 74       	staA	displayBcd1 + 4
0109+  7BA1 86 F0       	ldaA	#$F0
0110+  7BA3 9A 75       	oraA	displayBcd1 + 5
0111+  7BA5 97 75       	staA	displayBcd1 + 5
0112+  7BA7             blankP2:
0113+  7BA7 86 F0       	ldaA	#$F0
0114+  7BA9 9A 7C       	oraA	displayBcd1 + 12
0115+  7BAB 97 7C       	staA	displayBcd1 + 12
0116+  7BAD 86 F0       	ldaA	#$F0
0117+  7BAF 9A 7D       	oraA	displayBcd1 + 13
0118+  7BB1 97 7D       	staA	displayBcd1 + 13
0119+  7BB3             blankP3:
0120+  7BB3 86 0F       	ldaA	#$0F
0121+  7BB5 9A 74       	oraA	displayBcd1 + 4
0122+  7BB7 97 74       	staA	displayBcd1 + 4
0123+  7BB9 86 0F       	ldaA	#$0F
0124+  7BBB 9A 75       	oraA	displayBcd1 + 5
0125+  7BBD 97 75       	staA	displayBcd1 + 5
0126+  7BBF             blankP4:
0127+  7BBF 86 0F       	ldaA	#$0F
0128+  7BC1 9A 7C       	oraA	displayBcd1 + 12
0129+  7BC3 97 7C       	staA	displayBcd1 + 12
0130+  7BC5 86 0F       	ldaA	#$0F
0131+  7BC7 9A 7D       	oraA	displayBcd1 + 13
0132+  7BC9 97 7D       	staA	displayBcd1 + 13
0133+  7BCB             blankDone:
0134+  7BCB 39          	rts
0135+  7BCC             	
0136+  7BCC             refreshPlayerScores:
0137+  7BCC BD 7B 00    	jsr copyScores13
0138+  7BCF BD 7B 43    	jsr copyScores24
0139+  7BD2 BD 7B 86    	jsr blankNonPlayerScores
0140+  7BD5 39          	rts0006   7BD6             
0007   7BD6             #include "game.asm"
0001+  7BD6             
0002+  6100             none:	.org $6000 + 256
0003+  6100 39          	rts
0004+  6101             sw32:
0005+  6101 39          	rts
0006+  6102             	
0007+  6102             	.msfirst
0008+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0009+  6000 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0009+  6002 61 00       
0009+  6004 61 00       
0009+  6006 61 00       
0009+  6008 61 00       
0009+  600A 61 00       
0009+  600C 61 00       
0009+  600E 61 00       
0010+  6010 61 00       	.dw none\.dw none\.dw sw32\.dw none\.dw none\.dw none\.dw none\.dw none
0010+  6012 61 00       
0010+  6014 61 01       
0010+  6016 61 00       
0010+  6018 61 00       
0010+  601A 61 00       
0010+  601C 61 00       
0010+  601E 61 00       
0011+  6020 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0011+  6022 61 00       
0011+  6024 61 00       
0011+  6026 61 00       
0011+  6028 61 00       
0011+  602A 61 00       
0011+  602C 61 00       
0011+  602E 61 00       
0012+  6030 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0012+  6032 61 00       
0012+  6034 61 00       
0012+  6036 61 00       
0012+  6038 61 00       
0012+  603A 61 00       
0012+  603C 61 00       
0012+  603E 61 00       
0013+  6040 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0013+  6042 61 00       
0013+  6044 61 00       
0013+  6046 61 00       
0013+  6048 61 00       
0013+  604A 61 00       
0013+  604C 61 00       
0013+  604E 61 00       
0014+  6050 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0014+  6052 61 00       
0014+  6054 61 00       
0014+  6056 61 00       
0014+  6058 61 00       
0014+  605A 61 00       
0014+  605C 61 00       
0014+  605E 61 00       
0015+  6060 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0015+  6062 61 00       
0015+  6064 61 00       
0015+  6066 61 00       
0015+  6068 61 00       
0015+  606A 61 00       
0015+  606C 61 00       
0015+  606E 61 00       
0016+  6070 61 00       	.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0016+  6072 61 00       
0016+  6074 61 00       
0016+  6076 61 00       
0016+  6078 61 00       
0016+  607A 61 00       
0016+  607C 61 00       
0016+  607E 61 00       
0017+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 16ms (?)) (max 7)
0018+  6080             ; off = how many cycles it must be off for
0019+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0020+  6080             ; gameover = whether the switch is active in gameover mode (these callbacks must check whether in game over when triggered)
0021+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0022+  6080             settleTable: ; must be right after callbackTable
0023+  6080 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0023+  6081 47          
0023+  6082 47          
0023+  6083 47          
0023+  6084 47          
0023+  6085 47          
0023+  6086 47          
0023+  6087 47          
0024+  6088 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(7,0,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0024+  6089 47          
0024+  608A F8          
0024+  608B 47          
0024+  608C 47          
0024+  608D 47          
0024+  608E 47          
0024+  608F 47          
0025+  6090 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0025+  6091 47          
0025+  6092 47          
0025+  6093 47          
0025+  6094 47          
0025+  6095 47          
0025+  6096 47          
0025+  6097 47          
0026+  6098 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0026+  6099 47          
0026+  609A 47          
0026+  609B 47          
0026+  609C 47          
0026+  609D 47          
0026+  609E 47          
0026+  609F 47          
0027+  60A0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0027+  60A1 47          
0027+  60A2 47          
0027+  60A3 47          
0027+  60A4 47          
0027+  60A5 47          
0027+  60A6 47          
0027+  60A7 47          
0028+  60A8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0028+  60A9 47          
0028+  60AA 47          
0028+  60AB 47          
0028+  60AC 47          
0028+  60AD 47          
0028+  60AE 47          
0028+  60AF 47          
0029+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0029+  60B1 47          
0029+  60B2 47          
0029+  60B3 47          
0029+  60B4 47          
0029+  60B5 47          
0029+  60B6 47          
0029+  60B7 47          
0030+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0030+  60B9 47          
0030+  60BA 47          
0030+  60BB 47          
0030+  60BC 47          
0030+  60BD 47          
0030+  60BE 47          
0030+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             	
0011   7800 86 00       	ldaA 	#0
0012   7802 97 00       	staA	temp
0013   7804 86 FF       	ldaA	#$FF
0014   7806 97 01       	staA	temp + 1
0015   7808 9E 00       	ldS		temp
0016   780A             
0017   780A             test:
0018   780A             	
0019   780A             piaSetup:
0020   780A 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0021   780C B7 28 01    	staA 	displayStrobeC
0022   780F 86 3F       	ldaA 	#00111111b	;set LED pins to outputs
0023   7811 B7 28 00    	staA 	displayStrobe
0024   7814 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0025   7816 B7 28 01    	staA 	displayStrobeC
0026   7819             	
0027   7819 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0028   781B B7 28 03    	staA 	displayBcdC
0029   781E 86 FF       	ldaA 	#11111111b	;set display BCD to output
0030   7820 B7 28 02    	staA 	displayBcd
0031   7823 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0032   7825 B7 28 03    	staA 	displayBcdC
0033   7828             	
0034   7828 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0035   782A B7 24 01    	staA 	lampRowC
0036   782D 86 FF       	ldaA 	#11111111b	;set to output
0037   782F B7 24 00    	staA 	lampRow
0038   7832 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0039   7834 B7 24 01    	staA 	lampRowC
0040   7837             	
0041   7837 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0042   7839 B7 24 03    	staA 	lampStrobeC
0043   783C 86 FF       	ldaA 	#11111111b	;set to output
0044   783E B7 24 02    	staA 	lampStrobe
0045   7841 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0046   7843 B7 24 03    	staA 	lampStrobeC
0047   7846             	
0048   7846 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0049   7848 B7 30 03    	staA 	switchStrobeC
0050   784B 86 FF       	ldaA 	#11111111b	;set to output
0051   784D B7 30 02    	staA 	switchStrobe
0052   7850 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0053   7852 B7 30 03    	staA 	switchStrobeC
0054   7855             	
0055   7855 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0056   7857 B7 30 01    	staA 	switchRowC
0057   785A 86 00       	ldaA 	#00000000b	;set to input
0058   785C B7 30 00    	staA 	switchRow
0059   785F 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0060   7861 B7 30 01    	staA 	switchRowC
0061   7864             	
0062   7864 86 00       	ldaA	#00000000b	;select direction (3rd bit = 0)
0063   7866 B7 22 01    	staA 	solenoidAC
0064   7869 B7 22 03    	staA	solenoidBC
0065   786C 86 FF       	ldaA 	#11111111b	;set to output
0066   786E B7 22 00    	staA 	solenoidA
0067   7871 B7 22 02    	staA 	solenoidB
0068   7874 86 04       	ldaA 	#00000100b 	;select data (3rb bit = 1)
0069   7876 B7 22 01    	staA 	solenoidAC
0070   7879 B7 22 03    	staA 	solenoidBC
0071   787C             	
0072   787C             ;
0073   787C             
0074   787C 86 00       	ldaA	#00
0075   787E D7 70       	staB	displayBcd1
0076   7880             	
0077   7880 86 FF       	ldaA	#$FF	
0078   7882 B7 28 00    	staA 	displayStrobe
0079   7885             
0080   7885 86 00       	ldaA	#00
0081   7887 97 07       	staA	strobe
0082   7889 B7 01 68    	staA	displayCol
0083   788C             	
0084   788C CE 00 00    	ldX 	#0
0085   788F DF 50       	stX		curCol
0086   7891             	
0087   7891 86 00       	ldaA	#0
0088   7893 97 10       	staA	curSwitchRowLsb
0089   7895             	
0090   7895             ; fill solenoid status with off
0091   7895 86 00       	ldaA	#0
0092   7897 CE 01 40    	ldX		#solenoid1
0093   789A             lSolDefault:
0094   789A A7 00       	staA	0, X
0095   789C 08          	inX
0096   789D 8C 01 4F    	cpX		#solenoid16
0097   78A0 2F F8       	ble		lSolDefault
0098   78A2             	
0099   78A2             ; empty settle
0100   78A2 86 00       	ldaA	#$00
0101   78A4 CE 01 00    	ldX		#settleRow1
0102   78A7             lSettleDefault:
0103   78A7 A7 00       	staA		0, X
0104   78A9 08          	inX
0105   78AA 8C 08 46    	cpX		#settleRow8 + 7
0106   78AD 2F F8       	ble		lSettleDefault
0107   78AF             	
0108   78AF             ; empty queue
0109   78AF 86 FF       	ldaA	#$FF
0110   78B1 CE 00 60    	ldX		#queue
0111   78B4             lEmptyQueue:
0112   78B4 A7 00       	staA		0, X
0113   78B6 08          	inX
0114   78B7 8C 00 6F    	cpX		#queueEnd
0115   78BA 2F F8       	ble		lEmptyQueue
0116   78BC             	
0117   78BC 86 00       	ldaA	#0
0118   78BE 97 54       	staA	queueHead + 0
0119   78C0 97 56       	staA	queueTail + 0
0120   78C2 86 60       	ldaA	#queue
0121   78C4 97 55       	staA	queueHead + 1
0122   78C6 97 57       	staA	queueTail + 1
0123   78C8             	
0124   78C8             ; test numbers
0125   78C8 CE 00 71    	ldX		#displayBcd1 + 1
0126   78CB 86 00       	ldaA	#0
0127   78CD             lTestNumbers:
0128   78CD A7 00       	staA	0, X
0129   78CF 08          	inX
0130   78D0 4C          	incA
0131   78D1 84 07       	andA	#00000111b
0132   78D3 8C 00 7F    	cpX		#displayBcd16
0133   78D6 2F F5       	ble		lTestNumbers
0134   78D8             	
0135   78D8 86 02       	ldaA	#2
0136   78DA 97 77       	staA	ballCount
0137   78DC             	
0138   78DC 86 00       	ldaA	#0
0139   78DE CE 01 55    	ldX		#pA_10
0140   78E1             zeroScores:
0141   78E1 A7 00       	staA	0, X
0142   78E3 08          	inX
0143   78E4 8C 01 62    	cpX		#pD_1m
0144   78E7 2F F8       	ble		zeroScores
0145   78E9             	
0146   78E9 86 01       	ldaA	#1
0147   78EB             	;staA	pA_10 - 1
0148   78EB 86 02       	ldaA	#2
0149   78ED B7 01 59    	staA	pB_10 - 2
0150   78F0 86 03       	ldaA	#3
0151   78F2             	;staA	pC_10 - 3
0152   78F2 86 04       	ldaA	#4
0153   78F4             	;staA	pD_10 - 4
0154   78F4 86 00       	ldaA	#0
0155   78F6 B7 01 71    	staA	curPlayer
0156   78F9 86 03       	ldaA	#3
0157   78FB B7 01 70    	staA	playerCount
0158   78FE             	
0159   78FE BD 7B CC    	jsr		refreshPlayerScores
0160   7901             	
0161   7901             ; setup complete
0162   7901 0E          	clI		; enable timer interrupt
0163   7902             	
0164   7902             	
0165   7902             end:
0166   7902 D6 57       	ldaB	queueTail + 1
0167   7904 D1 55       	cmpB	queueHead + 1
0168   7906 27 32       	beq 	skipQueue
0169   7908             	
0170   7908 DE 54       	ldX		queueHead
0171   790A A6 00       	ldaA	0, X	; A now contains the first queue item
0172   790C             	
0173   790C 16          	tAB
0174   790D C4 3F       	andB	#00111111b ; B = callback index
0175   790F             	
0176   790F D7 59       	staB	tempQ + 1
0177   7911 C6 60       	ldaB	#callbackTable >> 8
0178   7913 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0179   7915 DE 58       	ldX		tempQ
0180   7917             	
0181   7917 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0182   7919 C4 80       	andB 	#10000000b ; B set if switch limited to closures
0183   791B             	ifne
0183   791B             
0183   791B 27 FE       
0184   791D DE 54       		ldX		queueHead
0185   791F E4 00       		andB	0, X	; B set if switch limited to closures and event was not a closure
0186   7921 26 14       		bne		skipEvent
0187   7923             	endif
0187   7923             
0187   7923             
0187   7923             
0187   7923             
0187   7923             
0187   7923~            	endif
0187   7923~            	endif
0187   7923             
0187   7923~            	endif
0187   7923~            	endif
0187   7923             
0187   791C             
0187   791C 06          
0187   791D             
0187   791D             
0187   791D~            	endif
0187   791D~            	endif
0187   791D~            	endif
0187   791D             
0187   7923             
0187   7923~            	endif
0187   7923~            	endif
0187   7923             
0188   7923             	
0189   7923 C6 08       	ldaB	#1000b	; gameover mask
0190   7925 F5 01 69    	bitB	state
0191   7928             	ifeq	; not in gameover
0191   7928             
0191   7928 26 FE       
0192   792A 85 40       		bitA 	#01000000b
0193   792C 27 09       		beq		skipEvent	; skip if callback not active in game over
0194   792E             	endif
0194   792E             
0194   792E             
0194   792E             
0194   792E             
0194   792E             
0194   792E~            	endif
0194   792E~            	endif
0194   792E             
0194   792E~            	endif
0194   792E~            	endif
0194   792E             
0194   7929             
0194   7929 04          
0194   792A             
0194   792A             
0194   792A~            	endif
0194   792A~            	endif
0194   792A~            	endif
0194   792A             
0194   792E             
0194   792E~            	endif
0194   792E~            	endif
0194   792E             
0195   792E             	
0196   792E             	; checked passed, do callback
0197   792E 78 00 59    	lsl		tempQ + 1 ; double LSB because callback table is 2b wide
0198   7931 DE 58       	ldX		tempQ
0199   7933 EE 00       	ldX		0, X
0200   7935 AD 00       	jsr		0, X
0201   7937             				
0202   7937             skipEvent:
0203   7937 7C 00 55    	inc		queueHead + 1
0204   793A             				
0205   793A             skipQueue:
0206   793A             				
0207   793A             	
0208   793A             				
0209   793A 7E 79 02    	jmp		end
0210   793D 00 00       	.dw 0
0211   793F 00 00       	.dw 0
0212   7941 00 00       	.dw 0
0213   7943 00 00       	.dw 0
0214   7945 00 00       	.dw 0
0215   7947             		
0216   7947             interrupt:	
0217   7947 7C 00 02    	inc		counter
0218   794A 86 00       	ldaA	#0
0219   794C 91 02       	cmpA	counter
0220   794E 26 25       	bne		counterHandled
0221   7950 7C 00 03    	inc 	counter2
0222   7953 86 04       	ldaA	#4
0223   7955 91 03       	cmpA	counter2
0224   7957 26 1C       	bne		counterHandled
0225   7959             	
0226   7959 86 00       	ldaA	#0
0227   795B 97 03       	staA	counter2
0228   795D 86 77       	ldaA	#01110111b
0229   795F 91 70       	cmpA	displayBcd1
0230   7961 27 0A       	beq		on
0231   7963             	
0232   7963 86 F0       	ldaA	#$F0
0233   7965 97 08       	staA	lampRow1
0234   7967 86 77       	ldaA	#01110111b
0235   7969 97 70       	staA	displayBcd1	
0236   796B 20 08       	bra		counterHandled
0237   796D             on:
0238   796D 86 0F       	ldaA	#$0F
0239   796F 97 08       	staA	lampRow1
0240   7971 86 33       	ldaA	#00110011b
0241   7973 97 70       	staA	displayBcd1	
0242   7975             
0243   7975             counterHandled:
0244   7975             ; move switch column
0245   7975 96 07       	ldaA	strobe
0246   7977 B7 30 02    	staA	switchStrobe
0247   797A             	
0248   797A             ; update display 
0249   797A DE 50       	ldX		curCol
0250   797C B6 01 68    	ldaA	displayCol
0251   797F C6 FF       	ldaB 	#$FF
0252   7981 F7 28 02    	staB	displayBcd
0253   7984 B7 28 00    	staA	displayStrobe
0254   7987 85 08       	bitA	#00001000b
0255   7989             	ifeq
0255   7989             
0255   7989 26 FE       
0256   798B E6 70       		ldaB	displayBcd1, X
0257   798D             	else
0257   798D             
0257   798D             
0257   798D             
0257   798D             
0257   798A             
0257   798A             
0257   798A             
0257   798A~            	else
0257   798A~            	else
0257   798A~            	else
0257   798A~            	else
0257   798A             
0257   798A~            	else
0257   798A~            	else
0257   798A~            	else
0257   798A~            	else
0257   798A             
0257   798A             
0257   798A 04          
0257   798D             
0257   798D 20 FE       
0257   798F             
0257   798F             
0257   798F             
0257   798F~            	else
0257   798F~            	else
0257   798F~            	else
0257   798F~            	else
0257   798F~            	else
0257   798F             
0257   798F~            	else
0257   798F~            	else
0257   798F             
0257   798F~            	else
0257   798F~            	else
0257   798F             
0258   798F E6 78       		ldaB	displayBcd1 + 8, X
0259   7991             	endif
0259   7991             
0259   7991             
0259   7991             
0259   7991             
0259   7991             
0259   7991~            	endif
0259   7991~            	endif
0259   7991             
0259   7991~            	endif
0259   7991~            	endif
0259   7991             
0259   798E             
0259   798E 02          
0259   798F             
0259   798F             
0259   798F~            	endif
0259   798F~            	endif
0259   798F~            	endif
0259   798F             
0259   7991             
0259   7991~            	endif
0259   7991~            	endif
0259   7991             
0260   7991 F7 28 02    	staB	displayBcd
0261   7994             	
0262   7994             ; read switches
0263   7994 DE 50       	ldX		curCol
0264   7996 B6 30 00    	ldaA	switchRow
0265   7999 16          	tab
0266   799A A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0267   799C             	
0268   799C D6 10       	ldaB	curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0269   799E D7 01       	staB	temp + 1 			; temp = switch / 2
0270   79A0 D7 53       	staB	tempX + 1			; tempX = cRAM
0271   79A2 C6 60       	ldaB	#callbackTable >> 8
0272   79A4 D7 00       	staB	temp
0273   79A6 C6 01       	ldaB	#cRAM >> 8
0274   79A8 D7 52       	staB	tempX
0275   79AA             	
0276   79AA C6 01       	ldaB	#00000001b ; B is the bit of the current switch in row
0277   79AC             	
0278   79AC             	; temp now contains the beginning of the row in the callbackTable
0279   79AC             swNext:
0280   79AC 85 01       	bitA	#00000001b	 ; Z set if switch not different
0281   79AE             	ifne		; if bit set, switch different
0281   79AE             
0281   79AE 27 FE       
0282   79B0 36          		pshA ; store changed switches left
0283   79B1 DE 52       		ldX		tempX
0284   79B3 A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0285   79B5 84 0F       		andA	#00001111b ; need to remove upper F ( sets Z if A = 0)
0286   79B7             		ifne 	; A>0 -> settling
0286   79B7             
0286   79B7 27 FE       
0287   79B9 4A          			decA
0288   79BA A7 00       			staA	0, X	; sets Z if now A = 0
0289   79BC             			ifeq ; A=0 -> now settled, fire event
0289   79BC             
0289   79BC 26 FE       
0290   79BE             settled:		
0291   79BE DE 50       				ldX		curCol
0292   79C0 17          				tBA	; A now the bit in row
0293   79C1 A8 20       				eorA	switchRow1, X ; toggle bit in row
0294   79C3 A7 20       				staA	switchRow1, X ; A now state of row
0295   79C5             				
0296   79C5 F5 30 00    				bitB	switchRow
0297   79C8             				ifne ; switch now on
0297   79C8             
0297   79C8 27 FE       
0298   79CA 86 40       					ldaA	#01000000b
0299   79CC             				else
0299   79CC             
0299   79CC             
0299   79CC             
0299   79CC             
0299   79C9             
0299   79C9             
0299   79C9             
0299   79C9~            				else
0299   79C9~            				else
0299   79C9~            				else
0299   79C9~            				else
0299   79C9             
0299   79C9~            				else
0299   79C9~            				else
0299   79C9~            				else
0299   79C9~            				else
0299   79C9             
0299   79C9             
0299   79C9 04          
0299   79CC             
0299   79CC 20 FE       
0299   79CE             
0299   79CE             
0299   79CE             
0299   79CE~            				else
0299   79CE~            				else
0299   79CE~            				else
0299   79CE~            				else
0299   79CE~            				else
0299   79CE             
0299   79CE~            				else
0299   79CE~            				else
0299   79CE             
0299   79CE~            				else
0299   79CE~            				else
0299   79CE             
0300   79CE 86 C0       					ldaA	#11000000b
0301   79D0             				endif
0301   79D0             
0301   79D0             
0301   79D0             
0301   79D0             
0301   79D0             
0301   79D0~            				endif
0301   79D0~            				endif
0301   79D0             
0301   79D0~            				endif
0301   79D0~            				endif
0301   79D0             
0301   79CD             
0301   79CD 02          
0301   79CE             
0301   79CE             
0301   79CE~            				endif
0301   79CE~            				endif
0301   79CE~            				endif
0301   79CE             
0301   79D0             
0301   79D0~            				endif
0301   79D0~            				endif
0301   79D0             
0302   79D0 9A 53       				oraA	tempX + 1 ; A now contains the event per queue schema
0303   79D2             				
0304   79D2             				; store event
0305   79D2 DE 56       				ldX		queueTail
0306   79D4 A7 00       				staA	0, X
0307   79D6 7C 00 57    				inc		queueTail + 1
0308   79D9             				
0309   79D9             				; wrap queueTail if necessary
0310   79D9 9C 6F       				cpX		queueEnd 
0311   79DB             				ifeq
0311   79DB             
0311   79DB 26 FE       
0312   79DD 86 60       					ldaA	#queue 
0313   79DF 97 57       					staA	queueTail + 1
0314   79E1             				endif
0314   79E1             
0314   79E1             
0314   79E1             
0314   79E1             
0314   79E1             
0314   79E1~            				endif
0314   79E1~            				endif
0314   79E1             
0314   79E1~            				endif
0314   79E1~            				endif
0314   79E1             
0314   79DC             
0314   79DC 04          
0314   79DD             
0314   79DD             
0314   79DD~            				endif
0314   79DD~            				endif
0314   79DD~            				endif
0314   79DD             
0314   79E1             
0314   79E1~            				endif
0314   79E1~            				endif
0314   79E1             
0315   79E1             				
0316   79E1             				; todo somehow actually fire it here
0317   79E1             				;asl		temp + 1
0318   79E1             				;ldX		temp	
0319   79E1             				;ldX		0, X
0320   79E1             				;jsr		0, X
0321   79E1             			endif
0321   79E1             
0321   79E1             
0321   79E1             
0321   79E1             
0321   79E1             
0321   79E1~            			endif
0321   79E1~            			endif
0321   79E1             
0321   79E1~            			endif
0321   79E1~            			endif
0321   79E1             
0321   79BD             
0321   79BD 23          
0321   79BE             
0321   79BE             
0321   79BE~            			endif
0321   79BE~            			endif
0321   79BE~            			endif
0321   79BE             
0321   79E1             
0321   79E1~            			endif
0321   79E1~            			endif
0321   79E1             
0322   79E1             		else ; =0 -> was settled, so now it's not
0322   79E1             
0322   79E1             
0322   79E1             
0322   79E1             
0322   79B8             
0322   79B8             
0322   79B8             
0322   79B8~            		else ; =0 -> was settled, so now it's not
0322   79B8~            		else ; =0 -> was settled, so now it's not
0322   79B8~            		else ; =0 -> was settled, so now it's not
0322   79B8~            		else ; =0 -> was settled, so now it's not
0322   79B8             
0322   79B8~            		else ; =0 -> was settled, so now it's not
0322   79B8~            		else ; =0 -> was settled, so now it's not
0322   79B8~            		else ; =0 -> was settled, so now it's not
0322   79B8~            		else ; =0 -> was settled, so now it's not
0322   79B8             
0322   79B8             
0322   79B8 2A          
0322   79E1             
0322   79E1 20 FE       
0322   79E3             
0322   79E3             
0322   79E3             
0322   79E3~            		else ; =0 -> was settled, so now it's not
0322   79E3~            		else ; =0 -> was settled, so now it's not
0322   79E3~            		else ; =0 -> was settled, so now it's not
0322   79E3~            		else ; =0 -> was settled, so now it's not
0322   79E3~            		else ; =0 -> was settled, so now it's not
0322   79E3             
0322   79E3~            		else ; =0 -> was settled, so now it's not
0322   79E3~            		else ; =0 -> was settled, so now it's not
0322   79E3             
0322   79E3~            		else ; =0 -> was settled, so now it's not
0322   79E3~            		else ; =0 -> was settled, so now it's not
0322   79E3             
0323   79E3             			; get the settle time
0324   79E3 96 53       			ldaA	tempX + 1
0325   79E5 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0326   79E7 DE 00       			ldX		temp
0327   79E9             			
0328   79E9             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0329   79E9 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0330   79EB             			
0331   79EB             			; need to get correct 3 bits from switch settings
0332   79EB F5 30 00    			bitB	switchRow
0333   79EE             			ifne ; switch just turned on
0333   79EE             
0333   79EE 27 FE       
0334   79F0 44          				lsrA
0335   79F1 44          				lsrA
0336   79F2             			else
0336   79F2             
0336   79F2             
0336   79F2             
0336   79F2             
0336   79EF             
0336   79EF             
0336   79EF             
0336   79EF~            			else
0336   79EF~            			else
0336   79EF~            			else
0336   79EF~            			else
0336   79EF             
0336   79EF~            			else
0336   79EF~            			else
0336   79EF~            			else
0336   79EF~            			else
0336   79EF             
0336   79EF             
0336   79EF 04          
0336   79F2             
0336   79F2 20 FE       
0336   79F4             
0336   79F4             
0336   79F4             
0336   79F4~            			else
0336   79F4~            			else
0336   79F4~            			else
0336   79F4~            			else
0336   79F4~            			else
0336   79F4             
0336   79F4~            			else
0336   79F4~            			else
0336   79F4             
0336   79F4~            			else
0336   79F4~            			else
0336   79F4             
0337   79F4 48          				aslA
0338   79F5             			endif
0338   79F5             
0338   79F5             
0338   79F5             
0338   79F5             
0338   79F5             
0338   79F5~            			endif
0338   79F5~            			endif
0338   79F5             
0338   79F5~            			endif
0338   79F5~            			endif
0338   79F5             
0338   79F3             
0338   79F3 01          
0338   79F4             
0338   79F4             
0338   79F4~            			endif
0338   79F4~            			endif
0338   79F4~            			endif
0338   79F4             
0338   79F5             
0338   79F5~            			endif
0338   79F5~            			endif
0338   79F5             
0339   79F5 84 0E       			andA	#1110b ; A now has 3 bit settle time * 2
0340   79F7             						
0341   79F7 DE 52       			ldX		tempX
0342   79F9 A7 00       			staA	0, X		; start settling	
0343   79FB 27 C1       			beq		settled		; quick out for 0 settle
0344   79FD             		endif
0344   79FD             
0344   79FD             
0344   79FD             
0344   79FD             
0344   79FD             
0344   79FD~            		endif
0344   79FD~            		endif
0344   79FD             
0344   79FD~            		endif
0344   79FD~            		endif
0344   79FD             
0344   79E2             
0344   79E2 1A          
0344   79E3             
0344   79E3             
0344   79E3~            		endif
0344   79E3~            		endif
0344   79E3~            		endif
0344   79E3             
0344   79FD             
0344   79FD~            		endif
0344   79FD~            		endif
0344   79FD             
0345   79FD             			
0346   79FD 32          		pulA
0347   79FE             	endif
0347   79FE             
0347   79FE             
0347   79FE             
0347   79FE             
0347   79FE             
0347   79FE~            	endif
0347   79FE~            	endif
0347   79FE             
0347   79FE~            	endif
0347   79FE~            	endif
0347   79FE             
0347   79AF             
0347   79AF 4E          
0347   79B0             
0347   79B0             
0347   79B0~            	endif
0347   79B0~            	endif
0347   79B0~            	endif
0347   79B0             
0347   79FE             
0347   79FE~            	endif
0347   79FE~            	endif
0347   79FE             
0348   79FE 7C 00 53    	inc tempX + 1
0349   7A01 58          	aslB
0350   7A02 44          	lsrA			; pop lowest bit off, set Z if A is empty
0351   7A03 26 A7       	bne		swNext 	; more 'switched' bits, keep processing 
0352   7A05             	
0353   7A05             	
0354   7A05             ; update lamps
0355   7A05 DE 50       	ldX		curCol
0356   7A07 86 FF       	ldaA	#$FF	;lamp row is inverted
0357   7A09 B7 24 00    	staA	lampRow
0358   7A0C 96 07       	ldaA	strobe
0359   7A0E B7 24 02    	staA	lampStrobe
0360   7A11 A6 20       	ldaA	switchRow1, X
0361   7A13 B7 24 00    	staA	lampRow
0362   7A16 86 00       	ldaA	#00
0363   7A18             
0364   7A18             ; update solenoids
0365   7A18             	; if a solenoid is set to <254, --
0366   7A18             	; if =255, off, otherwise on
0367   7A18             	; leave it at 254
0368   7A18             	
0369   7A18 7C 00 50    	inc		curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0370   7A1B 86 FE       	ldaA	#254
0371   7A1D DE 50       	ldX		curCol
0372   7A1F E6 40       	ldaB	solenoid1 - cRAM, X
0373   7A21 A1 40       	cmpA	solenoid1 - cRAM, X
0374   7A23             	ifge 	; solenoid <=254, turn on
0374   7A23             
0374   7A23 25 FE       
0375   7A25             		ifgt	; solenoid < 254, decrement
0375   7A25             
0375   7A25 23 FE       
0376   7A27 6A 40       			dec		solenoid1 - cRAM, X
0377   7A29             		endif
0377   7A29             
0377   7A29             
0377   7A29             
0377   7A29             
0377   7A29             
0377   7A29~            		endif
0377   7A29~            		endif
0377   7A29             
0377   7A29~            		endif
0377   7A29~            		endif
0377   7A29             
0377   7A26             
0377   7A26 02          
0377   7A27             
0377   7A27             
0377   7A27~            		endif
0377   7A27~            		endif
0377   7A27~            		endif
0377   7A27             
0377   7A29             
0377   7A29~            		endif
0377   7A29~            		endif
0377   7A29             
0378   7A29 0D          		sec
0379   7A2A             	else
0379   7A2A             
0379   7A2A             
0379   7A2A             
0379   7A2A             
0379   7A24             
0379   7A24             
0379   7A24             
0379   7A24~            	else
0379   7A24~            	else
0379   7A24~            	else
0379   7A24~            	else
0379   7A24             
0379   7A24~            	else
0379   7A24~            	else
0379   7A24~            	else
0379   7A24~            	else
0379   7A24             
0379   7A24             
0379   7A24 07          
0379   7A2A             
0379   7A2A 20 FE       
0379   7A2C             
0379   7A2C             
0379   7A2C             
0379   7A2C~            	else
0379   7A2C~            	else
0379   7A2C~            	else
0379   7A2C~            	else
0379   7A2C~            	else
0379   7A2C             
0379   7A2C~            	else
0379   7A2C~            	else
0379   7A2C             
0379   7A2C~            	else
0379   7A2C~            	else
0379   7A2C             
0380   7A2C 0C          		clc
0381   7A2D             	endif
0381   7A2D             
0381   7A2D             
0381   7A2D             
0381   7A2D             
0381   7A2D             
0381   7A2D~            	endif
0381   7A2D~            	endif
0381   7A2D             
0381   7A2D~            	endif
0381   7A2D~            	endif
0381   7A2D             
0381   7A2B             
0381   7A2B 01          
0381   7A2C             
0381   7A2C             
0381   7A2C~            	endif
0381   7A2C~            	endif
0381   7A2C~            	endif
0381   7A2C             
0381   7A2D             
0381   7A2D~            	endif
0381   7A2D~            	endif
0381   7A2D             
0382   7A2D 76 00 28    	ror		solAStatus
0383   7A30 A1 48       	cmpA	solenoid9 - cRAM, X
0384   7A32             	ifge 	; solenoid <=254, turn on
0384   7A32             
0384   7A32 25 FE       
0385   7A34             		ifgt	; solenoid < 254, decrement
0385   7A34             
0385   7A34 23 FE       
0386   7A36 6A 48       			dec		solenoid9 - cRAM, X
0387   7A38             		endif
0387   7A38             
0387   7A38             
0387   7A38             
0387   7A38             
0387   7A38             
0387   7A38~            		endif
0387   7A38~            		endif
0387   7A38             
0387   7A38~            		endif
0387   7A38~            		endif
0387   7A38             
0387   7A35             
0387   7A35 02          
0387   7A36             
0387   7A36             
0387   7A36~            		endif
0387   7A36~            		endif
0387   7A36~            		endif
0387   7A36             
0387   7A38             
0387   7A38~            		endif
0387   7A38~            		endif
0387   7A38             
0388   7A38 0D          		sec
0389   7A39             	else
0389   7A39             
0389   7A39             
0389   7A39             
0389   7A39             
0389   7A33             
0389   7A33             
0389   7A33             
0389   7A33~            	else
0389   7A33~            	else
0389   7A33~            	else
0389   7A33~            	else
0389   7A33             
0389   7A33~            	else
0389   7A33~            	else
0389   7A33~            	else
0389   7A33~            	else
0389   7A33             
0389   7A33             
0389   7A33 07          
0389   7A39             
0389   7A39 20 FE       
0389   7A3B             
0389   7A3B             
0389   7A3B             
0389   7A3B~            	else
0389   7A3B~            	else
0389   7A3B~            	else
0389   7A3B~            	else
0389   7A3B~            	else
0389   7A3B             
0389   7A3B~            	else
0389   7A3B~            	else
0389   7A3B             
0389   7A3B~            	else
0389   7A3B~            	else
0389   7A3B             
0390   7A3B 0C          		clc
0391   7A3C             	endif
0391   7A3C             
0391   7A3C             
0391   7A3C             
0391   7A3C             
0391   7A3C             
0391   7A3C~            	endif
0391   7A3C~            	endif
0391   7A3C             
0391   7A3C~            	endif
0391   7A3C~            	endif
0391   7A3C             
0391   7A3A             
0391   7A3A 01          
0391   7A3B             
0391   7A3B             
0391   7A3B~            	endif
0391   7A3B~            	endif
0391   7A3B~            	endif
0391   7A3B             
0391   7A3C             
0391   7A3C~            	endif
0391   7A3C~            	endif
0391   7A3C             
0392   7A3C 76 00 29    	ror		solBStatus
0393   7A3F 7A 00 50    	dec		curCol
0394   7A42             	
0395   7A42             ; update strobe	
0396   7A42 DE 50       	ldX		curCol
0397   7A44 08          	inX 	
0398   7A45 86 08       	ldaA	#8 	; pitch
0399   7A47 9B 10       	addA	curSwitchRowLsb
0400   7A49 97 10       	staA	curSwitchRowLsb
0401   7A4B 78 00 07    	asl		strobe
0402   7A4E 7C 01 68    	inc		displayCol
0403   7A51 86 00       	ldaA	#0
0404   7A53 91 07       	cmpA	strobe ; strobe done?  reset
0405   7A55             	ifeq		
0405   7A55             
0405   7A55 26 FE       
0406   7A57 96 28       		ldaA	solAStatus
0407   7A59 B7 22 00    		staA	solenoidA
0408   7A5C 96 29       		ldaA	solBStatus
0409   7A5E B7 22 02    		staA	solenoidB
0410   7A61             	
0411   7A61 86 01       		ldaA	#00000001b
0412   7A63 97 07       		staA	strobe
0413   7A65             		
0414   7A65 CE 00 00    		ldX 	#0
0415   7A68             		
0416   7A68 86 00       		ldaA	#0
0417   7A6A 97 10       		staA	curSwitchRowLsb
0418   7A6C 97 28       		staA	solAStatus
0419   7A6E 97 29       		staA	solBStatus
0420   7A70             		
0421   7A70 F6 01 68    		ldaB	displayCol	; reset display col only if it's > 7 
0422   7A73 C1 F8       		cmpB	#$F8	; since it needs to count to 15 instead of 7
0423   7A75             		ifgt
0423   7A75             
0423   7A75 23 FE       
0424   7A77 B7 01 68    			staA	displayCol
0425   7A7A             		endif
0425   7A7A             
0425   7A7A             
0425   7A7A             
0425   7A7A             
0425   7A7A             
0425   7A7A~            		endif
0425   7A7A~            		endif
0425   7A7A             
0425   7A7A~            		endif
0425   7A7A~            		endif
0425   7A7A             
0425   7A76             
0425   7A76 03          
0425   7A77             
0425   7A77             
0425   7A77~            		endif
0425   7A77~            		endif
0425   7A77~            		endif
0425   7A77             
0425   7A7A             
0425   7A7A~            		endif
0425   7A7A~            		endif
0425   7A7A             
0426   7A7A             	endif
0426   7A7A             
0426   7A7A             
0426   7A7A             
0426   7A7A             
0426   7A7A             
0426   7A7A~            	endif
0426   7A7A~            	endif
0426   7A7A             
0426   7A7A~            	endif
0426   7A7A~            	endif
0426   7A7A             
0426   7A56             
0426   7A56 23          
0426   7A57             
0426   7A57             
0426   7A57~            	endif
0426   7A57~            	endif
0426   7A57~            	endif
0426   7A57             
0426   7A7A             
0426   7A7A~            	endif
0426   7A7A~            	endif
0426   7A7A             
0427   7A7A             	
0428   7A7A DF 50       	stX		curCol
0429   7A7C 3B          	rti
0430   7A7D             
0431   7FF8             pointers: 	.org $7FF8  	
0432   7FF8             	.msfirst
0433   7FF8 79 47       	.dw interrupt			
0434   7FFA 79 47       	.dw interrupt			
0435   7FFC 79 47       	.dw interrupt			
0436   7FFE 78 00       	.dw main
0437   8000             	
0438   8000             	
0439   8000             	.endtasm: Number of errors = 0
