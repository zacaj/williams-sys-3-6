0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             attractX:		.equ RAM + $2A ; +
0041+  0000             forkX			.equ RAM + $2C ; +
0042+  0000             curCol:			.equ RAM + $50 ; +
0043+  0000             tempX:			.equ RAM + $52 ; +
0044+  0000             queueHead:		.equ RAM + $54 ; +
0045+  0000             queueTail:		.equ RAM + $56 ; +
0046+  0000             tempQ:			.equ RAM + $58 ; +
0047+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0048+  0000             queueEnd:		.equ RAM + $6D
0049+  0000             ;
0050+  0000             displayBcd1:	.equ RAM + $70
0051+  0000             displayBcd16:	.equ RAM + $7F
0052+  0000             ballCount:		.equ displayBcd1 + 7
0053+  0000             waitLeft: 		.equ RAM + $80 ; dec every 8ms
0054+  0000             waitLeftEnd:		.equ RAM + $87
0055+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0056+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0057+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0058+  0000             flashLampCol1:		.equ RAM + $A0
0059+  0000             flashLampCol8:		.equ RAM + $A7
0060+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0061+  0000             lastSwitch:		.equ RAM + $A8
0062+  0000             dropResetTimer:		.equ RAM + $A9 ; max 127
0063+  0000             dropsDown		.equ RAM + $AA
0064+  0000             p_Bonus:		.equ RAM + $B0
0065+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0066+  0000             p_DropsDown:		.equ RAM + $B5
0067+  0000             p_LampCol2:		.equ RAM + $B6 ; -> B9
0068+  0000             p_EachDropDown:		.equ RAM + $BA ; -> BD
0069+  0000             p_BonusLeft:		.equ RAM + $BE
0070+  0000             
0071+  0000             
0072+  0000             
0073+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0074+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0075+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0076+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0077+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0078+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0079+  0000             #DEFINE s(n) 		(0 + n)
0080+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0081+  0000             pA_10:			.equ pA_1m + 5
0082+  0000             pB_1m:			.equ pA_10 + 1
0083+  0000             pB_10:			.equ pB_1m + 5
0084+  0000             pC_1m:			.equ pB_10 + 1
0085+  0000             pC_10:			.equ pC_1m + 5
0086+  0000             pD_1m:			.equ pC_10 + 1
0087+  0000             pD_10:			.equ pD_1m + 5 
0088+  0000             ; 
0089+  0000             displayCol:		.equ cRAM + $6A
0090+  0000             state:			.equ cRAM + $6B	; counting bonus | strobe reset | don't validate | ?
0091+  0000             
0092+  0000             instant:		.equ 4
0093+  0000             debounce:		.equ 1
0094+  0000             slow:			.equ 2
0095+  0000             
0096+  0000             switchSettle:	.equ cRAM + $30
0097+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 75    		cpX	displayBcd1 + 5
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 75    			cpX	displayBcd1 + 5
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7D    		cpX	displayBcd1 + 8 + 5
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7D    			cpX	displayBcd1 + 8 + 5
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0F       	ldaB	>lc(8) ; gameover
0101+  7C8C C5 20       	bitB	lr(6)
0102+  7C8E             	ifne
0102+  7C8E             
0102+  7C8E 27 FE       
0103+  7C90 39          		rts
0104+  7C91             	endif
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C8F             
0104+  7C8F 01          
0104+  7C90             
0104+  7C90             
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0105+  7C91             	
0106+  7C91 D6 0E       	ldaB	>lc(7)
0107+  7C93 C5 02       	bitB	lr(2)
0108+  7C95 26 1A       	bne	blankP2
0109+  7C97 C5 04       	bitB	lr(3)
0110+  7C99 26 22       	bne	blankP3
0111+  7C9B C5 08       	bitB	lr(4)
0112+  7C9D 26 2A       	bne	blankP4
0113+  7C9F C5 10       	bitB	lr(5)
0114+  7CA1 26 32       	bne	blankDone
0115+  7CA3 20 00       	bra	blankP1
0116+  7CA5             blankP1:
0117+  7CA5 86 F0       	ldaA	$F0
0118+  7CA7 9A 74       	oraA	>displayBcd1 + 4
0119+  7CA9 97 74       	staA	displayBcd1 + 4
0120+  7CAB 86 F0       	ldaA	$F0
0121+  7CAD 9A 75       	oraA	>displayBcd1 + 5
0122+  7CAF 97 75       	staA	displayBcd1 + 5
0123+  7CB1             blankP2:
0124+  7CB1 86 F0       	ldaA	$F0
0125+  7CB3 9A 7C       	oraA	>displayBcd1 + 12
0126+  7CB5 97 7C       	staA	displayBcd1 + 12
0127+  7CB7 86 F0       	ldaA	$F0
0128+  7CB9 9A 7D       	oraA	>displayBcd1 + 13
0129+  7CBB 97 7D       	staA	displayBcd1 + 13
0130+  7CBD             blankP3:
0131+  7CBD 86 0F       	ldaA	$0F
0132+  7CBF 9A 74       	oraA	>displayBcd1 + 4
0133+  7CC1 97 74       	staA	displayBcd1 + 4
0134+  7CC3 86 0F       	ldaA	$0F
0135+  7CC5 9A 75       	oraA	>displayBcd1 + 5
0136+  7CC7 97 75       	staA	displayBcd1 + 5
0137+  7CC9             blankP4:
0138+  7CC9 86 0F       	ldaA	$0F
0139+  7CCB 9A 7C       	oraA	>displayBcd1 + 12
0140+  7CCD 97 7C       	staA	displayBcd1 + 12
0141+  7CCF 86 0F       	ldaA	$0F
0142+  7CD1 9A 7D       	oraA	>displayBcd1 + 13
0143+  7CD3 97 7D       	staA	displayBcd1 + 13
0144+  7CD5             blankDone:
0145+  7CD5 39          	rts
0146+  7CD6             	
0147+  7CD6             refreshPlayerScores:
0148+  7CD6 BD 7C 00    	jsr copyScores13
0149+  7CD9 BD 7C 45    	jsr copyScores24
0150+  7CDC             	
0151+  7CDC 86 F0       	ldaA	$F0
0152+  7CDE B1 01 50    	cmpA	>pA_1m
0153+  7CE1 26 29       	bne	refresh_1m
0154+  7CE3 B1 01 56    	cmpA	>pB_1m
0155+  7CE6 26 24       	bne	refresh_1m	
0156+  7CE8 B1 01 5C    	cmpA	>pC_1m
0157+  7CEB 26 1F       	bne	refresh_1m
0158+  7CED B1 01 62    	cmpA	>pD_1m
0159+  7CF0 26 1A       	bne	refresh_1m
0160+  7CF2             	
0161+  7CF2 CE 00 70    	ldX	displayBcd1
0162+  7CF5             refresh_10xloop:
0163+  7CF5 A6 01       	ldaA	1, X
0164+  7CF7 A7 00       	staA	0,X
0165+  7CF9 A6 09       	ldaA	8 + 1, X
0166+  7CFB A7 08       	staA	8, X
0167+  7CFD 08          	inX
0168+  7CFE 8C 00 75    	cpX	displayBcd1+5
0169+  7D01 26 F2       	bne	refresh_10xloop
0170+  7D03 86 00       	ldaA	0
0171+  7D05 97 75       	staA	displayBcd1 + 5
0172+  7D07 97 7D       	staA	displayBcd1 + 5 + 8
0173+  7D09 7E 7C 8A    	jmp blankNonPlayerScores
0174+  7D0C             refresh_1m:
0175+  7D0C 7E 7C 8A    	jmp blankNonPlayerScores
0176+  7D0F             	
0177+  7D0F             	
0178+  7D0F             ; add score instantly
0179+  7D0F             ; X = place in p*_1* to add the score to
0180+  7D0F             ; A = amount to add (max 9)
0181+  7D0F             ; tail call
0182+  7D0F             _addScoreI:
0183+  7D0F AB 00       	addA	0, X
0184+  7D11 8A F0       	oraA	11110000b
0185+  7D13             	ifcs ; overflowed, need to increment next number
0185+  7D13             
0185+  7D13 24 FE       
0186+  7D15 8B 06       		addA	6	; adjust A back into BCD
0187+  7D17 A7 00       		staA	0, X
0188+  7D19             addScore_carryOver:		; loop to propagate carry
0189+  7D19 09          		deX	; go to next decimal place
0190+  7D1A A6 00       		ldaA	0, X	
0191+  7D1C 8A F0       		oraA	11110000b
0192+  7D1E 81 F9       		cmpA	$F9
0193+  7D20             		ifeq			; if it's already a 9, reset it and carry again
0193+  7D20             
0193+  7D20 26 FE       
0194+  7D22 6F 00       			clr	0, X
0195+  7D24 27 F3       			beq addScore_carryOver
0196+  7D26             		else			; otherwise ++ it and done
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D21             
0196+  7D21             
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21             
0196+  7D21 06          
0196+  7D26             
0196+  7D26 20 FE       
0196+  7D28             
0196+  7D28             
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0197+  7D28 6C 00       			inc	0, X
0198+  7D2A             		endif	
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D27             
0198+  7D27 02          
0198+  7D28             
0198+  7D28             
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0199+  7D2A             	else
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D14             
0199+  7D14             
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14             
0199+  7D14 17          
0199+  7D2A             
0199+  7D2A 20 FE       
0199+  7D2C             
0199+  7D2C             
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0200+  7D2C 81 F9       		cmpA	$F9
0201+  7D2E             		ifgt ; >9 -> need to adjust back into BCD
0201+  7D2E             
0201+  7D2E 23 FE       
0202+  7D30 8B 06       			addA	6
0203+  7D32 A7 00       			staA	0, X
0204+  7D34             addScore_carryDa:
0205+  7D34 09          			deX
0206+  7D35 A6 00       			ldaA	0, X
0207+  7D37 8A F0       			oraA	11110000b
0208+  7D39 81 F9       			cmpA	$F9
0209+  7D3B             			ifeq
0209+  7D3B             
0209+  7D3B 26 FE       
0210+  7D3D 6F 00       				clr	0, X
0211+  7D3F 27 F3       				beq 	addScore_carryDa
0212+  7D41             			else
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C             
0212+  7D3C 06          
0212+  7D41             
0212+  7D41 20 FE       
0212+  7D43             
0212+  7D43             
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0213+  7D43 6C 00       				inc	0, X
0214+  7D45             			endif	
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D42             
0214+  7D42 02          
0214+  7D43             
0214+  7D43             
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0215+  7D45             		else
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F             
0215+  7D2F 17          
0215+  7D45             
0215+  7D45 20 FE       
0215+  7D47             
0215+  7D47             
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0216+  7D47 A7 00       			staA	0, X
0217+  7D49             		endif
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D46             
0217+  7D46 02          
0217+  7D47             
0217+  7D47             
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0218+  7D49             	endif
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D2B             
0218+  7D2B 1D          
0218+  7D2C             
0218+  7D2C             
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0219+  7D49             
0220+  7D49 7E 7C D6    	jmp refreshPlayerScores
0221+  7D4C             	
0222+  7D4C 39          	rts
0223+  7D4D             	
0224+  7D4D             ; t A,X
0225+  7D4D             setXToCurPlayer10:
0226+  7D4D 96 0F       	ldaA	>lc(8)
0227+  7D4F 85 01       	bitA	0001b
0228+  7D51 27 04       	beq	_addScore10N_p2
0229+  7D53 CE 01 55    	ldX	pA_10
0230+  7D56 39          	rts
0231+  7D57             _addScore10N_p2:
0232+  7D57 85 02       	bitA	0010b
0233+  7D59 27 04       	beq	_addScore10N_p3
0234+  7D5B CE 01 5B    	ldX	pB_10
0235+  7D5E 39          	rts
0236+  7D5F             _addScore10N_p3:
0237+  7D5F 85 04       	bitA	0100b
0238+  7D61 27 04       	beq	_addScore10N_p4
0239+  7D63 CE 01 61    	ldX	pC_10
0240+  7D66 39          	rts
0241+  7D67             _addScore10N_p4:
0242+  7D67 CE 01 67    	ldX	pD_10
0243+  7D6A 39          	rts
0244+  7D6B             
0245+  7D6B             ; suspends execution for A ms and returns to queue processor
0246+  7D6B             ; should only be called from switch callbacks
0247+  7D6B             ; trashes everything but B
0248+  7D6B             _delay:	
0249+  7D6B CE 00 7F    	ldX	waitLeft - 1
0250+  7D6E             delay_findEmptyLoop:
0251+  7D6E 08          	inX
0252+  7D6F 6D 00       	tst	0, X
0253+  7D71 26 FB       	bne 	delay_findEmptyLoop 
0254+  7D73             	
0255+  7D73             	; X = first waitLeft that = 0
0256+  7D73 E7 18       	staB	waitReg - waitLeft, X
0257+  7D75 33          	pulB	; A = MSB of PC
0258+  7D76 E7 08       	staB	waitMsb - waitLeft, X
0259+  7D78 33          	pulB	; A = LSB of PC
0260+  7D79 E7 10       	staB	waitLsb - waitLeft, X
0261+  7D7B A7 00       	staA	0, X
0262+  7D7D             	; time and add stored
0263+  7D7D 7E 79 D5    	jmp skipEvent
0264+  7D80             	
0265+  7D80             _fork:	
0266+  7D80 CE 00 7F    	ldX	waitLeft - 1
0267+  7D83             fork_findEmptyLoop:
0268+  7D83 08          	inX
0269+  7D84 6D 00       	tst	0, X
0270+  7D86 26 FB       	bne 	fork_findEmptyLoop 
0271+  7D88             	
0272+  7D88             	; X = first waitLeft that = 0
0273+  7D88 E7 18       	staB	waitReg - waitLeft, X
0274+  7D8A 33          	pulB	; A = MSB of PC
0275+  7D8B E7 08       	staB	waitMsb - waitLeft, X
0276+  7D8D 33          	pulB	; A = LSB of PC
0277+  7D8E CB 03       	addB	3
0278+  7D90             	ifcs
0278+  7D90             
0278+  7D90 24 FE       
0279+  7D92 6C 08       		inc	waitMsb - waitLeft, X
0280+  7D94             	endif
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0280+  7D91             
0280+  7D91 02          
0280+  7D92             
0280+  7D92             
0280+  7D92~            	endif
0280+  7D92~            	endif
0280+  7D92~            	endif
0280+  7D92             
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0281+  7D94 E7 10       	staB	waitLsb - waitLeft, X
0282+  7D96 A7 00       	staA	0, X
0283+  7D98             	; time and add stored
0284+  7D98 C0 03       	subB	3
0285+  7D9A 37          	pshB
0286+  7D9B E6 08       	ldaB	waitMsb - waitLeft, X
0287+  7D9D             	ifcs
0287+  7D9D             
0287+  7D9D 24 FE       
0288+  7D9F 5A          		decB
0289+  7DA0             	endif
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0289+  7D9E             
0289+  7D9E 01          
0289+  7D9F             
0289+  7D9F             
0289+  7D9F~            	endif
0289+  7D9F~            	endif
0289+  7D9F~            	endif
0289+  7D9F             
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0290+  7DA0 37          	pshB
0291+  7DA1 39          	rts
0292+  7DA2             	
0293+  7DA2             	
0294+  7DA2             	
0295+  7DA2             resetScores:
0296+  7DA2 86 00       	ldaA	00
0297+  7DA4 CE 01 50    	ldX	pA_1m
0298+  7DA7             _zeroScores:
0299+  7DA7 A7 00       	staA	0, X
0300+  7DA9 08          	inX
0301+  7DAA 8C 01 68    	cpX	pD_10 + 1
0302+  7DAD 26 F8       	bne	_zeroScores
0303+  7DAF             	
0304+  7DAF 86 00       	ldaA	0
0305+  7DB1 97 12       	staA	curPlayer
0306+  7DB3 97 13       	staA	curPlayer + 1
0307+  7DB5 86 FF       	ldaA	$FF
0308+  7DB7 97 76       	staA	displayBcd1 + 6
0309+  7DB9 97 7E       	staA	displayBcd1 + 14
0310+  7DBB 97 7F       	staA	displayBcd1 + 15
0311+  7DBD             	
0312+  7DBD BD 7C D6    	jsr	refreshPlayerScores
0313+  7DC0 39          	rts
0314+  7DC1             
0315+  7DC1             ; trash ~B
0316+  7DC1             ; delay for ms (8-2000)
0317+  7DC1             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0318+  7DC1             ; makes a second thread that will skip the next (3b) instruction
0319+  7DC1             #DEFINE fork(ms) ldaA ms/8\ jsr _fork
0320+  7DC1             #DEFINE beginFork()	
0321+  7DC1             #DEFINE endFork()	ldX >forkX\ jmp afterFork
0322+  7DC1             	
0323+  7DC1             ; trashes B (max 104ms)
0324+  7DC1             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0325+  7DC1             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0326+  7DC1             
0327+  7DC1             ; trashes AX
0328+  7DC1             ; place: 1-5 = 10s thru 100ks
0329+  7DC1             ; amount: 1-9
0330+  7DC1             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0331+  7DC1             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0332+  7DC1             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0333+  7DC1             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0334+  7DC1             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0335+  7DC1             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0336+  7DC1             
0337+  7DC1             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0338+  7DC1             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0339+  7DC1             
0340+  7DC1             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0341+  7DC1             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0342+  7DC1             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0343+  7DC1             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0344+  7DC1             
0345+  7DC1             #include "attract.asm"
0001++ 7DC1             attractStart:
0002++ 7DC1 08          	.db 00001000b
0003++ 7DC2 18          	.db 00011000b
0004++ 7DC3 10          	.db 00010000b
0005++ 7DC4 80          	.db 10000000b
0006++ 7DC5 01          	.db 00000001b
0007++ 7DC6             	
0008++ 7DC6 50          	.db 01010000b
0009++ 7DC7 40          	.db 01000000b
0010++ 7DC8 08          	.db 00001000b
0011++ 7DC9 80          	.db 10000000b
0012++ 7DCA 03          	.db 00000011b
0013++ 7DCB             	
0014++ 7DCB 20          	.db 00100000b
0015++ 7DCC 28          	.db 00101000b
0016++ 7DCD 04          	.db 00000100b
0017++ 7DCE 80          	.db 10000000b
0018++ 7DCF 07          	.db 00000111b
0019++ 7DD0             	
0020++ 7DD0 44          	.db 01000100b
0021++ 7DD1 80          	.db 10000000b
0022++ 7DD2 02          	.db 00000010b
0023++ 7DD3 80          	.db 10000000b
0024++ 7DD4 0F          	.db 00001111b
0025++ 7DD5             	
0026++ 7DD5 08          	.db 00001000b
0027++ 7DD6 18          	.db 00011000b
0028++ 7DD7 01          	.db 00000001b
0029++ 7DD8 80          	.db 10000000b
0030++ 7DD9 1F          	.db 00011111b
0031++ 7DDA             	
0032++ 7DDA 50          	.db 01010000b
0033++ 7DDB 40          	.db 01000000b
0034++ 7DDC 02          	.db 00000010b
0035++ 7DDD 80          	.db 10000000b
0036++ 7DDE 3F          	.db 00111111b
0037++ 7DDF             	
0038++ 7DDF 20          	.db 00100000b
0039++ 7DE0 28          	.db 00101000b
0040++ 7DE1 04          	.db 00000100b
0041++ 7DE2 80          	.db 10000000b
0042++ 7DE3 7F          	.db 01111111b
0043++ 7DE4             	
0044++ 7DE4 44          	.db 01000100b
0045++ 7DE5 80          	.db 10000000b
0046++ 7DE6 08          	.db 00001000b
0047++ 7DE7 80          	.db 10000000b
0048++ 7DE8 FF          	.db 11111111b
0049++ 7DE9             attractEnd:0006   7DE9             
0007   7DE9             #include "game.asm"
0001+  7DE9             ; Laser Ball solenoids
0002+  7DE9             ;#DEFINE KICKOUT 		01
0003+  7DE9             ;#DEFINE LEFT_KICKER 	02
0004+  7DE9             ;#DEFINE DROP_LA			03
0005+  7DE9             ;#DEFINE DROP_SER		04
0006+  7DE9             ;#DEFINE EJECT_HOLE		05
0007+  7DE9             ;#DEFINE DROP_BA			06
0008+  7DE9             ;#DEFINE DROP_LL			07
0009+  7DE9             ;#DEFINE RIGHT_KICKER	08
0010+  7DE9             ;#DEFINE SOUND1			09 ; thru 13
0011+  7DE9             ;#DEFINE KNOCKER			14
0012+  7DE9             ;#DEFINE	FLASHERS		15
0013+  7DE9             ;#DEFINE COIN_LOCKOUT	16
0014+  7DE9             
0015+  7DE9             ; Hot Tip solenoids
0016+  7DE9             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7DE9             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7DE9             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7DE9             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7DE9             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7DE9             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7DE9             #DEFINE CHIME_10	SOL(09, 16)
0023+  7DE9             #DEFINE CHIME_100	SOL(10, 16)
0024+  7DE9             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7DE9             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7DE9             #DEFINE CLICKER		SOL(13, 8)
0027+  7DE9             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7DE9             #DEFINE BUZZER		SOL(15, 100)
0029+  7DE9             #DEFINE SHORT_PAUSE 	115
0030+  7DE9             
0031+  7DE9             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7DE9             #DEFINE done(v)	\
0033+  7DE9             #DEFCONT	#IF (v==0)
0034+  7DE9             #DEFCONT		\ ldaA 10b
0035+  7DE9             #DEFCONT		\ oraA >state
0036+  7DE9             #DEFCONT		\ staA state
0037+  7DE9             #DEFCONT	\#ENDIF
0038+  7DE9             #DEFCONT	\ jmp afterQueueEvent
0039+  7DE9             	
0040+  7DE9             	
0041+  7DE9             _addScore10N:
0042+  7DE9 BD 7D 4D    	jsr setXToCurPlayer10
0043+  7DEC 86 01       	ldaA	1
0044+  7DEE BD 7D 0F    	jsr _addScoreI
0045+  7DF1 86 02       	fireSolenoidA(CHIME_10)
0045+  7DF3 B7 01 48    
0046+  7DF6 39          	rts
0047+  7DF7             _addScore100N:
0048+  7DF7 BD 7D 4D    	jsr setXToCurPlayer10
0049+  7DFA 09          	deX
0050+  7DFB 86 01       	ldaA	1
0051+  7DFD BD 7D 0F    	jsr _addScoreI
0052+  7E00 86 02       	fireSolenoidA(CHIME_100)	
0052+  7E02 B7 01 49    
0053+  7E05 39          	rts
0054+  7E06             _addScore1000N:
0055+  7E06 BD 7D 4D    	jsr setXToCurPlayer10
0056+  7E09 09          	deX
0057+  7E0A 09          	deX
0058+  7E0B 86 01       	ldaA	1
0059+  7E0D BD 7D 0F    	jsr _addScoreI
0060+  7E10 86 02       	fireSolenoidA(CHIME_1000)
0060+  7E12 B7 01 4A    
0061+  7E15 39          	rts
0062+  7E16             #DEFINE score10() jsr _addScore10N
0063+  7E16             #DEFINE score100() jsr _addScore100N
0064+  7E16             #DEFINE score1000() jsr _addScore1000N
0065+  7E16             #DEFINE score500() \ jsr _addScore100N
0066+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7E16             #DEFCONT	\ jsr _addScore100N
0069+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7E16             #DEFCONT	\ jsr _addScore100N
0072+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7E16             #DEFCONT	\ jsr _addScore100N
0075+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7E16             #DEFCONT	\ jsr _addScore100N
0078+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7E16             
0081+  7E16             #DEFINE advBonus()	jsr advanceBonus
0082+  7E16             
0083+  7E16             advanceBonus:
0084+  7E16 86 08       	ldaA	1000b
0085+  7E18 B5 01 6B    	bitA	>state
0086+  7E1B             	ifne
0086+  7E1B             
0086+  7E1B 27 FE       
0087+  7E1D 39          		rts
0088+  7E1E             	endif
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0088+  7E1C             
0088+  7E1C 01          
0088+  7E1D             
0088+  7E1D             
0088+  7E1D~            	endif
0088+  7E1D~            	endif
0088+  7E1D~            	endif
0088+  7E1D             
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0089+  7E1E 7C 00 B0    	inc 	p_Bonus
0090+  7E21 86 7F       	lampOff(8,5) ; 1k
0090+  7E23 94 0C       
0090+  7E25 97 0C       
0091+  7E27 C6 02       	ldaB	2
0092+  7E29 86 08       	fork(64)
0092+  7E2B BD 7D 80    
0093+  7E2E 39          	rts
0094+  7E2F 01          	nop
0095+  7E30 01          	nop
0096+  7E31             	beginFork()
0097+  7E31             advanceBonus_loop:
0098+  7E31 7A 00 B0    	dec	p_Bonus
0099+  7E34 BD 60 C3    	jsr 	bonusLights
0100+  7E37 7C 00 B0    	inc	p_Bonus
0101+  7E3A 86 FE       	ldaA	11111110b
0102+  7E3C             	
0103+  7E3C 37          	pshB
0104+  7E3D 5A          	decB
0105+  7E3E             inner:
0106+  7E3E 5A          	decB
0107+  7E3F 27 04       	beq	innerEnd
0108+  7E41 0D          	seC
0109+  7E42 49          	rolA
0110+  7E43 20 F9       	bra 	inner
0111+  7E45             innerEnd:
0112+  7E45 33          	pulB
0113+  7E46             	
0114+  7E46 94 0D       	andA	>lc(6)
0115+  7E48 97 0D       	staA	lc(6)
0116+  7E4A 86 08       	delay(64)
0116+  7E4C BD 7D 6B    
0117+  7E4F 5C          	incB
0118+  7E50 D1 B0       	cmpB	>p_Bonus
0119+  7E52 2D DD       	blt	advanceBonus_loop
0120+  7E54 D6 B0       	ldaB	>p_Bonus
0121+  7E56 BD 60 C3    	jsr 	bonusLights
0122+  7E59 DE 2C       	endFork()
0122+  7E5B 7E 79 3C    
0123+  7E5E             	
0124+  7E5E             ; switch callbacks:
0125+  7E5E             
0126+  60C0             none:	.org $6000 + 192 ; size of callback table
0127+  60C0             	done(1)
0127+  60C0~            	done(1)
0127+  60C0~            	done(1)
0127+  60C0~            	done(1)
0127+  60C0~            	done(1)
0127+  60C0             
0127+  60C0 7E 79 8C    
0128+  60C3             	
0129+  60C3             bonusLights:
0130+  60C3 86 00       	ldaA	0
0131+  60C5 97 0C       	staA	lc(5)
0132+  60C7 97 0D       	staA	lc(6)
0133+  60C9 7D 00 B0    	tst	p_Bonus
0134+  60CC 27 11       	beq	bonusLights_done
0135+  60CE             	
0136+  60CE 86 80       	lampOn(8,5) ; 1k
0136+  60D0 9A 0C       
0136+  60D2 97 0C       
0137+  60D4             	
0138+  60D4 96 B0       	ldaA	>p_Bonus
0139+  60D6             bonusLights_loop:
0140+  60D6 4A          	decA
0141+  60D7 27 06       	beq 	bonusLights_done
0142+  60D9 0D          	seC
0143+  60DA 79 00 0D    	rol	lc(6)
0144+  60DD 20 F7       	bra	bonusLights_loop
0145+  60DF             	
0146+  60DF             bonusLights_done
0147+  60DF             
0148+  60DF 86 09       	ldaA	9
0149+  60E1 91 B0       	cmpA	>p_Bonus
0150+  60E3             	ifge	
0150+  60E3             
0150+  60E3 25 FE       
0151+  60E5             	else	; bonus >= 10?
0151+  60E5             
0151+  60E5             
0151+  60E5             
0151+  60E5             
0151+  60E4             
0151+  60E4             
0151+  60E4             
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4             
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4             
0151+  60E4             
0151+  60E4 02          
0151+  60E5             
0151+  60E5 20 FE       
0151+  60E7             
0151+  60E7             
0151+  60E7             
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7             
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7             
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7             
0152+  60E7 86 0A       		ldaA	10
0153+  60E9 97 B0       		staA	p_Bonus
0154+  60EB 86 40       		lampOn(7,5) ; 10k light
0154+  60ED 9A 0C       
0154+  60EF 97 0C       
0155+  60F1             	endif
0155+  60F1             
0155+  60F1             
0155+  60F1             
0155+  60F1             
0155+  60F1             
0155+  60F1~            	endif
0155+  60F1~            	endif
0155+  60F1             
0155+  60F1~            	endif
0155+  60F1~            	endif
0155+  60F1             
0155+  60E6             
0155+  60E6 0A          
0155+  60E7             
0155+  60E7             
0155+  60E7~            	endif
0155+  60E7~            	endif
0155+  60E7~            	endif
0155+  60E7             
0155+  60F1             
0155+  60F1~            	endif
0155+  60F1~            	endif
0155+  60F1             
0156+  60F1             	
0157+  60F1 39          	rts
0158+  60F2             	
0159+  60F2             	
0160+  60F2             startBall:
0161+  60F2 DE 12       	ldX	>curPlayer
0162+  60F4 86 01       	ldaA	1
0163+  60F6 97 B0       	staA	p_Bonus
0164+  60F8 86 80       	lampOn(8,5)
0164+  60FA 9A 0C       
0164+  60FC 97 0C       
0165+  60FE B6 22 03    	enablePf
0165+  6101 8A 38       
0165+  6103 B7 22 03    
0166+  6106             	
0167+  6106 86 00       	ldaA	0
0168+  6108 97 B5       	staA	p_DropsDown
0169+  610A 86 41       	ldaA	65
0170+  610C 97 A9       	staA	dropResetTimer
0171+  610E             	
0172+  610E 86 00       	ldaA	0
0173+  6110 97 AA       	staA	dropsDown
0174+  6112             	
0175+  6112 C6 0C       	fireSolenoid(DROP_HOT)
0175+  6114 F7 01 42    
0176+  6117 86 12       	delay(150)
0176+  6119 BD 7D 6B    
0177+  611C C6 0C       	fireSolenoid(DROP_TIP)
0177+  611E F7 01 41    
0178+  6121 86 12       	delay(150)
0178+  6123 BD 7D 6B    
0179+  6126             	
0180+  6126 86 FF       	ldaA	$FF
0181+  6128 97 A8       	staA	lastSwitch
0182+  612A             	
0183+  612A             	; clear lights
0184+  612A CE 00 08    	ldX	lampCol1
0185+  612D 86 00       	ldaA	0b
0186+  612F             lClearLights:
0187+  612F A7 00       	staA	0, X
0188+  6131 A7 98       	staA	flashLampCol1 - lampCol1, X
0189+  6133 08          	inX
0190+  6134 8C 00 0E    	cpX	lc(6) + 1
0191+  6137 26 F6       	bne	lClearLights
0192+  6139             	;
0193+  6139             	
0194+  6139             	; init lights for player data
0195+  6139 DE 12       	ldX	>curPlayer
0196+  613B A6 B1       	ldaA	p_Ejects, X
0197+  613D 97 0B       	staA	lc(4)
0198+  613F E6 B6       	ldaB	p_LampCol2, X
0199+  6141 C5 02       	bitB	lr(2)
0200+  6143             	ifne 
0200+  6143             
0200+  6143 27 FE       
0201+  6145 86 02       		lampOn(2,3)
0201+  6147 9A 0A       
0201+  6149 97 0A       
0202+  614B C4 FD       		andB	11111101b
0203+  614D             	endif
0203+  614D             
0203+  614D             
0203+  614D             
0203+  614D             
0203+  614D             
0203+  614D~            	endif
0203+  614D~            	endif
0203+  614D             
0203+  614D~            	endif
0203+  614D~            	endif
0203+  614D             
0203+  6144             
0203+  6144 08          
0203+  6145             
0203+  6145             
0203+  6145~            	endif
0203+  6145~            	endif
0203+  6145~            	endif
0203+  6145             
0203+  614D             
0203+  614D~            	endif
0203+  614D~            	endif
0203+  614D             
0204+  614D D7 09       	staB	lc(2)
0205+  614F             	
0206+  614F 86 40       	ldaA	lr(7) ; shoot again
0207+  6151 95 0F       	bitA	>lc(8)
0208+  6153             	ifne
0208+  6153             
0208+  6153 27 FE       
0209+  6155 86 01       		lampOn(1,3) ; shoot again
0209+  6157 9A 0A       
0209+  6159 97 0A       
0210+  615B             	endif
0210+  615B             
0210+  615B             
0210+  615B             
0210+  615B             
0210+  615B             
0210+  615B~            	endif
0210+  615B~            	endif
0210+  615B             
0210+  615B~            	endif
0210+  615B~            	endif
0210+  615B             
0210+  6154             
0210+  6154 06          
0210+  6155             
0210+  6155             
0210+  6155~            	endif
0210+  6155~            	endif
0210+  6155~            	endif
0210+  6155             
0210+  615B             
0210+  615B~            	endif
0210+  615B~            	endif
0210+  615B             
0211+  615B             	
0212+  615B             	; flash player light
0213+  615B 86 0F       	ldaA	00001111b ; player up lights
0214+  615D 9A A7       	oraA	>flc(8)
0215+  615F 97 A7       	staA	flc(8)
0216+  6161             	
0217+  6161 86 01       	ldaA	sr(1) ; check outhole
0218+  6163 95 21       	bitA	>sc(2)
0219+  6165             	ifne ; ball in hole
0219+  6165             
0219+  6165 27 FE       
0220+  6167 C6 02       		fireSolenoid(OUTHOLE)
0220+  6169 F7 01 44    
0221+  616C             	endif
0221+  616C             
0221+  616C             
0221+  616C             
0221+  616C             
0221+  616C             
0221+  616C~            	endif
0221+  616C~            	endif
0221+  616C             
0221+  616C~            	endif
0221+  616C~            	endif
0221+  616C             
0221+  6166             
0221+  6166 05          
0221+  6167             
0221+  6167             
0221+  6167~            	endif
0221+  6167~            	endif
0221+  6167~            	endif
0221+  6167             
0221+  616C             
0221+  616C~            	endif
0221+  616C~            	endif
0221+  616C             
0222+  616C             	
0223+  616C 39          	rts
0224+  616D             	
0225+  616D             	
0226+  616D             startGame:
0227+  616D 86 02       	lampOn(2,7) ; one player
0227+  616F 9A 0E       
0227+  6171 97 0E       
0228+  6173             	
0229+  6173 86 DF       	lampOff(6,8) ; game over
0229+  6175 94 0F       
0229+  6177 97 0F       
0230+  6179             	
0231+  6179 C6 02       	fireSolenoid(CHIME_10)
0231+  617B F7 01 48    
0232+  617E 86 0E       	delay(SHORT_PAUSE)
0232+  6180 BD 7D 6B    
0233+  6183 C6 02       	fireSolenoid(CHIME_10)
0233+  6185 F7 01 48    
0234+  6188 86 0E       	delay(SHORT_PAUSE)
0234+  618A BD 7D 6B    
0235+  618D C6 02       	fireSolenoid(CHIME_10)
0235+  618F F7 01 48    
0236+  6192 86 19       	delay(200)
0236+  6194 BD 7D 6B    
0237+  6197             	
0238+  6197 C6 02       	fireSolenoid(CHIME_10)
0238+  6199 F7 01 48    
0239+  619C 86 0E       	delay(SHORT_PAUSE)
0239+  619E BD 7D 6B    
0240+  61A1 C6 02       	fireSolenoid(CHIME_10)
0240+  61A3 F7 01 48    
0241+  61A6 86 0E       	delay(SHORT_PAUSE)
0241+  61A8 BD 7D 6B    
0242+  61AB C6 02       	fireSolenoid(CHIME_10)
0242+  61AD F7 01 48    
0243+  61B0 86 19       	delay(200)
0243+  61B2 BD 7D 6B    
0244+  61B5             	
0245+  61B5 C6 02       	fireSolenoid(CHIME_10)
0245+  61B7 F7 01 48    
0246+  61BA 86 0E       	delay(SHORT_PAUSE)
0246+  61BC BD 7D 6B    
0247+  61BF C6 02       	fireSolenoid(CHIME_10)
0247+  61C1 F7 01 48    
0248+  61C4 86 0E       	delay(SHORT_PAUSE)
0248+  61C6 BD 7D 6B    
0249+  61C9 C6 02       	fireSolenoid(CHIME_100)
0249+  61CB F7 01 49    
0250+  61CE 86 19       	delay(200)
0250+  61D0 BD 7D 6B    
0251+  61D3 C6 02       	fireSolenoid(CHIME_1000)
0251+  61D5 F7 01 4A    
0252+  61D8 86 19       	delay(200)
0252+  61DA BD 7D 6B    
0253+  61DD C6 02       	fireSolenoid(CHIME_10k)
0253+  61DF F7 01 4B    
0254+  61E2 86 12       	delay(150)
0254+  61E4 BD 7D 6B    
0255+  61E7             	
0256+  61E7             	; reset scores
0257+  61E7 BD 7D A2    	jsr 	resetScores
0258+  61EA             	
0259+  61EA             	; reset ball count
0260+  61EA 86 10       	ldaA	$10
0261+  61EC 97 77       	staA	ballCount	
0262+  61EE             
0263+  61EE C6 00       	ldaB	0
0264+  61F0 D7 13       	staB	curPlayer + 1
0265+  61F2             	
0266+  61F2 D7 0E       	staB	lc(7)
0267+  61F4 D7 0F       	staB	lc(8)
0268+  61F6 D7 A6       	staB	flc(7)
0269+  61F8 D7 A7       	staB	flc(8)
0270+  61FA             	
0271+  61FA CE 00 00    	ldX	0
0272+  61FD             lInitPlayers:
0273+  61FD C6 01       	ldaB	lr(1)
0274+  61FF E7 B1       	staB	p_Ejects, X
0275+  6201 C6 00       	ldaB	0
0276+  6203 E7 B6       	staB	p_LampCol2, X
0277+  6205 E7 BA       	staB	p_EachDropDown, X
0278+  6207 08          	inX
0279+  6208 8C 00 04    	cpX	4
0280+  620B 26 F0       	bne	lInitPlayers
0281+  620D             	
0282+  620D BD 60 F2    	jsr	startBall
0283+  6210             	
0284+  6210             	; invalidate playfield
0285+  6210 86 01       	ldaA	lr(1)
0286+  6212 9A 0F       	oraA	>lc(8)
0287+  6214 97 0F       	staA	lc(8)
0288+  6216             	
0289+  6216 86 02       	lampOn(2,7) ; one player
0289+  6218 9A 0E       
0289+  621A 97 0E       
0290+  621C             	
0291+  621C 86 DF       	lampOff(6,8) ; game over
0291+  621E 94 0F       
0291+  6220 97 0F       
0292+  6222             	
0293+  6222 39          	rts
0294+  6223             	
0295+  6223             
0296+  6223             	
0297+  6223             swTilt: 
0298+  6223 86 10       	lampOn(5,8) ; tilt
0298+  6225 9A 0F       
0298+  6227 97 0F       
0299+  6229 B6 22 03    	disablePf
0299+  622C 84 F7       
0299+  622E B7 22 03    
0300+  6231             	done(0)
0300+  6231             
0300+  6231 86 02       
0300+  6233 BA 01 6B    
0300+  6236 B7 01 6B    
0300+  6239             
0300+  6239 7E 79 8C    
0301+  623C             	
0302+  623C             swStart: 
0303+  623C 96 0F       	ldaA >lc(8)
0304+  623E 85 20       	bitA lr(6)
0305+  6240             	ifne ; in game over
0305+  6240             
0305+  6240 27 FE       
0306+  6242 BD 61 6D    		jsr startGame
0307+  6245             	else 
0307+  6245             
0307+  6245             
0307+  6245             
0307+  6245             
0307+  6241             
0307+  6241             
0307+  6241             
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241             
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241             
0307+  6241             
0307+  6241 05          
0307+  6245             
0307+  6245 20 FE       
0307+  6247             
0307+  6247             
0307+  6247             
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247             
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247             
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247             
0308+  6247 86 10       		ldaA	$10
0309+  6249 91 77       		cmpA	>ballCount
0310+  624B             		ifeq ; add player
0310+  624B             
0310+  624B 26 FE       
0311+  624D 86 1E       			ldaA	00011110b
0312+  624F 94 0E       			andA	>lc(7) ; player count lights
0313+  6251 85 10       			bitA	lr(5)
0314+  6253             			ifeq	; if not on P4 already, add player
0314+  6253             
0314+  6253 26 FE       
0315+  6255 48          				aslA
0316+  6256 C6 E1       				ldaB	11100001b
0317+  6258 D4 0E       				andB	>lc(7)
0318+  625A D7 0E       				staB	lc(7)
0319+  625C 9A 0E       				oraA	>lc(7)
0320+  625E 97 0E       				staA	lc(7)
0321+  6260             			endif
0321+  6260             
0321+  6260             
0321+  6260             
0321+  6260             
0321+  6260             
0321+  6260~            			endif
0321+  6260~            			endif
0321+  6260             
0321+  6260~            			endif
0321+  6260~            			endif
0321+  6260             
0321+  6254             
0321+  6254 0B          
0321+  6255             
0321+  6255             
0321+  6255~            			endif
0321+  6255~            			endif
0321+  6255~            			endif
0321+  6255             
0321+  6260             
0321+  6260~            			endif
0321+  6260~            			endif
0321+  6260             
0322+  6260             		else ; restart game
0322+  6260             
0322+  6260             
0322+  6260             
0322+  6260             
0322+  624C             
0322+  624C             
0322+  624C             
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C             
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C             
0322+  624C             
0322+  624C 15          
0322+  6260             
0322+  6260 20 FE       
0322+  6262             
0322+  6262             
0322+  6262             
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262             
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262             
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262             
0323+  6262 BD 61 6D    			jsr startGame
0324+  6265             		endif		
0324+  6265             
0324+  6265             
0324+  6265             
0324+  6265             
0324+  6265             
0324+  6265~            		endif		
0324+  6265~            		endif		
0324+  6265             
0324+  6265~            		endif		
0324+  6265~            		endif		
0324+  6265             
0324+  6261             
0324+  6261 03          
0324+  6262             
0324+  6262             
0324+  6262~            		endif		
0324+  6262~            		endif		
0324+  6262~            		endif		
0324+  6262             
0324+  6265             
0324+  6265~            		endif		
0324+  6265~            		endif		
0324+  6265             
0325+  6265             	endif
0325+  6265             
0325+  6265             
0325+  6265             
0325+  6265             
0325+  6265             
0325+  6265~            	endif
0325+  6265~            	endif
0325+  6265             
0325+  6265~            	endif
0325+  6265~            	endif
0325+  6265             
0325+  6246             
0325+  6246 1E          
0325+  6247             
0325+  6247             
0325+  6247~            	endif
0325+  6247~            	endif
0325+  6247~            	endif
0325+  6247             
0325+  6265             
0325+  6265~            	endif
0325+  6265~            	endif
0325+  6265             
0326+  6265             	
0327+  6265 BD 7C D6    	jsr refreshPlayerScores
0328+  6268             	
0329+  6268             	done(0)
0329+  6268             
0329+  6268 86 02       
0329+  626A BA 01 6B    
0329+  626D B7 01 6B    
0329+  6270             
0329+  6270 7E 79 8C    
0330+  6273             	
0331+  6273             swOuthole: 
0332+  6273 86 4B       	delay(600)
0332+  6275 BD 7D 6B    
0333+  6278 96 0F       	ldaA	>lc(8) ; !game over
0334+  627A 85 20       	bitA	lr(6)
0335+  627C             	ifne ; game over
0335+  627C             
0335+  627C 27 FE       
0336+  627E             		done(0)
0336+  627E             
0336+  627E 86 02       
0336+  6280 BA 01 6B    
0336+  6283 B7 01 6B    
0336+  6286             
0336+  6286 7E 79 8C    
0337+  6289             	endif
0337+  6289             
0337+  6289             
0337+  6289             
0337+  6289             
0337+  6289             
0337+  6289~            	endif
0337+  6289~            	endif
0337+  6289             
0337+  6289~            	endif
0337+  6289~            	endif
0337+  6289             
0337+  627D             
0337+  627D 0B          
0337+  627E             
0337+  627E             
0337+  627E~            	endif
0337+  627E~            	endif
0337+  627E~            	endif
0337+  627E             
0337+  6289             
0337+  6289~            	endif
0337+  6289~            	endif
0337+  6289             
0338+  6289             	
0339+  6289 86 08       	ldaA	1000b
0340+  628B B5 01 6B    	bitA	>state
0341+  628E             	ifne
0341+  628E             
0341+  628E 27 FE       
0342+  6290             		done(0)
0342+  6290             
0342+  6290 86 02       
0342+  6292 BA 01 6B    
0342+  6295 B7 01 6B    
0342+  6298             
0342+  6298 7E 79 8C    
0343+  629B             	endif
0343+  629B             
0343+  629B             
0343+  629B             
0343+  629B             
0343+  629B             
0343+  629B~            	endif
0343+  629B~            	endif
0343+  629B             
0343+  629B~            	endif
0343+  629B~            	endif
0343+  629B             
0343+  628F             
0343+  628F 0B          
0343+  6290             
0343+  6290             
0343+  6290~            	endif
0343+  6290~            	endif
0343+  6290~            	endif
0343+  6290             
0343+  629B             
0343+  629B~            	endif
0343+  629B~            	endif
0343+  629B             
0344+  629B BA 01 6B    	oraA	>state
0345+  629E B7 01 6B    	staA	state
0346+  62A1             	
0347+  62A1             	; check ballsave
0348+  62A1 86 01       	ldaA	lr(1)
0349+  62A3 95 0A       	bitA	>lc(3)
0350+  62A5             	ifne	; shoot again on
0350+  62A5             
0350+  62A5 27 FE       
0351+  62A7 95 A2       		bitA	>flc(3)
0352+  62A9             		ifne ; shoot again flashing
0352+  62A9             
0352+  62A9 27 FE       
0353+  62AB             			; turn off used special
0354+  62AB 86 80       			ldaA	lr(8) ; right special
0355+  62AD 95 09       			bitA	>lc(2)
0356+  62AF             			ifne
0356+  62AF             
0356+  62AF 27 FE       
0357+  62B1 86 7F       				lampOff(8,2)
0357+  62B3 94 09       
0357+  62B5 97 09       
0358+  62B7 86 7F       				flashOff(8,2)
0358+  62B9 94 A1       
0358+  62BB 97 A1       
0359+  62BD             			endif
0359+  62BD             
0359+  62BD             
0359+  62BD             
0359+  62BD             
0359+  62BD             
0359+  62BD~            			endif
0359+  62BD~            			endif
0359+  62BD             
0359+  62BD~            			endif
0359+  62BD~            			endif
0359+  62BD             
0359+  62B0             
0359+  62B0 0C          
0359+  62B1             
0359+  62B1             
0359+  62B1~            			endif
0359+  62B1~            			endif
0359+  62B1~            			endif
0359+  62B1             
0359+  62BD             
0359+  62BD~            			endif
0359+  62BD~            			endif
0359+  62BD             
0360+  62BD 86 02       			ldaA	lr(2) ; right special
0361+  62BF 95 0A       			bitA	>lc(3)
0362+  62C1             			ifne
0362+  62C1             
0362+  62C1 27 FE       
0363+  62C3 86 FD       				lampOff(2,3)
0363+  62C5 94 0A       
0363+  62C7 97 0A       
0364+  62C9 86 FD       				flashOff(2,3)
0364+  62CB 94 A2       
0364+  62CD 97 A2       
0365+  62CF             			endif
0365+  62CF             
0365+  62CF             
0365+  62CF             
0365+  62CF             
0365+  62CF             
0365+  62CF~            			endif
0365+  62CF~            			endif
0365+  62CF             
0365+  62CF~            			endif
0365+  62CF~            			endif
0365+  62CF             
0365+  62C2             
0365+  62C2 0C          
0365+  62C3             
0365+  62C3             
0365+  62C3~            			endif
0365+  62C3~            			endif
0365+  62C3~            			endif
0365+  62C3             
0365+  62CF             
0365+  62CF~            			endif
0365+  62CF~            			endif
0365+  62CF             
0366+  62CF             			
0367+  62CF             			; flash player light
0368+  62CF 86 0F       			ldaA	00001111b ; player up lights
0369+  62D1 9A A7       			oraA	>flc(8)
0370+  62D3 97 A7       			staA	flc(8)
0371+  62D5             		endif
0371+  62D5             
0371+  62D5             
0371+  62D5             
0371+  62D5             
0371+  62D5             
0371+  62D5~            		endif
0371+  62D5~            		endif
0371+  62D5             
0371+  62D5~            		endif
0371+  62D5~            		endif
0371+  62D5             
0371+  62AA             
0371+  62AA 2A          
0371+  62AB             
0371+  62AB             
0371+  62AB~            		endif
0371+  62AB~            		endif
0371+  62AB~            		endif
0371+  62AB             
0371+  62D5             
0371+  62D5~            		endif
0371+  62D5~            		endif
0371+  62D5             
0372+  62D5             	endif
0372+  62D5             
0372+  62D5             
0372+  62D5             
0372+  62D5             
0372+  62D5             
0372+  62D5~            	endif
0372+  62D5~            	endif
0372+  62D5             
0372+  62D5~            	endif
0372+  62D5~            	endif
0372+  62D5             
0372+  62A6             
0372+  62A6 2E          
0372+  62A7             
0372+  62A7             
0372+  62A7~            	endif
0372+  62A7~            	endif
0372+  62A7~            	endif
0372+  62A7             
0372+  62D5             
0372+  62D5~            	endif
0372+  62D5~            	endif
0372+  62D5             
0373+  62D5             	
0374+  62D5 86 0F       	ldaA	00001111b ; player up lights
0375+  62D7 95 A7       	bitA	>flc(8)	; check if any player is flashing
0376+  62D9             	ifne ; any flashing -> playfield invalid
0376+  62D9             
0376+  62D9 27 FE       
0377+  62DB             swOuthole_save:
0378+  62DB 86 EF       		lampOff(5,8) ; tilt
0378+  62DD 94 0F       
0378+  62DF 97 0F       
0379+  62E1             		
0380+  62E1 B6 22 03    		enablePf
0380+  62E4 8A 38       
0380+  62E6 B7 22 03    
0381+  62E9 C6 02       		fireSolenoid(OUTHOLE)
0381+  62EB F7 01 44    
0382+  62EE             	else ; none flashing -> playfield valid -> end ball			
0382+  62EE             
0382+  62EE             
0382+  62EE             
0382+  62EE             
0382+  62DA             
0382+  62DA             
0382+  62DA             
0382+  62DA~            	else ; none flashing -> playfield valid -> end ball			
0382+  62DA~            	else ; none flashing -> playfield valid -> end ball			
0382+  62DA~            	else ; none flashing -> playfield valid -> end ball			
0382+  62DA~            	else ; none flashing -> playfield valid -> end ball			
0382+  62DA             
0382+  62DA~            	else ; none flashing -> playfield valid -> end ball			
0382+  62DA~            	else ; none flashing -> playfield valid -> end ball			
0382+  62DA~            	else ; none flashing -> playfield valid -> end ball			
0382+  62DA~            	else ; none flashing -> playfield valid -> end ball			
0382+  62DA             
0382+  62DA             
0382+  62DA 15          
0382+  62EE             
0382+  62EE 20 FE       
0382+  62F0             
0382+  62F0             
0382+  62F0             
0382+  62F0~            	else ; none flashing -> playfield valid -> end ball			
0382+  62F0~            	else ; none flashing -> playfield valid -> end ball			
0382+  62F0~            	else ; none flashing -> playfield valid -> end ball			
0382+  62F0~            	else ; none flashing -> playfield valid -> end ball			
0382+  62F0~            	else ; none flashing -> playfield valid -> end ball			
0382+  62F0             
0382+  62F0~            	else ; none flashing -> playfield valid -> end ball			
0382+  62F0~            	else ; none flashing -> playfield valid -> end ball			
0382+  62F0             
0382+  62F0~            	else ; none flashing -> playfield valid -> end ball			
0382+  62F0~            	else ; none flashing -> playfield valid -> end ball			
0382+  62F0             
0383+  62F0             swOuthole_bonusLoop:
0384+  62F0 BD 7E 06    		score1000()
0385+  62F3 96 09       		ldaA	>lc(2) ; double bonus
0386+  62F5 85 04       		bitA	lr(3)
0387+  62F7             		ifne 
0387+  62F7             
0387+  62F7 27 FE       
0388+  62F9 86 0C       			delay(100)
0388+  62FB BD 7D 6B    
0389+  62FE BD 7E 06    			score1000()
0390+  6301             		endif
0390+  6301             
0390+  6301             
0390+  6301             
0390+  6301             
0390+  6301             
0390+  6301~            		endif
0390+  6301~            		endif
0390+  6301             
0390+  6301~            		endif
0390+  6301~            		endif
0390+  6301             
0390+  62F8             
0390+  62F8 08          
0390+  62F9             
0390+  62F9             
0390+  62F9~            		endif
0390+  62F9~            		endif
0390+  62F9~            		endif
0390+  62F9             
0390+  6301             
0390+  6301~            		endif
0390+  6301~            		endif
0390+  6301             
0391+  6301 7A 00 B0    		dec	p_Bonus
0392+  6304 BD 60 C3    		jsr	bonusLights
0393+  6307 86 19       		delay(200)
0393+  6309 BD 7D 6B    
0394+  630C 7D 00 B0    		tst	p_Bonus
0395+  630F 26 DF       		bne	swOuthole_bonusLoop
0396+  6311             	
0397+  6311 86 0F       		ldaA	00001111b ; player up lights
0398+  6313 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0399+  6315 D6 0A       		ldaB	>lc(3) ; check shoot again light
0400+  6317 C5 01       		bitB	lr(1)
0401+  6319             		ifeq ; shoot again not lit
0401+  6319             
0401+  6319 26 FE       
0402+  631B             			; store player's data
0403+  631B DE 12       			ldX	>curPlayer
0404+  631D D6 0B       			ldaB	>lc(4)
0405+  631F E7 B1       			staB	p_Ejects, X
0406+  6321 D6 0A       			ldaB	>lc(3)
0407+  6323 C4 02       			andB	lr(2)
0408+  6325 DA 09       			oraB	>lc(2)
0409+  6327 E7 B6       			staB	p_LampCol2, X
0410+  6329 D6 AA       			ldaB	>dropsDown
0411+  632B E7 BA       			staB	p_EachDropDown, X
0412+  632D             			
0413+  632D             		
0414+  632D             			; go to next player
0415+  632D 48          			aslA
0416+  632E 7C 00 13    			inc	curPlayer + 1
0417+  6331 95 0E       			bitA	>lc(7)	; is player count < player #
0418+  6333             			ifne ; last player
0418+  6333             
0418+  6333 27 FE       
0419+  6335 86 01       				ldaA	00000001b; ; back to player 1
0420+  6337 C6 00       				ldaB	0
0421+  6339 D7 13       				staB	curPlayer + 1
0422+  633B             				
0423+  633B             				; increase ball count
0424+  633B D6 77       				ldaB	>ballCount
0425+  633D CB 10       				addB	$10
0426+  633F C1 40       				cmpB	$40
0427+  6341             				ifeq ; game over
0427+  6341             
0427+  6341 26 FE       
0428+  6343 86 20       					lampOn(6,8)
0428+  6345 9A 0F       
0428+  6347 97 0F       
0429+  6349 B6 22 03    					disablePf
0429+  634C 84 F7       
0429+  634E B7 22 03    
0430+  6351             					done(1)
0430+  6351~            					done(1)
0430+  6351~            					done(1)
0430+  6351~            					done(1)
0430+  6351~            					done(1)
0430+  6351             
0430+  6351 7E 79 8C    
0431+  6354             				else
0431+  6354             
0431+  6354             
0431+  6354             
0431+  6354             
0431+  6342             
0431+  6342             
0431+  6342             
0431+  6342~            				else
0431+  6342~            				else
0431+  6342~            				else
0431+  6342~            				else
0431+  6342             
0431+  6342~            				else
0431+  6342~            				else
0431+  6342~            				else
0431+  6342~            				else
0431+  6342             
0431+  6342             
0431+  6342 13          
0431+  6354             
0431+  6354 20 FE       
0431+  6356             
0431+  6356             
0431+  6356             
0431+  6356~            				else
0431+  6356~            				else
0431+  6356~            				else
0431+  6356~            				else
0431+  6356~            				else
0431+  6356             
0431+  6356~            				else
0431+  6356~            				else
0431+  6356             
0431+  6356~            				else
0431+  6356~            				else
0431+  6356             
0432+  6356 D7 77       					staB	ballCount
0433+  6358             				endif		
0433+  6358             
0433+  6358             
0433+  6358             
0433+  6358             
0433+  6358             
0433+  6358~            				endif		
0433+  6358~            				endif		
0433+  6358             
0433+  6358~            				endif		
0433+  6358~            				endif		
0433+  6358             
0433+  6355             
0433+  6355 02          
0433+  6356             
0433+  6356             
0433+  6356~            				endif		
0433+  6356~            				endif		
0433+  6356~            				endif		
0433+  6356             
0433+  6358             
0433+  6358~            				endif		
0433+  6358~            				endif		
0433+  6358             
0434+  6358             			endif
0434+  6358             
0434+  6358             
0434+  6358             
0434+  6358             
0434+  6358             
0434+  6358~            			endif
0434+  6358~            			endif
0434+  6358             
0434+  6358~            			endif
0434+  6358~            			endif
0434+  6358             
0434+  6334             
0434+  6334 23          
0434+  6335             
0434+  6335             
0434+  6335~            			endif
0434+  6335~            			endif
0434+  6335~            			endif
0434+  6335             
0434+  6358             
0434+  6358~            			endif
0434+  6358~            			endif
0434+  6358             
0435+  6358             			
0436+  6358 97 0F       			staA	lc(8)
0437+  635A             		endif
0437+  635A             
0437+  635A             
0437+  635A             
0437+  635A             
0437+  635A             
0437+  635A~            		endif
0437+  635A~            		endif
0437+  635A             
0437+  635A~            		endif
0437+  635A~            		endif
0437+  635A             
0437+  631A             
0437+  631A 3F          
0437+  631B             
0437+  631B             
0437+  631B~            		endif
0437+  631B~            		endif
0437+  631B~            		endif
0437+  631B             
0437+  635A             
0437+  635A~            		endif
0437+  635A~            		endif
0437+  635A             
0438+  635A             		
0439+  635A BD 60 F2    		jsr	startBall
0440+  635D             	endif	
0440+  635D             
0440+  635D             
0440+  635D             
0440+  635D             
0440+  635D             
0440+  635D~            	endif	
0440+  635D~            	endif	
0440+  635D             
0440+  635D~            	endif	
0440+  635D~            	endif	
0440+  635D             
0440+  62EF             
0440+  62EF 6D          
0440+  62F0             
0440+  62F0             
0440+  62F0~            	endif	
0440+  62F0~            	endif	
0440+  62F0~            	endif	
0440+  62F0             
0440+  635D             
0440+  635D~            	endif	
0440+  635D~            	endif	
0440+  635D             
0441+  635D             	
0442+  635D 86 F7       	ldaA	~1000b
0443+  635F B4 01 6B    	andA	>state
0444+  6362 B7 01 6B    	staA	state
0445+  6365             	
0446+  6365             	done(0)
0446+  6365             
0446+  6365 86 02       
0446+  6367 BA 01 6B    
0446+  636A B7 01 6B    
0446+  636D             
0446+  636D 7E 79 8C    
0447+  6370             	
0448+  6370             swLeftEject:
0449+  6370 96 0F       	ldaA	>lc(8)
0450+  6372 85 20       	bitA	lr(6)
0451+  6374             	ifne ; not in game
0451+  6374             
0451+  6374 27 FE       
0452+  6376 C6 03       		fireSolenoid(LEFT_EJECT)
0452+  6378 F7 01 43    
0453+  637B             		done(0)
0453+  637B             
0453+  637B 86 02       
0453+  637D BA 01 6B    
0453+  6380 B7 01 6B    
0453+  6383             
0453+  6383 7E 79 8C    
0454+  6386             	endif
0454+  6386             
0454+  6386             
0454+  6386             
0454+  6386             
0454+  6386             
0454+  6386~            	endif
0454+  6386~            	endif
0454+  6386             
0454+  6386~            	endif
0454+  6386~            	endif
0454+  6386             
0454+  6375             
0454+  6375 10          
0454+  6376             
0454+  6376             
0454+  6376~            	endif
0454+  6376~            	endif
0454+  6376~            	endif
0454+  6376             
0454+  6386             
0454+  6386~            	endif
0454+  6386~            	endif
0454+  6386             
0455+  6386             		
0456+  6386 BD 7E 16    	advBonus()
0457+  6389 86 04       	ldaA	lr(3) ; extra ball
0458+  638B 95 0A       	bitA	>lc(3)
0459+  638D             	ifne
0459+  638D             
0459+  638D 27 FE       
0460+  638F C6 06       		fireSolenoid(KNOCKER)
0460+  6391 F7 01 4D    
0461+  6394 86 01       		lampOn(1,3) ; shoot again
0461+  6396 9A 0A       
0461+  6398 97 0A       
0462+  639A 86 40       		lampOn(7,8)
0462+  639C 9A 0F       
0462+  639E 97 0F       
0463+  63A0 86 FB       		lampOff(3,3) ; extra ball
0463+  63A2 94 0A       
0463+  63A4 97 0A       
0464+  63A6 86 3E       		delay(500)
0464+  63A8 BD 7D 6B    
0465+  63AB             	else
0465+  63AB             
0465+  63AB             
0465+  63AB             
0465+  63AB             
0465+  638E             
0465+  638E             
0465+  638E             
0465+  638E~            	else
0465+  638E~            	else
0465+  638E~            	else
0465+  638E~            	else
0465+  638E             
0465+  638E~            	else
0465+  638E~            	else
0465+  638E~            	else
0465+  638E~            	else
0465+  638E             
0465+  638E             
0465+  638E 1E          
0465+  63AB             
0465+  63AB 20 FE       
0465+  63AD             
0465+  63AD             
0465+  63AD             
0465+  63AD~            	else
0465+  63AD~            	else
0465+  63AD~            	else
0465+  63AD~            	else
0465+  63AD~            	else
0465+  63AD             
0465+  63AD~            	else
0465+  63AD~            	else
0465+  63AD             
0465+  63AD~            	else
0465+  63AD~            	else
0465+  63AD             
0466+  63AD BD 67 37    		jsr	addCollect
0467+  63B0             		score500()
0467+  63B0 BD 7D F7    
0467+  63B3 C6 02       
0467+  63B5 F7 01 49    
0467+  63B8 86 0E       
0467+  63BA BD 7D 6B    
0467+  63BD BD 7D F7    
0467+  63C0 C6 02       
0467+  63C2 F7 01 49    
0467+  63C5 86 0E       
0467+  63C7 BD 7D 6B    
0467+  63CA BD 7D F7    
0467+  63CD C6 02       
0467+  63CF F7 01 49    
0467+  63D2 86 0E       
0467+  63D4 BD 7D 6B    
0467+  63D7 BD 7D F7    
0467+  63DA C6 02       
0467+  63DC F7 01 49    
0467+  63DF 86 0E       
0467+  63E1 BD 7D 6B    
0467+  63E4 BD 7D F7    
0467+  63E7 C6 02       
0467+  63E9 F7 01 49    
0467+  63EC 86 0E       
0467+  63EE BD 7D 6B    
0468+  63F1             	endif
0468+  63F1             
0468+  63F1             
0468+  63F1             
0468+  63F1             
0468+  63F1             
0468+  63F1~            	endif
0468+  63F1~            	endif
0468+  63F1             
0468+  63F1~            	endif
0468+  63F1~            	endif
0468+  63F1             
0468+  63AC             
0468+  63AC 44          
0468+  63AD             
0468+  63AD             
0468+  63AD~            	endif
0468+  63AD~            	endif
0468+  63AD~            	endif
0468+  63AD             
0468+  63F1             
0468+  63F1~            	endif
0468+  63F1~            	endif
0468+  63F1             
0469+  63F1 C6 03       	fireSolenoid(LEFT_EJECT)
0469+  63F3 F7 01 43    
0470+  63F6             	
0471+  63F6 86 32       	fork(400)
0471+  63F8 BD 7D 80    
0472+  63FB             	done(1)
0472+  63FB~            	done(1)
0472+  63FB~            	done(1)
0472+  63FB~            	done(1)
0472+  63FB~            	done(1)
0472+  63FB             
0472+  63FB 7E 79 8C    
0473+  63FE             	beginFork()
0474+  63FE 86 C7       	ldaA	11000111b
0475+  6400 94 A1       	andA	>flc(2)
0476+  6402 97 A1       	staA	flc(2)
0477+  6404 DE 2C       	endFork()
0477+  6406 7E 79 3C    
0478+  6409             	
0479+  6409             swTopEject:
0480+  6409 BD 7E 16    	advBonus()
0481+  640C D6 0B       	ldaB	>lc(4)
0482+  640E 57          	asrB
0483+  640F             	ifeq ; 1k
0483+  640F             
0483+  640F 26 FE       
0484+  6411 BD 7E 06    		score1000()
0485+  6414 86 19       		delay(200)
0485+  6416 BD 7D 6B    
0486+  6419 7E 64 DE    		jmp	swTopEject_scored
0487+  641C             	endif
0487+  641C             
0487+  641C             
0487+  641C             
0487+  641C             
0487+  641C             
0487+  641C~            	endif
0487+  641C~            	endif
0487+  641C             
0487+  641C~            	endif
0487+  641C~            	endif
0487+  641C             
0487+  6410             
0487+  6410 0B          
0487+  6411             
0487+  6411             
0487+  6411~            	endif
0487+  6411~            	endif
0487+  6411~            	endif
0487+  6411             
0487+  641C             
0487+  641C~            	endif
0487+  641C~            	endif
0487+  641C             
0488+  641C 57          	asrB
0489+  641D             	ifeq  ; captive
0489+  641D             
0489+  641D 26 FE       
0490+  641F 86 40       		ldaA	lr(7)
0491+  6421 95 09       		bitA	>lc(2) ; captive ball
0492+  6423             		ifeq	; not lit
0492+  6423             
0492+  6423 26 FE       
0493+  6425 86 40       			lampOn(7,2)
0493+  6427 9A 09       
0493+  6429 97 09       
0494+  642B 86 40       			flashLamp(7,2)
0494+  642D 9A A1       
0494+  642F 97 A1       
0495+  6431             		else
0495+  6431             
0495+  6431             
0495+  6431             
0495+  6431             
0495+  6424             
0495+  6424             
0495+  6424             
0495+  6424~            		else
0495+  6424~            		else
0495+  6424~            		else
0495+  6424~            		else
0495+  6424             
0495+  6424~            		else
0495+  6424~            		else
0495+  6424~            		else
0495+  6424~            		else
0495+  6424             
0495+  6424             
0495+  6424 0E          
0495+  6431             
0495+  6431 20 FE       
0495+  6433             
0495+  6433             
0495+  6433             
0495+  6433~            		else
0495+  6433~            		else
0495+  6433~            		else
0495+  6433~            		else
0495+  6433~            		else
0495+  6433             
0495+  6433~            		else
0495+  6433~            		else
0495+  6433             
0495+  6433~            		else
0495+  6433~            		else
0495+  6433             
0496+  6433 86 BF       			lampOff(7,2)
0496+  6435 94 09       
0496+  6437 97 09       
0497+  6439             		endif
0497+  6439             
0497+  6439             
0497+  6439             
0497+  6439             
0497+  6439             
0497+  6439~            		endif
0497+  6439~            		endif
0497+  6439             
0497+  6439~            		endif
0497+  6439~            		endif
0497+  6439             
0497+  6432             
0497+  6432 06          
0497+  6433             
0497+  6433             
0497+  6433~            		endif
0497+  6433~            		endif
0497+  6433~            		endif
0497+  6433             
0497+  6439             
0497+  6439~            		endif
0497+  6439~            		endif
0497+  6439             
0498+  6439             	score500()
0498+  6439 BD 7D F7    
0498+  643C C6 02       
0498+  643E F7 01 49    
0498+  6441 86 0E       
0498+  6443 BD 7D 6B    
0498+  6446 BD 7D F7    
0498+  6449 C6 02       
0498+  644B F7 01 49    
0498+  644E 86 0E       
0498+  6450 BD 7D 6B    
0498+  6453 BD 7D F7    
0498+  6456 C6 02       
0498+  6458 F7 01 49    
0498+  645B 86 0E       
0498+  645D BD 7D 6B    
0498+  6460 BD 7D F7    
0498+  6463 C6 02       
0498+  6465 F7 01 49    
0498+  6468 86 0E       
0498+  646A BD 7D 6B    
0498+  646D BD 7D F7    
0498+  6470 C6 02       
0498+  6472 F7 01 49    
0498+  6475 86 0E       
0498+  6477 BD 7D 6B    
0499+  647A 7E 64 DE    		jmp	swTopEject_scored
0500+  647D             	endif
0500+  647D             
0500+  647D             
0500+  647D             
0500+  647D             
0500+  647D             
0500+  647D~            	endif
0500+  647D~            	endif
0500+  647D             
0500+  647D~            	endif
0500+  647D~            	endif
0500+  647D             
0500+  641E             
0500+  641E 5E          
0500+  641F             
0500+  641F             
0500+  641F~            	endif
0500+  641F~            	endif
0500+  641F~            	endif
0500+  641F             
0500+  647D             
0500+  647D~            	endif
0500+  647D~            	endif
0500+  647D             
0501+  647D 57          	asrB
0502+  647E             	ifne	
0502+  647E             
0502+  647E 27 FE       
0503+  6480 57          		asrB
0504+  6481             		ifeq ; double
0504+  6481             
0504+  6481 26 FE       
0505+  6483 86 04       			ldaA	lr(3)
0506+  6485 95 09       			bitA	>lc(2) ; double bonus
0507+  6487             			ifeq	; not lit
0507+  6487             
0507+  6487 26 FE       
0508+  6489 86 04       				lampOn(3,2)
0508+  648B 9A 09       
0508+  648D 97 09       
0509+  648F 86 04       				flashLamp(3,2)
0509+  6491 9A A1       
0509+  6493 97 A1       
0510+  6495             			else
0510+  6495             
0510+  6495             
0510+  6495             
0510+  6495             
0510+  6488             
0510+  6488             
0510+  6488             
0510+  6488~            			else
0510+  6488~            			else
0510+  6488~            			else
0510+  6488~            			else
0510+  6488             
0510+  6488~            			else
0510+  6488~            			else
0510+  6488~            			else
0510+  6488~            			else
0510+  6488             
0510+  6488             
0510+  6488 0E          
0510+  6495             
0510+  6495 20 FE       
0510+  6497             
0510+  6497             
0510+  6497             
0510+  6497~            			else
0510+  6497~            			else
0510+  6497~            			else
0510+  6497~            			else
0510+  6497~            			else
0510+  6497             
0510+  6497~            			else
0510+  6497~            			else
0510+  6497             
0510+  6497~            			else
0510+  6497~            			else
0510+  6497             
0511+  6497 86 FB       				lampOff(3,2)
0511+  6499 94 09       
0511+  649B 97 09       
0512+  649D             			endif
0512+  649D             
0512+  649D             
0512+  649D             
0512+  649D             
0512+  649D             
0512+  649D~            			endif
0512+  649D~            			endif
0512+  649D             
0512+  649D~            			endif
0512+  649D~            			endif
0512+  649D             
0512+  6496             
0512+  6496 06          
0512+  6497             
0512+  6497             
0512+  6497~            			endif
0512+  6497~            			endif
0512+  6497~            			endif
0512+  6497             
0512+  649D             
0512+  649D~            			endif
0512+  649D~            			endif
0512+  649D             
0513+  649D             		endif
0513+  649D             
0513+  649D             
0513+  649D             
0513+  649D             
0513+  649D             
0513+  649D~            		endif
0513+  649D~            		endif
0513+  649D             
0513+  649D~            		endif
0513+  649D~            		endif
0513+  649D             
0513+  6482             
0513+  6482 1A          
0513+  6483             
0513+  6483             
0513+  6483~            		endif
0513+  6483~            		endif
0513+  6483~            		endif
0513+  6483             
0513+  649D             
0513+  649D~            		endif
0513+  649D~            		endif
0513+  649D             
0514+  649D             	endif
0514+  649D             
0514+  649D             
0514+  649D             
0514+  649D             
0514+  649D             
0514+  649D~            	endif
0514+  649D~            	endif
0514+  649D             
0514+  649D~            	endif
0514+  649D~            	endif
0514+  649D             
0514+  647F             
0514+  647F 1D          
0514+  6480             
0514+  6480             
0514+  6480~            	endif
0514+  6480~            	endif
0514+  6480~            	endif
0514+  6480             
0514+  649D             
0514+  649D~            	endif
0514+  649D~            	endif
0514+  649D             
0515+  649D             	score500()
0515+  649D BD 7D F7    
0515+  64A0 C6 02       
0515+  64A2 F7 01 49    
0515+  64A5 86 0E       
0515+  64A7 BD 7D 6B    
0515+  64AA BD 7D F7    
0515+  64AD C6 02       
0515+  64AF F7 01 49    
0515+  64B2 86 0E       
0515+  64B4 BD 7D 6B    
0515+  64B7 BD 7D F7    
0515+  64BA C6 02       
0515+  64BC F7 01 49    
0515+  64BF 86 0E       
0515+  64C1 BD 7D 6B    
0515+  64C4 BD 7D F7    
0515+  64C7 C6 02       
0515+  64C9 F7 01 49    
0515+  64CC 86 0E       
0515+  64CE BD 7D 6B    
0515+  64D1 BD 7D F7    
0515+  64D4 C6 02       
0515+  64D6 F7 01 49    
0515+  64D9 86 0E       
0515+  64DB BD 7D 6B    
0516+  64DE             swTopEject_scored:
0517+  64DE 86 FB       	flashOff(3,2)
0517+  64E0 94 A1       
0517+  64E2 97 A1       
0518+  64E4 86 BF       	flashOff(7,2)
0518+  64E6 94 A1       
0518+  64E8 97 A1       
0519+  64EA C6 03       	fireSolenoid(TOP_EJECT)
0519+  64EC F7 01 40    
0520+  64EF             	done(1)
0520+  64EF~            	done(1)
0520+  64EF~            	done(1)
0520+  64EF~            	done(1)
0520+  64EF~            	done(1)
0520+  64EF             
0520+  64EF 7E 79 8C    
0521+  64F2             	
0522+  64F2             swHotTip:
0523+  64F2 7D 00 A9    	tst	dropResetTimer
0524+  64F5             	ifne
0524+  64F5             
0524+  64F5 27 FE       
0525+  64F7             		done(0)
0525+  64F7             
0525+  64F7 86 02       
0525+  64F9 BA 01 6B    
0525+  64FC B7 01 6B    
0525+  64FF             
0525+  64FF 7E 79 8C    
0526+  6502             	endif
0526+  6502             
0526+  6502             
0526+  6502             
0526+  6502             
0526+  6502             
0526+  6502~            	endif
0526+  6502~            	endif
0526+  6502             
0526+  6502~            	endif
0526+  6502~            	endif
0526+  6502             
0526+  64F6             
0526+  64F6 0B          
0526+  64F7             
0526+  64F7             
0526+  64F7~            	endif
0526+  64F7~            	endif
0526+  64F7~            	endif
0526+  64F7             
0526+  6502             
0526+  6502~            	endif
0526+  6502~            	endif
0526+  6502             
0527+  6502             	
0528+  6502 BD 67 37    	jsr	addCollect
0529+  6505 86 00       	ldaA	0
0530+  6507 97 B5       	staA	p_DropsDown
0531+  6509 97 AA       	staA	dropsDown
0532+  650B 86 41       	ldaA	65
0533+  650D 97 A9       	staA	dropResetTimer
0534+  650F 86 12       	delay(150)
0534+  6511 BD 7D 6B    
0535+  6514 C6 0C       	fireSolenoid(DROP_HOT)
0535+  6516 F7 01 42    
0536+  6519 86 12       	delay(150)
0536+  651B BD 7D 6B    
0537+  651E C6 0C       	fireSolenoid(DROP_TIP)
0537+  6520 F7 01 41    
0538+  6523 86 F7       	lampOff(4,3) ; spinner
0538+  6525 94 0A       
0538+  6527 97 0A       
0539+  6529             	
0540+  6529 86 70       	fork(900)
0540+  652B BD 7D 80    
0541+  652E             	done(1)
0541+  652E~            	done(1)
0541+  652E~            	done(1)
0541+  652E~            	done(1)
0541+  652E~            	done(1)
0541+  652E             
0541+  652E 7E 79 8C    
0542+  6531             	beginFork()
0543+  6531 86 C7       	ldaA	11000111b
0544+  6533 94 A1       	andA	>flc(2)
0545+  6535 97 A1       	staA	flc(2)
0546+  6537 DE 2C       	endFork()
0546+  6539 7E 79 3C    
0547+  653C             	
0548+  653C             swLeftOutlane:
0549+  653C 86 02       	ldaA	lr(2) ; left special
0550+  653E 95 0A       	bitA	>lc(3)
0551+  6540             	ifne
0551+  6540             
0551+  6540 27 FE       
0552+  6542 86 01       		lampOn(1,3) ; shoot again
0552+  6544 9A 0A       
0552+  6546 97 0A       
0553+  6548 86 01       		flashLamp(1,3)
0553+  654A 9A A2       
0553+  654C 97 A2       
0554+  654E C6 0C       		fireSolenoid(BUZZER)
0554+  6550 F7 01 4E    
0555+  6553 86 02       		flashLamp(2,3)
0555+  6555 9A A2       
0555+  6557 97 A2       
0556+  6559             	endif
0556+  6559             
0556+  6559             
0556+  6559             
0556+  6559             
0556+  6559             
0556+  6559~            	endif
0556+  6559~            	endif
0556+  6559             
0556+  6559~            	endif
0556+  6559~            	endif
0556+  6559             
0556+  6541             
0556+  6541 17          
0556+  6542             
0556+  6542             
0556+  6542~            	endif
0556+  6542~            	endif
0556+  6542~            	endif
0556+  6542             
0556+  6559             
0556+  6559~            	endif
0556+  6559~            	endif
0556+  6559             
0557+  6559 BD 7E 16    	advBonus()
0558+  655C BD 7E 06    	score1000()
0559+  655F             	done(1)
0559+  655F~            	done(1)
0559+  655F~            	done(1)
0559+  655F~            	done(1)
0559+  655F~            	done(1)
0559+  655F             
0559+  655F 7E 79 8C    
0560+  6562             	
0561+  6562             swRightOutlane:
0562+  6562 86 80       	ldaA	lr(8) ; right special
0563+  6564 95 09       	bitA	>lc(2)
0564+  6566             	ifne
0564+  6566             
0564+  6566 27 FE       
0565+  6568 86 01       		lampOn(1,3) ; shoot again
0565+  656A 9A 0A       
0565+  656C 97 0A       
0566+  656E 86 01       		flashLamp(1,3)
0566+  6570 9A A2       
0566+  6572 97 A2       
0567+  6574 C6 0C       		fireSolenoid(BUZZER)
0567+  6576 F7 01 4E    
0568+  6579 86 80       		flashLamp(8,2)
0568+  657B 9A A1       
0568+  657D 97 A1       
0569+  657F             	endif
0569+  657F             
0569+  657F             
0569+  657F             
0569+  657F             
0569+  657F             
0569+  657F~            	endif
0569+  657F~            	endif
0569+  657F             
0569+  657F~            	endif
0569+  657F~            	endif
0569+  657F             
0569+  6567             
0569+  6567 17          
0569+  6568             
0569+  6568             
0569+  6568~            	endif
0569+  6568~            	endif
0569+  6568~            	endif
0569+  6568             
0569+  657F             
0569+  657F~            	endif
0569+  657F~            	endif
0569+  657F             
0570+  657F BD 7E 16    	advBonus()
0571+  6582 BD 7E 06    	score1000()
0572+  6585             	done(1)
0572+  6585~            	done(1)
0572+  6585~            	done(1)
0572+  6585~            	done(1)
0572+  6585~            	done(1)
0572+  6585             
0572+  6585 7E 79 8C    
0573+  6588             	
0574+  6588             swLeftInlane:
0575+  6588             swRightInlane:
0576+  6588 BD 7E 16    	advBonus()
0577+  658B BD 7E 06    	score1000()
0578+  658E             	done(1)
0578+  658E~            	done(1)
0578+  658E~            	done(1)
0578+  658E~            	done(1)
0578+  658E~            	done(1)
0578+  658E             
0578+  658E 7E 79 8C    
0579+  6591             sw10pt:
0580+  6591 BD 7D E9    	score10()
0581+  6594 77 00 0B    	asr	lc(4)
0582+  6597             	ifeq ; shifted off the edge
0582+  6597             
0582+  6597 26 FE       
0583+  6599 86 10       		ldaA	00010000b
0584+  659B 97 0B       		staA	lc(4)
0585+  659D             	endif
0585+  659D             
0585+  659D             
0585+  659D             
0585+  659D             
0585+  659D             
0585+  659D~            	endif
0585+  659D~            	endif
0585+  659D             
0585+  659D~            	endif
0585+  659D~            	endif
0585+  659D             
0585+  6598             
0585+  6598 04          
0585+  6599             
0585+  6599             
0585+  6599~            	endif
0585+  6599~            	endif
0585+  6599~            	endif
0585+  6599             
0585+  659D             
0585+  659D~            	endif
0585+  659D~            	endif
0585+  659D             
0586+  659D             	done(1)
0586+  659D~            	done(1)
0586+  659D~            	done(1)
0586+  659D~            	done(1)
0586+  659D~            	done(1)
0586+  659D             
0586+  659D 7E 79 8C    
0587+  65A0             sw100pt:
0588+  65A0 BD 7D F7    	score100()
0589+  65A3             	done(1)
0589+  65A3~            	done(1)
0589+  65A3~            	done(1)
0589+  65A3~            	done(1)
0589+  65A3~            	done(1)
0589+  65A3             
0589+  65A3 7E 79 8C    
0590+  65A6             sw500pt:
0591+  65A6 BD 67 0B    	jsr	alternate
0592+  65A9             	score500()
0592+  65A9 BD 7D F7    
0592+  65AC C6 02       
0592+  65AE F7 01 49    
0592+  65B1 86 0E       
0592+  65B3 BD 7D 6B    
0592+  65B6 BD 7D F7    
0592+  65B9 C6 02       
0592+  65BB F7 01 49    
0592+  65BE 86 0E       
0592+  65C0 BD 7D 6B    
0592+  65C3 BD 7D F7    
0592+  65C6 C6 02       
0592+  65C8 F7 01 49    
0592+  65CB 86 0E       
0592+  65CD BD 7D 6B    
0592+  65D0 BD 7D F7    
0592+  65D3 C6 02       
0592+  65D5 F7 01 49    
0592+  65D8 86 0E       
0592+  65DA BD 7D 6B    
0592+  65DD BD 7D F7    
0592+  65E0 C6 02       
0592+  65E2 F7 01 49    
0592+  65E5 86 0E       
0592+  65E7 BD 7D 6B    
0593+  65EA             	done(1)
0593+  65EA~            	done(1)
0593+  65EA~            	done(1)
0593+  65EA~            	done(1)
0593+  65EA~            	done(1)
0593+  65EA             
0593+  65EA 7E 79 8C    
0594+  65ED             swPop:
0595+  65ED BD 67 0B    	jsr	alternate
0596+  65F0 BD 7D F7    	score100()
0597+  65F3             	done(1)
0597+  65F3~            	done(1)
0597+  65F3~            	done(1)
0597+  65F3~            	done(1)
0597+  65F3~            	done(1)
0597+  65F3             
0597+  65F3 7E 79 8C    
0598+  65F6             swDropTip:
0599+  65F6 86 08       	ldaA	1<<3
0600+  65F8 7E 66 14    	jmp	swDrop
0601+  65FB             swDropHot:
0602+  65FB 86 01       	ldaA	1<<0
0603+  65FD 7E 66 14    	jmp	swDrop
0604+  6600             swDroptIp:
0605+  6600 86 10       	ldaA	1<<4
0606+  6602 7E 66 14    	jmp	swDrop
0607+  6605             swDrophOt:
0608+  6605 86 02       	ldaA	1<<1
0609+  6607 7E 66 14    	jmp	swDrop
0610+  660A             swDroptiP:
0611+  660A 86 20       	ldaA	1<<5
0612+  660C 7E 66 14    	jmp	swDrop
0613+  660F             swDrophoT:
0614+  660F 86 04       	ldaA	1<<2
0615+  6611 7E 66 14    	jmp	swDrop
0616+  6614             swDrop:
0617+  6614 7D 00 A9    	tst	dropResetTimer
0618+  6617             	ifeq
0618+  6617             
0618+  6617 26 FE       
0619+  6619 95 AA       		bitA	>dropsDown
0620+  661B             		ifne
0620+  661B             
0620+  661B 27 FE       
0621+  661D             			done(0)
0621+  661D             
0621+  661D 86 02       
0621+  661F BA 01 6B    
0621+  6622 B7 01 6B    
0621+  6625             
0621+  6625 7E 79 8C    
0622+  6628             		endif
0622+  6628             
0622+  6628             
0622+  6628             
0622+  6628             
0622+  6628             
0622+  6628~            		endif
0622+  6628~            		endif
0622+  6628             
0622+  6628~            		endif
0622+  6628~            		endif
0622+  6628             
0622+  661C             
0622+  661C 0B          
0622+  661D             
0622+  661D             
0622+  661D~            		endif
0622+  661D~            		endif
0622+  661D~            		endif
0622+  661D             
0622+  6628             
0622+  6628~            		endif
0622+  6628~            		endif
0622+  6628             
0623+  6628 9A AA       		oraA	>dropsDown
0624+  662A             		
0625+  662A 97 AA       		staA	dropsDown
0626+  662C 7C 00 B5    		inc	p_DropsDown
0627+  662F 86 04       		ldaA	4
0628+  6631 91 B5       		cmpA	>p_DropsDown
0629+  6633             		ifgt
0629+  6633             
0629+  6633 23 FE       
0630+  6635 86 F7       			lampOff(4,3) ; spinner
0630+  6637 94 0A       
0630+  6639 97 0A       
0631+  663B             		else
0631+  663B             
0631+  663B             
0631+  663B             
0631+  663B             
0631+  6634             
0631+  6634             
0631+  6634             
0631+  6634~            		else
0631+  6634~            		else
0631+  6634~            		else
0631+  6634~            		else
0631+  6634             
0631+  6634~            		else
0631+  6634~            		else
0631+  6634~            		else
0631+  6634~            		else
0631+  6634             
0631+  6634             
0631+  6634 08          
0631+  663B             
0631+  663B 20 FE       
0631+  663D             
0631+  663D             
0631+  663D             
0631+  663D~            		else
0631+  663D~            		else
0631+  663D~            		else
0631+  663D~            		else
0631+  663D~            		else
0631+  663D             
0631+  663D~            		else
0631+  663D~            		else
0631+  663D             
0631+  663D~            		else
0631+  663D~            		else
0631+  663D             
0632+  663D 86 08       			lampOn(4,3)
0632+  663F 9A 0A       
0632+  6641 97 0A       
0633+  6643             		endif
0633+  6643             
0633+  6643             
0633+  6643             
0633+  6643             
0633+  6643             
0633+  6643~            		endif
0633+  6643~            		endif
0633+  6643             
0633+  6643~            		endif
0633+  6643~            		endif
0633+  6643             
0633+  663C             
0633+  663C 06          
0633+  663D             
0633+  663D             
0633+  663D~            		endif
0633+  663D~            		endif
0633+  663D~            		endif
0633+  663D             
0633+  6643             
0633+  6643~            		endif
0633+  6643~            		endif
0633+  6643             
0634+  6643             		
0635+  6643 BD 7D E9    		score10()
0636+  6646 BD 7E 16    		advBonus()
0637+  6649             		done(1)
0637+  6649~            		done(1)
0637+  6649~            		done(1)
0637+  6649~            		done(1)
0637+  6649~            		done(1)
0637+  6649             
0637+  6649 7E 79 8C    
0638+  664C             	else
0638+  664C             
0638+  664C             
0638+  664C             
0638+  664C             
0638+  6618             
0638+  6618             
0638+  6618             
0638+  6618~            	else
0638+  6618~            	else
0638+  6618~            	else
0638+  6618~            	else
0638+  6618             
0638+  6618~            	else
0638+  6618~            	else
0638+  6618~            	else
0638+  6618~            	else
0638+  6618             
0638+  6618             
0638+  6618 35          
0638+  664C             
0638+  664C 20 FE       
0638+  664E             
0638+  664E             
0638+  664E             
0638+  664E~            	else
0638+  664E~            	else
0638+  664E~            	else
0638+  664E~            	else
0638+  664E~            	else
0638+  664E             
0638+  664E~            	else
0638+  664E~            	else
0638+  664E             
0638+  664E~            	else
0638+  664E~            	else
0638+  664E             
0639+  664E             		done(0)
0639+  664E             
0639+  664E 86 02       
0639+  6650 BA 01 6B    
0639+  6653 B7 01 6B    
0639+  6656             
0639+  6656 7E 79 8C    
0640+  6659             	endif
0640+  6659             
0640+  6659             
0640+  6659             
0640+  6659             
0640+  6659             
0640+  6659~            	endif
0640+  6659~            	endif
0640+  6659             
0640+  6659~            	endif
0640+  6659~            	endif
0640+  6659             
0640+  664D             
0640+  664D 0B          
0640+  664E             
0640+  664E             
0640+  664E~            	endif
0640+  664E~            	endif
0640+  664E~            	endif
0640+  664E             
0640+  6659             
0640+  6659~            	endif
0640+  6659~            	endif
0640+  6659             
0641+  6659             swAdvBonus:
0642+  6659 BD 7E 16    	advBonus()
0643+  665C BD 7E 06    	score1000()
0644+  665F             	done(1)
0644+  665F~            	done(1)
0644+  665F~            	done(1)
0644+  665F~            	done(1)
0644+  665F~            	done(1)
0644+  665F             
0644+  665F 7E 79 8C    
0645+  6662             swSpinner:
0646+  6662             	;ldaA	>sc(4)
0647+  6662             	;bitA	sr(6)
0648+  6662             	;ifne
0649+  6662             	;	score100()
0650+  6662             	;	ldaA	$E
0651+  6662             	;else
0652+  6662             	;	noValidate
0653+  6662             	;	ldaA	0
0654+  6662             	;endif
0655+  6662             	;staA	solenoid1 + CLICKER - 1
0656+  6662             	
0657+  6662 86 08       	ldaA	lr(4) ; spinner
0658+  6664 95 0A       	bitA	>lc(3)
0659+  6666             	ifne ; spinner on
0659+  6666             
0659+  6666 27 FE       
0660+  6668 BD 7D F7    		score100()
0661+  666B C6 01       		fireSolenoid(CLICKER)
0661+  666D F7 01 4C    
0662+  6670             	else
0662+  6670             
0662+  6670             
0662+  6670             
0662+  6670             
0662+  6667             
0662+  6667             
0662+  6667             
0662+  6667~            	else
0662+  6667~            	else
0662+  6667~            	else
0662+  6667~            	else
0662+  6667             
0662+  6667~            	else
0662+  6667~            	else
0662+  6667~            	else
0662+  6667~            	else
0662+  6667             
0662+  6667             
0662+  6667 0A          
0662+  6670             
0662+  6670 20 FE       
0662+  6672             
0662+  6672             
0662+  6672             
0662+  6672~            	else
0662+  6672~            	else
0662+  6672~            	else
0662+  6672~            	else
0662+  6672~            	else
0662+  6672             
0662+  6672~            	else
0662+  6672~            	else
0662+  6672             
0662+  6672~            	else
0662+  6672~            	else
0662+  6672             
0663+  6672 BD 7D E9    		score10()
0664+  6675             	endif
0664+  6675             
0664+  6675             
0664+  6675             
0664+  6675             
0664+  6675             
0664+  6675~            	endif
0664+  6675~            	endif
0664+  6675             
0664+  6675~            	endif
0664+  6675~            	endif
0664+  6675             
0664+  6671             
0664+  6671 03          
0664+  6672             
0664+  6672             
0664+  6672~            	endif
0664+  6672~            	endif
0664+  6672~            	endif
0664+  6672             
0664+  6675             
0664+  6675~            	endif
0664+  6675~            	endif
0664+  6675             
0665+  6675             	done(1)
0665+  6675~            	done(1)
0665+  6675~            	done(1)
0665+  6675~            	done(1)
0665+  6675~            	done(1)
0665+  6675             
0665+  6675 7E 79 8C    
0666+  6678             
0667+  6678             swCaptiveRollover:
0668+  6678 96 09       	ldaA	>lc(2)
0669+  667A 85 40       	bitA	lr(7)
0670+  667C             	ifeq ; light off
0670+  667C             
0670+  667C 26 FE       
0671+  667E BD 7D E9    		score10()
0672+  6681             	else
0672+  6681             
0672+  6681             
0672+  6681             
0672+  6681             
0672+  667D             
0672+  667D             
0672+  667D             
0672+  667D~            	else
0672+  667D~            	else
0672+  667D~            	else
0672+  667D~            	else
0672+  667D             
0672+  667D~            	else
0672+  667D~            	else
0672+  667D~            	else
0672+  667D~            	else
0672+  667D             
0672+  667D             
0672+  667D 05          
0672+  6681             
0672+  6681 20 FE       
0672+  6683             
0672+  6683             
0672+  6683             
0672+  6683~            	else
0672+  6683~            	else
0672+  6683~            	else
0672+  6683~            	else
0672+  6683~            	else
0672+  6683             
0672+  6683~            	else
0672+  6683~            	else
0672+  6683             
0672+  6683~            	else
0672+  6683~            	else
0672+  6683             
0673+  6683 BD 7E 06    		score1000()
0674+  6686 86 0E       		ldaA	14 ; captive rollover switch number
0675+  6688 91 A8       		cmpA	>lastSwitch
0676+  668A             		ifne
0676+  668A             
0676+  668A 27 FE       
0677+  668C 86 0F       			ldaA	15 ; captive rollover switch number
0678+  668E 91 A8       			cmpA	>lastSwitch
0679+  6690             			ifne
0679+  6690             
0679+  6690 27 FE       
0680+  6692 BD 66 AF    				jsr	captiveAward
0681+  6695             			endif
0681+  6695             
0681+  6695             
0681+  6695             
0681+  6695             
0681+  6695             
0681+  6695~            			endif
0681+  6695~            			endif
0681+  6695             
0681+  6695~            			endif
0681+  6695~            			endif
0681+  6695             
0681+  6691             
0681+  6691 03          
0681+  6692             
0681+  6692             
0681+  6692~            			endif
0681+  6692~            			endif
0681+  6692~            			endif
0681+  6692             
0681+  6695             
0681+  6695~            			endif
0681+  6695~            			endif
0681+  6695             
0682+  6695             		endif
0682+  6695             
0682+  6695             
0682+  6695             
0682+  6695             
0682+  6695             
0682+  6695~            		endif
0682+  6695~            		endif
0682+  6695             
0682+  6695~            		endif
0682+  6695~            		endif
0682+  6695             
0682+  668B             
0682+  668B 09          
0682+  668C             
0682+  668C             
0682+  668C~            		endif
0682+  668C~            		endif
0682+  668C~            		endif
0682+  668C             
0682+  6695             
0682+  6695~            		endif
0682+  6695~            		endif
0682+  6695             
0683+  6695             	endif
0683+  6695             
0683+  6695             
0683+  6695             
0683+  6695             
0683+  6695             
0683+  6695~            	endif
0683+  6695~            	endif
0683+  6695             
0683+  6695~            	endif
0683+  6695~            	endif
0683+  6695             
0683+  6682             
0683+  6682 12          
0683+  6683             
0683+  6683             
0683+  6683~            	endif
0683+  6683~            	endif
0683+  6683~            	endif
0683+  6683             
0683+  6695             
0683+  6695~            	endif
0683+  6695~            	endif
0683+  6695             
0684+  6695             	done(1)
0684+  6695~            	done(1)
0684+  6695~            	done(1)
0684+  6695~            	done(1)
0684+  6695~            	done(1)
0684+  6695             
0684+  6695 7E 79 8C    
0685+  6698             
0686+  6698             swCaptiveTarget:
0687+  6698 BD 7E 16    	advBonus()
0688+  669B 96 09       	ldaA	>lc(2)
0689+  669D 85 40       	bitA	lr(7)
0690+  669F             	ifeq ; light off
0690+  669F             
0690+  669F 26 FE       
0691+  66A1 BD 7D E9    		score10()
0692+  66A4 BD 66 AF    		jsr	captiveAward
0693+  66A7             	else
0693+  66A7             
0693+  66A7             
0693+  66A7             
0693+  66A7             
0693+  66A0             
0693+  66A0             
0693+  66A0             
0693+  66A0~            	else
0693+  66A0~            	else
0693+  66A0~            	else
0693+  66A0~            	else
0693+  66A0             
0693+  66A0~            	else
0693+  66A0~            	else
0693+  66A0~            	else
0693+  66A0~            	else
0693+  66A0             
0693+  66A0             
0693+  66A0 08          
0693+  66A7             
0693+  66A7 20 FE       
0693+  66A9             
0693+  66A9             
0693+  66A9             
0693+  66A9~            	else
0693+  66A9~            	else
0693+  66A9~            	else
0693+  66A9~            	else
0693+  66A9~            	else
0693+  66A9             
0693+  66A9~            	else
0693+  66A9~            	else
0693+  66A9             
0693+  66A9~            	else
0693+  66A9~            	else
0693+  66A9             
0694+  66A9 BD 7E 06    		score1000()
0695+  66AC             	endif
0695+  66AC             
0695+  66AC             
0695+  66AC             
0695+  66AC             
0695+  66AC             
0695+  66AC~            	endif
0695+  66AC~            	endif
0695+  66AC             
0695+  66AC~            	endif
0695+  66AC~            	endif
0695+  66AC             
0695+  66A8             
0695+  66A8 03          
0695+  66A9             
0695+  66A9             
0695+  66A9~            	endif
0695+  66A9~            	endif
0695+  66A9~            	endif
0695+  66A9             
0695+  66AC             
0695+  66AC~            	endif
0695+  66AC~            	endif
0695+  66AC             
0696+  66AC             	done(1)
0696+  66AC~            	done(1)
0696+  66AC~            	done(1)
0696+  66AC~            	done(1)
0696+  66AC~            	done(1)
0696+  66AC             
0696+  66AC 7E 79 8C    
0697+  66AF             	
0698+  66AF             captiveAward:
0699+  66AF 86 80       	lampOn(8,2) ; right special
0699+  66B1 9A 09       
0699+  66B3 97 09       
0700+  66B5 96 09       	ldaA	>lc(2)
0701+  66B7 85 08       	bitA	lr(4) ; shoe 1
0702+  66B9             	ifeq
0702+  66B9             
0702+  66B9 26 FE       
0703+  66BB 39          		rts
0704+  66BC             	else
0704+  66BC             
0704+  66BC             
0704+  66BC             
0704+  66BC             
0704+  66BA             
0704+  66BA             
0704+  66BA             
0704+  66BA~            	else
0704+  66BA~            	else
0704+  66BA~            	else
0704+  66BA~            	else
0704+  66BA             
0704+  66BA~            	else
0704+  66BA~            	else
0704+  66BA~            	else
0704+  66BA~            	else
0704+  66BA             
0704+  66BA             
0704+  66BA 03          
0704+  66BC             
0704+  66BC 20 FE       
0704+  66BE             
0704+  66BE             
0704+  66BE             
0704+  66BE~            	else
0704+  66BE~            	else
0704+  66BE~            	else
0704+  66BE~            	else
0704+  66BE~            	else
0704+  66BE             
0704+  66BE~            	else
0704+  66BE~            	else
0704+  66BE             
0704+  66BE~            	else
0704+  66BE~            	else
0704+  66BE             
0705+  66BE 85 20       		bitA	lr(6)
0706+  66C0             		ifne
0706+  66C0             
0706+  66C0 27 FE       
0707+  66C2 86 20       			flashLamp(6,2)
0707+  66C4 9A A1       
0707+  66C6 97 A1       
0708+  66C8             		else
0708+  66C8             
0708+  66C8             
0708+  66C8             
0708+  66C8             
0708+  66C1             
0708+  66C1             
0708+  66C1             
0708+  66C1~            		else
0708+  66C1~            		else
0708+  66C1~            		else
0708+  66C1~            		else
0708+  66C1             
0708+  66C1~            		else
0708+  66C1~            		else
0708+  66C1~            		else
0708+  66C1~            		else
0708+  66C1             
0708+  66C1             
0708+  66C1 08          
0708+  66C8             
0708+  66C8 20 FE       
0708+  66CA             
0708+  66CA             
0708+  66CA             
0708+  66CA~            		else
0708+  66CA~            		else
0708+  66CA~            		else
0708+  66CA~            		else
0708+  66CA~            		else
0708+  66CA             
0708+  66CA~            		else
0708+  66CA~            		else
0708+  66CA             
0708+  66CA~            		else
0708+  66CA~            		else
0708+  66CA             
0709+  66CA 85 10       			bitA	lr(5)
0710+  66CC             			ifne
0710+  66CC             
0710+  66CC 27 FE       
0711+  66CE 86 10       				flashLamp(5,2)
0711+  66D0 9A A1       
0711+  66D2 97 A1       
0712+  66D4             			else
0712+  66D4             
0712+  66D4             
0712+  66D4             
0712+  66D4             
0712+  66CD             
0712+  66CD             
0712+  66CD             
0712+  66CD~            			else
0712+  66CD~            			else
0712+  66CD~            			else
0712+  66CD~            			else
0712+  66CD             
0712+  66CD~            			else
0712+  66CD~            			else
0712+  66CD~            			else
0712+  66CD~            			else
0712+  66CD             
0712+  66CD             
0712+  66CD 08          
0712+  66D4             
0712+  66D4 20 FE       
0712+  66D6             
0712+  66D6             
0712+  66D6             
0712+  66D6~            			else
0712+  66D6~            			else
0712+  66D6~            			else
0712+  66D6~            			else
0712+  66D6~            			else
0712+  66D6             
0712+  66D6~            			else
0712+  66D6~            			else
0712+  66D6             
0712+  66D6~            			else
0712+  66D6~            			else
0712+  66D6             
0713+  66D6 86 08       				flashLamp(4,2)
0713+  66D8 9A A1       
0713+  66DA 97 A1       
0714+  66DC             			endif
0714+  66DC             
0714+  66DC             
0714+  66DC             
0714+  66DC             
0714+  66DC             
0714+  66DC~            			endif
0714+  66DC~            			endif
0714+  66DC             
0714+  66DC~            			endif
0714+  66DC~            			endif
0714+  66DC             
0714+  66D5             
0714+  66D5 06          
0714+  66D6             
0714+  66D6             
0714+  66D6~            			endif
0714+  66D6~            			endif
0714+  66D6~            			endif
0714+  66D6             
0714+  66DC             
0714+  66DC~            			endif
0714+  66DC~            			endif
0714+  66DC             
0715+  66DC             		endif
0715+  66DC             
0715+  66DC             
0715+  66DC             
0715+  66DC             
0715+  66DC             
0715+  66DC~            		endif
0715+  66DC~            		endif
0715+  66DC             
0715+  66DC~            		endif
0715+  66DC~            		endif
0715+  66DC             
0715+  66C9             
0715+  66C9 12          
0715+  66CA             
0715+  66CA             
0715+  66CA~            		endif
0715+  66CA~            		endif
0715+  66CA~            		endif
0715+  66CA             
0715+  66DC             
0715+  66DC~            		endif
0715+  66DC~            		endif
0715+  66DC             
0716+  66DC             	endif
0716+  66DC             
0716+  66DC             
0716+  66DC             
0716+  66DC             
0716+  66DC             
0716+  66DC~            	endif
0716+  66DC~            	endif
0716+  66DC             
0716+  66DC~            	endif
0716+  66DC~            	endif
0716+  66DC             
0716+  66BD             
0716+  66BD 1E          
0716+  66BE             
0716+  66BE             
0716+  66BE~            	endif
0716+  66BE~            	endif
0716+  66BE~            	endif
0716+  66BE             
0716+  66DC             
0716+  66DC~            	endif
0716+  66DC~            	endif
0716+  66DC             
0717+  66DC             	
0718+  66DC 86 04       	ldaA	lr(3)
0719+  66DE 95 09       	bitA	>lc(2)
0720+  66E0             	ifne ; double bonus
0720+  66E0             
0720+  66E0 27 FE       
0721+  66E2 96 B0       		ldaA	>p_Bonus
0722+  66E4             	else
0722+  66E4             
0722+  66E4             
0722+  66E4             
0722+  66E4             
0722+  66E1             
0722+  66E1             
0722+  66E1             
0722+  66E1~            	else
0722+  66E1~            	else
0722+  66E1~            	else
0722+  66E1~            	else
0722+  66E1             
0722+  66E1~            	else
0722+  66E1~            	else
0722+  66E1~            	else
0722+  66E1~            	else
0722+  66E1             
0722+  66E1             
0722+  66E1 04          
0722+  66E4             
0722+  66E4 20 FE       
0722+  66E6             
0722+  66E6             
0722+  66E6             
0722+  66E6~            	else
0722+  66E6~            	else
0722+  66E6~            	else
0722+  66E6~            	else
0722+  66E6~            	else
0722+  66E6             
0722+  66E6~            	else
0722+  66E6~            	else
0722+  66E6             
0722+  66E6~            	else
0722+  66E6~            	else
0722+  66E6             
0723+  66E6 86 01       		ldaA	1
0724+  66E8             	endif	
0724+  66E8             
0724+  66E8             
0724+  66E8             
0724+  66E8             
0724+  66E8             
0724+  66E8~            	endif	
0724+  66E8~            	endif	
0724+  66E8             
0724+  66E8~            	endif	
0724+  66E8~            	endif	
0724+  66E8             
0724+  66E5             
0724+  66E5 02          
0724+  66E6             
0724+  66E6             
0724+  66E6~            	endif	
0724+  66E6~            	endif	
0724+  66E6~            	endif	
0724+  66E6             
0724+  66E8             
0724+  66E8~            	endif	
0724+  66E8~            	endif	
0724+  66E8             
0725+  66E8 97 BE       	staA	p_BonusLeft
0726+  66EA             	
0727+  66EA             captiveAward_bonusLoop:
0728+  66EA BD 7E 06    	score1000()
0729+  66ED 7A 00 B0    	dec	p_Bonus
0730+  66F0 BD 60 C3    	jsr	bonusLights
0731+  66F3 86 19       	delay(200)
0731+  66F5 BD 7D 6B    
0732+  66F8 7D 00 B0    	tst	p_Bonus
0733+  66FB 26 ED       	bne	captiveAward_bonusLoop
0734+  66FD             	
0735+  66FD 86 38       	ldaA	00111000b
0736+  66FF 94 A1       	andA	>flc(2)
0737+  6701 43          	comA
0738+  6702 94 09       	andA	>lc(2)
0739+  6704 97 09       	staA	lc(2)
0740+  6706             	
0741+  6706 96 BE       	ldaA	>p_BonusLeft
0742+  6708 97 B0       	staA	p_Bonus
0743+  670A             	
0744+  670A 39          	rts	
0745+  670B             	
0746+  670B             	
0747+  670B             alternate:
0748+  670B C6 00       	ldaB	0 ; turn on left?
0749+  670D 86 80       	ldaA	lr(8) ; right special
0750+  670F 95 09       	bitA	>lc(2)
0751+  6711             	ifne
0751+  6711             
0751+  6711 27 FE       
0752+  6713 C6 01       		ldaB	1
0753+  6715 86 7F       		lampOff(8,2) ; right special
0753+  6717 94 09       
0753+  6719 97 09       
0754+  671B             	endif
0754+  671B             
0754+  671B             
0754+  671B             
0754+  671B             
0754+  671B             
0754+  671B~            	endif
0754+  671B~            	endif
0754+  671B             
0754+  671B~            	endif
0754+  671B~            	endif
0754+  671B             
0754+  6712             
0754+  6712 08          
0754+  6713             
0754+  6713             
0754+  6713~            	endif
0754+  6713~            	endif
0754+  6713~            	endif
0754+  6713             
0754+  671B             
0754+  671B~            	endif
0754+  671B~            	endif
0754+  671B             
0755+  671B 86 02       	ldaA	lr(2) ; left special
0756+  671D 95 0A       	bitA	>lc(3)
0757+  671F             	ifne
0757+  671F             
0757+  671F 27 FE       
0758+  6721 86 80       		lampOn(8,2) ; right special
0758+  6723 9A 09       
0758+  6725 97 09       
0759+  6727 86 FD       		lampOff(2,3) ; left special
0759+  6729 94 0A       
0759+  672B 97 0A       
0760+  672D             	endif
0760+  672D             
0760+  672D             
0760+  672D             
0760+  672D             
0760+  672D             
0760+  672D~            	endif
0760+  672D~            	endif
0760+  672D             
0760+  672D~            	endif
0760+  672D~            	endif
0760+  672D             
0760+  6720             
0760+  6720 0C          
0760+  6721             
0760+  6721             
0760+  6721~            	endif
0760+  6721~            	endif
0760+  6721~            	endif
0760+  6721             
0760+  672D             
0760+  672D~            	endif
0760+  672D~            	endif
0760+  672D             
0761+  672D 5D          	tstB
0762+  672E             	ifne
0762+  672E             
0762+  672E 27 FE       
0763+  6730 86 02       		lampOn(2,3) ; left special
0763+  6732 9A 0A       
0763+  6734 97 0A       
0764+  6736             	endif
0764+  6736             
0764+  6736             
0764+  6736             
0764+  6736             
0764+  6736             
0764+  6736~            	endif
0764+  6736~            	endif
0764+  6736             
0764+  6736~            	endif
0764+  6736~            	endif
0764+  6736             
0764+  672F             
0764+  672F 06          
0764+  6730             
0764+  6730             
0764+  6730~            	endif
0764+  6730~            	endif
0764+  6730~            	endif
0764+  6730             
0764+  6736             
0764+  6736~            	endif
0764+  6736~            	endif
0764+  6736             
0765+  6736 39          	rts
0766+  6737             	
0767+  6737             addCollect:
0768+  6737 96 09       	ldaA	>lc(2)
0769+  6739 85 08       	bitA	lr(4)
0770+  673B             	ifeq
0770+  673B             
0770+  673B 26 FE       
0771+  673D 86 08       		lampOn(4,2)
0771+  673F 9A 09       
0771+  6741 97 09       
0772+  6743 86 08       		flashLamp(4,2)
0772+  6745 9A A1       
0772+  6747 97 A1       
0773+  6749             	else
0773+  6749             
0773+  6749             
0773+  6749             
0773+  6749             
0773+  673C             
0773+  673C             
0773+  673C             
0773+  673C~            	else
0773+  673C~            	else
0773+  673C~            	else
0773+  673C~            	else
0773+  673C             
0773+  673C~            	else
0773+  673C~            	else
0773+  673C~            	else
0773+  673C~            	else
0773+  673C             
0773+  673C             
0773+  673C 0E          
0773+  6749             
0773+  6749 20 FE       
0773+  674B             
0773+  674B             
0773+  674B             
0773+  674B~            	else
0773+  674B~            	else
0773+  674B~            	else
0773+  674B~            	else
0773+  674B~            	else
0773+  674B             
0773+  674B~            	else
0773+  674B~            	else
0773+  674B             
0773+  674B~            	else
0773+  674B~            	else
0773+  674B             
0774+  674B 85 10       		bitA	lr(5)
0775+  674D             		ifeq
0775+  674D             
0775+  674D 26 FE       
0776+  674F 86 10       			lampOn(5,2)
0776+  6751 9A 09       
0776+  6753 97 09       
0777+  6755 86 10       			flashLamp(5,2)
0777+  6757 9A A1       
0777+  6759 97 A1       
0778+  675B             		else
0778+  675B             
0778+  675B             
0778+  675B             
0778+  675B             
0778+  674E             
0778+  674E             
0778+  674E             
0778+  674E~            		else
0778+  674E~            		else
0778+  674E~            		else
0778+  674E~            		else
0778+  674E             
0778+  674E~            		else
0778+  674E~            		else
0778+  674E~            		else
0778+  674E~            		else
0778+  674E             
0778+  674E             
0778+  674E 0E          
0778+  675B             
0778+  675B 20 FE       
0778+  675D             
0778+  675D             
0778+  675D             
0778+  675D~            		else
0778+  675D~            		else
0778+  675D~            		else
0778+  675D~            		else
0778+  675D~            		else
0778+  675D             
0778+  675D~            		else
0778+  675D~            		else
0778+  675D             
0778+  675D~            		else
0778+  675D~            		else
0778+  675D             
0779+  675D 85 20       			bitA	lr(6)
0780+  675F             			ifeq
0780+  675F             
0780+  675F 26 FE       
0781+  6761 86 20       				lampOn(6,2)
0781+  6763 9A 09       
0781+  6765 97 09       
0782+  6767 86 20       				flashLamp(6,2)
0782+  6769 9A A1       
0782+  676B 97 A1       
0783+  676D             			else
0783+  676D             
0783+  676D             
0783+  676D             
0783+  676D             
0783+  6760             
0783+  6760             
0783+  6760             
0783+  6760~            			else
0783+  6760~            			else
0783+  6760~            			else
0783+  6760~            			else
0783+  6760             
0783+  6760~            			else
0783+  6760~            			else
0783+  6760~            			else
0783+  6760~            			else
0783+  6760             
0783+  6760             
0783+  6760 0E          
0783+  676D             
0783+  676D 20 FE       
0783+  676F             
0783+  676F             
0783+  676F             
0783+  676F~            			else
0783+  676F~            			else
0783+  676F~            			else
0783+  676F~            			else
0783+  676F~            			else
0783+  676F             
0783+  676F~            			else
0783+  676F~            			else
0783+  676F             
0783+  676F~            			else
0783+  676F~            			else
0783+  676F             
0784+  676F BD 7E 06    				score1000()
0785+  6772 86 04       				lampOn(3,3)
0785+  6774 9A 0A       
0785+  6776 97 0A       
0786+  6778             			endif
0786+  6778             
0786+  6778             
0786+  6778             
0786+  6778             
0786+  6778             
0786+  6778~            			endif
0786+  6778~            			endif
0786+  6778             
0786+  6778~            			endif
0786+  6778~            			endif
0786+  6778             
0786+  676E             
0786+  676E 09          
0786+  676F             
0786+  676F             
0786+  676F~            			endif
0786+  676F~            			endif
0786+  676F~            			endif
0786+  676F             
0786+  6778             
0786+  6778~            			endif
0786+  6778~            			endif
0786+  6778             
0787+  6778             		endif
0787+  6778             
0787+  6778             
0787+  6778             
0787+  6778             
0787+  6778             
0787+  6778~            		endif
0787+  6778~            		endif
0787+  6778             
0787+  6778~            		endif
0787+  6778~            		endif
0787+  6778             
0787+  675C             
0787+  675C 1B          
0787+  675D             
0787+  675D             
0787+  675D~            		endif
0787+  675D~            		endif
0787+  675D~            		endif
0787+  675D             
0787+  6778             
0787+  6778~            		endif
0787+  6778~            		endif
0787+  6778             
0788+  6778             	endif
0788+  6778             
0788+  6778             
0788+  6778             
0788+  6778             
0788+  6778             
0788+  6778~            	endif
0788+  6778~            	endif
0788+  6778             
0788+  6778~            	endif
0788+  6778~            	endif
0788+  6778             
0788+  674A             
0788+  674A 2D          
0788+  674B             
0788+  674B             
0788+  674B~            	endif
0788+  674B~            	endif
0788+  674B~            	endif
0788+  674B             
0788+  6778             
0788+  6778~            	endif
0788+  6778~            	endif
0788+  6778             
0789+  6778 39          	rts
0790+  6779             	
0791+  6779             ; end callbacks
0792+  6779             	.msfirst
0793+  6779             ; needs to be on $**00 address
0794+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0795+  6000 62 23       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0795+  6002 62 23       
0795+  6004 62 3C       
0795+  6006 60 C0       
0795+  6008 60 C0       
0795+  600A 60 C0       
0795+  600C 62 23       
0795+  600E 60 C0       
0796+  6010 62 73       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0796+  6012 62 23       
0796+  6014 65 62       
0796+  6016 65 88       
0796+  6018 65 91       
0796+  601A 65 A6       
0796+  601C 66 78       
0796+  601E 66 98       
0797+  6020 65 F6       	.dw swDropTip	\.dw swDroptIp\.dw swDroptiP\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0797+  6022 66 00       
0797+  6024 66 0A       
0797+  6026 66 59       
0797+  6028 65 91       
0797+  602A 64 09       
0797+  602C 65 91       
0797+  602E 60 C0       
0798+  6030 65 FB       	.dw swDropHot	\.dw swDrophOt\.dw swDrophoT\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0798+  6032 66 05       
0798+  6034 66 0F       
0798+  6036 65 91       
0798+  6038 63 70       
0798+  603A 66 62       
0798+  603C 65 ED       
0798+  603E 65 A6       
0799+  6040 65 3C       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0799+  6042 65 88       
0799+  6044 65 91       
0799+  6046 60 C0       
0799+  6048 64 F2       
0799+  604A 60 C0       
0799+  604C 60 C0       
0799+  604E 60 C0       
0800+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0800+  6052 60 C0       
0800+  6054 60 C0       
0800+  6056 60 C0       
0800+  6058 60 C0       
0800+  605A 60 C0       
0800+  605C 60 C0       
0800+  605E 60 C0       
0801+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0801+  6062 60 C0       
0801+  6064 60 C0       
0801+  6066 60 C0       
0801+  6068 60 C0       
0801+  606A 60 C0       
0801+  606C 60 C0       
0801+  606E 60 C0       
0802+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0802+  6072 60 C0       
0802+  6074 60 C0       
0802+  6076 60 C0       
0802+  6078 60 C0       
0802+  607A 60 C0       
0802+  607C 60 C0       
0802+  607E 60 C0       
0803+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0804+  6080             ; off = how many cycles it must be off for
0805+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0806+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0807+  6080             ; TRANSPOSED (?)
0808+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0809+  6080             settleTable: ; must be right after callbackTable
0810+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0810+  6081 87          
0810+  6082 C2          
0810+  6083 47          
0810+  6084 47          
0810+  6085 47          
0810+  6086 87          
0810+  6087 47          
0811+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0811+  6089 87          
0811+  608A 87          
0811+  608B 87          
0811+  608C 81          
0811+  608D 81          
0811+  608E 80          
0811+  608F 87          
0812+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,3,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0812+  6091 87          
0812+  6092 87          
0812+  6093 83          
0812+  6094 83          
0812+  6095 E1          
0812+  6096 81          
0812+  6097 80          
0813+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,1,1,0)
0813+  6099 87          
0813+  609A 87          
0813+  609B 81          
0813+  609C E1          
0813+  609D 80          
0813+  609E 80          
0813+  609F 81          
0814+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0814+  60A1 87          
0814+  60A2 81          
0814+  60A3 47          
0814+  60A4 80          
0814+  60A5 47          
0814+  60A6 47          
0814+  60A7 47          
0815+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0815+  60A9 47          
0815+  60AA 47          
0815+  60AB 47          
0815+  60AC 47          
0815+  60AD 47          
0815+  60AE 47          
0815+  60AF 47          
0816+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0816+  60B1 47          
0816+  60B2 47          
0816+  60B3 47          
0816+  60B4 47          
0816+  60B5 47          
0816+  60B6 47          
0816+  60B7 47          
0817+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0817+  60B9 47          
0817+  60BA 47          
0817+  60BB 47          
0817+  60BC 47          
0817+  60BD 47          
0817+  60BE 47          
0817+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 7D       	ldaA	attractStart >> 8
0102   78AF 97 2A       	staA	attractX
0103   78B1 86 C1       	ldaA	attractStart&$FF
0104   78B3 97 2B       	staA	attractX + 1
0105   78B5             	
0106   78B5 86 FF       	ldaA	$FF	
0107   78B7 B7 28 00    	staA 	displayStrobe
0108   78BA             
0109   78BA 86 00       	ldaA	00
0110   78BC 97 07       	staA	strobe
0111   78BE B7 01 6A    	staA	displayCol
0112   78C1             	
0113   78C1 CE 00 00    	ldX 	0
0114   78C4 DF 50       	stX		curCol
0115   78C6             	
0116   78C6 86 00       	ldaA	0
0117   78C8 97 10       	staA	curSwitchRowLsb
0118   78CA             	
0119   78CA             ; fill solenoid status with off
0120   78CA 86 0F       	ldaA	$F
0121   78CC CE 01 40    	ldX	solenoid1
0122   78CF             lSolDefault:
0123   78CF A7 00       	staA	0, X
0124   78D1 08          	inX
0125   78D2 8C 01 4F    	cpX	solenoid16
0126   78D5 26 F8       	bne	lSolDefault
0127   78D7             	
0128   78D7             ; clear 8 banks
0129   78D7 86 00       	ldaA 	0
0130   78D9 CE 00 00    	ldX	0
0131   78DC             lClear8:
0132   78DC A7 08       	staA	lampCol1, X
0133   78DE A7 A0       	staA	flashLampCol1, X
0134   78E0 A7 80       	staA	waitLeft, X
0135   78E2 08          	inX
0136   78E3 8C 00 08    	cpX	8
0137   78E6 26 F4       	bne 	lClear8
0138   78E8             	
0139   78E8             ; empty settle
0140   78E8 86 00       	ldaA	$00
0141   78EA CE 01 00    	ldX	settleRow1
0142   78ED             lSettleDefault:
0143   78ED A7 00       	staA	0, X
0144   78EF 08          	inX
0145   78F0 8C 01 3F    	cpX	settleRow8End
0146   78F3 26 F8       	bne	lSettleDefault
0147   78F5             	
0148   78F5             ; empty queue
0149   78F5 86 FF       	ldaA	$FF
0150   78F7 CE 00 60    	ldX	queue
0151   78FA             lEmptyQueue:
0152   78FA A7 00       	staA	0, X
0153   78FC 08          	inX
0154   78FD 8C 00 6D    	cpX	queueEnd
0155   7900 26 F8       	bne	lEmptyQueue
0156   7902             	
0157   7902 86 00       	ldaA	0
0158   7904 97 54       	staA	queueHead + 0
0159   7906 97 56       	staA	queueTail + 0
0160   7908 86 60       	ldaA	queue
0161   790A 97 55       	staA	queueHead + 1
0162   790C 97 57       	staA	queueTail + 1
0163   790E             	
0164   790E             ; test numbers
0165   790E 86 20       	lampOn(6,8) ; game over
0165   7910 9A 0F       
0165   7912 97 0F       
0166   7914             
0167   7914             	
0168   7914 BD 7D A2    	jsr resetScores
0169   7917             	
0170   7917             ; setup complete
0171   7917 0E          	clI		; enable timer interrupt
0172   7918             	
0173   7918             	
0174   7918             end:
0175   7918 B6 01 6B    	ldaA	>state
0176   791B 85 04       	bitA	100b
0177   791D             	ifne
0177   791D             
0177   791D 27 FE       
0178   791F             		; dec wait timers
0179   791F CE 00 7F    		ldX	waitLeft - 1
0180   7922             decWaitTimers:
0181   7922 08          		inX
0182   7923 A6 00       		ldaA	0, X
0183   7925             		ifne
0183   7925             
0183   7925 27 FE       
0184   7927 4A          			decA
0185   7928 A7 00       			staA	0, X
0186   792A             			ifeq
0186   792A             
0186   792A 26 FE       
0187   792C A6 08       				ldaA	waitMsb - waitLeft, X
0188   792E 97 58       				staA	tempQ
0189   7930 A6 10       				ldaA	waitLsb - waitLeft, X
0190   7932 97 59       				staA	tempQ + 1
0191   7934 E6 18       				ldaB	waitReg - waitLeft, X
0192   7936 DF 2C       				stX	forkX
0193   7938 DE 58       				ldX	>tempQ
0194   793A 6E 00       				jmp	0, X
0195   793C             			endif
0195   793C             
0195   793C             
0195   793C             
0195   793C             
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0195   792B             
0195   792B 10          
0195   792C             
0195   792C             
0195   792C~            			endif
0195   792C~            			endif
0195   792C~            			endif
0195   792C             
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0196   793C             		endif
0196   793C             
0196   793C             
0196   793C             
0196   793C             
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0196   7926             
0196   7926 15          
0196   7927             
0196   7927             
0196   7927~            		endif
0196   7927~            		endif
0196   7927~            		endif
0196   7927             
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0197   793C             afterFork:
0198   793C 8C 00 87    		cpX	waitLeftEnd
0199   793F 26 E1       		bne	decWaitTimers
0200   7941             		
0201   7941             		
0202   7941 7A 00 A9    		dec	dropResetTimer
0203   7944             		ifmi
0203   7944             
0203   7944 2A FE       
0204   7946 7C 00 A9    			inc	dropResetTimer
0205   7949             		endif
0205   7949             
0205   7949             
0205   7949             
0205   7949             
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0205   7945             
0205   7945 03          
0205   7946             
0205   7946             
0205   7946~            		endif
0205   7946~            		endif
0205   7946~            		endif
0205   7946             
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0206   7949             		
0207   7949 B6 01 6B    		ldaA	>state		; clear strobe reset bit
0208   794C 84 FB       		andA	11111011b
0209   794E B7 01 6B    		staA	state
0210   7951             	endif
0210   7951             
0210   7951             
0210   7951             
0210   7951             
0210   7951             
0210   7951~            	endif
0210   7951~            	endif
0210   7951             
0210   7951~            	endif
0210   7951~            	endif
0210   7951             
0210   791E             
0210   791E 32          
0210   791F             
0210   791F             
0210   791F~            	endif
0210   791F~            	endif
0210   791F~            	endif
0210   791F             
0210   7951             
0210   7951~            	endif
0210   7951~            	endif
0210   7951             
0211   7951             
0212   7951             		
0213   7951             ; pop queue
0214   7951 D6 57       	ldaB	>queueTail + 1
0215   7953 D1 55       	cmpB	>queueHead + 1
0216   7955             	ifeq
0216   7955             
0216   7955 26 FE       
0217   7957 7E 79 F2    		jmp skipQueue
0218   795A             	endif
0218   795A             
0218   795A             
0218   795A             
0218   795A             
0218   795A             
0218   795A~            	endif
0218   795A~            	endif
0218   795A             
0218   795A~            	endif
0218   795A~            	endif
0218   795A             
0218   7956             
0218   7956 03          
0218   7957             
0218   7957             
0218   7957~            	endif
0218   7957~            	endif
0218   7957~            	endif
0218   7957             
0218   795A             
0218   795A~            	endif
0218   795A~            	endif
0218   795A             
0219   795A             	
0220   795A DE 54       	ldX	>queueHead
0221   795C A6 00       	ldaA	0, X	; A now contains the first queue item
0222   795E             	
0223   795E 16          	tAB
0224   795F C4 3F       	andB	00111111b ; B = callback index
0225   7961             	
0226   7961 D7 59       	staB	tempQ + 1
0227   7963 C6 60       	ldaB	callbackTable >> 8
0228   7965 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0229   7967 DE 58       	ldX	>tempQ
0230   7969             	
0231   7969 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0232   796B C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0233   796D             	ifne ; if closure only
0233   796D             
0233   796D 27 FE       
0234   796F 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0235   7971 26 62       		bne	skipEvent
0236   7973             	endif
0236   7973             
0236   7973             
0236   7973             
0236   7973             
0236   7973             
0236   7973~            	endif
0236   7973~            	endif
0236   7973             
0236   7973~            	endif
0236   7973~            	endif
0236   7973             
0236   796E             
0236   796E 04          
0236   796F             
0236   796F             
0236   796F~            	endif
0236   796F~            	endif
0236   796F~            	endif
0236   796F             
0236   7973             
0236   7973~            	endif
0236   7973~            	endif
0236   7973             
0237   7973             	
0238   7973 C5 40       	bitB	01000000b ; B.7 = active in game over
0239   7975             	ifeq 	 ; not active in game over
0239   7975             
0239   7975 26 FE       
0240   7977 D6 0F       		ldaB	>lc(8)	; gameover mask
0241   7979 C5 20       		bitB	lr(6)
0242   797B 26 58       		bne	skipEvent
0243   797D D6 0F       		ldaB	>lc(8) ; tilt bit
0244   797F C5 10       		bitB	lr(5)
0245   7981 26 52       		bne	skipEvent
0246   7983             	endif
0246   7983             
0246   7983             
0246   7983             
0246   7983             
0246   7983             
0246   7983~            	endif
0246   7983~            	endif
0246   7983             
0246   7983~            	endif
0246   7983~            	endif
0246   7983             
0246   7976             
0246   7976 0C          
0246   7977             
0246   7977             
0246   7977~            	endif
0246   7977~            	endif
0246   7977~            	endif
0246   7977             
0246   7983             
0246   7983~            	endif
0246   7983~            	endif
0246   7983             
0247   7983             	
0248   7983             	; checked passed, do callback
0249   7983 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0250   7986 DE 58       	ldX	>tempQ
0251   7988 EE 00       	ldX	0, X
0252   798A 6E 00       	jmp	0, X
0253   798C             	; everything trashed
0254   798C             afterQueueEvent:
0255   798C BD 60 C3    	jsr 	bonusLights
0256   798F             	
0257   798F             	; update last switch
0258   798F 96 59       	ldaA	> tempQ + 1
0259   7991 44          	lsrA 	; got doubled earlier
0260   7992 97 A8       	staA	lastSwitch
0261   7994             
0262   7994 86 02       	ldaA	10b ; no validate bit
0263   7996 B5 01 6B    	bitA	>state
0264   7999             	ifeq ; validate pf
0264   7999             
0264   7999 26 FE       
0265   799B             		; check if playfield invalid
0266   799B 86 0F       		ldaA	00001111b ; player up
0267   799D 95 A7       		bitA	>flc(8)
0268   799F             		ifne ; any flashing -> pf invalid
0268   799F             
0268   799F 27 FE       
0269   79A1 43          			comA	; turn off flashing
0270   79A2 94 A7       			andA	>flc(8)
0271   79A4 97 A7       			staA	flc(8)
0272   79A6             			
0273   79A6 86 01       			ldaA	lr(1) ; shoot again pf flashing
0274   79A8 95 A2       			bitA	>flc(3)
0275   79AA             			ifne
0275   79AA             
0275   79AA 27 FE       
0276   79AC             				; turn off ball save
0277   79AC 86 FE       				flashOff(1,3)
0277   79AE 94 A2       
0277   79B0 97 A2       
0278   79B2 86 40       				ldaA	lr(7) ; shoot again backbox
0279   79B4 95 0F       				bitA	>lc(8)
0280   79B6             				ifeq
0280   79B6             
0280   79B6 26 FE       
0281   79B8 86 FE       					lampOff(1,3) ; shoot again pf
0281   79BA 94 0A       
0281   79BC 97 0A       
0282   79BE             				endif
0282   79BE             
0282   79BE             
0282   79BE             
0282   79BE             
0282   79BE             
0282   79BE~            				endif
0282   79BE~            				endif
0282   79BE             
0282   79BE~            				endif
0282   79BE~            				endif
0282   79BE             
0282   79B7             
0282   79B7 06          
0282   79B8             
0282   79B8             
0282   79B8~            				endif
0282   79B8~            				endif
0282   79B8~            				endif
0282   79B8             
0282   79BE             
0282   79BE~            				endif
0282   79BE~            				endif
0282   79BE             
0283   79BE             			else
0283   79BE             
0283   79BE             
0283   79BE             
0283   79BE             
0283   79AB             
0283   79AB             
0283   79AB             
0283   79AB~            			else
0283   79AB~            			else
0283   79AB~            			else
0283   79AB~            			else
0283   79AB             
0283   79AB~            			else
0283   79AB~            			else
0283   79AB~            			else
0283   79AB~            			else
0283   79AB             
0283   79AB             
0283   79AB 14          
0283   79BE             
0283   79BE 20 FE       
0283   79C0             
0283   79C0             
0283   79C0             
0283   79C0~            			else
0283   79C0~            			else
0283   79C0~            			else
0283   79C0~            			else
0283   79C0~            			else
0283   79C0             
0283   79C0~            			else
0283   79C0~            			else
0283   79C0             
0283   79C0~            			else
0283   79C0~            			else
0283   79C0             
0284   79C0 86 FE       				lampOff(1,3) ; shoot again
0284   79C2 94 0A       
0284   79C4 97 0A       
0285   79C6 86 BF       				lampOff(7,8)
0285   79C8 94 0F       
0285   79CA 97 0F       
0286   79CC             			endif
0286   79CC             
0286   79CC             
0286   79CC             
0286   79CC             
0286   79CC             
0286   79CC~            			endif
0286   79CC~            			endif
0286   79CC             
0286   79CC~            			endif
0286   79CC~            			endif
0286   79CC             
0286   79BF             
0286   79BF 0C          
0286   79C0             
0286   79C0             
0286   79C0~            			endif
0286   79C0~            			endif
0286   79C0~            			endif
0286   79C0             
0286   79CC             
0286   79CC~            			endif
0286   79CC~            			endif
0286   79CC             
0287   79CC             		endif
0287   79CC             
0287   79CC             
0287   79CC             
0287   79CC             
0287   79CC             
0287   79CC~            		endif
0287   79CC~            		endif
0287   79CC             
0287   79CC~            		endif
0287   79CC~            		endif
0287   79CC             
0287   79A0             
0287   79A0 2B          
0287   79A1             
0287   79A1             
0287   79A1~            		endif
0287   79A1~            		endif
0287   79A1~            		endif
0287   79A1             
0287   79CC             
0287   79CC~            		endif
0287   79CC~            		endif
0287   79CC             
0288   79CC             	else
0288   79CC             
0288   79CC             
0288   79CC             
0288   79CC             
0288   799A             
0288   799A             
0288   799A             
0288   799A~            	else
0288   799A~            	else
0288   799A~            	else
0288   799A~            	else
0288   799A             
0288   799A~            	else
0288   799A~            	else
0288   799A~            	else
0288   799A~            	else
0288   799A             
0288   799A             
0288   799A 33          
0288   79CC             
0288   79CC 20 FE       
0288   79CE             
0288   79CE             
0288   79CE             
0288   79CE~            	else
0288   79CE~            	else
0288   79CE~            	else
0288   79CE~            	else
0288   79CE~            	else
0288   79CE             
0288   79CE~            	else
0288   79CE~            	else
0288   79CE             
0288   79CE~            	else
0288   79CE~            	else
0288   79CE             
0289   79CE             		; clear don't validate bit
0290   79CE 43          		comA
0291   79CF B4 01 6B    		andA	>state
0292   79D2 B7 01 6B    		staA	state
0293   79D5             	endif
0293   79D5             
0293   79D5             
0293   79D5             
0293   79D5             
0293   79D5             
0293   79D5~            	endif
0293   79D5~            	endif
0293   79D5             
0293   79D5~            	endif
0293   79D5~            	endif
0293   79D5             
0293   79CD             
0293   79CD 07          
0293   79CE             
0293   79CE             
0293   79CE~            	endif
0293   79CE~            	endif
0293   79CE~            	endif
0293   79CE             
0293   79D5             
0293   79D5~            	endif
0293   79D5~            	endif
0293   79D5             
0294   79D5             	
0295   79D5             skipEvent:
0296   79D5 B6 01 6B    	ldaA	>state
0297   79D8 85 04       	bitA	100b
0298   79DA             	ifeq	; don't process queue if still finishing timers
0298   79DA             
0298   79DA 26 FE       
0299   79DC C6 6D       		ldaB	queueEnd
0300   79DE D1 55       		cmpB	>queueHead + 1
0301   79E0             		ifeq
0301   79E0             
0301   79E0 26 FE       
0302   79E2 C6 60       			ldaB	queue
0303   79E4 D7 55       			staB	queueHead + 1
0304   79E6             		else
0304   79E6             
0304   79E6             
0304   79E6             
0304   79E6             
0304   79E1             
0304   79E1             
0304   79E1             
0304   79E1~            		else
0304   79E1~            		else
0304   79E1~            		else
0304   79E1~            		else
0304   79E1             
0304   79E1~            		else
0304   79E1~            		else
0304   79E1~            		else
0304   79E1~            		else
0304   79E1             
0304   79E1             
0304   79E1 06          
0304   79E6             
0304   79E6 20 FE       
0304   79E8             
0304   79E8             
0304   79E8             
0304   79E8~            		else
0304   79E8~            		else
0304   79E8~            		else
0304   79E8~            		else
0304   79E8~            		else
0304   79E8             
0304   79E8~            		else
0304   79E8~            		else
0304   79E8             
0304   79E8~            		else
0304   79E8~            		else
0304   79E8             
0305   79E8 7C 00 55    			inc	queueHead + 1
0306   79EB             		endif
0306   79EB             
0306   79EB             
0306   79EB             
0306   79EB             
0306   79EB             
0306   79EB~            		endif
0306   79EB~            		endif
0306   79EB             
0306   79EB~            		endif
0306   79EB~            		endif
0306   79EB             
0306   79E7             
0306   79E7 03          
0306   79E8             
0306   79E8             
0306   79E8~            		endif
0306   79E8~            		endif
0306   79E8~            		endif
0306   79E8             
0306   79EB             
0306   79EB~            		endif
0306   79EB~            		endif
0306   79EB             
0307   79EB             	else
0307   79EB             
0307   79EB             
0307   79EB             
0307   79EB             
0307   79DB             
0307   79DB             
0307   79DB             
0307   79DB~            	else
0307   79DB~            	else
0307   79DB~            	else
0307   79DB~            	else
0307   79DB             
0307   79DB~            	else
0307   79DB~            	else
0307   79DB~            	else
0307   79DB~            	else
0307   79DB             
0307   79DB             
0307   79DB 11          
0307   79EB             
0307   79EB 20 FE       
0307   79ED             
0307   79ED             
0307   79ED             
0307   79ED~            	else
0307   79ED~            	else
0307   79ED~            	else
0307   79ED~            	else
0307   79ED~            	else
0307   79ED             
0307   79ED~            	else
0307   79ED~            	else
0307   79ED             
0307   79ED~            	else
0307   79ED~            	else
0307   79ED             
0308   79ED DE 2C       		ldX	>forkX
0309   79EF 7E 79 3C    		jmp	afterFork
0310   79F2             	endif
0310   79F2             
0310   79F2             
0310   79F2             
0310   79F2             
0310   79F2             
0310   79F2~            	endif
0310   79F2~            	endif
0310   79F2             
0310   79F2~            	endif
0310   79F2~            	endif
0310   79F2             
0310   79EC             
0310   79EC 05          
0310   79ED             
0310   79ED             
0310   79ED~            	endif
0310   79ED~            	endif
0310   79ED~            	endif
0310   79ED             
0310   79F2             
0310   79F2~            	endif
0310   79F2~            	endif
0310   79F2             
0311   79F2             				
0312   79F2             skipQueue:
0313   79F2             				
0314   79F2             	
0315   79F2             				
0316   79F2 7E 79 18    	jmp		end
0317   79F5 00 00       	.dw 0
0318   79F7 00 00       	.dw 0
0319   79F9 00 00       	.dw 0
0320   79FB 00 00       	.dw 0
0321   79FD 00 00       	.dw 0
0322   79FF             		
0323   79FF             interrupt:	
0324   79FF 7C 00 02    	inc	counter
0325   7A02 86 00       	ldaA	0
0326   7A04 91 02       	cmpA	>counter
0327   7A06 26 52       	bne	counterHandled
0328   7A08             	
0329   7A08             	; attract mode
0330   7A08 86 20       	ldaA	lr(6) ; gameover
0331   7A0A 95 0F       		bitA	> lc(8)
0332   7A0C             		ifne
0332   7A0C             
0332   7A0C 27 FE       
0333   7A0E DE 2A       		ldX	>attractX
0334   7A10 A6 00       		ldaA	0, X
0335   7A12 97 09       		staA	lc(2)
0336   7A14 A6 01       		ldaA	1, X
0337   7A16 97 0A       		staA	lc(3)
0338   7A18 A6 02       		ldaA	2, X
0339   7A1A 97 0B       		staA	lc(4)
0340   7A1C A6 03       		ldaA	3, X
0341   7A1E 97 0C       		staA	lc(5)
0342   7A20 A6 04       		ldaA	4, X
0343   7A22 97 0D       		staA	lc(6)
0344   7A24 96 2B       		ldaA	>attractX + 1
0345   7A26 8B 05       		addA	5
0346   7A28 81 E9       		cmpA	attractEnd&$FF
0347   7A2A             		ifeq
0347   7A2A             
0347   7A2A 26 FE       
0348   7A2C 86 C1       			ldaA	attractStart&$FF
0349   7A2E             		endif
0349   7A2E             
0349   7A2E             
0349   7A2E             
0349   7A2E             
0349   7A2E             
0349   7A2E~            		endif
0349   7A2E~            		endif
0349   7A2E             
0349   7A2E~            		endif
0349   7A2E~            		endif
0349   7A2E             
0349   7A2B             
0349   7A2B 02          
0349   7A2C             
0349   7A2C             
0349   7A2C~            		endif
0349   7A2C~            		endif
0349   7A2C~            		endif
0349   7A2C             
0349   7A2E             
0349   7A2E~            		endif
0349   7A2E~            		endif
0349   7A2E             
0350   7A2E 97 2B       		staA	attractX + 1
0351   7A30             	endif
0351   7A30             
0351   7A30             
0351   7A30             
0351   7A30             
0351   7A30             
0351   7A30~            	endif
0351   7A30~            	endif
0351   7A30             
0351   7A30~            	endif
0351   7A30~            	endif
0351   7A30             
0351   7A0D             
0351   7A0D 22          
0351   7A0E             
0351   7A0E             
0351   7A0E~            	endif
0351   7A0E~            	endif
0351   7A0E~            	endif
0351   7A0E             
0351   7A30             
0351   7A30~            	endif
0351   7A30~            	endif
0351   7A30             
0352   7A30             	
0353   7A30 7C 00 03    	inc 	counter2
0354   7A33 86 08       	ldaA	8
0355   7A35 91 03       	cmpA	>counter2
0356   7A37 26 21       	bne	counterHandled
0357   7A39             	
0358   7A39 86 0A       	ldaA	10
0359   7A3B 91 B0       	cmpA	>p_Bonus
0360   7A3D             	ifeq
0360   7A3D             
0360   7A3D 26 FE       
0361   7A3F BD 7E 16    		jsr advanceBonus
0362   7A42             	endif
0362   7A42             
0362   7A42             
0362   7A42             
0362   7A42             
0362   7A42             
0362   7A42~            	endif
0362   7A42~            	endif
0362   7A42             
0362   7A42~            	endif
0362   7A42~            	endif
0362   7A42             
0362   7A3E             
0362   7A3E 03          
0362   7A3F             
0362   7A3F             
0362   7A3F~            	endif
0362   7A3F~            	endif
0362   7A3F~            	endif
0362   7A3F             
0362   7A42             
0362   7A42~            	endif
0362   7A42~            	endif
0362   7A42             
0363   7A42             	
0364   7A42 86 00       	ldaA	0
0365   7A44 97 03       	staA	counter2
0366   7A46 86 77       	ldaA	01110111b
0367   7A48 91 7E       	cmpA	>displayBcd1 + 14
0368   7A4A 27 08       	beq	on
0369   7A4C             	
0370   7A4C 86 F0       	ldaA	$F0
0371   7A4E             	;staA	lampRow1
0372   7A4E 86 77       	ldaA	01110111b
0373   7A50 97 7E       	staA	displayBcd1	 + 14
0374   7A52 20 06       	bra	counterHandled
0375   7A54             on:
0376   7A54 86 0F       	ldaA	$0F
0377   7A56             	;staA	lampRow1
0378   7A56 86 33       	ldaA	00110011b
0379   7A58 97 7E       	staA	displayBcd1	 + 14
0380   7A5A             
0381   7A5A             counterHandled:
0382   7A5A             ; move switch column
0383   7A5A 96 07       	ldaA	>strobe
0384   7A5C B7 30 02    	staA	switchStrobe
0385   7A5F             	
0386   7A5F             ; update display 
0387   7A5F             	
0388   7A5F 96 BF       	ldaA	>$BF
0389   7A61 97 7F       	staA	displayBcd1 + 15
0390   7A63 96 6F       	ldaA	>$6F
0391   7A65 97 76       	staA	displayBcd1 + 6
0392   7A67             	
0393   7A67 DE 50       	ldX	>curCol
0394   7A69 B6 01 6A    	ldaA	>displayCol
0395   7A6C 84 0F       	andA	1111b
0396   7A6E C6 FF       	ldaB 	$FF
0397   7A70 F7 28 02    	staB	displayBcd
0398   7A73 B7 28 00    	staA	displayStrobe
0399   7A76 85 08       	bitA	00001000b
0400   7A78             	ifeq
0400   7A78             
0400   7A78 26 FE       
0401   7A7A E6 70       		ldaB	displayBcd1, X
0402   7A7C             	else
0402   7A7C             
0402   7A7C             
0402   7A7C             
0402   7A7C             
0402   7A79             
0402   7A79             
0402   7A79             
0402   7A79~            	else
0402   7A79~            	else
0402   7A79~            	else
0402   7A79~            	else
0402   7A79             
0402   7A79~            	else
0402   7A79~            	else
0402   7A79~            	else
0402   7A79~            	else
0402   7A79             
0402   7A79             
0402   7A79 04          
0402   7A7C             
0402   7A7C 20 FE       
0402   7A7E             
0402   7A7E             
0402   7A7E             
0402   7A7E~            	else
0402   7A7E~            	else
0402   7A7E~            	else
0402   7A7E~            	else
0402   7A7E~            	else
0402   7A7E             
0402   7A7E~            	else
0402   7A7E~            	else
0402   7A7E             
0402   7A7E~            	else
0402   7A7E~            	else
0402   7A7E             
0403   7A7E E6 78       		ldaB	displayBcd1 + 8, X
0404   7A80             	endif
0404   7A80             
0404   7A80             
0404   7A80             
0404   7A80             
0404   7A80             
0404   7A80~            	endif
0404   7A80~            	endif
0404   7A80             
0404   7A80~            	endif
0404   7A80~            	endif
0404   7A80             
0404   7A7D             
0404   7A7D 02          
0404   7A7E             
0404   7A7E             
0404   7A7E~            	endif
0404   7A7E~            	endif
0404   7A7E~            	endif
0404   7A7E             
0404   7A80             
0404   7A80~            	endif
0404   7A80~            	endif
0404   7A80             
0405   7A80 F7 28 02    	staB	displayBcd
0406   7A83             	
0407   7A83             ; read switches
0408   7A83             	;jmp updateLamps
0409   7A83 DE 50       	ldX	>curCol
0410   7A85 B6 30 00    	ldaA	>switchRow
0411   7A88 16          	tab
0412   7A89 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0413   7A8B             	
0414   7A8B D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0415   7A8D D7 01       	staB	temp + 1 			; temp = switch / 2
0416   7A8F D7 53       	staB	tempX + 1			; tempX = cRAM
0417   7A91 C6 60       	ldaB	callbackTable >> 8
0418   7A93 D7 00       	staB	temp
0419   7A95 C6 01       	ldaB	cRAM >> 8
0420   7A97 D7 52       	staB	tempX
0421   7A99             	
0422   7A99 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0423   7A9B             	
0424   7A9B             	; temp now contains the beginning of the row in the callbackTable
0425   7A9B             swNext:
0426   7A9B 85 01       	bitA	00000001b	 ; Z set if switch not different
0427   7A9D             	ifne		; if bit set, switch different
0427   7A9D             
0427   7A9D 27 FE       
0428   7A9F 36          		pshA ; store changed switches left
0429   7AA0 DE 52       		ldX	>tempX
0430   7AA2             checkSettled:
0431   7AA2 A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0432   7AA4 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0433   7AA6 27 35       		beq 	notSettled; A=0 -> settled
0434   7AA8             		; else A > 0 -> settling
0435   7AA8 86 18       			ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0436   7AAA             				; but checking 'multiple of 8' would miss 7/8 switch
0437   7AAA             				; columns completely since they're in sync
0438   7AAA             				; so instead the lowest bits are empty (so that it'll
0439   7AAA             				; get all switch cols) and instead it skips 7/8 groups 
0440   7AAA             				; of 8 IRQs
0441   7AAA 95 02       			bitA	>counter
0442   7AAC 26 49       			bne	settledEnd
0443   7AAE A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0444   7AB0 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0445   7AB2 4A          			decA
0446   7AB3 A7 00       			staA	0, X	; sets Z if now A = 0
0447   7AB5             			ifeq ; A=0 -> now settled, fire event
0447   7AB5             
0447   7AB5 26 FE       
0448   7AB7             settled:		
0449   7AB7 DE 50       				ldX	>curCol
0450   7AB9 17          				tBA	; A now the bit in row
0451   7ABA A8 20       				eorA	switchRow1, X ; toggle bit in row
0452   7ABC A7 20       				staA	switchRow1, X ; A now state of row
0453   7ABE             				
0454   7ABE F5 30 00    				bitB	>switchRow
0455   7AC1             				ifne ; switch now on
0455   7AC1             
0455   7AC1 27 FE       
0456   7AC3 86 40       					ldaA	01000000b
0457   7AC5             				else
0457   7AC5             
0457   7AC5             
0457   7AC5             
0457   7AC5             
0457   7AC2             
0457   7AC2             
0457   7AC2             
0457   7AC2~            				else
0457   7AC2~            				else
0457   7AC2~            				else
0457   7AC2~            				else
0457   7AC2             
0457   7AC2~            				else
0457   7AC2~            				else
0457   7AC2~            				else
0457   7AC2~            				else
0457   7AC2             
0457   7AC2             
0457   7AC2 04          
0457   7AC5             
0457   7AC5 20 FE       
0457   7AC7             
0457   7AC7             
0457   7AC7             
0457   7AC7~            				else
0457   7AC7~            				else
0457   7AC7~            				else
0457   7AC7~            				else
0457   7AC7~            				else
0457   7AC7             
0457   7AC7~            				else
0457   7AC7~            				else
0457   7AC7             
0457   7AC7~            				else
0457   7AC7~            				else
0457   7AC7             
0458   7AC7 86 C0       					ldaA	11000000b
0459   7AC9             				endif
0459   7AC9             
0459   7AC9             
0459   7AC9             
0459   7AC9             
0459   7AC9             
0459   7AC9~            				endif
0459   7AC9~            				endif
0459   7AC9             
0459   7AC9~            				endif
0459   7AC9~            				endif
0459   7AC9             
0459   7AC6             
0459   7AC6 02          
0459   7AC7             
0459   7AC7             
0459   7AC7~            				endif
0459   7AC7~            				endif
0459   7AC7~            				endif
0459   7AC7             
0459   7AC9             
0459   7AC9~            				endif
0459   7AC9~            				endif
0459   7AC9             
0460   7AC9 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0461   7ACB             				
0462   7ACB             				; store event
0463   7ACB DE 56       				ldX	>queueTail
0464   7ACD A7 00       				staA	0, X
0465   7ACF 7C 00 57    				inc	queueTail + 1
0466   7AD2             				
0467   7AD2             				; wrap queueTail if necessary
0468   7AD2 8C 00 6D    				cpX	queueEnd 
0469   7AD5             				ifeq
0469   7AD5             
0469   7AD5 26 FE       
0470   7AD7 86 60       					ldaA	queue 
0471   7AD9 97 57       					staA	queueTail + 1
0472   7ADB             				endif
0472   7ADB             
0472   7ADB             
0472   7ADB             
0472   7ADB             
0472   7ADB             
0472   7ADB~            				endif
0472   7ADB~            				endif
0472   7ADB             
0472   7ADB~            				endif
0472   7ADB~            				endif
0472   7ADB             
0472   7AD6             
0472   7AD6 04          
0472   7AD7             
0472   7AD7             
0472   7AD7~            				endif
0472   7AD7~            				endif
0472   7AD7~            				endif
0472   7AD7             
0472   7ADB             
0472   7ADB~            				endif
0472   7ADB~            				endif
0472   7ADB             
0473   7ADB             			endif
0473   7ADB             
0473   7ADB             
0473   7ADB             
0473   7ADB             
0473   7ADB             
0473   7ADB~            			endif
0473   7ADB~            			endif
0473   7ADB             
0473   7ADB~            			endif
0473   7ADB~            			endif
0473   7ADB             
0473   7AB6             
0473   7AB6 24          
0473   7AB7             
0473   7AB7             
0473   7AB7~            			endif
0473   7AB7~            			endif
0473   7AB7~            			endif
0473   7AB7             
0473   7ADB             
0473   7ADB~            			endif
0473   7ADB~            			endif
0473   7ADB             
0474   7ADB 20 1A       		bra settledEnd
0475   7ADD             notSettled: ; =0 -> was settled, so now it's not
0476   7ADD             			; get the settle time
0477   7ADD 96 53       			ldaA	>tempX + 1
0478   7ADF 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0479   7AE1 DE 00       			ldX	>temp
0480   7AE3             			
0481   7AE3             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0482   7AE3 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0483   7AE5             			
0484   7AE5             			; need to get correct 3 bits from switch settings
0485   7AE5 F5 30 00    			bitB	>switchRow
0486   7AE8             			ifne ; switch just turned on
0486   7AE8             
0486   7AE8 27 FE       
0487   7AEA 44          				lsrA
0488   7AEB 44          				lsrA
0489   7AEC             			else
0489   7AEC             
0489   7AEC             
0489   7AEC             
0489   7AEC             
0489   7AE9             
0489   7AE9             
0489   7AE9             
0489   7AE9~            			else
0489   7AE9~            			else
0489   7AE9~            			else
0489   7AE9~            			else
0489   7AE9             
0489   7AE9~            			else
0489   7AE9~            			else
0489   7AE9~            			else
0489   7AE9~            			else
0489   7AE9             
0489   7AE9             
0489   7AE9 04          
0489   7AEC             
0489   7AEC 20 FE       
0489   7AEE             
0489   7AEE             
0489   7AEE             
0489   7AEE~            			else
0489   7AEE~            			else
0489   7AEE~            			else
0489   7AEE~            			else
0489   7AEE~            			else
0489   7AEE             
0489   7AEE~            			else
0489   7AEE~            			else
0489   7AEE             
0489   7AEE~            			else
0489   7AEE~            			else
0489   7AEE             
0490   7AEE 48          				aslA
0491   7AEF             			endif
0491   7AEF             
0491   7AEF             
0491   7AEF             
0491   7AEF             
0491   7AEF             
0491   7AEF~            			endif
0491   7AEF~            			endif
0491   7AEF             
0491   7AEF~            			endif
0491   7AEF~            			endif
0491   7AEF             
0491   7AED             
0491   7AED 01          
0491   7AEE             
0491   7AEE             
0491   7AEE~            			endif
0491   7AEE~            			endif
0491   7AEE~            			endif
0491   7AEE             
0491   7AEF             
0491   7AEF~            			endif
0491   7AEF~            			endif
0491   7AEF             
0492   7AEF 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0493   7AF1             						
0494   7AF1 DE 52       			ldX	>tempX
0495   7AF3 A7 00       			staA	0, X		; start settling	
0496   7AF5 27 C0       			beq	settled		; quick out for 0 settle
0497   7AF7             settledEnd:
0498   7AF7             			
0499   7AF7 32          		pulA
0500   7AF8             	endif
0500   7AF8             
0500   7AF8             
0500   7AF8             
0500   7AF8             
0500   7AF8             
0500   7AF8~            	endif
0500   7AF8~            	endif
0500   7AF8             
0500   7AF8~            	endif
0500   7AF8~            	endif
0500   7AF8             
0500   7A9E             
0500   7A9E 59          
0500   7A9F             
0500   7A9F             
0500   7A9F~            	endif
0500   7A9F~            	endif
0500   7A9F~            	endif
0500   7A9F             
0500   7AF8             
0500   7AF8~            	endif
0500   7AF8~            	endif
0500   7AF8             
0501   7AF8 7C 00 53    	inc tempX + 1
0502   7AFB 58          	aslB
0503   7AFC 44          	lsrA			; pop lowest bit off, set Z if A is empty
0504   7AFD 26 9C       	bne		swNext 	; more 'switched' bits, keep processing 
0505   7AFF             	
0506   7AFF             	
0507   7AFF             ; update lamps
0508   7AFF             updateLamps:
0509   7AFF             	;jmp updateStrobe
0510   7AFF             
0511   7AFF DE 50       	ldX	>curCol
0512   7B01             	
0513   7B01 86 FF       	ldaA	$FF	;lamp row is inverted
0514   7B03 B7 24 00    	staA	lampCol
0515   7B06 96 07       	ldaA	>strobe
0516   7B08 B7 24 02    	staA	lampStrobe
0517   7B0B             	
0518   7B0B D6 02       	ldaB	>counter
0519   7B0D A6 08       	ldaA	lampCol1, X
0520   7B0F C5 80       	bitB	10000000b 
0521   7B11             	ifeq
0521   7B11             
0521   7B11 26 FE       
0522   7B13 A8 A0       		eorA	flashLampCol1, X
0523   7B15 A4 08       		andA	lampCol1, X
0524   7B17             	endif
0524   7B17             
0524   7B17             
0524   7B17             
0524   7B17             
0524   7B17             
0524   7B17~            	endif
0524   7B17~            	endif
0524   7B17             
0524   7B17~            	endif
0524   7B17~            	endif
0524   7B17             
0524   7B12             
0524   7B12 04          
0524   7B13             
0524   7B13             
0524   7B13~            	endif
0524   7B13~            	endif
0524   7B13~            	endif
0524   7B13             
0524   7B17             
0524   7B17~            	endif
0524   7B17~            	endif
0524   7B17             
0525   7B17 43          	comA	; inverted
0526   7B18             	
0527   7B18 B7 24 00    	staA	lampCol
0528   7B1B 86 00       	ldaA	00
0529   7B1D             
0530   7B1D             ; update solenoids
0531   7B1D             	; if a solenoid is set to <254, --
0532   7B1D             	; if =255, off, otherwise on
0533   7B1D             	; else leave it at 254
0534   7B1D             	
0535   7B1D 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0536   7B20 86 FE       	ldaA	254
0537   7B22 DE 50       	ldX	>curCol
0538   7B24             	; update solenoid in current 'column' (1-8) 
0539   7B24 A1 40       	cmpA	solenoid1 - cRAM, X
0540   7B26             	ifge 	; solenoid <=254, turn on
0540   7B26             
0540   7B26 25 FE       
0541   7B28             		ifgt	; solenoid < 254, decrement
0541   7B28             
0541   7B28 23 FE       
0542   7B2A 6A 40       			dec	solenoid1 - cRAM, X
0543   7B2C             		endif
0543   7B2C             
0543   7B2C             
0543   7B2C             
0543   7B2C             
0543   7B2C             
0543   7B2C~            		endif
0543   7B2C~            		endif
0543   7B2C             
0543   7B2C~            		endif
0543   7B2C~            		endif
0543   7B2C             
0543   7B29             
0543   7B29 02          
0543   7B2A             
0543   7B2A             
0543   7B2A~            		endif
0543   7B2A~            		endif
0543   7B2A~            		endif
0543   7B2A             
0543   7B2C             
0543   7B2C~            		endif
0543   7B2C~            		endif
0543   7B2C             
0544   7B2C 0D          		sec
0545   7B2D             	else
0545   7B2D             
0545   7B2D             
0545   7B2D             
0545   7B2D             
0545   7B27             
0545   7B27             
0545   7B27             
0545   7B27~            	else
0545   7B27~            	else
0545   7B27~            	else
0545   7B27~            	else
0545   7B27             
0545   7B27~            	else
0545   7B27~            	else
0545   7B27~            	else
0545   7B27~            	else
0545   7B27             
0545   7B27             
0545   7B27 07          
0545   7B2D             
0545   7B2D 20 FE       
0545   7B2F             
0545   7B2F             
0545   7B2F             
0545   7B2F~            	else
0545   7B2F~            	else
0545   7B2F~            	else
0545   7B2F~            	else
0545   7B2F~            	else
0545   7B2F             
0545   7B2F~            	else
0545   7B2F~            	else
0545   7B2F             
0545   7B2F~            	else
0545   7B2F~            	else
0545   7B2F             
0546   7B2F 0C          		clc
0547   7B30             	endif
0547   7B30             
0547   7B30             
0547   7B30             
0547   7B30             
0547   7B30             
0547   7B30~            	endif
0547   7B30~            	endif
0547   7B30             
0547   7B30~            	endif
0547   7B30~            	endif
0547   7B30             
0547   7B2E             
0547   7B2E 01          
0547   7B2F             
0547   7B2F             
0547   7B2F~            	endif
0547   7B2F~            	endif
0547   7B2F~            	endif
0547   7B2F             
0547   7B30             
0547   7B30~            	endif
0547   7B30~            	endif
0547   7B30             
0548   7B30 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0549   7B33             	; repeat above for second bank
0550   7B33 A1 48       	cmpA	solenoid9 - cRAM, X
0551   7B35             	ifge 	; solenoid <=254, turn on
0551   7B35             
0551   7B35 25 FE       
0552   7B37             		ifgt	; solenoid < 254, decrement
0552   7B37             
0552   7B37 23 FE       
0553   7B39 6A 48       			dec	solenoid9 - cRAM, X
0554   7B3B             		endif
0554   7B3B             
0554   7B3B             
0554   7B3B             
0554   7B3B             
0554   7B3B             
0554   7B3B~            		endif
0554   7B3B~            		endif
0554   7B3B             
0554   7B3B~            		endif
0554   7B3B~            		endif
0554   7B3B             
0554   7B38             
0554   7B38 02          
0554   7B39             
0554   7B39             
0554   7B39~            		endif
0554   7B39~            		endif
0554   7B39~            		endif
0554   7B39             
0554   7B3B             
0554   7B3B~            		endif
0554   7B3B~            		endif
0554   7B3B             
0555   7B3B 0D          		sec
0556   7B3C             	else
0556   7B3C             
0556   7B3C             
0556   7B3C             
0556   7B3C             
0556   7B36             
0556   7B36             
0556   7B36             
0556   7B36~            	else
0556   7B36~            	else
0556   7B36~            	else
0556   7B36~            	else
0556   7B36             
0556   7B36~            	else
0556   7B36~            	else
0556   7B36~            	else
0556   7B36~            	else
0556   7B36             
0556   7B36             
0556   7B36 07          
0556   7B3C             
0556   7B3C 20 FE       
0556   7B3E             
0556   7B3E             
0556   7B3E             
0556   7B3E~            	else
0556   7B3E~            	else
0556   7B3E~            	else
0556   7B3E~            	else
0556   7B3E~            	else
0556   7B3E             
0556   7B3E~            	else
0556   7B3E~            	else
0556   7B3E             
0556   7B3E~            	else
0556   7B3E~            	else
0556   7B3E             
0557   7B3E 0C          		clc
0558   7B3F             	endif
0558   7B3F             
0558   7B3F             
0558   7B3F             
0558   7B3F             
0558   7B3F             
0558   7B3F~            	endif
0558   7B3F~            	endif
0558   7B3F             
0558   7B3F~            	endif
0558   7B3F~            	endif
0558   7B3F             
0558   7B3D             
0558   7B3D 01          
0558   7B3E             
0558   7B3E             
0558   7B3E~            	endif
0558   7B3E~            	endif
0558   7B3E~            	endif
0558   7B3E             
0558   7B3F             
0558   7B3F~            	endif
0558   7B3F~            	endif
0558   7B3F             
0559   7B3F 76 00 29    	ror		solBStatus	
0560   7B42 7A 00 50    	dec		curCol ; undo inc
0561   7B45             	
0562   7B45             ; update strobe	
0563   7B45             updateStrobe:
0564   7B45             	;ldX		curCol
0565   7B45             	;inX 	
0566   7B45 86 08       	ldaA	8 	; pitch
0567   7B47 9B 10       	addA	>curSwitchRowLsb
0568   7B49 97 10       	staA	curSwitchRowLsb
0569   7B4B 78 00 07    	asl	strobe
0570   7B4E 7C 01 6A    	inc	displayCol
0571   7B51 86 00       	ldaA	0
0572   7B53 91 07       	cmpA	>strobe ; strobe done?  reset
0573   7B55             	ifeq		
0573   7B55             
0573   7B55 26 FE       
0574   7B57 96 28       		ldaA	>solAStatus
0575   7B59 B7 22 00    		staA	solenoidA
0576   7B5C 96 29       		ldaA	>solBStatus
0577   7B5E B7 22 02    		staA	solenoidB
0578   7B61             	
0579   7B61 86 01       		ldaA	00000001b
0580   7B63 97 07       		staA	strobe
0581   7B65             		
0582   7B65             		;ldX 	#0
0583   7B65             		
0584   7B65 86 00       		ldaA	0
0585   7B67 97 50       		staA	curCol
0586   7B69 97 51       		staA	curCol + 1
0587   7B6B 97 10       		staA	curSwitchRowLsb
0588   7B6D 97 28       		staA	solAStatus
0589   7B6F 97 29       		staA	solBStatus
0590   7B71             		
0591   7B71 F6 01 6A    		ldaB	>displayCol	; reset display col only if it's > 7 
0592   7B74 CA F0       		oraB	11110000b
0593   7B76 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0594   7B78             		ifgt
0594   7B78             
0594   7B78 23 FE       
0595   7B7A B7 01 6A    			staA	displayCol
0596   7B7D             		endif
0596   7B7D             
0596   7B7D             
0596   7B7D             
0596   7B7D             
0596   7B7D             
0596   7B7D~            		endif
0596   7B7D~            		endif
0596   7B7D             
0596   7B7D~            		endif
0596   7B7D~            		endif
0596   7B7D             
0596   7B79             
0596   7B79 03          
0596   7B7A             
0596   7B7A             
0596   7B7A~            		endif
0596   7B7A~            		endif
0596   7B7A~            		endif
0596   7B7A             
0596   7B7D             
0596   7B7D~            		endif
0596   7B7D~            		endif
0596   7B7D             
0597   7B7D             	
0598   7B7D B6 01 6B    		ldaA	>state
0599   7B80 8A 04       		oraA	100b
0600   7B82 B7 01 6B    		staA	state
0601   7B85             	else
0601   7B85             
0601   7B85             
0601   7B85             
0601   7B85             
0601   7B56             
0601   7B56             
0601   7B56             
0601   7B56~            	else
0601   7B56~            	else
0601   7B56~            	else
0601   7B56~            	else
0601   7B56             
0601   7B56~            	else
0601   7B56~            	else
0601   7B56~            	else
0601   7B56~            	else
0601   7B56             
0601   7B56             
0601   7B56 30          
0601   7B85             
0601   7B85 20 FE       
0601   7B87             
0601   7B87             
0601   7B87             
0601   7B87~            	else
0601   7B87~            	else
0601   7B87~            	else
0601   7B87~            	else
0601   7B87~            	else
0601   7B87             
0601   7B87~            	else
0601   7B87~            	else
0601   7B87             
0601   7B87~            	else
0601   7B87~            	else
0601   7B87             
0602   7B87 7C 00 51    		inc	curCol + 1
0603   7B8A             	endif
0603   7B8A             
0603   7B8A             
0603   7B8A             
0603   7B8A             
0603   7B8A             
0603   7B8A~            	endif
0603   7B8A~            	endif
0603   7B8A             
0603   7B8A~            	endif
0603   7B8A~            	endif
0603   7B8A             
0603   7B86             
0603   7B86 03          
0603   7B87             
0603   7B87             
0603   7B87~            	endif
0603   7B87~            	endif
0603   7B87~            	endif
0603   7B87             
0603   7B8A             
0603   7B8A~            	endif
0603   7B8A~            	endif
0603   7B8A             
0604   7B8A             	
0605   7B8A 3B          	rti
0606   7B8B             afterInterrupt:
0607   7B8B             
0608   7FF8             pointers: 	.org $7FF8  	
0609   7FF8             	.msfirst
0610   7FF8 79 FF       	.dw interrupt			
0611   7FFA 79 FF       	.dw interrupt			
0612   7FFC 79 FF       	.dw interrupt			
0613   7FFE 78 00       	.dw main
0614   8000             	
0615   8000             	
0616   8000             	.endtasm: Number of errors = 0
