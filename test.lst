0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             attractX:		.equ RAM + $2A ; +
0041+  0000             forkX			.equ RAM + $2C ; +
0042+  0000             curCol:			.equ RAM + $50 ; +
0043+  0000             tempX:			.equ RAM + $52 ; +
0044+  0000             queueHead:		.equ RAM + $54 ; +
0045+  0000             queueTail:		.equ RAM + $56 ; +
0046+  0000             tempQ:			.equ RAM + $58 ; +
0047+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0048+  0000             queueEnd:		.equ RAM + $6D
0049+  0000             ;
0050+  0000             displayBcd1:	.equ RAM + $70
0051+  0000             displayBcd16:	.equ RAM + $7F
0052+  0000             ballCount:		.equ displayBcd1 + 7
0053+  0000             waitLeft: 		.equ RAM + $80 ; dec every 8ms
0054+  0000             waitLeftEnd:		.equ RAM + $87
0055+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0056+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0057+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0058+  0000             flashLampCol1:		.equ RAM + $A0
0059+  0000             flashLampCol8:		.equ RAM + $A7
0060+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0061+  0000             lastSwitch:		.equ RAM + $A8
0062+  0000             dropResetTimer:		.equ RAM + $A9 ; max 127
0063+  0000             dropsDown		.equ RAM + $AA
0064+  0000             p_Bonus:		.equ RAM + $B0
0065+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0066+  0000             p_DropsDown:		.equ RAM + $B5
0067+  0000             p_LampCol2:		.equ RAM + $B6 ; -> B9
0068+  0000             p_EachDropDown:		.equ RAM + $BA ; -> BD
0069+  0000             p_BonusLeft:		.equ RAM + $BE
0070+  0000             
0071+  0000             
0072+  0000             
0073+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0074+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0075+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0076+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0077+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0078+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0079+  0000             #DEFINE s(n) 		(0 + n)
0080+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0081+  0000             pA_10:			.equ pA_1m + 5
0082+  0000             pB_1m:			.equ pA_10 + 1
0083+  0000             pB_10:			.equ pB_1m + 5
0084+  0000             pC_1m:			.equ pB_10 + 1
0085+  0000             pC_10:			.equ pC_1m + 5
0086+  0000             pD_1m:			.equ pC_10 + 1
0087+  0000             pD_10:			.equ pD_1m + 5 
0088+  0000             ; 
0089+  0000             displayCol:		.equ cRAM + $6A
0090+  0000             state:			.equ cRAM + $6B	; ? | strobe reset | don't validate | ?
0091+  0000             
0092+  0000             instant:		.equ 4
0093+  0000             debounce:		.equ 1
0094+  0000             slow:			.equ 2
0095+  0000             
0096+  0000             switchSettle:	.equ cRAM + $30
0097+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 75    		cpX	displayBcd1 + 5
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 75    			cpX	displayBcd1 + 5
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7D    		cpX	displayBcd1 + 8 + 5
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7D    			cpX	displayBcd1 + 8 + 5
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0F       	ldaB	>lc(8) ; gameover
0101+  7C8C C5 20       	bitB	lr(6)
0102+  7C8E             	ifne
0102+  7C8E             
0102+  7C8E 27 FE       
0103+  7C90 39          		rts
0104+  7C91             	endif
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C8F             
0104+  7C8F 01          
0104+  7C90             
0104+  7C90             
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0105+  7C91             	
0106+  7C91 D6 0E       	ldaB	>lc(7)
0107+  7C93 C5 02       	bitB	lr(2)
0108+  7C95 26 1A       	bne	blankP2
0109+  7C97 C5 04       	bitB	lr(3)
0110+  7C99 26 22       	bne	blankP3
0111+  7C9B C5 08       	bitB	lr(4)
0112+  7C9D 26 2A       	bne	blankP4
0113+  7C9F C5 10       	bitB	lr(5)
0114+  7CA1 26 32       	bne	blankDone
0115+  7CA3 20 00       	bra	blankP1
0116+  7CA5             blankP1:
0117+  7CA5 86 F0       	ldaA	$F0
0118+  7CA7 9A 74       	oraA	>displayBcd1 + 4
0119+  7CA9 97 74       	staA	displayBcd1 + 4
0120+  7CAB 86 F0       	ldaA	$F0
0121+  7CAD 9A 75       	oraA	>displayBcd1 + 5
0122+  7CAF 97 75       	staA	displayBcd1 + 5
0123+  7CB1             blankP2:
0124+  7CB1 86 F0       	ldaA	$F0
0125+  7CB3 9A 7C       	oraA	>displayBcd1 + 12
0126+  7CB5 97 7C       	staA	displayBcd1 + 12
0127+  7CB7 86 F0       	ldaA	$F0
0128+  7CB9 9A 7D       	oraA	>displayBcd1 + 13
0129+  7CBB 97 7D       	staA	displayBcd1 + 13
0130+  7CBD             blankP3:
0131+  7CBD 86 0F       	ldaA	$0F
0132+  7CBF 9A 74       	oraA	>displayBcd1 + 4
0133+  7CC1 97 74       	staA	displayBcd1 + 4
0134+  7CC3 86 0F       	ldaA	$0F
0135+  7CC5 9A 75       	oraA	>displayBcd1 + 5
0136+  7CC7 97 75       	staA	displayBcd1 + 5
0137+  7CC9             blankP4:
0138+  7CC9 86 0F       	ldaA	$0F
0139+  7CCB 9A 7C       	oraA	>displayBcd1 + 12
0140+  7CCD 97 7C       	staA	displayBcd1 + 12
0141+  7CCF 86 0F       	ldaA	$0F
0142+  7CD1 9A 7D       	oraA	>displayBcd1 + 13
0143+  7CD3 97 7D       	staA	displayBcd1 + 13
0144+  7CD5             blankDone:
0145+  7CD5 39          	rts
0146+  7CD6             	
0147+  7CD6             refreshPlayerScores:
0148+  7CD6 BD 7C 00    	jsr copyScores13
0149+  7CD9 BD 7C 45    	jsr copyScores24
0150+  7CDC             	
0151+  7CDC 86 F0       	ldaA	$F0
0152+  7CDE B1 01 50    	cmpA	>pA_1m
0153+  7CE1 26 29       	bne	refresh_1m
0154+  7CE3 B1 01 56    	cmpA	>pB_1m
0155+  7CE6 26 24       	bne	refresh_1m	
0156+  7CE8 B1 01 5C    	cmpA	>pC_1m
0157+  7CEB 26 1F       	bne	refresh_1m
0158+  7CED B1 01 62    	cmpA	>pD_1m
0159+  7CF0 26 1A       	bne	refresh_1m
0160+  7CF2             	
0161+  7CF2 CE 00 70    	ldX	displayBcd1
0162+  7CF5             refresh_10xloop:
0163+  7CF5 A6 01       	ldaA	1, X
0164+  7CF7 A7 00       	staA	0,X
0165+  7CF9 A6 09       	ldaA	8 + 1, X
0166+  7CFB A7 08       	staA	8, X
0167+  7CFD 08          	inX
0168+  7CFE 8C 00 75    	cpX	displayBcd1+5
0169+  7D01 26 F2       	bne	refresh_10xloop
0170+  7D03 86 00       	ldaA	0
0171+  7D05 97 75       	staA	displayBcd1 + 5
0172+  7D07 97 7D       	staA	displayBcd1 + 5 + 8
0173+  7D09 7E 7C 8A    	jmp blankNonPlayerScores
0174+  7D0C             refresh_1m:
0175+  7D0C 7E 7C 8A    	jmp blankNonPlayerScores
0176+  7D0F             	
0177+  7D0F             	
0178+  7D0F             ; add score instantly
0179+  7D0F             ; X = place in p*_1* to add the score to
0180+  7D0F             ; A = amount to add (max 9)
0181+  7D0F             ; tail call
0182+  7D0F             _addScoreI:
0183+  7D0F AB 00       	addA	0, X
0184+  7D11 8A F0       	oraA	11110000b
0185+  7D13             	ifcs ; overflowed, need to increment next number
0185+  7D13             
0185+  7D13 24 FE       
0186+  7D15 8B 06       		addA	6	; adjust A back into BCD
0187+  7D17 A7 00       		staA	0, X
0188+  7D19             addScore_carryOver:		; loop to propagate carry
0189+  7D19 09          		deX	; go to next decimal place
0190+  7D1A A6 00       		ldaA	0, X	
0191+  7D1C 8A F0       		oraA	11110000b
0192+  7D1E 81 F9       		cmpA	$F9
0193+  7D20             		ifeq			; if it's already a 9, reset it and carry again
0193+  7D20             
0193+  7D20 26 FE       
0194+  7D22 6F 00       			clr	0, X
0195+  7D24 27 F3       			beq addScore_carryOver
0196+  7D26             		else			; otherwise ++ it and done
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D21             
0196+  7D21             
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21             
0196+  7D21 06          
0196+  7D26             
0196+  7D26 20 FE       
0196+  7D28             
0196+  7D28             
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0197+  7D28 6C 00       			inc	0, X
0198+  7D2A             		endif	
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D27             
0198+  7D27 02          
0198+  7D28             
0198+  7D28             
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0199+  7D2A             	else
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D14             
0199+  7D14             
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14             
0199+  7D14 17          
0199+  7D2A             
0199+  7D2A 20 FE       
0199+  7D2C             
0199+  7D2C             
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0200+  7D2C 81 F9       		cmpA	$F9
0201+  7D2E             		ifgt ; >9 -> need to adjust back into BCD
0201+  7D2E             
0201+  7D2E 23 FE       
0202+  7D30 8B 06       			addA	6
0203+  7D32 A7 00       			staA	0, X
0204+  7D34             addScore_carryDa:
0205+  7D34 09          			deX
0206+  7D35 A6 00       			ldaA	0, X
0207+  7D37 8A F0       			oraA	11110000b
0208+  7D39 81 F9       			cmpA	$F9
0209+  7D3B             			ifeq
0209+  7D3B             
0209+  7D3B 26 FE       
0210+  7D3D 6F 00       				clr	0, X
0211+  7D3F 27 F3       				beq 	addScore_carryDa
0212+  7D41             			else
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C             
0212+  7D3C 06          
0212+  7D41             
0212+  7D41 20 FE       
0212+  7D43             
0212+  7D43             
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0213+  7D43 6C 00       				inc	0, X
0214+  7D45             			endif	
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D42             
0214+  7D42 02          
0214+  7D43             
0214+  7D43             
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0215+  7D45             		else
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F             
0215+  7D2F 17          
0215+  7D45             
0215+  7D45 20 FE       
0215+  7D47             
0215+  7D47             
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0216+  7D47 A7 00       			staA	0, X
0217+  7D49             		endif
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D46             
0217+  7D46 02          
0217+  7D47             
0217+  7D47             
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0218+  7D49             	endif
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D2B             
0218+  7D2B 1D          
0218+  7D2C             
0218+  7D2C             
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0219+  7D49             
0220+  7D49 7E 7C D6    	jmp refreshPlayerScores
0221+  7D4C             	
0222+  7D4C 39          	rts
0223+  7D4D             	
0224+  7D4D             ; t A,X
0225+  7D4D             setXToCurPlayer10:
0226+  7D4D 96 0F       	ldaA	>lc(8)
0227+  7D4F 85 01       	bitA	0001b
0228+  7D51 27 04       	beq	_addScore10N_p2
0229+  7D53 CE 01 55    	ldX	pA_10
0230+  7D56 39          	rts
0231+  7D57             _addScore10N_p2:
0232+  7D57 85 02       	bitA	0010b
0233+  7D59 27 04       	beq	_addScore10N_p3
0234+  7D5B CE 01 5B    	ldX	pB_10
0235+  7D5E 39          	rts
0236+  7D5F             _addScore10N_p3:
0237+  7D5F 85 04       	bitA	0100b
0238+  7D61 27 04       	beq	_addScore10N_p4
0239+  7D63 CE 01 61    	ldX	pC_10
0240+  7D66 39          	rts
0241+  7D67             _addScore10N_p4:
0242+  7D67 CE 01 67    	ldX	pD_10
0243+  7D6A 39          	rts
0244+  7D6B             
0245+  7D6B             ; suspends execution for A ms and returns to queue processor
0246+  7D6B             ; should only be called from switch callbacks
0247+  7D6B             ; trashes everything but B
0248+  7D6B             _delay:	
0249+  7D6B CE 00 7F    	ldX	waitLeft - 1
0250+  7D6E             delay_findEmptyLoop:
0251+  7D6E 08          	inX
0252+  7D6F 6D 00       	tst	0, X
0253+  7D71 26 FB       	bne 	delay_findEmptyLoop 
0254+  7D73             	
0255+  7D73             	; X = first waitLeft that = 0
0256+  7D73 E7 18       	staB	waitReg - waitLeft, X
0257+  7D75 33          	pulB	; A = MSB of PC
0258+  7D76 E7 08       	staB	waitMsb - waitLeft, X
0259+  7D78 33          	pulB	; A = LSB of PC
0260+  7D79 E7 10       	staB	waitLsb - waitLeft, X
0261+  7D7B A7 00       	staA	0, X
0262+  7D7D             	; time and add stored
0263+  7D7D 7E 79 D5    	jmp skipEvent
0264+  7D80             	
0265+  7D80             _fork:	
0266+  7D80 CE 00 7F    	ldX	waitLeft - 1
0267+  7D83             fork_findEmptyLoop:
0268+  7D83 08          	inX
0269+  7D84 6D 00       	tst	0, X
0270+  7D86 26 FB       	bne 	fork_findEmptyLoop 
0271+  7D88             	
0272+  7D88             	; X = first waitLeft that = 0
0273+  7D88 E7 18       	staB	waitReg - waitLeft, X
0274+  7D8A 33          	pulB	; A = MSB of PC
0275+  7D8B E7 08       	staB	waitMsb - waitLeft, X
0276+  7D8D 33          	pulB	; A = LSB of PC
0277+  7D8E CB 03       	addB	3
0278+  7D90             	ifcs
0278+  7D90             
0278+  7D90 24 FE       
0279+  7D92 6C 08       		inc	waitMsb - waitLeft, X
0280+  7D94             	endif
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0280+  7D91             
0280+  7D91 02          
0280+  7D92             
0280+  7D92             
0280+  7D92~            	endif
0280+  7D92~            	endif
0280+  7D92~            	endif
0280+  7D92             
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0281+  7D94 E7 10       	staB	waitLsb - waitLeft, X
0282+  7D96 A7 00       	staA	0, X
0283+  7D98             	; time and add stored
0284+  7D98 C0 03       	subB	3
0285+  7D9A 37          	pshB
0286+  7D9B E6 08       	ldaB	waitMsb - waitLeft, X
0287+  7D9D             	ifcs
0287+  7D9D             
0287+  7D9D 24 FE       
0288+  7D9F 5A          		decB
0289+  7DA0             	endif
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0289+  7D9E             
0289+  7D9E 01          
0289+  7D9F             
0289+  7D9F             
0289+  7D9F~            	endif
0289+  7D9F~            	endif
0289+  7D9F~            	endif
0289+  7D9F             
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0290+  7DA0 37          	pshB
0291+  7DA1 39          	rts
0292+  7DA2             	
0293+  7DA2             	
0294+  7DA2             	
0295+  7DA2             resetScores:
0296+  7DA2 86 00       	ldaA	00
0297+  7DA4 CE 01 50    	ldX	pA_1m
0298+  7DA7             _zeroScores:
0299+  7DA7 A7 00       	staA	0, X
0300+  7DA9 08          	inX
0301+  7DAA 8C 01 68    	cpX	pD_10 + 1
0302+  7DAD 26 F8       	bne	_zeroScores
0303+  7DAF             	
0304+  7DAF 86 00       	ldaA	0
0305+  7DB1 97 12       	staA	curPlayer
0306+  7DB3 97 13       	staA	curPlayer + 1
0307+  7DB5 86 FF       	ldaA	$FF
0308+  7DB7 97 76       	staA	displayBcd1 + 6
0309+  7DB9 97 7E       	staA	displayBcd1 + 14
0310+  7DBB 97 7F       	staA	displayBcd1 + 15
0311+  7DBD             	
0312+  7DBD BD 7C D6    	jsr	refreshPlayerScores
0313+  7DC0 39          	rts
0314+  7DC1             
0315+  7DC1             ; trash ~B
0316+  7DC1             ; delay for ms (8-2000)
0317+  7DC1             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0318+  7DC1             ; makes a second thread that will skip the next (3b) instruction
0319+  7DC1             #DEFINE fork(ms) ldaA ms/8\ jsr _fork
0320+  7DC1             #DEFINE beginFork()	
0321+  7DC1             #DEFINE endFork()	ldX >forkX\ jmp afterFork
0322+  7DC1             	
0323+  7DC1             ; trashes B (max 104ms)
0324+  7DC1             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0325+  7DC1             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0326+  7DC1             
0327+  7DC1             ; trashes AX
0328+  7DC1             ; place: 1-5 = 10s thru 100ks
0329+  7DC1             ; amount: 1-9
0330+  7DC1             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0331+  7DC1             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0332+  7DC1             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0333+  7DC1             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0334+  7DC1             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0335+  7DC1             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0336+  7DC1             
0337+  7DC1             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0338+  7DC1             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0339+  7DC1             
0340+  7DC1             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0341+  7DC1             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0342+  7DC1             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0343+  7DC1             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0344+  7DC1             
0345+  7DC1             #include "attract.asm"
0001++ 7DC1             attractStart:
0002++ 7DC1 08          	.db 00001000b
0003++ 7DC2 18          	.db 00011000b
0004++ 7DC3 10          	.db 00010000b
0005++ 7DC4 80          	.db 10000000b
0006++ 7DC5 01          	.db 00000001b
0007++ 7DC6             	
0008++ 7DC6 50          	.db 01010000b
0009++ 7DC7 40          	.db 01000000b
0010++ 7DC8 08          	.db 00001000b
0011++ 7DC9 80          	.db 10000000b
0012++ 7DCA 03          	.db 00000011b
0013++ 7DCB             	
0014++ 7DCB 20          	.db 00100000b
0015++ 7DCC 28          	.db 00101000b
0016++ 7DCD 04          	.db 00000100b
0017++ 7DCE 80          	.db 10000000b
0018++ 7DCF 07          	.db 00000111b
0019++ 7DD0             	
0020++ 7DD0 44          	.db 01000100b
0021++ 7DD1 80          	.db 10000000b
0022++ 7DD2 02          	.db 00000010b
0023++ 7DD3 80          	.db 10000000b
0024++ 7DD4 0F          	.db 00001111b
0025++ 7DD5             	
0026++ 7DD5 08          	.db 00001000b
0027++ 7DD6 18          	.db 00011000b
0028++ 7DD7 01          	.db 00000001b
0029++ 7DD8 80          	.db 10000000b
0030++ 7DD9 1F          	.db 00011111b
0031++ 7DDA             	
0032++ 7DDA 50          	.db 01010000b
0033++ 7DDB 40          	.db 01000000b
0034++ 7DDC 02          	.db 00000010b
0035++ 7DDD 80          	.db 10000000b
0036++ 7DDE 3F          	.db 00111111b
0037++ 7DDF             	
0038++ 7DDF 20          	.db 00100000b
0039++ 7DE0 28          	.db 00101000b
0040++ 7DE1 04          	.db 00000100b
0041++ 7DE2 80          	.db 10000000b
0042++ 7DE3 7F          	.db 01111111b
0043++ 7DE4             	
0044++ 7DE4 44          	.db 01000100b
0045++ 7DE5 80          	.db 10000000b
0046++ 7DE6 08          	.db 00001000b
0047++ 7DE7 80          	.db 10000000b
0048++ 7DE8 FF          	.db 11111111b
0049++ 7DE9             attractEnd:0006   7DE9             
0007   7DE9             #include "game.asm"
0001+  7DE9             ; Laser Ball solenoids
0002+  7DE9             ;#DEFINE KICKOUT 		01
0003+  7DE9             ;#DEFINE LEFT_KICKER 	02
0004+  7DE9             ;#DEFINE DROP_LA			03
0005+  7DE9             ;#DEFINE DROP_SER		04
0006+  7DE9             ;#DEFINE EJECT_HOLE		05
0007+  7DE9             ;#DEFINE DROP_BA			06
0008+  7DE9             ;#DEFINE DROP_LL			07
0009+  7DE9             ;#DEFINE RIGHT_KICKER	08
0010+  7DE9             ;#DEFINE SOUND1			09 ; thru 13
0011+  7DE9             ;#DEFINE KNOCKER			14
0012+  7DE9             ;#DEFINE	FLASHERS		15
0013+  7DE9             ;#DEFINE COIN_LOCKOUT	16
0014+  7DE9             
0015+  7DE9             ; Hot Tip solenoids
0016+  7DE9             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7DE9             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7DE9             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7DE9             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7DE9             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7DE9             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7DE9             #DEFINE CHIME_10	SOL(09, 16)
0023+  7DE9             #DEFINE CHIME_100	SOL(10, 16)
0024+  7DE9             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7DE9             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7DE9             #DEFINE CLICKER		SOL(13, 8)
0027+  7DE9             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7DE9             #DEFINE BUZZER		SOL(15, 100)
0029+  7DE9             #DEFINE SHORT_PAUSE 	115
0030+  7DE9             
0031+  7DE9             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7DE9             #DEFINE done(v)	\
0033+  7DE9             #DEFCONT	#IF (v==0)
0034+  7DE9             #DEFCONT		\ ldaA 10b
0035+  7DE9             #DEFCONT		\ oraA >state
0036+  7DE9             #DEFCONT		\ staA state
0037+  7DE9             #DEFCONT	\#ENDIF
0038+  7DE9             #DEFCONT	\ jmp afterQueueEvent
0039+  7DE9             	
0040+  7DE9             	
0041+  7DE9             _addScore10N:
0042+  7DE9 BD 7D 4D    	jsr setXToCurPlayer10
0043+  7DEC 86 01       	ldaA	1
0044+  7DEE BD 7D 0F    	jsr _addScoreI
0045+  7DF1 86 02       	fireSolenoidA(CHIME_10)
0045+  7DF3 B7 01 48    
0046+  7DF6 39          	rts
0047+  7DF7             _addScore100N:
0048+  7DF7 BD 7D 4D    	jsr setXToCurPlayer10
0049+  7DFA 09          	deX
0050+  7DFB 86 01       	ldaA	1
0051+  7DFD BD 7D 0F    	jsr _addScoreI
0052+  7E00 86 02       	fireSolenoidA(CHIME_100)	
0052+  7E02 B7 01 49    
0053+  7E05 39          	rts
0054+  7E06             _addScore1000N:
0055+  7E06 BD 7D 4D    	jsr setXToCurPlayer10
0056+  7E09 09          	deX
0057+  7E0A 09          	deX
0058+  7E0B 86 01       	ldaA	1
0059+  7E0D BD 7D 0F    	jsr _addScoreI
0060+  7E10 86 02       	fireSolenoidA(CHIME_1000)
0060+  7E12 B7 01 4A    
0061+  7E15 39          	rts
0062+  7E16             #DEFINE score10() jsr _addScore10N
0063+  7E16             #DEFINE score100() jsr _addScore100N
0064+  7E16             #DEFINE score1000() jsr _addScore1000N
0065+  7E16             #DEFINE score500() \ jsr _addScore100N
0066+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7E16             #DEFCONT	\ jsr _addScore100N
0069+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7E16             #DEFCONT	\ jsr _addScore100N
0072+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7E16             #DEFCONT	\ jsr _addScore100N
0075+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7E16             #DEFCONT	\ jsr _addScore100N
0078+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7E16             
0081+  7E16             #DEFINE advBonus()	jsr advanceBonus
0082+  7E16             
0083+  7E16             advanceBonus:
0084+  7E16 7C 00 B0    	inc 	p_Bonus
0085+  7E19 86 7F       	lampOff(8,5) ; 1k
0085+  7E1B 94 0C       
0085+  7E1D 97 0C       
0086+  7E1F C6 02       	ldaB	2
0087+  7E21 86 08       	fork(64)
0087+  7E23 BD 7D 80    
0088+  7E26 39          	rts
0089+  7E27 01          	nop
0090+  7E28 01          	nop
0091+  7E29             	beginFork()
0092+  7E29             advanceBonus_loop:
0093+  7E29 7A 00 B0    	dec	p_Bonus
0094+  7E2C BD 60 C3    	jsr 	bonusLights
0095+  7E2F 7C 00 B0    	inc	p_Bonus
0096+  7E32 86 FE       	ldaA	11111110b
0097+  7E34             	
0098+  7E34 37          	pshB
0099+  7E35 5A          	decB
0100+  7E36             inner:
0101+  7E36 5A          	decB
0102+  7E37 27 04       	beq	innerEnd
0103+  7E39 0D          	seC
0104+  7E3A 49          	rolA
0105+  7E3B 20 F9       	bra 	inner
0106+  7E3D             innerEnd:
0107+  7E3D 33          	pulB
0108+  7E3E             	
0109+  7E3E 94 0D       	andA	>lc(6)
0110+  7E40 97 0D       	staA	lc(6)
0111+  7E42 86 08       	delay(64)
0111+  7E44 BD 7D 6B    
0112+  7E47 5C          	incB
0113+  7E48 D1 B0       	cmpB	>p_Bonus
0114+  7E4A 2D DD       	blt	advanceBonus_loop
0115+  7E4C D6 B0       	ldaB	>p_Bonus
0116+  7E4E BD 60 C3    	jsr 	bonusLights
0117+  7E51 DE 2C       	endFork()
0117+  7E53 7E 79 3C    
0118+  7E56             	
0119+  7E56             ; switch callbacks:
0120+  7E56             
0121+  60C0             none:	.org $6000 + 192 ; size of callback table
0122+  60C0             	done(1)
0122+  60C0~            	done(1)
0122+  60C0~            	done(1)
0122+  60C0~            	done(1)
0122+  60C0~            	done(1)
0122+  60C0             
0122+  60C0 7E 79 8C    
0123+  60C3             	
0124+  60C3             bonusLights:
0125+  60C3 86 00       	ldaA	0
0126+  60C5 97 0C       	staA	lc(5)
0127+  60C7 97 0D       	staA	lc(6)
0128+  60C9 7D 00 B0    	tst	p_Bonus
0129+  60CC 27 11       	beq	bonusLights_done
0130+  60CE             	
0131+  60CE 86 80       	lampOn(8,5) ; 1k
0131+  60D0 9A 0C       
0131+  60D2 97 0C       
0132+  60D4             	
0133+  60D4 96 B0       	ldaA	>p_Bonus
0134+  60D6             bonusLights_loop:
0135+  60D6 4A          	decA
0136+  60D7 27 06       	beq 	bonusLights_done
0137+  60D9 0D          	seC
0138+  60DA 79 00 0D    	rol	lc(6)
0139+  60DD 20 F7       	bra	bonusLights_loop
0140+  60DF             	
0141+  60DF             bonusLights_done
0142+  60DF             
0143+  60DF 86 09       	ldaA	9
0144+  60E1 91 B0       	cmpA	>p_Bonus
0145+  60E3             	ifge	
0145+  60E3             
0145+  60E3 25 FE       
0146+  60E5             	else	; bonus >= 10?
0146+  60E5             
0146+  60E5             
0146+  60E5             
0146+  60E5             
0146+  60E4             
0146+  60E4             
0146+  60E4             
0146+  60E4~            	else	; bonus >= 10?
0146+  60E4~            	else	; bonus >= 10?
0146+  60E4~            	else	; bonus >= 10?
0146+  60E4~            	else	; bonus >= 10?
0146+  60E4             
0146+  60E4~            	else	; bonus >= 10?
0146+  60E4~            	else	; bonus >= 10?
0146+  60E4~            	else	; bonus >= 10?
0146+  60E4~            	else	; bonus >= 10?
0146+  60E4             
0146+  60E4             
0146+  60E4 02          
0146+  60E5             
0146+  60E5 20 FE       
0146+  60E7             
0146+  60E7             
0146+  60E7             
0146+  60E7~            	else	; bonus >= 10?
0146+  60E7~            	else	; bonus >= 10?
0146+  60E7~            	else	; bonus >= 10?
0146+  60E7~            	else	; bonus >= 10?
0146+  60E7~            	else	; bonus >= 10?
0146+  60E7             
0146+  60E7~            	else	; bonus >= 10?
0146+  60E7~            	else	; bonus >= 10?
0146+  60E7             
0146+  60E7~            	else	; bonus >= 10?
0146+  60E7~            	else	; bonus >= 10?
0146+  60E7             
0147+  60E7 86 0A       		ldaA	10
0148+  60E9 97 B0       		staA	p_Bonus
0149+  60EB 86 40       		lampOn(7,5) ; 10k light
0149+  60ED 9A 0C       
0149+  60EF 97 0C       
0150+  60F1             	endif
0150+  60F1             
0150+  60F1             
0150+  60F1             
0150+  60F1             
0150+  60F1             
0150+  60F1~            	endif
0150+  60F1~            	endif
0150+  60F1             
0150+  60F1~            	endif
0150+  60F1~            	endif
0150+  60F1             
0150+  60E6             
0150+  60E6 0A          
0150+  60E7             
0150+  60E7             
0150+  60E7~            	endif
0150+  60E7~            	endif
0150+  60E7~            	endif
0150+  60E7             
0150+  60F1             
0150+  60F1~            	endif
0150+  60F1~            	endif
0150+  60F1             
0151+  60F1             	
0152+  60F1 39          	rts
0153+  60F2             	
0154+  60F2             	
0155+  60F2             startBall:
0156+  60F2 DE 12       	ldX	>curPlayer
0157+  60F4 86 01       	ldaA	1
0158+  60F6 97 B0       	staA	p_Bonus
0159+  60F8 86 80       	lampOn(8,5)
0159+  60FA 9A 0C       
0159+  60FC 97 0C       
0160+  60FE B6 22 03    	enablePf
0160+  6101 8A 38       
0160+  6103 B7 22 03    
0161+  6106             	
0162+  6106 86 00       	ldaA	0
0163+  6108 97 B5       	staA	p_DropsDown
0164+  610A 86 41       	ldaA	65
0165+  610C 97 A9       	staA	dropResetTimer
0166+  610E             	
0167+  610E A6 BA       	ldaA	p_EachDropDown, X
0168+  6110 97 AA       	staA	dropsDown
0169+  6112 43          	comA
0170+  6113 85 07       	bitA	000111b
0171+  6115             	ifne
0171+  6115             
0171+  6115 27 FE       
0172+  6117 C6 0C       		fireSolenoid(DROP_HOT)
0172+  6119 F7 01 42    
0173+  611C 86 12       		delay(150)
0173+  611E BD 7D 6B    
0174+  6121             	else
0174+  6121             
0174+  6121             
0174+  6121             
0174+  6121             
0174+  6116             
0174+  6116             
0174+  6116             
0174+  6116~            	else
0174+  6116~            	else
0174+  6116~            	else
0174+  6116~            	else
0174+  6116             
0174+  6116~            	else
0174+  6116~            	else
0174+  6116~            	else
0174+  6116~            	else
0174+  6116             
0174+  6116             
0174+  6116 0C          
0174+  6121             
0174+  6121 20 FE       
0174+  6123             
0174+  6123             
0174+  6123             
0174+  6123~            	else
0174+  6123~            	else
0174+  6123~            	else
0174+  6123~            	else
0174+  6123~            	else
0174+  6123             
0174+  6123~            	else
0174+  6123~            	else
0174+  6123             
0174+  6123~            	else
0174+  6123~            	else
0174+  6123             
0175+  6123 7C 00 B5    		inc	p_DropsDown
0176+  6126 7C 00 B5    		inc	p_DropsDown
0177+  6129 7C 00 B5    		inc	p_DropsDown
0178+  612C             	endif
0178+  612C             
0178+  612C             
0178+  612C             
0178+  612C             
0178+  612C             
0178+  612C~            	endif
0178+  612C~            	endif
0178+  612C             
0178+  612C~            	endif
0178+  612C~            	endif
0178+  612C             
0178+  6122             
0178+  6122 09          
0178+  6123             
0178+  6123             
0178+  6123~            	endif
0178+  6123~            	endif
0178+  6123~            	endif
0178+  6123             
0178+  612C             
0178+  612C~            	endif
0178+  612C~            	endif
0178+  612C             
0179+  612C 96 AA       	ldaA	>dropsDown
0180+  612E 43          	comA
0181+  612F 85 38       	bitA	111000b
0182+  6131             	ifne
0182+  6131             
0182+  6131 27 FE       
0183+  6133 C6 0C       		fireSolenoid(DROP_TIP)
0183+  6135 F7 01 41    
0184+  6138 86 12       		delay(150)
0184+  613A BD 7D 6B    
0185+  613D             	else
0185+  613D             
0185+  613D             
0185+  613D             
0185+  613D             
0185+  6132             
0185+  6132             
0185+  6132             
0185+  6132~            	else
0185+  6132~            	else
0185+  6132~            	else
0185+  6132~            	else
0185+  6132             
0185+  6132~            	else
0185+  6132~            	else
0185+  6132~            	else
0185+  6132~            	else
0185+  6132             
0185+  6132             
0185+  6132 0C          
0185+  613D             
0185+  613D 20 FE       
0185+  613F             
0185+  613F             
0185+  613F             
0185+  613F~            	else
0185+  613F~            	else
0185+  613F~            	else
0185+  613F~            	else
0185+  613F~            	else
0185+  613F             
0185+  613F~            	else
0185+  613F~            	else
0185+  613F             
0185+  613F~            	else
0185+  613F~            	else
0185+  613F             
0186+  613F 7C 00 B5    		inc	p_DropsDown
0187+  6142 7C 00 B5    		inc	p_DropsDown
0188+  6145 7C 00 B5    		inc	p_DropsDown
0189+  6148             	endif
0189+  6148             
0189+  6148             
0189+  6148             
0189+  6148             
0189+  6148             
0189+  6148~            	endif
0189+  6148~            	endif
0189+  6148             
0189+  6148~            	endif
0189+  6148~            	endif
0189+  6148             
0189+  613E             
0189+  613E 09          
0189+  613F             
0189+  613F             
0189+  613F~            	endif
0189+  613F~            	endif
0189+  613F~            	endif
0189+  613F             
0189+  6148             
0189+  6148~            	endif
0189+  6148~            	endif
0189+  6148             
0190+  6148             	
0191+  6148 86 FF       	ldaA	$FF
0192+  614A 97 A8       	staA	lastSwitch
0193+  614C             	
0194+  614C             	; clear lights
0195+  614C CE 00 08    	ldX	lampCol1
0196+  614F 86 00       	ldaA	0b
0197+  6151             lClearLights:
0198+  6151 A7 00       	staA	0, X
0199+  6153 A7 98       	staA	flashLampCol1 - lampCol1, X
0200+  6155 08          	inX
0201+  6156 8C 00 0E    	cpX	lc(6) + 1
0202+  6159 26 F6       	bne	lClearLights
0203+  615B             	;
0204+  615B             	
0205+  615B             	; init lights for player data
0206+  615B DE 12       	ldX	>curPlayer
0207+  615D A6 B1       	ldaA	p_Ejects, X
0208+  615F 97 0B       	staA	lc(4)
0209+  6161 E6 B6       	ldaB	p_LampCol2, X
0210+  6163 C5 02       	bitB	lr(2)
0211+  6165             	ifne 
0211+  6165             
0211+  6165 27 FE       
0212+  6167 86 02       		lampOn(2,3)
0212+  6169 9A 0A       
0212+  616B 97 0A       
0213+  616D C4 FD       		andB	11111101b
0214+  616F             	endif
0214+  616F             
0214+  616F             
0214+  616F             
0214+  616F             
0214+  616F             
0214+  616F~            	endif
0214+  616F~            	endif
0214+  616F             
0214+  616F~            	endif
0214+  616F~            	endif
0214+  616F             
0214+  6166             
0214+  6166 08          
0214+  6167             
0214+  6167             
0214+  6167~            	endif
0214+  6167~            	endif
0214+  6167~            	endif
0214+  6167             
0214+  616F             
0214+  616F~            	endif
0214+  616F~            	endif
0214+  616F             
0215+  616F D7 09       	staB	lc(2)
0216+  6171             	
0217+  6171 86 40       	ldaA	lr(7) ; shoot again
0218+  6173 95 0F       	bitA	>lc(8)
0219+  6175             	ifne
0219+  6175             
0219+  6175 27 FE       
0220+  6177 86 01       		lampOn(1,3) ; shoot again
0220+  6179 9A 0A       
0220+  617B 97 0A       
0221+  617D             	endif
0221+  617D             
0221+  617D             
0221+  617D             
0221+  617D             
0221+  617D             
0221+  617D~            	endif
0221+  617D~            	endif
0221+  617D             
0221+  617D~            	endif
0221+  617D~            	endif
0221+  617D             
0221+  6176             
0221+  6176 06          
0221+  6177             
0221+  6177             
0221+  6177~            	endif
0221+  6177~            	endif
0221+  6177~            	endif
0221+  6177             
0221+  617D             
0221+  617D~            	endif
0221+  617D~            	endif
0221+  617D             
0222+  617D             	
0223+  617D             	; flash player light
0224+  617D 86 0F       	ldaA	00001111b ; player up lights
0225+  617F 9A A7       	oraA	>flc(8)
0226+  6181 97 A7       	staA	flc(8)
0227+  6183             	
0228+  6183 86 01       	ldaA	sr(1) ; check outhole
0229+  6185 95 21       	bitA	>sc(2)
0230+  6187             	ifne ; ball in hole
0230+  6187             
0230+  6187 27 FE       
0231+  6189 C6 02       		fireSolenoid(OUTHOLE)
0231+  618B F7 01 44    
0232+  618E             	endif
0232+  618E             
0232+  618E             
0232+  618E             
0232+  618E             
0232+  618E             
0232+  618E~            	endif
0232+  618E~            	endif
0232+  618E             
0232+  618E~            	endif
0232+  618E~            	endif
0232+  618E             
0232+  6188             
0232+  6188 05          
0232+  6189             
0232+  6189             
0232+  6189~            	endif
0232+  6189~            	endif
0232+  6189~            	endif
0232+  6189             
0232+  618E             
0232+  618E~            	endif
0232+  618E~            	endif
0232+  618E             
0233+  618E             	
0234+  618E 39          	rts
0235+  618F             	
0236+  618F             	
0237+  618F             startGame:
0238+  618F 86 02       	lampOn(2,7) ; one player
0238+  6191 9A 0E       
0238+  6193 97 0E       
0239+  6195             	
0240+  6195 86 DF       	lampOff(6,8) ; game over
0240+  6197 94 0F       
0240+  6199 97 0F       
0241+  619B             	
0242+  619B C6 02       	fireSolenoid(CHIME_10)
0242+  619D F7 01 48    
0243+  61A0 86 0E       	delay(SHORT_PAUSE)
0243+  61A2 BD 7D 6B    
0244+  61A5 C6 02       	fireSolenoid(CHIME_10)
0244+  61A7 F7 01 48    
0245+  61AA 86 0E       	delay(SHORT_PAUSE)
0245+  61AC BD 7D 6B    
0246+  61AF C6 02       	fireSolenoid(CHIME_10)
0246+  61B1 F7 01 48    
0247+  61B4 86 19       	delay(200)
0247+  61B6 BD 7D 6B    
0248+  61B9             	
0249+  61B9 C6 02       	fireSolenoid(CHIME_10)
0249+  61BB F7 01 48    
0250+  61BE 86 0E       	delay(SHORT_PAUSE)
0250+  61C0 BD 7D 6B    
0251+  61C3 C6 02       	fireSolenoid(CHIME_10)
0251+  61C5 F7 01 48    
0252+  61C8 86 0E       	delay(SHORT_PAUSE)
0252+  61CA BD 7D 6B    
0253+  61CD C6 02       	fireSolenoid(CHIME_10)
0253+  61CF F7 01 48    
0254+  61D2 86 19       	delay(200)
0254+  61D4 BD 7D 6B    
0255+  61D7             	
0256+  61D7 C6 02       	fireSolenoid(CHIME_10)
0256+  61D9 F7 01 48    
0257+  61DC 86 0E       	delay(SHORT_PAUSE)
0257+  61DE BD 7D 6B    
0258+  61E1 C6 02       	fireSolenoid(CHIME_10)
0258+  61E3 F7 01 48    
0259+  61E6 86 0E       	delay(SHORT_PAUSE)
0259+  61E8 BD 7D 6B    
0260+  61EB C6 02       	fireSolenoid(CHIME_100)
0260+  61ED F7 01 49    
0261+  61F0 86 19       	delay(200)
0261+  61F2 BD 7D 6B    
0262+  61F5 C6 02       	fireSolenoid(CHIME_1000)
0262+  61F7 F7 01 4A    
0263+  61FA 86 19       	delay(200)
0263+  61FC BD 7D 6B    
0264+  61FF C6 02       	fireSolenoid(CHIME_10k)
0264+  6201 F7 01 4B    
0265+  6204 86 12       	delay(150)
0265+  6206 BD 7D 6B    
0266+  6209             	
0267+  6209             	; reset scores
0268+  6209 BD 7D A2    	jsr 	resetScores
0269+  620C             	
0270+  620C             	; reset ball count
0271+  620C 86 10       	ldaA	$10
0272+  620E 97 77       	staA	ballCount	
0273+  6210             
0274+  6210 C6 00       	ldaB	0
0275+  6212 D7 13       	staB	curPlayer + 1
0276+  6214             	
0277+  6214 D7 0E       	staB	lc(7)
0278+  6216 D7 0F       	staB	lc(8)
0279+  6218 D7 A6       	staB	flc(7)
0280+  621A D7 A7       	staB	flc(8)
0281+  621C             	
0282+  621C CE 00 00    	ldX	0
0283+  621F             lInitPlayers:
0284+  621F C6 01       	ldaB	lr(1)
0285+  6221 E7 B1       	staB	p_Ejects, X
0286+  6223 C6 00       	ldaB	0
0287+  6225 E7 B6       	staB	p_LampCol2, X
0288+  6227 E7 BA       	staB	p_EachDropDown, X
0289+  6229 08          	inX
0290+  622A 8C 00 04    	cpX	4
0291+  622D 26 F0       	bne	lInitPlayers
0292+  622F             	
0293+  622F BD 60 F2    	jsr	startBall
0294+  6232             	
0295+  6232             	; invalidate playfield
0296+  6232 86 01       	ldaA	lr(1)
0297+  6234 9A 0F       	oraA	>lc(8)
0298+  6236 97 0F       	staA	lc(8)
0299+  6238             	
0300+  6238 86 02       	lampOn(2,7) ; one player
0300+  623A 9A 0E       
0300+  623C 97 0E       
0301+  623E             	
0302+  623E 86 DF       	lampOff(6,8) ; game over
0302+  6240 94 0F       
0302+  6242 97 0F       
0303+  6244             	
0304+  6244 39          	rts
0305+  6245             	
0306+  6245             
0307+  6245             	
0308+  6245             swTilt: 
0309+  6245 86 10       	lampOn(5,8) ; tilt
0309+  6247 9A 0F       
0309+  6249 97 0F       
0310+  624B B6 22 03    	disablePf
0310+  624E 84 F7       
0310+  6250 B7 22 03    
0311+  6253             	done(0)
0311+  6253             
0311+  6253 86 02       
0311+  6255 BA 01 6B    
0311+  6258 B7 01 6B    
0311+  625B             
0311+  625B 7E 79 8C    
0312+  625E             	
0313+  625E             swStart: 
0314+  625E 96 0F       	ldaA >lc(8)
0315+  6260 85 20       	bitA lr(6)
0316+  6262             	ifne ; in game over
0316+  6262             
0316+  6262 27 FE       
0317+  6264 BD 61 8F    		jsr startGame
0318+  6267             	else 
0318+  6267             
0318+  6267             
0318+  6267             
0318+  6267             
0318+  6263             
0318+  6263             
0318+  6263             
0318+  6263~            	else 
0318+  6263~            	else 
0318+  6263~            	else 
0318+  6263~            	else 
0318+  6263             
0318+  6263~            	else 
0318+  6263~            	else 
0318+  6263~            	else 
0318+  6263~            	else 
0318+  6263             
0318+  6263             
0318+  6263 05          
0318+  6267             
0318+  6267 20 FE       
0318+  6269             
0318+  6269             
0318+  6269             
0318+  6269~            	else 
0318+  6269~            	else 
0318+  6269~            	else 
0318+  6269~            	else 
0318+  6269~            	else 
0318+  6269             
0318+  6269~            	else 
0318+  6269~            	else 
0318+  6269             
0318+  6269~            	else 
0318+  6269~            	else 
0318+  6269             
0319+  6269 86 10       		ldaA	$10
0320+  626B 91 77       		cmpA	>ballCount
0321+  626D             		ifeq ; add player
0321+  626D             
0321+  626D 26 FE       
0322+  626F 86 1E       			ldaA	00011110b
0323+  6271 94 0E       			andA	>lc(7) ; player count lights
0324+  6273 85 10       			bitA	lr(5)
0325+  6275             			ifeq	; if not on P4 already, add player
0325+  6275             
0325+  6275 26 FE       
0326+  6277 48          				aslA
0327+  6278 C6 E1       				ldaB	11100001b
0328+  627A D4 0E       				andB	>lc(7)
0329+  627C D7 0E       				staB	lc(7)
0330+  627E 9A 0E       				oraA	>lc(7)
0331+  6280 97 0E       				staA	lc(7)
0332+  6282             			endif
0332+  6282             
0332+  6282             
0332+  6282             
0332+  6282             
0332+  6282             
0332+  6282~            			endif
0332+  6282~            			endif
0332+  6282             
0332+  6282~            			endif
0332+  6282~            			endif
0332+  6282             
0332+  6276             
0332+  6276 0B          
0332+  6277             
0332+  6277             
0332+  6277~            			endif
0332+  6277~            			endif
0332+  6277~            			endif
0332+  6277             
0332+  6282             
0332+  6282~            			endif
0332+  6282~            			endif
0332+  6282             
0333+  6282             		else ; restart game
0333+  6282             
0333+  6282             
0333+  6282             
0333+  6282             
0333+  626E             
0333+  626E             
0333+  626E             
0333+  626E~            		else ; restart game
0333+  626E~            		else ; restart game
0333+  626E~            		else ; restart game
0333+  626E~            		else ; restart game
0333+  626E             
0333+  626E~            		else ; restart game
0333+  626E~            		else ; restart game
0333+  626E~            		else ; restart game
0333+  626E~            		else ; restart game
0333+  626E             
0333+  626E             
0333+  626E 15          
0333+  6282             
0333+  6282 20 FE       
0333+  6284             
0333+  6284             
0333+  6284             
0333+  6284~            		else ; restart game
0333+  6284~            		else ; restart game
0333+  6284~            		else ; restart game
0333+  6284~            		else ; restart game
0333+  6284~            		else ; restart game
0333+  6284             
0333+  6284~            		else ; restart game
0333+  6284~            		else ; restart game
0333+  6284             
0333+  6284~            		else ; restart game
0333+  6284~            		else ; restart game
0333+  6284             
0334+  6284 BD 61 8F    			jsr startGame
0335+  6287             		endif		
0335+  6287             
0335+  6287             
0335+  6287             
0335+  6287             
0335+  6287             
0335+  6287~            		endif		
0335+  6287~            		endif		
0335+  6287             
0335+  6287~            		endif		
0335+  6287~            		endif		
0335+  6287             
0335+  6283             
0335+  6283 03          
0335+  6284             
0335+  6284             
0335+  6284~            		endif		
0335+  6284~            		endif		
0335+  6284~            		endif		
0335+  6284             
0335+  6287             
0335+  6287~            		endif		
0335+  6287~            		endif		
0335+  6287             
0336+  6287             	endif
0336+  6287             
0336+  6287             
0336+  6287             
0336+  6287             
0336+  6287             
0336+  6287~            	endif
0336+  6287~            	endif
0336+  6287             
0336+  6287~            	endif
0336+  6287~            	endif
0336+  6287             
0336+  6268             
0336+  6268 1E          
0336+  6269             
0336+  6269             
0336+  6269~            	endif
0336+  6269~            	endif
0336+  6269~            	endif
0336+  6269             
0336+  6287             
0336+  6287~            	endif
0336+  6287~            	endif
0336+  6287             
0337+  6287             	
0338+  6287 BD 7C D6    	jsr refreshPlayerScores
0339+  628A             	
0340+  628A             	done(0)
0340+  628A             
0340+  628A 86 02       
0340+  628C BA 01 6B    
0340+  628F B7 01 6B    
0340+  6292             
0340+  6292 7E 79 8C    
0341+  6295             	
0342+  6295             swOuthole: 
0343+  6295 86 4B       	delay(600)
0343+  6297 BD 7D 6B    
0344+  629A 96 0F       	ldaA	>lc(8) ; !game over
0345+  629C 85 20       	bitA	lr(6)
0346+  629E             	ifne ; game over
0346+  629E             
0346+  629E 27 FE       
0347+  62A0             		done(0)
0347+  62A0             
0347+  62A0 86 02       
0347+  62A2 BA 01 6B    
0347+  62A5 B7 01 6B    
0347+  62A8             
0347+  62A8 7E 79 8C    
0348+  62AB             	endif
0348+  62AB             
0348+  62AB             
0348+  62AB             
0348+  62AB             
0348+  62AB             
0348+  62AB~            	endif
0348+  62AB~            	endif
0348+  62AB             
0348+  62AB~            	endif
0348+  62AB~            	endif
0348+  62AB             
0348+  629F             
0348+  629F 0B          
0348+  62A0             
0348+  62A0             
0348+  62A0~            	endif
0348+  62A0~            	endif
0348+  62A0~            	endif
0348+  62A0             
0348+  62AB             
0348+  62AB~            	endif
0348+  62AB~            	endif
0348+  62AB             
0349+  62AB             	
0350+  62AB             	; check ballsave
0351+  62AB 86 01       	ldaA	lr(1)
0352+  62AD 95 0A       	bitA	>lc(3)
0353+  62AF             	ifne	; shoot again on
0353+  62AF             
0353+  62AF 27 FE       
0354+  62B1 95 A2       		bitA	>flc(3)
0355+  62B3             		ifne ; shoot again flashing
0355+  62B3             
0355+  62B3 27 FE       
0356+  62B5             			; turn off used special
0357+  62B5 86 80       			ldaA	lr(8) ; right special
0358+  62B7 95 09       			bitA	>lc(2)
0359+  62B9             			ifne
0359+  62B9             
0359+  62B9 27 FE       
0360+  62BB 86 7F       				lampOff(8,2)
0360+  62BD 94 09       
0360+  62BF 97 09       
0361+  62C1 86 7F       				flashOff(8,2)
0361+  62C3 94 A1       
0361+  62C5 97 A1       
0362+  62C7             			endif
0362+  62C7             
0362+  62C7             
0362+  62C7             
0362+  62C7             
0362+  62C7             
0362+  62C7~            			endif
0362+  62C7~            			endif
0362+  62C7             
0362+  62C7~            			endif
0362+  62C7~            			endif
0362+  62C7             
0362+  62BA             
0362+  62BA 0C          
0362+  62BB             
0362+  62BB             
0362+  62BB~            			endif
0362+  62BB~            			endif
0362+  62BB~            			endif
0362+  62BB             
0362+  62C7             
0362+  62C7~            			endif
0362+  62C7~            			endif
0362+  62C7             
0363+  62C7 86 02       			ldaA	lr(2) ; right special
0364+  62C9 95 0A       			bitA	>lc(3)
0365+  62CB             			ifne
0365+  62CB             
0365+  62CB 27 FE       
0366+  62CD 86 FD       				lampOff(2,3)
0366+  62CF 94 0A       
0366+  62D1 97 0A       
0367+  62D3 86 FD       				flashOff(2,3)
0367+  62D5 94 A2       
0367+  62D7 97 A2       
0368+  62D9             			endif
0368+  62D9             
0368+  62D9             
0368+  62D9             
0368+  62D9             
0368+  62D9             
0368+  62D9~            			endif
0368+  62D9~            			endif
0368+  62D9             
0368+  62D9~            			endif
0368+  62D9~            			endif
0368+  62D9             
0368+  62CC             
0368+  62CC 0C          
0368+  62CD             
0368+  62CD             
0368+  62CD~            			endif
0368+  62CD~            			endif
0368+  62CD~            			endif
0368+  62CD             
0368+  62D9             
0368+  62D9~            			endif
0368+  62D9~            			endif
0368+  62D9             
0369+  62D9             			
0370+  62D9             			; flash player light
0371+  62D9 86 0F       			ldaA	00001111b ; player up lights
0372+  62DB 9A A7       			oraA	>flc(8)
0373+  62DD 97 A7       			staA	flc(8)
0374+  62DF             		endif
0374+  62DF             
0374+  62DF             
0374+  62DF             
0374+  62DF             
0374+  62DF             
0374+  62DF~            		endif
0374+  62DF~            		endif
0374+  62DF             
0374+  62DF~            		endif
0374+  62DF~            		endif
0374+  62DF             
0374+  62B4             
0374+  62B4 2A          
0374+  62B5             
0374+  62B5             
0374+  62B5~            		endif
0374+  62B5~            		endif
0374+  62B5~            		endif
0374+  62B5             
0374+  62DF             
0374+  62DF~            		endif
0374+  62DF~            		endif
0374+  62DF             
0375+  62DF             	endif
0375+  62DF             
0375+  62DF             
0375+  62DF             
0375+  62DF             
0375+  62DF             
0375+  62DF~            	endif
0375+  62DF~            	endif
0375+  62DF             
0375+  62DF~            	endif
0375+  62DF~            	endif
0375+  62DF             
0375+  62B0             
0375+  62B0 2E          
0375+  62B1             
0375+  62B1             
0375+  62B1~            	endif
0375+  62B1~            	endif
0375+  62B1~            	endif
0375+  62B1             
0375+  62DF             
0375+  62DF~            	endif
0375+  62DF~            	endif
0375+  62DF             
0376+  62DF             	
0377+  62DF 86 0F       	ldaA	00001111b ; player up lights
0378+  62E1 95 A7       	bitA	>flc(8)	; check if any player is flashing
0379+  62E3             	ifne ; any flashing -> playfield invalid
0379+  62E3             
0379+  62E3 27 FE       
0380+  62E5             swOuthole_save:
0381+  62E5 86 EF       		lampOff(5,8) ; tilt
0381+  62E7 94 0F       
0381+  62E9 97 0F       
0382+  62EB             		
0383+  62EB B6 22 03    		enablePf
0383+  62EE 8A 38       
0383+  62F0 B7 22 03    
0384+  62F3 C6 02       		fireSolenoid(OUTHOLE)
0384+  62F5 F7 01 44    
0385+  62F8             	else ; none flashing -> playfield valid -> end ball			
0385+  62F8             
0385+  62F8             
0385+  62F8             
0385+  62F8             
0385+  62E4             
0385+  62E4             
0385+  62E4             
0385+  62E4~            	else ; none flashing -> playfield valid -> end ball			
0385+  62E4~            	else ; none flashing -> playfield valid -> end ball			
0385+  62E4~            	else ; none flashing -> playfield valid -> end ball			
0385+  62E4~            	else ; none flashing -> playfield valid -> end ball			
0385+  62E4             
0385+  62E4~            	else ; none flashing -> playfield valid -> end ball			
0385+  62E4~            	else ; none flashing -> playfield valid -> end ball			
0385+  62E4~            	else ; none flashing -> playfield valid -> end ball			
0385+  62E4~            	else ; none flashing -> playfield valid -> end ball			
0385+  62E4             
0385+  62E4             
0385+  62E4 15          
0385+  62F8             
0385+  62F8 20 FE       
0385+  62FA             
0385+  62FA             
0385+  62FA             
0385+  62FA~            	else ; none flashing -> playfield valid -> end ball			
0385+  62FA~            	else ; none flashing -> playfield valid -> end ball			
0385+  62FA~            	else ; none flashing -> playfield valid -> end ball			
0385+  62FA~            	else ; none flashing -> playfield valid -> end ball			
0385+  62FA~            	else ; none flashing -> playfield valid -> end ball			
0385+  62FA             
0385+  62FA~            	else ; none flashing -> playfield valid -> end ball			
0385+  62FA~            	else ; none flashing -> playfield valid -> end ball			
0385+  62FA             
0385+  62FA~            	else ; none flashing -> playfield valid -> end ball			
0385+  62FA~            	else ; none flashing -> playfield valid -> end ball			
0385+  62FA             
0386+  62FA             swOuthole_bonusLoop:
0387+  62FA BD 7E 06    		score1000()
0388+  62FD 96 09       		ldaA	>lc(2) ; double bonus
0389+  62FF 85 04       		bitA	lr(3)
0390+  6301             		ifne 
0390+  6301             
0390+  6301 27 FE       
0391+  6303 86 0C       			delay(100)
0391+  6305 BD 7D 6B    
0392+  6308 BD 7E 06    			score1000()
0393+  630B             		endif
0393+  630B             
0393+  630B             
0393+  630B             
0393+  630B             
0393+  630B             
0393+  630B~            		endif
0393+  630B~            		endif
0393+  630B             
0393+  630B~            		endif
0393+  630B~            		endif
0393+  630B             
0393+  6302             
0393+  6302 08          
0393+  6303             
0393+  6303             
0393+  6303~            		endif
0393+  6303~            		endif
0393+  6303~            		endif
0393+  6303             
0393+  630B             
0393+  630B~            		endif
0393+  630B~            		endif
0393+  630B             
0394+  630B 7A 00 B0    		dec	p_Bonus
0395+  630E BD 60 C3    		jsr	bonusLights
0396+  6311 86 19       		delay(200)
0396+  6313 BD 7D 6B    
0397+  6316 7D 00 B0    		tst	p_Bonus
0398+  6319 26 DF       		bne	swOuthole_bonusLoop
0399+  631B             	
0400+  631B 86 0F       		ldaA	00001111b ; player up lights
0401+  631D 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0402+  631F D6 0A       		ldaB	>lc(3) ; check shoot again light
0403+  6321 C5 01       		bitB	lr(1)
0404+  6323             		ifeq ; shoot again not lit
0404+  6323             
0404+  6323 26 FE       
0405+  6325             			; store player's data
0406+  6325 DE 12       			ldX	>curPlayer
0407+  6327 D6 0B       			ldaB	>lc(4)
0408+  6329 E7 B1       			staB	p_Ejects, X
0409+  632B D6 0A       			ldaB	>lc(3)
0410+  632D C4 02       			andB	lr(2)
0411+  632F DA 09       			oraB	>lc(2)
0412+  6331 E7 B6       			staB	p_LampCol2, X
0413+  6333 D6 AA       			ldaB	>dropsDown
0414+  6335 E7 BA       			staB	p_EachDropDown, X
0415+  6337             			
0416+  6337             		
0417+  6337             			; go to next player
0418+  6337 48          			aslA
0419+  6338 7C 00 13    			inc	curPlayer + 1
0420+  633B 95 0E       			bitA	>lc(7)	; is player count < player #
0421+  633D             			ifne ; last player
0421+  633D             
0421+  633D 27 FE       
0422+  633F 86 01       				ldaA	00000001b; ; back to player 1
0423+  6341 C6 00       				ldaB	0
0424+  6343 D7 13       				staB	curPlayer + 1
0425+  6345             				
0426+  6345             				; increase ball count
0427+  6345 D6 77       				ldaB	>ballCount
0428+  6347 CB 10       				addB	$10
0429+  6349 C1 40       				cmpB	$40
0430+  634B             				ifeq ; game over
0430+  634B             
0430+  634B 26 FE       
0431+  634D 86 20       					lampOn(6,8)
0431+  634F 9A 0F       
0431+  6351 97 0F       
0432+  6353 B6 22 03    					disablePf
0432+  6356 84 F7       
0432+  6358 B7 22 03    
0433+  635B             					done(1)
0433+  635B~            					done(1)
0433+  635B~            					done(1)
0433+  635B~            					done(1)
0433+  635B~            					done(1)
0433+  635B             
0433+  635B 7E 79 8C    
0434+  635E             				else
0434+  635E             
0434+  635E             
0434+  635E             
0434+  635E             
0434+  634C             
0434+  634C             
0434+  634C             
0434+  634C~            				else
0434+  634C~            				else
0434+  634C~            				else
0434+  634C~            				else
0434+  634C             
0434+  634C~            				else
0434+  634C~            				else
0434+  634C~            				else
0434+  634C~            				else
0434+  634C             
0434+  634C             
0434+  634C 13          
0434+  635E             
0434+  635E 20 FE       
0434+  6360             
0434+  6360             
0434+  6360             
0434+  6360~            				else
0434+  6360~            				else
0434+  6360~            				else
0434+  6360~            				else
0434+  6360~            				else
0434+  6360             
0434+  6360~            				else
0434+  6360~            				else
0434+  6360             
0434+  6360~            				else
0434+  6360~            				else
0434+  6360             
0435+  6360 D7 77       					staB	ballCount
0436+  6362             				endif		
0436+  6362             
0436+  6362             
0436+  6362             
0436+  6362             
0436+  6362             
0436+  6362~            				endif		
0436+  6362~            				endif		
0436+  6362             
0436+  6362~            				endif		
0436+  6362~            				endif		
0436+  6362             
0436+  635F             
0436+  635F 02          
0436+  6360             
0436+  6360             
0436+  6360~            				endif		
0436+  6360~            				endif		
0436+  6360~            				endif		
0436+  6360             
0436+  6362             
0436+  6362~            				endif		
0436+  6362~            				endif		
0436+  6362             
0437+  6362             			endif
0437+  6362             
0437+  6362             
0437+  6362             
0437+  6362             
0437+  6362             
0437+  6362~            			endif
0437+  6362~            			endif
0437+  6362             
0437+  6362~            			endif
0437+  6362~            			endif
0437+  6362             
0437+  633E             
0437+  633E 23          
0437+  633F             
0437+  633F             
0437+  633F~            			endif
0437+  633F~            			endif
0437+  633F~            			endif
0437+  633F             
0437+  6362             
0437+  6362~            			endif
0437+  6362~            			endif
0437+  6362             
0438+  6362             			
0439+  6362 97 0F       			staA	lc(8)
0440+  6364             		endif
0440+  6364             
0440+  6364             
0440+  6364             
0440+  6364             
0440+  6364             
0440+  6364~            		endif
0440+  6364~            		endif
0440+  6364             
0440+  6364~            		endif
0440+  6364~            		endif
0440+  6364             
0440+  6324             
0440+  6324 3F          
0440+  6325             
0440+  6325             
0440+  6325~            		endif
0440+  6325~            		endif
0440+  6325~            		endif
0440+  6325             
0440+  6364             
0440+  6364~            		endif
0440+  6364~            		endif
0440+  6364             
0441+  6364             		
0442+  6364 BD 60 F2    		jsr	startBall
0443+  6367             	endif	
0443+  6367             
0443+  6367             
0443+  6367             
0443+  6367             
0443+  6367             
0443+  6367~            	endif	
0443+  6367~            	endif	
0443+  6367             
0443+  6367~            	endif	
0443+  6367~            	endif	
0443+  6367             
0443+  62F9             
0443+  62F9 6D          
0443+  62FA             
0443+  62FA             
0443+  62FA~            	endif	
0443+  62FA~            	endif	
0443+  62FA~            	endif	
0443+  62FA             
0443+  6367             
0443+  6367~            	endif	
0443+  6367~            	endif	
0443+  6367             
0444+  6367             	done(0)
0444+  6367             
0444+  6367 86 02       
0444+  6369 BA 01 6B    
0444+  636C B7 01 6B    
0444+  636F             
0444+  636F 7E 79 8C    
0445+  6372             	
0446+  6372             swLeftEject:
0447+  6372 96 0F       	ldaA	>lc(8)
0448+  6374 85 20       	bitA	lr(6)
0449+  6376             	ifne ; not in game
0449+  6376             
0449+  6376 27 FE       
0450+  6378 C6 03       		fireSolenoid(LEFT_EJECT)
0450+  637A F7 01 43    
0451+  637D             		done(0)
0451+  637D             
0451+  637D 86 02       
0451+  637F BA 01 6B    
0451+  6382 B7 01 6B    
0451+  6385             
0451+  6385 7E 79 8C    
0452+  6388             	endif
0452+  6388             
0452+  6388             
0452+  6388             
0452+  6388             
0452+  6388             
0452+  6388~            	endif
0452+  6388~            	endif
0452+  6388             
0452+  6388~            	endif
0452+  6388~            	endif
0452+  6388             
0452+  6377             
0452+  6377 10          
0452+  6378             
0452+  6378             
0452+  6378~            	endif
0452+  6378~            	endif
0452+  6378~            	endif
0452+  6378             
0452+  6388             
0452+  6388~            	endif
0452+  6388~            	endif
0452+  6388             
0453+  6388             		
0454+  6388 BD 7E 16    	advBonus()
0455+  638B 86 04       	ldaA	lr(3) ; extra ball
0456+  638D 95 0A       	bitA	>lc(3)
0457+  638F             	ifne
0457+  638F             
0457+  638F 27 FE       
0458+  6391 C6 06       		fireSolenoid(KNOCKER)
0458+  6393 F7 01 4D    
0459+  6396 86 01       		lampOn(1,3) ; shoot again
0459+  6398 9A 0A       
0459+  639A 97 0A       
0460+  639C 86 40       		lampOn(7,8)
0460+  639E 9A 0F       
0460+  63A0 97 0F       
0461+  63A2 86 FB       		lampOff(3,3) ; extra ball
0461+  63A4 94 0A       
0461+  63A6 97 0A       
0462+  63A8 86 3E       		delay(500)
0462+  63AA BD 7D 6B    
0463+  63AD             	else
0463+  63AD             
0463+  63AD             
0463+  63AD             
0463+  63AD             
0463+  6390             
0463+  6390             
0463+  6390             
0463+  6390~            	else
0463+  6390~            	else
0463+  6390~            	else
0463+  6390~            	else
0463+  6390             
0463+  6390~            	else
0463+  6390~            	else
0463+  6390~            	else
0463+  6390~            	else
0463+  6390             
0463+  6390             
0463+  6390 1E          
0463+  63AD             
0463+  63AD 20 FE       
0463+  63AF             
0463+  63AF             
0463+  63AF             
0463+  63AF~            	else
0463+  63AF~            	else
0463+  63AF~            	else
0463+  63AF~            	else
0463+  63AF~            	else
0463+  63AF             
0463+  63AF~            	else
0463+  63AF~            	else
0463+  63AF             
0463+  63AF~            	else
0463+  63AF~            	else
0463+  63AF             
0464+  63AF BD 67 39    		jsr	addCollect
0465+  63B2             		score500()
0465+  63B2 BD 7D F7    
0465+  63B5 C6 02       
0465+  63B7 F7 01 49    
0465+  63BA 86 0E       
0465+  63BC BD 7D 6B    
0465+  63BF BD 7D F7    
0465+  63C2 C6 02       
0465+  63C4 F7 01 49    
0465+  63C7 86 0E       
0465+  63C9 BD 7D 6B    
0465+  63CC BD 7D F7    
0465+  63CF C6 02       
0465+  63D1 F7 01 49    
0465+  63D4 86 0E       
0465+  63D6 BD 7D 6B    
0465+  63D9 BD 7D F7    
0465+  63DC C6 02       
0465+  63DE F7 01 49    
0465+  63E1 86 0E       
0465+  63E3 BD 7D 6B    
0465+  63E6 BD 7D F7    
0465+  63E9 C6 02       
0465+  63EB F7 01 49    
0465+  63EE 86 0E       
0465+  63F0 BD 7D 6B    
0466+  63F3             	endif
0466+  63F3             
0466+  63F3             
0466+  63F3             
0466+  63F3             
0466+  63F3             
0466+  63F3~            	endif
0466+  63F3~            	endif
0466+  63F3             
0466+  63F3~            	endif
0466+  63F3~            	endif
0466+  63F3             
0466+  63AE             
0466+  63AE 44          
0466+  63AF             
0466+  63AF             
0466+  63AF~            	endif
0466+  63AF~            	endif
0466+  63AF~            	endif
0466+  63AF             
0466+  63F3             
0466+  63F3~            	endif
0466+  63F3~            	endif
0466+  63F3             
0467+  63F3 C6 03       	fireSolenoid(LEFT_EJECT)
0467+  63F5 F7 01 43    
0468+  63F8             	
0469+  63F8 86 32       	fork(400)
0469+  63FA BD 7D 80    
0470+  63FD             	done(1)
0470+  63FD~            	done(1)
0470+  63FD~            	done(1)
0470+  63FD~            	done(1)
0470+  63FD~            	done(1)
0470+  63FD             
0470+  63FD 7E 79 8C    
0471+  6400             	beginFork()
0472+  6400 86 C7       	ldaA	11000111b
0473+  6402 94 A1       	andA	>flc(2)
0474+  6404 97 A1       	staA	flc(2)
0475+  6406 DE 2C       	endFork()
0475+  6408 7E 79 3C    
0476+  640B             	
0477+  640B             swTopEject:
0478+  640B BD 7E 16    	advBonus()
0479+  640E D6 0B       	ldaB	>lc(4)
0480+  6410 57          	asrB
0481+  6411             	ifeq ; 1k
0481+  6411             
0481+  6411 26 FE       
0482+  6413 BD 7E 06    		score1000()
0483+  6416 86 19       		delay(200)
0483+  6418 BD 7D 6B    
0484+  641B 7E 64 E0    		jmp	swTopEject_scored
0485+  641E             	endif
0485+  641E             
0485+  641E             
0485+  641E             
0485+  641E             
0485+  641E             
0485+  641E~            	endif
0485+  641E~            	endif
0485+  641E             
0485+  641E~            	endif
0485+  641E~            	endif
0485+  641E             
0485+  6412             
0485+  6412 0B          
0485+  6413             
0485+  6413             
0485+  6413~            	endif
0485+  6413~            	endif
0485+  6413~            	endif
0485+  6413             
0485+  641E             
0485+  641E~            	endif
0485+  641E~            	endif
0485+  641E             
0486+  641E 57          	asrB
0487+  641F             	ifeq  ; captive
0487+  641F             
0487+  641F 26 FE       
0488+  6421 86 40       		ldaA	lr(7)
0489+  6423 95 09       		bitA	>lc(2) ; captive ball
0490+  6425             		ifeq	; not lit
0490+  6425             
0490+  6425 26 FE       
0491+  6427 86 40       			lampOn(7,2)
0491+  6429 9A 09       
0491+  642B 97 09       
0492+  642D 86 40       			flashLamp(7,2)
0492+  642F 9A A1       
0492+  6431 97 A1       
0493+  6433             		else
0493+  6433             
0493+  6433             
0493+  6433             
0493+  6433             
0493+  6426             
0493+  6426             
0493+  6426             
0493+  6426~            		else
0493+  6426~            		else
0493+  6426~            		else
0493+  6426~            		else
0493+  6426             
0493+  6426~            		else
0493+  6426~            		else
0493+  6426~            		else
0493+  6426~            		else
0493+  6426             
0493+  6426             
0493+  6426 0E          
0493+  6433             
0493+  6433 20 FE       
0493+  6435             
0493+  6435             
0493+  6435             
0493+  6435~            		else
0493+  6435~            		else
0493+  6435~            		else
0493+  6435~            		else
0493+  6435~            		else
0493+  6435             
0493+  6435~            		else
0493+  6435~            		else
0493+  6435             
0493+  6435~            		else
0493+  6435~            		else
0493+  6435             
0494+  6435 86 BF       			lampOff(7,2)
0494+  6437 94 09       
0494+  6439 97 09       
0495+  643B             		endif
0495+  643B             
0495+  643B             
0495+  643B             
0495+  643B             
0495+  643B             
0495+  643B~            		endif
0495+  643B~            		endif
0495+  643B             
0495+  643B~            		endif
0495+  643B~            		endif
0495+  643B             
0495+  6434             
0495+  6434 06          
0495+  6435             
0495+  6435             
0495+  6435~            		endif
0495+  6435~            		endif
0495+  6435~            		endif
0495+  6435             
0495+  643B             
0495+  643B~            		endif
0495+  643B~            		endif
0495+  643B             
0496+  643B             	score500()
0496+  643B BD 7D F7    
0496+  643E C6 02       
0496+  6440 F7 01 49    
0496+  6443 86 0E       
0496+  6445 BD 7D 6B    
0496+  6448 BD 7D F7    
0496+  644B C6 02       
0496+  644D F7 01 49    
0496+  6450 86 0E       
0496+  6452 BD 7D 6B    
0496+  6455 BD 7D F7    
0496+  6458 C6 02       
0496+  645A F7 01 49    
0496+  645D 86 0E       
0496+  645F BD 7D 6B    
0496+  6462 BD 7D F7    
0496+  6465 C6 02       
0496+  6467 F7 01 49    
0496+  646A 86 0E       
0496+  646C BD 7D 6B    
0496+  646F BD 7D F7    
0496+  6472 C6 02       
0496+  6474 F7 01 49    
0496+  6477 86 0E       
0496+  6479 BD 7D 6B    
0497+  647C 7E 64 E0    		jmp	swTopEject_scored
0498+  647F             	endif
0498+  647F             
0498+  647F             
0498+  647F             
0498+  647F             
0498+  647F             
0498+  647F~            	endif
0498+  647F~            	endif
0498+  647F             
0498+  647F~            	endif
0498+  647F~            	endif
0498+  647F             
0498+  6420             
0498+  6420 5E          
0498+  6421             
0498+  6421             
0498+  6421~            	endif
0498+  6421~            	endif
0498+  6421~            	endif
0498+  6421             
0498+  647F             
0498+  647F~            	endif
0498+  647F~            	endif
0498+  647F             
0499+  647F 57          	asrB
0500+  6480             	ifne	
0500+  6480             
0500+  6480 27 FE       
0501+  6482 57          		asrB
0502+  6483             		ifeq ; double
0502+  6483             
0502+  6483 26 FE       
0503+  6485 86 04       			ldaA	lr(3)
0504+  6487 95 09       			bitA	>lc(2) ; double bonus
0505+  6489             			ifeq	; not lit
0505+  6489             
0505+  6489 26 FE       
0506+  648B 86 04       				lampOn(3,2)
0506+  648D 9A 09       
0506+  648F 97 09       
0507+  6491 86 04       				flashLamp(3,2)
0507+  6493 9A A1       
0507+  6495 97 A1       
0508+  6497             			else
0508+  6497             
0508+  6497             
0508+  6497             
0508+  6497             
0508+  648A             
0508+  648A             
0508+  648A             
0508+  648A~            			else
0508+  648A~            			else
0508+  648A~            			else
0508+  648A~            			else
0508+  648A             
0508+  648A~            			else
0508+  648A~            			else
0508+  648A~            			else
0508+  648A~            			else
0508+  648A             
0508+  648A             
0508+  648A 0E          
0508+  6497             
0508+  6497 20 FE       
0508+  6499             
0508+  6499             
0508+  6499             
0508+  6499~            			else
0508+  6499~            			else
0508+  6499~            			else
0508+  6499~            			else
0508+  6499~            			else
0508+  6499             
0508+  6499~            			else
0508+  6499~            			else
0508+  6499             
0508+  6499~            			else
0508+  6499~            			else
0508+  6499             
0509+  6499 86 FB       				lampOff(3,2)
0509+  649B 94 09       
0509+  649D 97 09       
0510+  649F             			endif
0510+  649F             
0510+  649F             
0510+  649F             
0510+  649F             
0510+  649F             
0510+  649F~            			endif
0510+  649F~            			endif
0510+  649F             
0510+  649F~            			endif
0510+  649F~            			endif
0510+  649F             
0510+  6498             
0510+  6498 06          
0510+  6499             
0510+  6499             
0510+  6499~            			endif
0510+  6499~            			endif
0510+  6499~            			endif
0510+  6499             
0510+  649F             
0510+  649F~            			endif
0510+  649F~            			endif
0510+  649F             
0511+  649F             		endif
0511+  649F             
0511+  649F             
0511+  649F             
0511+  649F             
0511+  649F             
0511+  649F~            		endif
0511+  649F~            		endif
0511+  649F             
0511+  649F~            		endif
0511+  649F~            		endif
0511+  649F             
0511+  6484             
0511+  6484 1A          
0511+  6485             
0511+  6485             
0511+  6485~            		endif
0511+  6485~            		endif
0511+  6485~            		endif
0511+  6485             
0511+  649F             
0511+  649F~            		endif
0511+  649F~            		endif
0511+  649F             
0512+  649F             	endif
0512+  649F             
0512+  649F             
0512+  649F             
0512+  649F             
0512+  649F             
0512+  649F~            	endif
0512+  649F~            	endif
0512+  649F             
0512+  649F~            	endif
0512+  649F~            	endif
0512+  649F             
0512+  6481             
0512+  6481 1D          
0512+  6482             
0512+  6482             
0512+  6482~            	endif
0512+  6482~            	endif
0512+  6482~            	endif
0512+  6482             
0512+  649F             
0512+  649F~            	endif
0512+  649F~            	endif
0512+  649F             
0513+  649F             	score500()
0513+  649F BD 7D F7    
0513+  64A2 C6 02       
0513+  64A4 F7 01 49    
0513+  64A7 86 0E       
0513+  64A9 BD 7D 6B    
0513+  64AC BD 7D F7    
0513+  64AF C6 02       
0513+  64B1 F7 01 49    
0513+  64B4 86 0E       
0513+  64B6 BD 7D 6B    
0513+  64B9 BD 7D F7    
0513+  64BC C6 02       
0513+  64BE F7 01 49    
0513+  64C1 86 0E       
0513+  64C3 BD 7D 6B    
0513+  64C6 BD 7D F7    
0513+  64C9 C6 02       
0513+  64CB F7 01 49    
0513+  64CE 86 0E       
0513+  64D0 BD 7D 6B    
0513+  64D3 BD 7D F7    
0513+  64D6 C6 02       
0513+  64D8 F7 01 49    
0513+  64DB 86 0E       
0513+  64DD BD 7D 6B    
0514+  64E0             swTopEject_scored:
0515+  64E0 86 FB       	flashOff(3,2)
0515+  64E2 94 A1       
0515+  64E4 97 A1       
0516+  64E6 86 BF       	flashOff(7,2)
0516+  64E8 94 A1       
0516+  64EA 97 A1       
0517+  64EC C6 03       	fireSolenoid(TOP_EJECT)
0517+  64EE F7 01 40    
0518+  64F1             	done(1)
0518+  64F1~            	done(1)
0518+  64F1~            	done(1)
0518+  64F1~            	done(1)
0518+  64F1~            	done(1)
0518+  64F1             
0518+  64F1 7E 79 8C    
0519+  64F4             	
0520+  64F4             swHotTip:
0521+  64F4 7D 00 A9    	tst	dropResetTimer
0522+  64F7             	ifne
0522+  64F7             
0522+  64F7 27 FE       
0523+  64F9             		done(0)
0523+  64F9             
0523+  64F9 86 02       
0523+  64FB BA 01 6B    
0523+  64FE B7 01 6B    
0523+  6501             
0523+  6501 7E 79 8C    
0524+  6504             	endif
0524+  6504             
0524+  6504             
0524+  6504             
0524+  6504             
0524+  6504             
0524+  6504~            	endif
0524+  6504~            	endif
0524+  6504             
0524+  6504~            	endif
0524+  6504~            	endif
0524+  6504             
0524+  64F8             
0524+  64F8 0B          
0524+  64F9             
0524+  64F9             
0524+  64F9~            	endif
0524+  64F9~            	endif
0524+  64F9~            	endif
0524+  64F9             
0524+  6504             
0524+  6504~            	endif
0524+  6504~            	endif
0524+  6504             
0525+  6504             	
0526+  6504 BD 67 39    	jsr	addCollect
0527+  6507 86 00       	ldaA	0
0528+  6509 97 B5       	staA	p_DropsDown
0529+  650B 97 AA       	staA	dropsDown
0530+  650D 86 41       	ldaA	65
0531+  650F 97 A9       	staA	dropResetTimer
0532+  6511 86 12       	delay(150)
0532+  6513 BD 7D 6B    
0533+  6516 C6 0C       	fireSolenoid(DROP_HOT)
0533+  6518 F7 01 42    
0534+  651B 86 12       	delay(150)
0534+  651D BD 7D 6B    
0535+  6520 C6 0C       	fireSolenoid(DROP_TIP)
0535+  6522 F7 01 41    
0536+  6525 86 F7       	lampOff(4,3) ; spinner
0536+  6527 94 0A       
0536+  6529 97 0A       
0537+  652B             	
0538+  652B 86 70       	fork(900)
0538+  652D BD 7D 80    
0539+  6530             	done(1)
0539+  6530~            	done(1)
0539+  6530~            	done(1)
0539+  6530~            	done(1)
0539+  6530~            	done(1)
0539+  6530             
0539+  6530 7E 79 8C    
0540+  6533             	beginFork()
0541+  6533 86 C7       	ldaA	11000111b
0542+  6535 94 A1       	andA	>flc(2)
0543+  6537 97 A1       	staA	flc(2)
0544+  6539 DE 2C       	endFork()
0544+  653B 7E 79 3C    
0545+  653E             	
0546+  653E             swLeftOutlane:
0547+  653E 86 02       	ldaA	lr(2) ; left special
0548+  6540 95 0A       	bitA	>lc(3)
0549+  6542             	ifne
0549+  6542             
0549+  6542 27 FE       
0550+  6544 86 01       		lampOn(1,3) ; shoot again
0550+  6546 9A 0A       
0550+  6548 97 0A       
0551+  654A 86 01       		flashLamp(1,3)
0551+  654C 9A A2       
0551+  654E 97 A2       
0552+  6550 C6 0C       		fireSolenoid(BUZZER)
0552+  6552 F7 01 4E    
0553+  6555 86 02       		flashLamp(2,3)
0553+  6557 9A A2       
0553+  6559 97 A2       
0554+  655B             	endif
0554+  655B             
0554+  655B             
0554+  655B             
0554+  655B             
0554+  655B             
0554+  655B~            	endif
0554+  655B~            	endif
0554+  655B             
0554+  655B~            	endif
0554+  655B~            	endif
0554+  655B             
0554+  6543             
0554+  6543 17          
0554+  6544             
0554+  6544             
0554+  6544~            	endif
0554+  6544~            	endif
0554+  6544~            	endif
0554+  6544             
0554+  655B             
0554+  655B~            	endif
0554+  655B~            	endif
0554+  655B             
0555+  655B BD 7E 16    	advBonus()
0556+  655E BD 7E 06    	score1000()
0557+  6561             	done(1)
0557+  6561~            	done(1)
0557+  6561~            	done(1)
0557+  6561~            	done(1)
0557+  6561~            	done(1)
0557+  6561             
0557+  6561 7E 79 8C    
0558+  6564             	
0559+  6564             swRightOutlane:
0560+  6564 86 80       	ldaA	lr(8) ; right special
0561+  6566 95 09       	bitA	>lc(2)
0562+  6568             	ifne
0562+  6568             
0562+  6568 27 FE       
0563+  656A 86 01       		lampOn(1,3) ; shoot again
0563+  656C 9A 0A       
0563+  656E 97 0A       
0564+  6570 86 01       		flashLamp(1,3)
0564+  6572 9A A2       
0564+  6574 97 A2       
0565+  6576 C6 0C       		fireSolenoid(BUZZER)
0565+  6578 F7 01 4E    
0566+  657B 86 80       		flashLamp(8,2)
0566+  657D 9A A1       
0566+  657F 97 A1       
0567+  6581             	endif
0567+  6581             
0567+  6581             
0567+  6581             
0567+  6581             
0567+  6581             
0567+  6581~            	endif
0567+  6581~            	endif
0567+  6581             
0567+  6581~            	endif
0567+  6581~            	endif
0567+  6581             
0567+  6569             
0567+  6569 17          
0567+  656A             
0567+  656A             
0567+  656A~            	endif
0567+  656A~            	endif
0567+  656A~            	endif
0567+  656A             
0567+  6581             
0567+  6581~            	endif
0567+  6581~            	endif
0567+  6581             
0568+  6581 BD 7E 16    	advBonus()
0569+  6584 BD 7E 06    	score1000()
0570+  6587             	done(1)
0570+  6587~            	done(1)
0570+  6587~            	done(1)
0570+  6587~            	done(1)
0570+  6587~            	done(1)
0570+  6587             
0570+  6587 7E 79 8C    
0571+  658A             	
0572+  658A             swLeftInlane:
0573+  658A             swRightInlane:
0574+  658A BD 7E 16    	advBonus()
0575+  658D BD 7E 06    	score1000()
0576+  6590             	done(1)
0576+  6590~            	done(1)
0576+  6590~            	done(1)
0576+  6590~            	done(1)
0576+  6590~            	done(1)
0576+  6590             
0576+  6590 7E 79 8C    
0577+  6593             sw10pt:
0578+  6593 BD 7D E9    	score10()
0579+  6596 77 00 0B    	asr	lc(4)
0580+  6599             	ifeq ; shifted off the edge
0580+  6599             
0580+  6599 26 FE       
0581+  659B 86 10       		ldaA	00010000b
0582+  659D 97 0B       		staA	lc(4)
0583+  659F             	endif
0583+  659F             
0583+  659F             
0583+  659F             
0583+  659F             
0583+  659F             
0583+  659F~            	endif
0583+  659F~            	endif
0583+  659F             
0583+  659F~            	endif
0583+  659F~            	endif
0583+  659F             
0583+  659A             
0583+  659A 04          
0583+  659B             
0583+  659B             
0583+  659B~            	endif
0583+  659B~            	endif
0583+  659B~            	endif
0583+  659B             
0583+  659F             
0583+  659F~            	endif
0583+  659F~            	endif
0583+  659F             
0584+  659F             	done(1)
0584+  659F~            	done(1)
0584+  659F~            	done(1)
0584+  659F~            	done(1)
0584+  659F~            	done(1)
0584+  659F             
0584+  659F 7E 79 8C    
0585+  65A2             sw100pt:
0586+  65A2 BD 7D F7    	score100()
0587+  65A5             	done(1)
0587+  65A5~            	done(1)
0587+  65A5~            	done(1)
0587+  65A5~            	done(1)
0587+  65A5~            	done(1)
0587+  65A5             
0587+  65A5 7E 79 8C    
0588+  65A8             sw500pt:
0589+  65A8 BD 67 0D    	jsr	alternate
0590+  65AB             	score500()
0590+  65AB BD 7D F7    
0590+  65AE C6 02       
0590+  65B0 F7 01 49    
0590+  65B3 86 0E       
0590+  65B5 BD 7D 6B    
0590+  65B8 BD 7D F7    
0590+  65BB C6 02       
0590+  65BD F7 01 49    
0590+  65C0 86 0E       
0590+  65C2 BD 7D 6B    
0590+  65C5 BD 7D F7    
0590+  65C8 C6 02       
0590+  65CA F7 01 49    
0590+  65CD 86 0E       
0590+  65CF BD 7D 6B    
0590+  65D2 BD 7D F7    
0590+  65D5 C6 02       
0590+  65D7 F7 01 49    
0590+  65DA 86 0E       
0590+  65DC BD 7D 6B    
0590+  65DF BD 7D F7    
0590+  65E2 C6 02       
0590+  65E4 F7 01 49    
0590+  65E7 86 0E       
0590+  65E9 BD 7D 6B    
0591+  65EC             	done(1)
0591+  65EC~            	done(1)
0591+  65EC~            	done(1)
0591+  65EC~            	done(1)
0591+  65EC~            	done(1)
0591+  65EC             
0591+  65EC 7E 79 8C    
0592+  65EF             swPop:
0593+  65EF BD 67 0D    	jsr	alternate
0594+  65F2 BD 7D F7    	score100()
0595+  65F5             	done(1)
0595+  65F5~            	done(1)
0595+  65F5~            	done(1)
0595+  65F5~            	done(1)
0595+  65F5~            	done(1)
0595+  65F5             
0595+  65F5 7E 79 8C    
0596+  65F8             swDropTip:
0597+  65F8 86 08       	ldaA	1<<3
0598+  65FA 7E 66 16    	jmp	swDrop
0599+  65FD             swDropHot:
0600+  65FD 86 01       	ldaA	1<<0
0601+  65FF 7E 66 16    	jmp	swDrop
0602+  6602             swDroptIp:
0603+  6602 86 10       	ldaA	1<<4
0604+  6604 7E 66 16    	jmp	swDrop
0605+  6607             swDrophOt:
0606+  6607 86 02       	ldaA	1<<1
0607+  6609 7E 66 16    	jmp	swDrop
0608+  660C             swDroptiP:
0609+  660C 86 20       	ldaA	1<<5
0610+  660E 7E 66 16    	jmp	swDrop
0611+  6611             swDrophoT:
0612+  6611 86 04       	ldaA	1<<2
0613+  6613 7E 66 16    	jmp	swDrop
0614+  6616             swDrop:
0615+  6616 7D 00 A9    	tst	dropResetTimer
0616+  6619             	ifeq
0616+  6619             
0616+  6619 26 FE       
0617+  661B 95 AA       		bitA	>dropsDown
0618+  661D             		ifne
0618+  661D             
0618+  661D 27 FE       
0619+  661F             			done(0)
0619+  661F             
0619+  661F 86 02       
0619+  6621 BA 01 6B    
0619+  6624 B7 01 6B    
0619+  6627             
0619+  6627 7E 79 8C    
0620+  662A             		endif
0620+  662A             
0620+  662A             
0620+  662A             
0620+  662A             
0620+  662A             
0620+  662A~            		endif
0620+  662A~            		endif
0620+  662A             
0620+  662A~            		endif
0620+  662A~            		endif
0620+  662A             
0620+  661E             
0620+  661E 0B          
0620+  661F             
0620+  661F             
0620+  661F~            		endif
0620+  661F~            		endif
0620+  661F~            		endif
0620+  661F             
0620+  662A             
0620+  662A~            		endif
0620+  662A~            		endif
0620+  662A             
0621+  662A 9A AA       		oraA	>dropsDown
0622+  662C             		
0623+  662C 97 AA       		staA	dropsDown
0624+  662E 7C 00 B5    		inc	p_DropsDown
0625+  6631 86 04       		ldaA	4
0626+  6633 91 B5       		cmpA	>p_DropsDown
0627+  6635             		ifgt
0627+  6635             
0627+  6635 23 FE       
0628+  6637 86 F7       			lampOff(4,3) ; spinner
0628+  6639 94 0A       
0628+  663B 97 0A       
0629+  663D             		else
0629+  663D             
0629+  663D             
0629+  663D             
0629+  663D             
0629+  6636             
0629+  6636             
0629+  6636             
0629+  6636~            		else
0629+  6636~            		else
0629+  6636~            		else
0629+  6636~            		else
0629+  6636             
0629+  6636~            		else
0629+  6636~            		else
0629+  6636~            		else
0629+  6636~            		else
0629+  6636             
0629+  6636             
0629+  6636 08          
0629+  663D             
0629+  663D 20 FE       
0629+  663F             
0629+  663F             
0629+  663F             
0629+  663F~            		else
0629+  663F~            		else
0629+  663F~            		else
0629+  663F~            		else
0629+  663F~            		else
0629+  663F             
0629+  663F~            		else
0629+  663F~            		else
0629+  663F             
0629+  663F~            		else
0629+  663F~            		else
0629+  663F             
0630+  663F 86 08       			lampOn(4,3)
0630+  6641 9A 0A       
0630+  6643 97 0A       
0631+  6645             		endif
0631+  6645             
0631+  6645             
0631+  6645             
0631+  6645             
0631+  6645             
0631+  6645~            		endif
0631+  6645~            		endif
0631+  6645             
0631+  6645~            		endif
0631+  6645~            		endif
0631+  6645             
0631+  663E             
0631+  663E 06          
0631+  663F             
0631+  663F             
0631+  663F~            		endif
0631+  663F~            		endif
0631+  663F~            		endif
0631+  663F             
0631+  6645             
0631+  6645~            		endif
0631+  6645~            		endif
0631+  6645             
0632+  6645             		
0633+  6645 BD 7D E9    		score10()
0634+  6648 BD 7E 16    		advBonus()
0635+  664B             		done(1)
0635+  664B~            		done(1)
0635+  664B~            		done(1)
0635+  664B~            		done(1)
0635+  664B~            		done(1)
0635+  664B             
0635+  664B 7E 79 8C    
0636+  664E             	else
0636+  664E             
0636+  664E             
0636+  664E             
0636+  664E             
0636+  661A             
0636+  661A             
0636+  661A             
0636+  661A~            	else
0636+  661A~            	else
0636+  661A~            	else
0636+  661A~            	else
0636+  661A             
0636+  661A~            	else
0636+  661A~            	else
0636+  661A~            	else
0636+  661A~            	else
0636+  661A             
0636+  661A             
0636+  661A 35          
0636+  664E             
0636+  664E 20 FE       
0636+  6650             
0636+  6650             
0636+  6650             
0636+  6650~            	else
0636+  6650~            	else
0636+  6650~            	else
0636+  6650~            	else
0636+  6650~            	else
0636+  6650             
0636+  6650~            	else
0636+  6650~            	else
0636+  6650             
0636+  6650~            	else
0636+  6650~            	else
0636+  6650             
0637+  6650             		done(0)
0637+  6650             
0637+  6650 86 02       
0637+  6652 BA 01 6B    
0637+  6655 B7 01 6B    
0637+  6658             
0637+  6658 7E 79 8C    
0638+  665B             	endif
0638+  665B             
0638+  665B             
0638+  665B             
0638+  665B             
0638+  665B             
0638+  665B~            	endif
0638+  665B~            	endif
0638+  665B             
0638+  665B~            	endif
0638+  665B~            	endif
0638+  665B             
0638+  664F             
0638+  664F 0B          
0638+  6650             
0638+  6650             
0638+  6650~            	endif
0638+  6650~            	endif
0638+  6650~            	endif
0638+  6650             
0638+  665B             
0638+  665B~            	endif
0638+  665B~            	endif
0638+  665B             
0639+  665B             swAdvBonus:
0640+  665B BD 7E 16    	advBonus()
0641+  665E BD 7E 06    	score1000()
0642+  6661             	done(1)
0642+  6661~            	done(1)
0642+  6661~            	done(1)
0642+  6661~            	done(1)
0642+  6661~            	done(1)
0642+  6661             
0642+  6661 7E 79 8C    
0643+  6664             swSpinner:
0644+  6664             	;ldaA	>sc(4)
0645+  6664             	;bitA	sr(6)
0646+  6664             	;ifne
0647+  6664             	;	score100()
0648+  6664             	;	ldaA	$E
0649+  6664             	;else
0650+  6664             	;	noValidate
0651+  6664             	;	ldaA	0
0652+  6664             	;endif
0653+  6664             	;staA	solenoid1 + CLICKER - 1
0654+  6664             	
0655+  6664 86 08       	ldaA	lr(4) ; spinner
0656+  6666 95 0A       	bitA	>lc(3)
0657+  6668             	ifne ; spinner on
0657+  6668             
0657+  6668 27 FE       
0658+  666A BD 7D F7    		score100()
0659+  666D C6 01       		fireSolenoid(CLICKER)
0659+  666F F7 01 4C    
0660+  6672             	else
0660+  6672             
0660+  6672             
0660+  6672             
0660+  6672             
0660+  6669             
0660+  6669             
0660+  6669             
0660+  6669~            	else
0660+  6669~            	else
0660+  6669~            	else
0660+  6669~            	else
0660+  6669             
0660+  6669~            	else
0660+  6669~            	else
0660+  6669~            	else
0660+  6669~            	else
0660+  6669             
0660+  6669             
0660+  6669 0A          
0660+  6672             
0660+  6672 20 FE       
0660+  6674             
0660+  6674             
0660+  6674             
0660+  6674~            	else
0660+  6674~            	else
0660+  6674~            	else
0660+  6674~            	else
0660+  6674~            	else
0660+  6674             
0660+  6674~            	else
0660+  6674~            	else
0660+  6674             
0660+  6674~            	else
0660+  6674~            	else
0660+  6674             
0661+  6674 BD 7D E9    		score10()
0662+  6677             	endif
0662+  6677             
0662+  6677             
0662+  6677             
0662+  6677             
0662+  6677             
0662+  6677~            	endif
0662+  6677~            	endif
0662+  6677             
0662+  6677~            	endif
0662+  6677~            	endif
0662+  6677             
0662+  6673             
0662+  6673 03          
0662+  6674             
0662+  6674             
0662+  6674~            	endif
0662+  6674~            	endif
0662+  6674~            	endif
0662+  6674             
0662+  6677             
0662+  6677~            	endif
0662+  6677~            	endif
0662+  6677             
0663+  6677             	done(1)
0663+  6677~            	done(1)
0663+  6677~            	done(1)
0663+  6677~            	done(1)
0663+  6677~            	done(1)
0663+  6677             
0663+  6677 7E 79 8C    
0664+  667A             
0665+  667A             swCaptiveRollover:
0666+  667A 96 09       	ldaA	>lc(2)
0667+  667C 85 40       	bitA	lr(7)
0668+  667E             	ifeq ; light off
0668+  667E             
0668+  667E 26 FE       
0669+  6680 BD 7D E9    		score10()
0670+  6683             	else
0670+  6683             
0670+  6683             
0670+  6683             
0670+  6683             
0670+  667F             
0670+  667F             
0670+  667F             
0670+  667F~            	else
0670+  667F~            	else
0670+  667F~            	else
0670+  667F~            	else
0670+  667F             
0670+  667F~            	else
0670+  667F~            	else
0670+  667F~            	else
0670+  667F~            	else
0670+  667F             
0670+  667F             
0670+  667F 05          
0670+  6683             
0670+  6683 20 FE       
0670+  6685             
0670+  6685             
0670+  6685             
0670+  6685~            	else
0670+  6685~            	else
0670+  6685~            	else
0670+  6685~            	else
0670+  6685~            	else
0670+  6685             
0670+  6685~            	else
0670+  6685~            	else
0670+  6685             
0670+  6685~            	else
0670+  6685~            	else
0670+  6685             
0671+  6685 BD 7E 06    		score1000()
0672+  6688 86 0E       		ldaA	14 ; captive rollover switch number
0673+  668A 91 A8       		cmpA	>lastSwitch
0674+  668C             		ifne
0674+  668C             
0674+  668C 27 FE       
0675+  668E 86 0F       			ldaA	15 ; captive rollover switch number
0676+  6690 91 A8       			cmpA	>lastSwitch
0677+  6692             			ifne
0677+  6692             
0677+  6692 27 FE       
0678+  6694 BD 66 B1    				jsr	captiveAward
0679+  6697             			endif
0679+  6697             
0679+  6697             
0679+  6697             
0679+  6697             
0679+  6697             
0679+  6697~            			endif
0679+  6697~            			endif
0679+  6697             
0679+  6697~            			endif
0679+  6697~            			endif
0679+  6697             
0679+  6693             
0679+  6693 03          
0679+  6694             
0679+  6694             
0679+  6694~            			endif
0679+  6694~            			endif
0679+  6694~            			endif
0679+  6694             
0679+  6697             
0679+  6697~            			endif
0679+  6697~            			endif
0679+  6697             
0680+  6697             		endif
0680+  6697             
0680+  6697             
0680+  6697             
0680+  6697             
0680+  6697             
0680+  6697~            		endif
0680+  6697~            		endif
0680+  6697             
0680+  6697~            		endif
0680+  6697~            		endif
0680+  6697             
0680+  668D             
0680+  668D 09          
0680+  668E             
0680+  668E             
0680+  668E~            		endif
0680+  668E~            		endif
0680+  668E~            		endif
0680+  668E             
0680+  6697             
0680+  6697~            		endif
0680+  6697~            		endif
0680+  6697             
0681+  6697             	endif
0681+  6697             
0681+  6697             
0681+  6697             
0681+  6697             
0681+  6697             
0681+  6697~            	endif
0681+  6697~            	endif
0681+  6697             
0681+  6697~            	endif
0681+  6697~            	endif
0681+  6697             
0681+  6684             
0681+  6684 12          
0681+  6685             
0681+  6685             
0681+  6685~            	endif
0681+  6685~            	endif
0681+  6685~            	endif
0681+  6685             
0681+  6697             
0681+  6697~            	endif
0681+  6697~            	endif
0681+  6697             
0682+  6697             	done(1)
0682+  6697~            	done(1)
0682+  6697~            	done(1)
0682+  6697~            	done(1)
0682+  6697~            	done(1)
0682+  6697             
0682+  6697 7E 79 8C    
0683+  669A             
0684+  669A             swCaptiveTarget:
0685+  669A BD 7E 16    	advBonus()
0686+  669D 96 09       	ldaA	>lc(2)
0687+  669F 85 40       	bitA	lr(7)
0688+  66A1             	ifeq ; light off
0688+  66A1             
0688+  66A1 26 FE       
0689+  66A3 BD 7D E9    		score10()
0690+  66A6 BD 66 B1    		jsr	captiveAward
0691+  66A9             	else
0691+  66A9             
0691+  66A9             
0691+  66A9             
0691+  66A9             
0691+  66A2             
0691+  66A2             
0691+  66A2             
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2             
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2             
0691+  66A2             
0691+  66A2 08          
0691+  66A9             
0691+  66A9 20 FE       
0691+  66AB             
0691+  66AB             
0691+  66AB             
0691+  66AB~            	else
0691+  66AB~            	else
0691+  66AB~            	else
0691+  66AB~            	else
0691+  66AB~            	else
0691+  66AB             
0691+  66AB~            	else
0691+  66AB~            	else
0691+  66AB             
0691+  66AB~            	else
0691+  66AB~            	else
0691+  66AB             
0692+  66AB BD 7E 06    		score1000()
0693+  66AE             	endif
0693+  66AE             
0693+  66AE             
0693+  66AE             
0693+  66AE             
0693+  66AE             
0693+  66AE~            	endif
0693+  66AE~            	endif
0693+  66AE             
0693+  66AE~            	endif
0693+  66AE~            	endif
0693+  66AE             
0693+  66AA             
0693+  66AA 03          
0693+  66AB             
0693+  66AB             
0693+  66AB~            	endif
0693+  66AB~            	endif
0693+  66AB~            	endif
0693+  66AB             
0693+  66AE             
0693+  66AE~            	endif
0693+  66AE~            	endif
0693+  66AE             
0694+  66AE             	done(1)
0694+  66AE~            	done(1)
0694+  66AE~            	done(1)
0694+  66AE~            	done(1)
0694+  66AE~            	done(1)
0694+  66AE             
0694+  66AE 7E 79 8C    
0695+  66B1             	
0696+  66B1             captiveAward:
0697+  66B1 86 80       	lampOn(8,2) ; right special
0697+  66B3 9A 09       
0697+  66B5 97 09       
0698+  66B7 96 09       	ldaA	>lc(2)
0699+  66B9 85 08       	bitA	lr(4) ; shoe 1
0700+  66BB             	ifeq
0700+  66BB             
0700+  66BB 26 FE       
0701+  66BD 39          		rts
0702+  66BE             	else
0702+  66BE             
0702+  66BE             
0702+  66BE             
0702+  66BE             
0702+  66BC             
0702+  66BC             
0702+  66BC             
0702+  66BC~            	else
0702+  66BC~            	else
0702+  66BC~            	else
0702+  66BC~            	else
0702+  66BC             
0702+  66BC~            	else
0702+  66BC~            	else
0702+  66BC~            	else
0702+  66BC~            	else
0702+  66BC             
0702+  66BC             
0702+  66BC 03          
0702+  66BE             
0702+  66BE 20 FE       
0702+  66C0             
0702+  66C0             
0702+  66C0             
0702+  66C0~            	else
0702+  66C0~            	else
0702+  66C0~            	else
0702+  66C0~            	else
0702+  66C0~            	else
0702+  66C0             
0702+  66C0~            	else
0702+  66C0~            	else
0702+  66C0             
0702+  66C0~            	else
0702+  66C0~            	else
0702+  66C0             
0703+  66C0 85 20       		bitA	lr(6)
0704+  66C2             		ifne
0704+  66C2             
0704+  66C2 27 FE       
0705+  66C4 86 20       			flashLamp(6,2)
0705+  66C6 9A A1       
0705+  66C8 97 A1       
0706+  66CA             		else
0706+  66CA             
0706+  66CA             
0706+  66CA             
0706+  66CA             
0706+  66C3             
0706+  66C3             
0706+  66C3             
0706+  66C3~            		else
0706+  66C3~            		else
0706+  66C3~            		else
0706+  66C3~            		else
0706+  66C3             
0706+  66C3~            		else
0706+  66C3~            		else
0706+  66C3~            		else
0706+  66C3~            		else
0706+  66C3             
0706+  66C3             
0706+  66C3 08          
0706+  66CA             
0706+  66CA 20 FE       
0706+  66CC             
0706+  66CC             
0706+  66CC             
0706+  66CC~            		else
0706+  66CC~            		else
0706+  66CC~            		else
0706+  66CC~            		else
0706+  66CC~            		else
0706+  66CC             
0706+  66CC~            		else
0706+  66CC~            		else
0706+  66CC             
0706+  66CC~            		else
0706+  66CC~            		else
0706+  66CC             
0707+  66CC 85 10       			bitA	lr(5)
0708+  66CE             			ifne
0708+  66CE             
0708+  66CE 27 FE       
0709+  66D0 86 10       				flashLamp(5,2)
0709+  66D2 9A A1       
0709+  66D4 97 A1       
0710+  66D6             			else
0710+  66D6             
0710+  66D6             
0710+  66D6             
0710+  66D6             
0710+  66CF             
0710+  66CF             
0710+  66CF             
0710+  66CF~            			else
0710+  66CF~            			else
0710+  66CF~            			else
0710+  66CF~            			else
0710+  66CF             
0710+  66CF~            			else
0710+  66CF~            			else
0710+  66CF~            			else
0710+  66CF~            			else
0710+  66CF             
0710+  66CF             
0710+  66CF 08          
0710+  66D6             
0710+  66D6 20 FE       
0710+  66D8             
0710+  66D8             
0710+  66D8             
0710+  66D8~            			else
0710+  66D8~            			else
0710+  66D8~            			else
0710+  66D8~            			else
0710+  66D8~            			else
0710+  66D8             
0710+  66D8~            			else
0710+  66D8~            			else
0710+  66D8             
0710+  66D8~            			else
0710+  66D8~            			else
0710+  66D8             
0711+  66D8 86 08       				flashLamp(4,2)
0711+  66DA 9A A1       
0711+  66DC 97 A1       
0712+  66DE             			endif
0712+  66DE             
0712+  66DE             
0712+  66DE             
0712+  66DE             
0712+  66DE             
0712+  66DE~            			endif
0712+  66DE~            			endif
0712+  66DE             
0712+  66DE~            			endif
0712+  66DE~            			endif
0712+  66DE             
0712+  66D7             
0712+  66D7 06          
0712+  66D8             
0712+  66D8             
0712+  66D8~            			endif
0712+  66D8~            			endif
0712+  66D8~            			endif
0712+  66D8             
0712+  66DE             
0712+  66DE~            			endif
0712+  66DE~            			endif
0712+  66DE             
0713+  66DE             		endif
0713+  66DE             
0713+  66DE             
0713+  66DE             
0713+  66DE             
0713+  66DE             
0713+  66DE~            		endif
0713+  66DE~            		endif
0713+  66DE             
0713+  66DE~            		endif
0713+  66DE~            		endif
0713+  66DE             
0713+  66CB             
0713+  66CB 12          
0713+  66CC             
0713+  66CC             
0713+  66CC~            		endif
0713+  66CC~            		endif
0713+  66CC~            		endif
0713+  66CC             
0713+  66DE             
0713+  66DE~            		endif
0713+  66DE~            		endif
0713+  66DE             
0714+  66DE             	endif
0714+  66DE             
0714+  66DE             
0714+  66DE             
0714+  66DE             
0714+  66DE             
0714+  66DE~            	endif
0714+  66DE~            	endif
0714+  66DE             
0714+  66DE~            	endif
0714+  66DE~            	endif
0714+  66DE             
0714+  66BF             
0714+  66BF 1E          
0714+  66C0             
0714+  66C0             
0714+  66C0~            	endif
0714+  66C0~            	endif
0714+  66C0~            	endif
0714+  66C0             
0714+  66DE             
0714+  66DE~            	endif
0714+  66DE~            	endif
0714+  66DE             
0715+  66DE             	
0716+  66DE 86 04       	ldaA	lr(3)
0717+  66E0 95 09       	bitA	>lc(2)
0718+  66E2             	ifne ; double bonus
0718+  66E2             
0718+  66E2 27 FE       
0719+  66E4 96 B0       		ldaA	>p_Bonus
0720+  66E6             	else
0720+  66E6             
0720+  66E6             
0720+  66E6             
0720+  66E6             
0720+  66E3             
0720+  66E3             
0720+  66E3             
0720+  66E3~            	else
0720+  66E3~            	else
0720+  66E3~            	else
0720+  66E3~            	else
0720+  66E3             
0720+  66E3~            	else
0720+  66E3~            	else
0720+  66E3~            	else
0720+  66E3~            	else
0720+  66E3             
0720+  66E3             
0720+  66E3 04          
0720+  66E6             
0720+  66E6 20 FE       
0720+  66E8             
0720+  66E8             
0720+  66E8             
0720+  66E8~            	else
0720+  66E8~            	else
0720+  66E8~            	else
0720+  66E8~            	else
0720+  66E8~            	else
0720+  66E8             
0720+  66E8~            	else
0720+  66E8~            	else
0720+  66E8             
0720+  66E8~            	else
0720+  66E8~            	else
0720+  66E8             
0721+  66E8 86 01       		ldaA	1
0722+  66EA             	endif	
0722+  66EA             
0722+  66EA             
0722+  66EA             
0722+  66EA             
0722+  66EA             
0722+  66EA~            	endif	
0722+  66EA~            	endif	
0722+  66EA             
0722+  66EA~            	endif	
0722+  66EA~            	endif	
0722+  66EA             
0722+  66E7             
0722+  66E7 02          
0722+  66E8             
0722+  66E8             
0722+  66E8~            	endif	
0722+  66E8~            	endif	
0722+  66E8~            	endif	
0722+  66E8             
0722+  66EA             
0722+  66EA~            	endif	
0722+  66EA~            	endif	
0722+  66EA             
0723+  66EA 97 BE       	staA	p_BonusLeft
0724+  66EC             	
0725+  66EC             captiveAward_bonusLoop:
0726+  66EC BD 7E 06    	score1000()
0727+  66EF 7A 00 B0    	dec	p_Bonus
0728+  66F2 BD 60 C3    	jsr	bonusLights
0729+  66F5 86 19       	delay(200)
0729+  66F7 BD 7D 6B    
0730+  66FA 7D 00 B0    	tst	p_Bonus
0731+  66FD 26 ED       	bne	captiveAward_bonusLoop
0732+  66FF             	
0733+  66FF 86 38       	ldaA	00111000b
0734+  6701 94 A1       	andA	>flc(2)
0735+  6703 43          	comA
0736+  6704 94 09       	andA	>lc(2)
0737+  6706 97 09       	staA	lc(2)
0738+  6708             	
0739+  6708 96 BE       	ldaA	>p_BonusLeft
0740+  670A 97 B0       	staA	p_Bonus
0741+  670C             	
0742+  670C 39          	rts	
0743+  670D             	
0744+  670D             	
0745+  670D             alternate:
0746+  670D C6 00       	ldaB	0 ; turn on left?
0747+  670F 86 80       	ldaA	lr(8) ; right special
0748+  6711 95 09       	bitA	>lc(2)
0749+  6713             	ifne
0749+  6713             
0749+  6713 27 FE       
0750+  6715 C6 01       		ldaB	1
0751+  6717 86 7F       		lampOff(8,2) ; right special
0751+  6719 94 09       
0751+  671B 97 09       
0752+  671D             	endif
0752+  671D             
0752+  671D             
0752+  671D             
0752+  671D             
0752+  671D             
0752+  671D~            	endif
0752+  671D~            	endif
0752+  671D             
0752+  671D~            	endif
0752+  671D~            	endif
0752+  671D             
0752+  6714             
0752+  6714 08          
0752+  6715             
0752+  6715             
0752+  6715~            	endif
0752+  6715~            	endif
0752+  6715~            	endif
0752+  6715             
0752+  671D             
0752+  671D~            	endif
0752+  671D~            	endif
0752+  671D             
0753+  671D 86 02       	ldaA	lr(2) ; left special
0754+  671F 95 0A       	bitA	>lc(3)
0755+  6721             	ifne
0755+  6721             
0755+  6721 27 FE       
0756+  6723 86 80       		lampOn(8,2) ; right special
0756+  6725 9A 09       
0756+  6727 97 09       
0757+  6729 86 FD       		lampOff(2,3) ; left special
0757+  672B 94 0A       
0757+  672D 97 0A       
0758+  672F             	endif
0758+  672F             
0758+  672F             
0758+  672F             
0758+  672F             
0758+  672F             
0758+  672F~            	endif
0758+  672F~            	endif
0758+  672F             
0758+  672F~            	endif
0758+  672F~            	endif
0758+  672F             
0758+  6722             
0758+  6722 0C          
0758+  6723             
0758+  6723             
0758+  6723~            	endif
0758+  6723~            	endif
0758+  6723~            	endif
0758+  6723             
0758+  672F             
0758+  672F~            	endif
0758+  672F~            	endif
0758+  672F             
0759+  672F 5D          	tstB
0760+  6730             	ifne
0760+  6730             
0760+  6730 27 FE       
0761+  6732 86 02       		lampOn(2,3) ; left special
0761+  6734 9A 0A       
0761+  6736 97 0A       
0762+  6738             	endif
0762+  6738             
0762+  6738             
0762+  6738             
0762+  6738             
0762+  6738             
0762+  6738~            	endif
0762+  6738~            	endif
0762+  6738             
0762+  6738~            	endif
0762+  6738~            	endif
0762+  6738             
0762+  6731             
0762+  6731 06          
0762+  6732             
0762+  6732             
0762+  6732~            	endif
0762+  6732~            	endif
0762+  6732~            	endif
0762+  6732             
0762+  6738             
0762+  6738~            	endif
0762+  6738~            	endif
0762+  6738             
0763+  6738 39          	rts
0764+  6739             	
0765+  6739             addCollect:
0766+  6739 96 09       	ldaA	>lc(2)
0767+  673B 85 08       	bitA	lr(4)
0768+  673D             	ifeq
0768+  673D             
0768+  673D 26 FE       
0769+  673F 86 08       		lampOn(4,2)
0769+  6741 9A 09       
0769+  6743 97 09       
0770+  6745 86 08       		flashLamp(4,2)
0770+  6747 9A A1       
0770+  6749 97 A1       
0771+  674B             	else
0771+  674B             
0771+  674B             
0771+  674B             
0771+  674B             
0771+  673E             
0771+  673E             
0771+  673E             
0771+  673E~            	else
0771+  673E~            	else
0771+  673E~            	else
0771+  673E~            	else
0771+  673E             
0771+  673E~            	else
0771+  673E~            	else
0771+  673E~            	else
0771+  673E~            	else
0771+  673E             
0771+  673E             
0771+  673E 0E          
0771+  674B             
0771+  674B 20 FE       
0771+  674D             
0771+  674D             
0771+  674D             
0771+  674D~            	else
0771+  674D~            	else
0771+  674D~            	else
0771+  674D~            	else
0771+  674D~            	else
0771+  674D             
0771+  674D~            	else
0771+  674D~            	else
0771+  674D             
0771+  674D~            	else
0771+  674D~            	else
0771+  674D             
0772+  674D 85 10       		bitA	lr(5)
0773+  674F             		ifeq
0773+  674F             
0773+  674F 26 FE       
0774+  6751 86 10       			lampOn(5,2)
0774+  6753 9A 09       
0774+  6755 97 09       
0775+  6757 86 10       			flashLamp(5,2)
0775+  6759 9A A1       
0775+  675B 97 A1       
0776+  675D             		else
0776+  675D             
0776+  675D             
0776+  675D             
0776+  675D             
0776+  6750             
0776+  6750             
0776+  6750             
0776+  6750~            		else
0776+  6750~            		else
0776+  6750~            		else
0776+  6750~            		else
0776+  6750             
0776+  6750~            		else
0776+  6750~            		else
0776+  6750~            		else
0776+  6750~            		else
0776+  6750             
0776+  6750             
0776+  6750 0E          
0776+  675D             
0776+  675D 20 FE       
0776+  675F             
0776+  675F             
0776+  675F             
0776+  675F~            		else
0776+  675F~            		else
0776+  675F~            		else
0776+  675F~            		else
0776+  675F~            		else
0776+  675F             
0776+  675F~            		else
0776+  675F~            		else
0776+  675F             
0776+  675F~            		else
0776+  675F~            		else
0776+  675F             
0777+  675F 85 20       			bitA	lr(6)
0778+  6761             			ifeq
0778+  6761             
0778+  6761 26 FE       
0779+  6763 86 20       				lampOn(6,2)
0779+  6765 9A 09       
0779+  6767 97 09       
0780+  6769 86 20       				flashLamp(6,2)
0780+  676B 9A A1       
0780+  676D 97 A1       
0781+  676F             			else
0781+  676F             
0781+  676F             
0781+  676F             
0781+  676F             
0781+  6762             
0781+  6762             
0781+  6762             
0781+  6762~            			else
0781+  6762~            			else
0781+  6762~            			else
0781+  6762~            			else
0781+  6762             
0781+  6762~            			else
0781+  6762~            			else
0781+  6762~            			else
0781+  6762~            			else
0781+  6762             
0781+  6762             
0781+  6762 0E          
0781+  676F             
0781+  676F 20 FE       
0781+  6771             
0781+  6771             
0781+  6771             
0781+  6771~            			else
0781+  6771~            			else
0781+  6771~            			else
0781+  6771~            			else
0781+  6771~            			else
0781+  6771             
0781+  6771~            			else
0781+  6771~            			else
0781+  6771             
0781+  6771~            			else
0781+  6771~            			else
0781+  6771             
0782+  6771 BD 7E 06    				score1000()
0783+  6774 86 04       				lampOn(3,3)
0783+  6776 9A 0A       
0783+  6778 97 0A       
0784+  677A             			endif
0784+  677A             
0784+  677A             
0784+  677A             
0784+  677A             
0784+  677A             
0784+  677A~            			endif
0784+  677A~            			endif
0784+  677A             
0784+  677A~            			endif
0784+  677A~            			endif
0784+  677A             
0784+  6770             
0784+  6770 09          
0784+  6771             
0784+  6771             
0784+  6771~            			endif
0784+  6771~            			endif
0784+  6771~            			endif
0784+  6771             
0784+  677A             
0784+  677A~            			endif
0784+  677A~            			endif
0784+  677A             
0785+  677A             		endif
0785+  677A             
0785+  677A             
0785+  677A             
0785+  677A             
0785+  677A             
0785+  677A~            		endif
0785+  677A~            		endif
0785+  677A             
0785+  677A~            		endif
0785+  677A~            		endif
0785+  677A             
0785+  675E             
0785+  675E 1B          
0785+  675F             
0785+  675F             
0785+  675F~            		endif
0785+  675F~            		endif
0785+  675F~            		endif
0785+  675F             
0785+  677A             
0785+  677A~            		endif
0785+  677A~            		endif
0785+  677A             
0786+  677A             	endif
0786+  677A             
0786+  677A             
0786+  677A             
0786+  677A             
0786+  677A             
0786+  677A~            	endif
0786+  677A~            	endif
0786+  677A             
0786+  677A~            	endif
0786+  677A~            	endif
0786+  677A             
0786+  674C             
0786+  674C 2D          
0786+  674D             
0786+  674D             
0786+  674D~            	endif
0786+  674D~            	endif
0786+  674D~            	endif
0786+  674D             
0786+  677A             
0786+  677A~            	endif
0786+  677A~            	endif
0786+  677A             
0787+  677A 39          	rts
0788+  677B             	
0789+  677B             ; end callbacks
0790+  677B             	.msfirst
0791+  677B             ; needs to be on $**00 address
0792+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0793+  6000 62 45       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0793+  6002 62 45       
0793+  6004 62 5E       
0793+  6006 60 C0       
0793+  6008 60 C0       
0793+  600A 60 C0       
0793+  600C 62 45       
0793+  600E 60 C0       
0794+  6010 62 95       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0794+  6012 62 45       
0794+  6014 65 64       
0794+  6016 65 8A       
0794+  6018 65 93       
0794+  601A 65 A8       
0794+  601C 66 7A       
0794+  601E 66 9A       
0795+  6020 65 F8       	.dw swDropTip	\.dw swDroptIp\.dw swDroptiP\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0795+  6022 66 02       
0795+  6024 66 0C       
0795+  6026 66 5B       
0795+  6028 65 93       
0795+  602A 64 0B       
0795+  602C 65 93       
0795+  602E 60 C0       
0796+  6030 65 FD       	.dw swDropHot	\.dw swDrophOt\.dw swDrophoT\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0796+  6032 66 07       
0796+  6034 66 11       
0796+  6036 65 93       
0796+  6038 63 72       
0796+  603A 66 64       
0796+  603C 65 EF       
0796+  603E 65 A8       
0797+  6040 65 3E       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0797+  6042 65 8A       
0797+  6044 65 93       
0797+  6046 60 C0       
0797+  6048 64 F4       
0797+  604A 60 C0       
0797+  604C 60 C0       
0797+  604E 60 C0       
0798+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0798+  6052 60 C0       
0798+  6054 60 C0       
0798+  6056 60 C0       
0798+  6058 60 C0       
0798+  605A 60 C0       
0798+  605C 60 C0       
0798+  605E 60 C0       
0799+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0799+  6062 60 C0       
0799+  6064 60 C0       
0799+  6066 60 C0       
0799+  6068 60 C0       
0799+  606A 60 C0       
0799+  606C 60 C0       
0799+  606E 60 C0       
0800+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0800+  6072 60 C0       
0800+  6074 60 C0       
0800+  6076 60 C0       
0800+  6078 60 C0       
0800+  607A 60 C0       
0800+  607C 60 C0       
0800+  607E 60 C0       
0801+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0802+  6080             ; off = how many cycles it must be off for
0803+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0804+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0805+  6080             ; TRANSPOSED (?)
0806+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0807+  6080             settleTable: ; must be right after callbackTable
0808+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0808+  6081 87          
0808+  6082 C2          
0808+  6083 47          
0808+  6084 47          
0808+  6085 47          
0808+  6086 87          
0808+  6087 47          
0809+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0809+  6089 87          
0809+  608A 87          
0809+  608B 87          
0809+  608C 81          
0809+  608D 81          
0809+  608E 80          
0809+  608F 87          
0810+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,3,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0810+  6091 87          
0810+  6092 87          
0810+  6093 83          
0810+  6094 83          
0810+  6095 E1          
0810+  6096 81          
0810+  6097 80          
0811+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,1,1,0)
0811+  6099 87          
0811+  609A 87          
0811+  609B 81          
0811+  609C E1          
0811+  609D 80          
0811+  609E 80          
0811+  609F 81          
0812+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0812+  60A1 87          
0812+  60A2 81          
0812+  60A3 47          
0812+  60A4 80          
0812+  60A5 47          
0812+  60A6 47          
0812+  60A7 47          
0813+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0813+  60A9 47          
0813+  60AA 47          
0813+  60AB 47          
0813+  60AC 47          
0813+  60AD 47          
0813+  60AE 47          
0813+  60AF 47          
0814+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0814+  60B1 47          
0814+  60B2 47          
0814+  60B3 47          
0814+  60B4 47          
0814+  60B5 47          
0814+  60B6 47          
0814+  60B7 47          
0815+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0815+  60B9 47          
0815+  60BA 47          
0815+  60BB 47          
0815+  60BC 47          
0815+  60BD 47          
0815+  60BE 47          
0815+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 7D       	ldaA	attractStart >> 8
0102   78AF 97 2A       	staA	attractX
0103   78B1 86 C1       	ldaA	attractStart&$FF
0104   78B3 97 2B       	staA	attractX + 1
0105   78B5             	
0106   78B5 86 FF       	ldaA	$FF	
0107   78B7 B7 28 00    	staA 	displayStrobe
0108   78BA             
0109   78BA 86 00       	ldaA	00
0110   78BC 97 07       	staA	strobe
0111   78BE B7 01 6A    	staA	displayCol
0112   78C1             	
0113   78C1 CE 00 00    	ldX 	0
0114   78C4 DF 50       	stX		curCol
0115   78C6             	
0116   78C6 86 00       	ldaA	0
0117   78C8 97 10       	staA	curSwitchRowLsb
0118   78CA             	
0119   78CA             ; fill solenoid status with off
0120   78CA 86 0F       	ldaA	$F
0121   78CC CE 01 40    	ldX	solenoid1
0122   78CF             lSolDefault:
0123   78CF A7 00       	staA	0, X
0124   78D1 08          	inX
0125   78D2 8C 01 4F    	cpX	solenoid16
0126   78D5 26 F8       	bne	lSolDefault
0127   78D7             	
0128   78D7             ; clear 8 banks
0129   78D7 86 00       	ldaA 	0
0130   78D9 CE 00 00    	ldX	0
0131   78DC             lClear8:
0132   78DC A7 08       	staA	lampCol1, X
0133   78DE A7 A0       	staA	flashLampCol1, X
0134   78E0 A7 80       	staA	waitLeft, X
0135   78E2 08          	inX
0136   78E3 8C 00 08    	cpX	8
0137   78E6 26 F4       	bne 	lClear8
0138   78E8             	
0139   78E8             ; empty settle
0140   78E8 86 00       	ldaA	$00
0141   78EA CE 01 00    	ldX	settleRow1
0142   78ED             lSettleDefault:
0143   78ED A7 00       	staA	0, X
0144   78EF 08          	inX
0145   78F0 8C 01 3F    	cpX	settleRow8End
0146   78F3 26 F8       	bne	lSettleDefault
0147   78F5             	
0148   78F5             ; empty queue
0149   78F5 86 FF       	ldaA	$FF
0150   78F7 CE 00 60    	ldX	queue
0151   78FA             lEmptyQueue:
0152   78FA A7 00       	staA	0, X
0153   78FC 08          	inX
0154   78FD 8C 00 6D    	cpX	queueEnd
0155   7900 26 F8       	bne	lEmptyQueue
0156   7902             	
0157   7902 86 00       	ldaA	0
0158   7904 97 54       	staA	queueHead + 0
0159   7906 97 56       	staA	queueTail + 0
0160   7908 86 60       	ldaA	queue
0161   790A 97 55       	staA	queueHead + 1
0162   790C 97 57       	staA	queueTail + 1
0163   790E             	
0164   790E             ; test numbers
0165   790E 86 20       	lampOn(6,8) ; game over
0165   7910 9A 0F       
0165   7912 97 0F       
0166   7914             
0167   7914             	
0168   7914 BD 7D A2    	jsr resetScores
0169   7917             	
0170   7917             ; setup complete
0171   7917 0E          	clI		; enable timer interrupt
0172   7918             	
0173   7918             	
0174   7918             end:
0175   7918 B6 01 6B    	ldaA	>state
0176   791B 85 04       	bitA	100b
0177   791D             	ifne
0177   791D             
0177   791D 27 FE       
0178   791F             		; dec wait timers
0179   791F CE 00 7F    		ldX	waitLeft - 1
0180   7922             decWaitTimers:
0181   7922 08          		inX
0182   7923 A6 00       		ldaA	0, X
0183   7925             		ifne
0183   7925             
0183   7925 27 FE       
0184   7927 4A          			decA
0185   7928 A7 00       			staA	0, X
0186   792A             			ifeq
0186   792A             
0186   792A 26 FE       
0187   792C A6 08       				ldaA	waitMsb - waitLeft, X
0188   792E 97 58       				staA	tempQ
0189   7930 A6 10       				ldaA	waitLsb - waitLeft, X
0190   7932 97 59       				staA	tempQ + 1
0191   7934 E6 18       				ldaB	waitReg - waitLeft, X
0192   7936 DF 2C       				stX	forkX
0193   7938 DE 58       				ldX	>tempQ
0194   793A 6E 00       				jmp	0, X
0195   793C             			endif
0195   793C             
0195   793C             
0195   793C             
0195   793C             
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0195   792B             
0195   792B 10          
0195   792C             
0195   792C             
0195   792C~            			endif
0195   792C~            			endif
0195   792C~            			endif
0195   792C             
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0196   793C             		endif
0196   793C             
0196   793C             
0196   793C             
0196   793C             
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0196   7926             
0196   7926 15          
0196   7927             
0196   7927             
0196   7927~            		endif
0196   7927~            		endif
0196   7927~            		endif
0196   7927             
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0197   793C             afterFork:
0198   793C 8C 00 87    		cpX	waitLeftEnd
0199   793F 26 E1       		bne	decWaitTimers
0200   7941             		
0201   7941             		
0202   7941 7A 00 A9    		dec	dropResetTimer
0203   7944             		ifmi
0203   7944             
0203   7944 2A FE       
0204   7946 7C 00 A9    			inc	dropResetTimer
0205   7949             		endif
0205   7949             
0205   7949             
0205   7949             
0205   7949             
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0205   7945             
0205   7945 03          
0205   7946             
0205   7946             
0205   7946~            		endif
0205   7946~            		endif
0205   7946~            		endif
0205   7946             
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0206   7949             		
0207   7949 B6 01 6B    		ldaA	>state		; clear strobe reset bit
0208   794C 84 FB       		andA	11111011b
0209   794E B7 01 6B    		staA	state
0210   7951             	endif
0210   7951             
0210   7951             
0210   7951             
0210   7951             
0210   7951             
0210   7951~            	endif
0210   7951~            	endif
0210   7951             
0210   7951~            	endif
0210   7951~            	endif
0210   7951             
0210   791E             
0210   791E 32          
0210   791F             
0210   791F             
0210   791F~            	endif
0210   791F~            	endif
0210   791F~            	endif
0210   791F             
0210   7951             
0210   7951~            	endif
0210   7951~            	endif
0210   7951             
0211   7951             
0212   7951             		
0213   7951             ; pop queue
0214   7951 D6 57       	ldaB	>queueTail + 1
0215   7953 D1 55       	cmpB	>queueHead + 1
0216   7955             	ifeq
0216   7955             
0216   7955 26 FE       
0217   7957 7E 79 F2    		jmp skipQueue
0218   795A             	endif
0218   795A             
0218   795A             
0218   795A             
0218   795A             
0218   795A             
0218   795A~            	endif
0218   795A~            	endif
0218   795A             
0218   795A~            	endif
0218   795A~            	endif
0218   795A             
0218   7956             
0218   7956 03          
0218   7957             
0218   7957             
0218   7957~            	endif
0218   7957~            	endif
0218   7957~            	endif
0218   7957             
0218   795A             
0218   795A~            	endif
0218   795A~            	endif
0218   795A             
0219   795A             	
0220   795A DE 54       	ldX	>queueHead
0221   795C A6 00       	ldaA	0, X	; A now contains the first queue item
0222   795E             	
0223   795E 16          	tAB
0224   795F C4 3F       	andB	00111111b ; B = callback index
0225   7961             	
0226   7961 D7 59       	staB	tempQ + 1
0227   7963 C6 60       	ldaB	callbackTable >> 8
0228   7965 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0229   7967 DE 58       	ldX	>tempQ
0230   7969             	
0231   7969 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0232   796B C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0233   796D             	ifne ; if closure only
0233   796D             
0233   796D 27 FE       
0234   796F 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0235   7971 26 62       		bne	skipEvent
0236   7973             	endif
0236   7973             
0236   7973             
0236   7973             
0236   7973             
0236   7973             
0236   7973~            	endif
0236   7973~            	endif
0236   7973             
0236   7973~            	endif
0236   7973~            	endif
0236   7973             
0236   796E             
0236   796E 04          
0236   796F             
0236   796F             
0236   796F~            	endif
0236   796F~            	endif
0236   796F~            	endif
0236   796F             
0236   7973             
0236   7973~            	endif
0236   7973~            	endif
0236   7973             
0237   7973             	
0238   7973 C5 40       	bitB	01000000b ; B.7 = active in game over
0239   7975             	ifeq 	 ; not active in game over
0239   7975             
0239   7975 26 FE       
0240   7977 D6 0F       		ldaB	>lc(8)	; gameover mask
0241   7979 C5 20       		bitB	lr(6)
0242   797B 26 58       		bne	skipEvent
0243   797D D6 0F       		ldaB	>lc(8) ; tilt bit
0244   797F C5 10       		bitB	lr(5)
0245   7981 26 52       		bne	skipEvent
0246   7983             	endif
0246   7983             
0246   7983             
0246   7983             
0246   7983             
0246   7983             
0246   7983~            	endif
0246   7983~            	endif
0246   7983             
0246   7983~            	endif
0246   7983~            	endif
0246   7983             
0246   7976             
0246   7976 0C          
0246   7977             
0246   7977             
0246   7977~            	endif
0246   7977~            	endif
0246   7977~            	endif
0246   7977             
0246   7983             
0246   7983~            	endif
0246   7983~            	endif
0246   7983             
0247   7983             	
0248   7983             	; checked passed, do callback
0249   7983 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0250   7986 DE 58       	ldX	>tempQ
0251   7988 EE 00       	ldX	0, X
0252   798A 6E 00       	jmp	0, X
0253   798C             	; everything trashed
0254   798C             afterQueueEvent:
0255   798C BD 60 C3    	jsr 	bonusLights
0256   798F             	
0257   798F             	; update last switch
0258   798F 96 59       	ldaA	> tempQ + 1
0259   7991 44          	lsrA 	; got doubled earlier
0260   7992 97 A8       	staA	lastSwitch
0261   7994             
0262   7994 86 02       	ldaA	10b ; no validate bit
0263   7996 B5 01 6B    	bitA	>state
0264   7999             	ifeq ; validate pf
0264   7999             
0264   7999 26 FE       
0265   799B             		; check if playfield invalid
0266   799B 86 0F       		ldaA	00001111b ; player up
0267   799D 95 A7       		bitA	>flc(8)
0268   799F             		ifne ; any flashing -> pf invalid
0268   799F             
0268   799F 27 FE       
0269   79A1 43          			comA	; turn off flashing
0270   79A2 94 A7       			andA	>flc(8)
0271   79A4 97 A7       			staA	flc(8)
0272   79A6             			
0273   79A6 86 01       			ldaA	lr(1) ; shoot again pf flashing
0274   79A8 95 A2       			bitA	>flc(3)
0275   79AA             			ifne
0275   79AA             
0275   79AA 27 FE       
0276   79AC             				; turn off ball save
0277   79AC 86 FE       				flashOff(1,3)
0277   79AE 94 A2       
0277   79B0 97 A2       
0278   79B2 86 40       				ldaA	lr(7) ; shoot again backbox
0279   79B4 95 0F       				bitA	>lc(8)
0280   79B6             				ifeq
0280   79B6             
0280   79B6 26 FE       
0281   79B8 86 FE       					lampOff(1,3) ; shoot again pf
0281   79BA 94 0A       
0281   79BC 97 0A       
0282   79BE             				endif
0282   79BE             
0282   79BE             
0282   79BE             
0282   79BE             
0282   79BE             
0282   79BE~            				endif
0282   79BE~            				endif
0282   79BE             
0282   79BE~            				endif
0282   79BE~            				endif
0282   79BE             
0282   79B7             
0282   79B7 06          
0282   79B8             
0282   79B8             
0282   79B8~            				endif
0282   79B8~            				endif
0282   79B8~            				endif
0282   79B8             
0282   79BE             
0282   79BE~            				endif
0282   79BE~            				endif
0282   79BE             
0283   79BE             			else
0283   79BE             
0283   79BE             
0283   79BE             
0283   79BE             
0283   79AB             
0283   79AB             
0283   79AB             
0283   79AB~            			else
0283   79AB~            			else
0283   79AB~            			else
0283   79AB~            			else
0283   79AB             
0283   79AB~            			else
0283   79AB~            			else
0283   79AB~            			else
0283   79AB~            			else
0283   79AB             
0283   79AB             
0283   79AB 14          
0283   79BE             
0283   79BE 20 FE       
0283   79C0             
0283   79C0             
0283   79C0             
0283   79C0~            			else
0283   79C0~            			else
0283   79C0~            			else
0283   79C0~            			else
0283   79C0~            			else
0283   79C0             
0283   79C0~            			else
0283   79C0~            			else
0283   79C0             
0283   79C0~            			else
0283   79C0~            			else
0283   79C0             
0284   79C0 86 FE       				lampOff(1,3) ; shoot again
0284   79C2 94 0A       
0284   79C4 97 0A       
0285   79C6 86 BF       				lampOff(7,8)
0285   79C8 94 0F       
0285   79CA 97 0F       
0286   79CC             			endif
0286   79CC             
0286   79CC             
0286   79CC             
0286   79CC             
0286   79CC             
0286   79CC~            			endif
0286   79CC~            			endif
0286   79CC             
0286   79CC~            			endif
0286   79CC~            			endif
0286   79CC             
0286   79BF             
0286   79BF 0C          
0286   79C0             
0286   79C0             
0286   79C0~            			endif
0286   79C0~            			endif
0286   79C0~            			endif
0286   79C0             
0286   79CC             
0286   79CC~            			endif
0286   79CC~            			endif
0286   79CC             
0287   79CC             		endif
0287   79CC             
0287   79CC             
0287   79CC             
0287   79CC             
0287   79CC             
0287   79CC~            		endif
0287   79CC~            		endif
0287   79CC             
0287   79CC~            		endif
0287   79CC~            		endif
0287   79CC             
0287   79A0             
0287   79A0 2B          
0287   79A1             
0287   79A1             
0287   79A1~            		endif
0287   79A1~            		endif
0287   79A1~            		endif
0287   79A1             
0287   79CC             
0287   79CC~            		endif
0287   79CC~            		endif
0287   79CC             
0288   79CC             	else
0288   79CC             
0288   79CC             
0288   79CC             
0288   79CC             
0288   799A             
0288   799A             
0288   799A             
0288   799A~            	else
0288   799A~            	else
0288   799A~            	else
0288   799A~            	else
0288   799A             
0288   799A~            	else
0288   799A~            	else
0288   799A~            	else
0288   799A~            	else
0288   799A             
0288   799A             
0288   799A 33          
0288   79CC             
0288   79CC 20 FE       
0288   79CE             
0288   79CE             
0288   79CE             
0288   79CE~            	else
0288   79CE~            	else
0288   79CE~            	else
0288   79CE~            	else
0288   79CE~            	else
0288   79CE             
0288   79CE~            	else
0288   79CE~            	else
0288   79CE             
0288   79CE~            	else
0288   79CE~            	else
0288   79CE             
0289   79CE             		; clear don't validate bit
0290   79CE 43          		comA
0291   79CF B4 01 6B    		andA	>state
0292   79D2 B7 01 6B    		staA	state
0293   79D5             	endif
0293   79D5             
0293   79D5             
0293   79D5             
0293   79D5             
0293   79D5             
0293   79D5~            	endif
0293   79D5~            	endif
0293   79D5             
0293   79D5~            	endif
0293   79D5~            	endif
0293   79D5             
0293   79CD             
0293   79CD 07          
0293   79CE             
0293   79CE             
0293   79CE~            	endif
0293   79CE~            	endif
0293   79CE~            	endif
0293   79CE             
0293   79D5             
0293   79D5~            	endif
0293   79D5~            	endif
0293   79D5             
0294   79D5             	
0295   79D5             skipEvent:
0296   79D5 B6 01 6B    	ldaA	>state
0297   79D8 85 04       	bitA	100b
0298   79DA             	ifeq	; don't process queue if still finishing timers
0298   79DA             
0298   79DA 26 FE       
0299   79DC C6 6D       		ldaB	queueEnd
0300   79DE D1 55       		cmpB	>queueHead + 1
0301   79E0             		ifeq
0301   79E0             
0301   79E0 26 FE       
0302   79E2 C6 60       			ldaB	queue
0303   79E4 D7 55       			staB	queueHead + 1
0304   79E6             		else
0304   79E6             
0304   79E6             
0304   79E6             
0304   79E6             
0304   79E1             
0304   79E1             
0304   79E1             
0304   79E1~            		else
0304   79E1~            		else
0304   79E1~            		else
0304   79E1~            		else
0304   79E1             
0304   79E1~            		else
0304   79E1~            		else
0304   79E1~            		else
0304   79E1~            		else
0304   79E1             
0304   79E1             
0304   79E1 06          
0304   79E6             
0304   79E6 20 FE       
0304   79E8             
0304   79E8             
0304   79E8             
0304   79E8~            		else
0304   79E8~            		else
0304   79E8~            		else
0304   79E8~            		else
0304   79E8~            		else
0304   79E8             
0304   79E8~            		else
0304   79E8~            		else
0304   79E8             
0304   79E8~            		else
0304   79E8~            		else
0304   79E8             
0305   79E8 7C 00 55    			inc	queueHead + 1
0306   79EB             		endif
0306   79EB             
0306   79EB             
0306   79EB             
0306   79EB             
0306   79EB             
0306   79EB~            		endif
0306   79EB~            		endif
0306   79EB             
0306   79EB~            		endif
0306   79EB~            		endif
0306   79EB             
0306   79E7             
0306   79E7 03          
0306   79E8             
0306   79E8             
0306   79E8~            		endif
0306   79E8~            		endif
0306   79E8~            		endif
0306   79E8             
0306   79EB             
0306   79EB~            		endif
0306   79EB~            		endif
0306   79EB             
0307   79EB             	else
0307   79EB             
0307   79EB             
0307   79EB             
0307   79EB             
0307   79DB             
0307   79DB             
0307   79DB             
0307   79DB~            	else
0307   79DB~            	else
0307   79DB~            	else
0307   79DB~            	else
0307   79DB             
0307   79DB~            	else
0307   79DB~            	else
0307   79DB~            	else
0307   79DB~            	else
0307   79DB             
0307   79DB             
0307   79DB 11          
0307   79EB             
0307   79EB 20 FE       
0307   79ED             
0307   79ED             
0307   79ED             
0307   79ED~            	else
0307   79ED~            	else
0307   79ED~            	else
0307   79ED~            	else
0307   79ED~            	else
0307   79ED             
0307   79ED~            	else
0307   79ED~            	else
0307   79ED             
0307   79ED~            	else
0307   79ED~            	else
0307   79ED             
0308   79ED DE 2C       		ldX	>forkX
0309   79EF 7E 79 3C    		jmp	afterFork
0310   79F2             	endif
0310   79F2             
0310   79F2             
0310   79F2             
0310   79F2             
0310   79F2             
0310   79F2~            	endif
0310   79F2~            	endif
0310   79F2             
0310   79F2~            	endif
0310   79F2~            	endif
0310   79F2             
0310   79EC             
0310   79EC 05          
0310   79ED             
0310   79ED             
0310   79ED~            	endif
0310   79ED~            	endif
0310   79ED~            	endif
0310   79ED             
0310   79F2             
0310   79F2~            	endif
0310   79F2~            	endif
0310   79F2             
0311   79F2             				
0312   79F2             skipQueue:
0313   79F2             				
0314   79F2             	
0315   79F2             				
0316   79F2 7E 79 18    	jmp		end
0317   79F5 00 00       	.dw 0
0318   79F7 00 00       	.dw 0
0319   79F9 00 00       	.dw 0
0320   79FB 00 00       	.dw 0
0321   79FD 00 00       	.dw 0
0322   79FF             		
0323   79FF             interrupt:	
0324   79FF 7C 00 02    	inc	counter
0325   7A02 86 00       	ldaA	0
0326   7A04 91 02       	cmpA	>counter
0327   7A06 26 49       	bne	counterHandled
0328   7A08             	
0329   7A08 86 20       	ldaA	lr(6) ; gameover
0330   7A0A 95 0F       		bitA	> lc(8)
0331   7A0C             		ifne
0331   7A0C             
0331   7A0C 27 FE       
0332   7A0E DE 2A       		ldX	>attractX
0333   7A10 A6 00       		ldaA	0, X
0334   7A12 97 09       		staA	lc(2)
0335   7A14 A6 01       		ldaA	1, X
0336   7A16 97 0A       		staA	lc(3)
0337   7A18 A6 02       		ldaA	2, X
0338   7A1A 97 0B       		staA	lc(4)
0339   7A1C A6 03       		ldaA	3, X
0340   7A1E 97 0C       		staA	lc(5)
0341   7A20 A6 04       		ldaA	4, X
0342   7A22 97 0D       		staA	lc(6)
0343   7A24 96 2B       		ldaA	>attractX + 1
0344   7A26 8B 05       		addA	5
0345   7A28 81 E9       		cmpA	attractEnd&$FF
0346   7A2A             		ifeq
0346   7A2A             
0346   7A2A 26 FE       
0347   7A2C 86 C1       			ldaA	attractStart&$FF
0348   7A2E             		endif
0348   7A2E             
0348   7A2E             
0348   7A2E             
0348   7A2E             
0348   7A2E             
0348   7A2E~            		endif
0348   7A2E~            		endif
0348   7A2E             
0348   7A2E~            		endif
0348   7A2E~            		endif
0348   7A2E             
0348   7A2B             
0348   7A2B 02          
0348   7A2C             
0348   7A2C             
0348   7A2C~            		endif
0348   7A2C~            		endif
0348   7A2C~            		endif
0348   7A2C             
0348   7A2E             
0348   7A2E~            		endif
0348   7A2E~            		endif
0348   7A2E             
0349   7A2E 97 2B       		staA	attractX + 1
0350   7A30             	endif
0350   7A30             
0350   7A30             
0350   7A30             
0350   7A30             
0350   7A30             
0350   7A30~            	endif
0350   7A30~            	endif
0350   7A30             
0350   7A30~            	endif
0350   7A30~            	endif
0350   7A30             
0350   7A0D             
0350   7A0D 22          
0350   7A0E             
0350   7A0E             
0350   7A0E~            	endif
0350   7A0E~            	endif
0350   7A0E~            	endif
0350   7A0E             
0350   7A30             
0350   7A30~            	endif
0350   7A30~            	endif
0350   7A30             
0351   7A30             	
0352   7A30 7C 00 03    	inc 	counter2
0353   7A33 86 04       	ldaA	4
0354   7A35 91 03       	cmpA	>counter2
0355   7A37 26 18       	bne	counterHandled
0356   7A39             	
0357   7A39 86 00       	ldaA	0
0358   7A3B 97 03       	staA	counter2
0359   7A3D 86 77       	ldaA	01110111b
0360   7A3F 91 7E       	cmpA	>displayBcd1 + 14
0361   7A41 27 08       	beq	on
0362   7A43             	
0363   7A43 86 F0       	ldaA	$F0
0364   7A45             	;staA	lampRow1
0365   7A45 86 77       	ldaA	01110111b
0366   7A47 97 7E       	staA	displayBcd1	 + 14
0367   7A49 20 06       	bra	counterHandled
0368   7A4B             on:
0369   7A4B 86 0F       	ldaA	$0F
0370   7A4D             	;staA	lampRow1
0371   7A4D 86 33       	ldaA	00110011b
0372   7A4F 97 7E       	staA	displayBcd1	 + 14
0373   7A51             
0374   7A51             counterHandled:
0375   7A51             ; move switch column
0376   7A51 96 07       	ldaA	>strobe
0377   7A53 B7 30 02    	staA	switchStrobe
0378   7A56             	
0379   7A56             ; update display 
0380   7A56             	
0381   7A56 96 BF       	ldaA	>$BF
0382   7A58 97 7F       	staA	displayBcd1 + 15
0383   7A5A 96 6F       	ldaA	>$6F
0384   7A5C 97 76       	staA	displayBcd1 + 6
0385   7A5E             	
0386   7A5E DE 50       	ldX	>curCol
0387   7A60 B6 01 6A    	ldaA	>displayCol
0388   7A63 84 0F       	andA	1111b
0389   7A65 C6 FF       	ldaB 	$FF
0390   7A67 F7 28 02    	staB	displayBcd
0391   7A6A B7 28 00    	staA	displayStrobe
0392   7A6D 85 08       	bitA	00001000b
0393   7A6F             	ifeq
0393   7A6F             
0393   7A6F 26 FE       
0394   7A71 E6 70       		ldaB	displayBcd1, X
0395   7A73             	else
0395   7A73             
0395   7A73             
0395   7A73             
0395   7A73             
0395   7A70             
0395   7A70             
0395   7A70             
0395   7A70~            	else
0395   7A70~            	else
0395   7A70~            	else
0395   7A70~            	else
0395   7A70             
0395   7A70~            	else
0395   7A70~            	else
0395   7A70~            	else
0395   7A70~            	else
0395   7A70             
0395   7A70             
0395   7A70 04          
0395   7A73             
0395   7A73 20 FE       
0395   7A75             
0395   7A75             
0395   7A75             
0395   7A75~            	else
0395   7A75~            	else
0395   7A75~            	else
0395   7A75~            	else
0395   7A75~            	else
0395   7A75             
0395   7A75~            	else
0395   7A75~            	else
0395   7A75             
0395   7A75~            	else
0395   7A75~            	else
0395   7A75             
0396   7A75 E6 78       		ldaB	displayBcd1 + 8, X
0397   7A77             	endif
0397   7A77             
0397   7A77             
0397   7A77             
0397   7A77             
0397   7A77             
0397   7A77~            	endif
0397   7A77~            	endif
0397   7A77             
0397   7A77~            	endif
0397   7A77~            	endif
0397   7A77             
0397   7A74             
0397   7A74 02          
0397   7A75             
0397   7A75             
0397   7A75~            	endif
0397   7A75~            	endif
0397   7A75~            	endif
0397   7A75             
0397   7A77             
0397   7A77~            	endif
0397   7A77~            	endif
0397   7A77             
0398   7A77 F7 28 02    	staB	displayBcd
0399   7A7A             	
0400   7A7A             ; read switches
0401   7A7A             	;jmp updateLamps
0402   7A7A DE 50       	ldX	>curCol
0403   7A7C B6 30 00    	ldaA	>switchRow
0404   7A7F 16          	tab
0405   7A80 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0406   7A82             	
0407   7A82 D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0408   7A84 D7 01       	staB	temp + 1 			; temp = switch / 2
0409   7A86 D7 53       	staB	tempX + 1			; tempX = cRAM
0410   7A88 C6 60       	ldaB	callbackTable >> 8
0411   7A8A D7 00       	staB	temp
0412   7A8C C6 01       	ldaB	cRAM >> 8
0413   7A8E D7 52       	staB	tempX
0414   7A90             	
0415   7A90 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0416   7A92             	
0417   7A92             	; temp now contains the beginning of the row in the callbackTable
0418   7A92             swNext:
0419   7A92 85 01       	bitA	00000001b	 ; Z set if switch not different
0420   7A94             	ifne		; if bit set, switch different
0420   7A94             
0420   7A94 27 FE       
0421   7A96 36          		pshA ; store changed switches left
0422   7A97 DE 52       		ldX	>tempX
0423   7A99 86 18       		ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0424   7A9B             				; but checking 'multiple of 8' would miss 7/8 switch
0425   7A9B             				; columns completely since they're in sync
0426   7A9B             				; so instead the lowest bits are empty (so that it'll
0427   7A9B             				; get all switch cols) and instead it skips 7/8 groups 
0428   7A9B             				; of 8 IRQs
0429   7A9B 95 02       		bitA	>counter
0430   7A9D 27 08       		beq checkSettled ; counter not multiple of 8, skip settling (multiplies settle time by 8)
0431   7A9F             			; just check if this is the beginning of the settle
0432   7A9F             			;  (want to react right away when a switch closes)
0433   7A9F A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0434   7AA1 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0435   7AA3 27 33       			beq 	notSettled; A=0 -> was settled, so can begin
0436   7AA5 20 4B       			bra settledEnd
0437   7AA7             checkSettled:
0438   7AA7 A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0439   7AA9 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0440   7AAB 27 2B       		beq 	notSettled; A=0 -> settled
0441   7AAD             		; else A > 0 -> settling
0442   7AAD 4A          			decA
0443   7AAE A7 00       			staA	0, X	; sets Z if now A = 0
0444   7AB0             			ifeq ; A=0 -> now settled, fire event
0444   7AB0             
0444   7AB0 26 FE       
0445   7AB2             settled:		
0446   7AB2 DE 50       				ldX	>curCol
0447   7AB4 17          				tBA	; A now the bit in row
0448   7AB5 A8 20       				eorA	switchRow1, X ; toggle bit in row
0449   7AB7 A7 20       				staA	switchRow1, X ; A now state of row
0450   7AB9             				
0451   7AB9 F5 30 00    				bitB	>switchRow
0452   7ABC             				ifne ; switch now on
0452   7ABC             
0452   7ABC 27 FE       
0453   7ABE 86 40       					ldaA	01000000b
0454   7AC0             				else
0454   7AC0             
0454   7AC0             
0454   7AC0             
0454   7AC0             
0454   7ABD             
0454   7ABD             
0454   7ABD             
0454   7ABD~            				else
0454   7ABD~            				else
0454   7ABD~            				else
0454   7ABD~            				else
0454   7ABD             
0454   7ABD~            				else
0454   7ABD~            				else
0454   7ABD~            				else
0454   7ABD~            				else
0454   7ABD             
0454   7ABD             
0454   7ABD 04          
0454   7AC0             
0454   7AC0 20 FE       
0454   7AC2             
0454   7AC2             
0454   7AC2             
0454   7AC2~            				else
0454   7AC2~            				else
0454   7AC2~            				else
0454   7AC2~            				else
0454   7AC2~            				else
0454   7AC2             
0454   7AC2~            				else
0454   7AC2~            				else
0454   7AC2             
0454   7AC2~            				else
0454   7AC2~            				else
0454   7AC2             
0455   7AC2 86 C0       					ldaA	11000000b
0456   7AC4             				endif
0456   7AC4             
0456   7AC4             
0456   7AC4             
0456   7AC4             
0456   7AC4             
0456   7AC4~            				endif
0456   7AC4~            				endif
0456   7AC4             
0456   7AC4~            				endif
0456   7AC4~            				endif
0456   7AC4             
0456   7AC1             
0456   7AC1 02          
0456   7AC2             
0456   7AC2             
0456   7AC2~            				endif
0456   7AC2~            				endif
0456   7AC2~            				endif
0456   7AC2             
0456   7AC4             
0456   7AC4~            				endif
0456   7AC4~            				endif
0456   7AC4             
0457   7AC4 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0458   7AC6             				
0459   7AC6             				; store event
0460   7AC6 DE 56       				ldX	>queueTail
0461   7AC8 A7 00       				staA	0, X
0462   7ACA 7C 00 57    				inc	queueTail + 1
0463   7ACD             				
0464   7ACD             				; wrap queueTail if necessary
0465   7ACD 8C 00 6D    				cpX	queueEnd 
0466   7AD0             				ifeq
0466   7AD0             
0466   7AD0 26 FE       
0467   7AD2 86 60       					ldaA	queue 
0468   7AD4 97 57       					staA	queueTail + 1
0469   7AD6             				endif
0469   7AD6             
0469   7AD6             
0469   7AD6             
0469   7AD6             
0469   7AD6             
0469   7AD6~            				endif
0469   7AD6~            				endif
0469   7AD6             
0469   7AD6~            				endif
0469   7AD6~            				endif
0469   7AD6             
0469   7AD1             
0469   7AD1 04          
0469   7AD2             
0469   7AD2             
0469   7AD2~            				endif
0469   7AD2~            				endif
0469   7AD2~            				endif
0469   7AD2             
0469   7AD6             
0469   7AD6~            				endif
0469   7AD6~            				endif
0469   7AD6             
0470   7AD6             			endif
0470   7AD6             
0470   7AD6             
0470   7AD6             
0470   7AD6             
0470   7AD6             
0470   7AD6~            			endif
0470   7AD6~            			endif
0470   7AD6             
0470   7AD6~            			endif
0470   7AD6~            			endif
0470   7AD6             
0470   7AB1             
0470   7AB1 24          
0470   7AB2             
0470   7AB2             
0470   7AB2~            			endif
0470   7AB2~            			endif
0470   7AB2~            			endif
0470   7AB2             
0470   7AD6             
0470   7AD6~            			endif
0470   7AD6~            			endif
0470   7AD6             
0471   7AD6 20 1A       		bra settledEnd
0472   7AD8             notSettled: ; =0 -> was settled, so now it's not
0473   7AD8             			; get the settle time
0474   7AD8 96 53       			ldaA	>tempX + 1
0475   7ADA 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0476   7ADC DE 00       			ldX	>temp
0477   7ADE             			
0478   7ADE             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0479   7ADE A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0480   7AE0             			
0481   7AE0             			; need to get correct 3 bits from switch settings
0482   7AE0 F5 30 00    			bitB	>switchRow
0483   7AE3             			ifne ; switch just turned on
0483   7AE3             
0483   7AE3 27 FE       
0484   7AE5 44          				lsrA
0485   7AE6 44          				lsrA
0486   7AE7             			else
0486   7AE7             
0486   7AE7             
0486   7AE7             
0486   7AE7             
0486   7AE4             
0486   7AE4             
0486   7AE4             
0486   7AE4~            			else
0486   7AE4~            			else
0486   7AE4~            			else
0486   7AE4~            			else
0486   7AE4             
0486   7AE4~            			else
0486   7AE4~            			else
0486   7AE4~            			else
0486   7AE4~            			else
0486   7AE4             
0486   7AE4             
0486   7AE4 04          
0486   7AE7             
0486   7AE7 20 FE       
0486   7AE9             
0486   7AE9             
0486   7AE9             
0486   7AE9~            			else
0486   7AE9~            			else
0486   7AE9~            			else
0486   7AE9~            			else
0486   7AE9~            			else
0486   7AE9             
0486   7AE9~            			else
0486   7AE9~            			else
0486   7AE9             
0486   7AE9~            			else
0486   7AE9~            			else
0486   7AE9             
0487   7AE9 48          				aslA
0488   7AEA             			endif
0488   7AEA             
0488   7AEA             
0488   7AEA             
0488   7AEA             
0488   7AEA             
0488   7AEA~            			endif
0488   7AEA~            			endif
0488   7AEA             
0488   7AEA~            			endif
0488   7AEA~            			endif
0488   7AEA             
0488   7AE8             
0488   7AE8 01          
0488   7AE9             
0488   7AE9             
0488   7AE9~            			endif
0488   7AE9~            			endif
0488   7AE9~            			endif
0488   7AE9             
0488   7AEA             
0488   7AEA~            			endif
0488   7AEA~            			endif
0488   7AEA             
0489   7AEA 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0490   7AEC             						
0491   7AEC DE 52       			ldX	>tempX
0492   7AEE A7 00       			staA	0, X		; start settling	
0493   7AF0 27 C0       			beq	settled		; quick out for 0 settle
0494   7AF2             settledEnd:
0495   7AF2             			
0496   7AF2 32          		pulA
0497   7AF3             	endif
0497   7AF3             
0497   7AF3             
0497   7AF3             
0497   7AF3             
0497   7AF3             
0497   7AF3~            	endif
0497   7AF3~            	endif
0497   7AF3             
0497   7AF3~            	endif
0497   7AF3~            	endif
0497   7AF3             
0497   7A95             
0497   7A95 5D          
0497   7A96             
0497   7A96             
0497   7A96~            	endif
0497   7A96~            	endif
0497   7A96~            	endif
0497   7A96             
0497   7AF3             
0497   7AF3~            	endif
0497   7AF3~            	endif
0497   7AF3             
0498   7AF3 7C 00 53    	inc tempX + 1
0499   7AF6 58          	aslB
0500   7AF7 44          	lsrA			; pop lowest bit off, set Z if A is empty
0501   7AF8 26 98       	bne		swNext 	; more 'switched' bits, keep processing 
0502   7AFA             	
0503   7AFA             	
0504   7AFA             ; update lamps
0505   7AFA             updateLamps:
0506   7AFA             	;jmp updateStrobe
0507   7AFA             
0508   7AFA DE 50       	ldX	>curCol
0509   7AFC             	
0510   7AFC 86 FF       	ldaA	$FF	;lamp row is inverted
0511   7AFE B7 24 00    	staA	lampCol
0512   7B01 96 07       	ldaA	>strobe
0513   7B03 B7 24 02    	staA	lampStrobe
0514   7B06             	
0515   7B06 D6 02       	ldaB	>counter
0516   7B08 A6 08       	ldaA	lampCol1, X
0517   7B0A C5 80       	bitB	10000000b 
0518   7B0C             	ifeq
0518   7B0C             
0518   7B0C 26 FE       
0519   7B0E A8 A0       		eorA	flashLampCol1, X
0520   7B10 A4 08       		andA	lampCol1, X
0521   7B12             	endif
0521   7B12             
0521   7B12             
0521   7B12             
0521   7B12             
0521   7B12             
0521   7B12~            	endif
0521   7B12~            	endif
0521   7B12             
0521   7B12~            	endif
0521   7B12~            	endif
0521   7B12             
0521   7B0D             
0521   7B0D 04          
0521   7B0E             
0521   7B0E             
0521   7B0E~            	endif
0521   7B0E~            	endif
0521   7B0E~            	endif
0521   7B0E             
0521   7B12             
0521   7B12~            	endif
0521   7B12~            	endif
0521   7B12             
0522   7B12 43          	comA	; inverted
0523   7B13             	
0524   7B13 B7 24 00    	staA	lampCol
0525   7B16 86 00       	ldaA	00
0526   7B18             
0527   7B18             ; update solenoids
0528   7B18             	; if a solenoid is set to <254, --
0529   7B18             	; if =255, off, otherwise on
0530   7B18             	; else leave it at 254
0531   7B18             	
0532   7B18 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0533   7B1B 86 FE       	ldaA	254
0534   7B1D DE 50       	ldX	>curCol
0535   7B1F             	; update solenoid in current 'column' (1-8) 
0536   7B1F A1 40       	cmpA	solenoid1 - cRAM, X
0537   7B21             	ifge 	; solenoid <=254, turn on
0537   7B21             
0537   7B21 25 FE       
0538   7B23             		ifgt	; solenoid < 254, decrement
0538   7B23             
0538   7B23 23 FE       
0539   7B25 6A 40       			dec	solenoid1 - cRAM, X
0540   7B27             		endif
0540   7B27             
0540   7B27             
0540   7B27             
0540   7B27             
0540   7B27             
0540   7B27~            		endif
0540   7B27~            		endif
0540   7B27             
0540   7B27~            		endif
0540   7B27~            		endif
0540   7B27             
0540   7B24             
0540   7B24 02          
0540   7B25             
0540   7B25             
0540   7B25~            		endif
0540   7B25~            		endif
0540   7B25~            		endif
0540   7B25             
0540   7B27             
0540   7B27~            		endif
0540   7B27~            		endif
0540   7B27             
0541   7B27 0D          		sec
0542   7B28             	else
0542   7B28             
0542   7B28             
0542   7B28             
0542   7B28             
0542   7B22             
0542   7B22             
0542   7B22             
0542   7B22~            	else
0542   7B22~            	else
0542   7B22~            	else
0542   7B22~            	else
0542   7B22             
0542   7B22~            	else
0542   7B22~            	else
0542   7B22~            	else
0542   7B22~            	else
0542   7B22             
0542   7B22             
0542   7B22 07          
0542   7B28             
0542   7B28 20 FE       
0542   7B2A             
0542   7B2A             
0542   7B2A             
0542   7B2A~            	else
0542   7B2A~            	else
0542   7B2A~            	else
0542   7B2A~            	else
0542   7B2A~            	else
0542   7B2A             
0542   7B2A~            	else
0542   7B2A~            	else
0542   7B2A             
0542   7B2A~            	else
0542   7B2A~            	else
0542   7B2A             
0543   7B2A 0C          		clc
0544   7B2B             	endif
0544   7B2B             
0544   7B2B             
0544   7B2B             
0544   7B2B             
0544   7B2B             
0544   7B2B~            	endif
0544   7B2B~            	endif
0544   7B2B             
0544   7B2B~            	endif
0544   7B2B~            	endif
0544   7B2B             
0544   7B29             
0544   7B29 01          
0544   7B2A             
0544   7B2A             
0544   7B2A~            	endif
0544   7B2A~            	endif
0544   7B2A~            	endif
0544   7B2A             
0544   7B2B             
0544   7B2B~            	endif
0544   7B2B~            	endif
0544   7B2B             
0545   7B2B 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0546   7B2E             	; repeat above for second bank
0547   7B2E A1 48       	cmpA	solenoid9 - cRAM, X
0548   7B30             	ifge 	; solenoid <=254, turn on
0548   7B30             
0548   7B30 25 FE       
0549   7B32             		ifgt	; solenoid < 254, decrement
0549   7B32             
0549   7B32 23 FE       
0550   7B34 6A 48       			dec	solenoid9 - cRAM, X
0551   7B36             		endif
0551   7B36             
0551   7B36             
0551   7B36             
0551   7B36             
0551   7B36             
0551   7B36~            		endif
0551   7B36~            		endif
0551   7B36             
0551   7B36~            		endif
0551   7B36~            		endif
0551   7B36             
0551   7B33             
0551   7B33 02          
0551   7B34             
0551   7B34             
0551   7B34~            		endif
0551   7B34~            		endif
0551   7B34~            		endif
0551   7B34             
0551   7B36             
0551   7B36~            		endif
0551   7B36~            		endif
0551   7B36             
0552   7B36 0D          		sec
0553   7B37             	else
0553   7B37             
0553   7B37             
0553   7B37             
0553   7B37             
0553   7B31             
0553   7B31             
0553   7B31             
0553   7B31~            	else
0553   7B31~            	else
0553   7B31~            	else
0553   7B31~            	else
0553   7B31             
0553   7B31~            	else
0553   7B31~            	else
0553   7B31~            	else
0553   7B31~            	else
0553   7B31             
0553   7B31             
0553   7B31 07          
0553   7B37             
0553   7B37 20 FE       
0553   7B39             
0553   7B39             
0553   7B39             
0553   7B39~            	else
0553   7B39~            	else
0553   7B39~            	else
0553   7B39~            	else
0553   7B39~            	else
0553   7B39             
0553   7B39~            	else
0553   7B39~            	else
0553   7B39             
0553   7B39~            	else
0553   7B39~            	else
0553   7B39             
0554   7B39 0C          		clc
0555   7B3A             	endif
0555   7B3A             
0555   7B3A             
0555   7B3A             
0555   7B3A             
0555   7B3A             
0555   7B3A~            	endif
0555   7B3A~            	endif
0555   7B3A             
0555   7B3A~            	endif
0555   7B3A~            	endif
0555   7B3A             
0555   7B38             
0555   7B38 01          
0555   7B39             
0555   7B39             
0555   7B39~            	endif
0555   7B39~            	endif
0555   7B39~            	endif
0555   7B39             
0555   7B3A             
0555   7B3A~            	endif
0555   7B3A~            	endif
0555   7B3A             
0556   7B3A 76 00 29    	ror		solBStatus	
0557   7B3D 7A 00 50    	dec		curCol ; undo inc
0558   7B40             	
0559   7B40             ; update strobe	
0560   7B40             updateStrobe:
0561   7B40             	;ldX		curCol
0562   7B40             	;inX 	
0563   7B40 86 08       	ldaA	8 	; pitch
0564   7B42 9B 10       	addA	>curSwitchRowLsb
0565   7B44 97 10       	staA	curSwitchRowLsb
0566   7B46 78 00 07    	asl	strobe
0567   7B49 7C 01 6A    	inc	displayCol
0568   7B4C 86 00       	ldaA	0
0569   7B4E 91 07       	cmpA	>strobe ; strobe done?  reset
0570   7B50             	ifeq		
0570   7B50             
0570   7B50 26 FE       
0571   7B52 96 28       		ldaA	>solAStatus
0572   7B54 B7 22 00    		staA	solenoidA
0573   7B57 96 29       		ldaA	>solBStatus
0574   7B59 B7 22 02    		staA	solenoidB
0575   7B5C             	
0576   7B5C 86 01       		ldaA	00000001b
0577   7B5E 97 07       		staA	strobe
0578   7B60             		
0579   7B60             		;ldX 	#0
0580   7B60             		
0581   7B60 86 00       		ldaA	0
0582   7B62 97 50       		staA	curCol
0583   7B64 97 51       		staA	curCol + 1
0584   7B66 97 10       		staA	curSwitchRowLsb
0585   7B68 97 28       		staA	solAStatus
0586   7B6A 97 29       		staA	solBStatus
0587   7B6C             		
0588   7B6C F6 01 6A    		ldaB	>displayCol	; reset display col only if it's > 7 
0589   7B6F CA F0       		oraB	11110000b
0590   7B71 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0591   7B73             		ifgt
0591   7B73             
0591   7B73 23 FE       
0592   7B75 B7 01 6A    			staA	displayCol
0593   7B78             		endif
0593   7B78             
0593   7B78             
0593   7B78             
0593   7B78             
0593   7B78             
0593   7B78~            		endif
0593   7B78~            		endif
0593   7B78             
0593   7B78~            		endif
0593   7B78~            		endif
0593   7B78             
0593   7B74             
0593   7B74 03          
0593   7B75             
0593   7B75             
0593   7B75~            		endif
0593   7B75~            		endif
0593   7B75~            		endif
0593   7B75             
0593   7B78             
0593   7B78~            		endif
0593   7B78~            		endif
0593   7B78             
0594   7B78             	
0595   7B78 B6 01 6B    		ldaA	>state
0596   7B7B 8A 04       		oraA	100b
0597   7B7D B7 01 6B    		staA	state
0598   7B80             	else
0598   7B80             
0598   7B80             
0598   7B80             
0598   7B80             
0598   7B51             
0598   7B51             
0598   7B51             
0598   7B51~            	else
0598   7B51~            	else
0598   7B51~            	else
0598   7B51~            	else
0598   7B51             
0598   7B51~            	else
0598   7B51~            	else
0598   7B51~            	else
0598   7B51~            	else
0598   7B51             
0598   7B51             
0598   7B51 30          
0598   7B80             
0598   7B80 20 FE       
0598   7B82             
0598   7B82             
0598   7B82             
0598   7B82~            	else
0598   7B82~            	else
0598   7B82~            	else
0598   7B82~            	else
0598   7B82~            	else
0598   7B82             
0598   7B82~            	else
0598   7B82~            	else
0598   7B82             
0598   7B82~            	else
0598   7B82~            	else
0598   7B82             
0599   7B82 7C 00 51    		inc	curCol + 1
0600   7B85             	endif
0600   7B85             
0600   7B85             
0600   7B85             
0600   7B85             
0600   7B85             
0600   7B85~            	endif
0600   7B85~            	endif
0600   7B85             
0600   7B85~            	endif
0600   7B85~            	endif
0600   7B85             
0600   7B81             
0600   7B81 03          
0600   7B82             
0600   7B82             
0600   7B82~            	endif
0600   7B82~            	endif
0600   7B82~            	endif
0600   7B82             
0600   7B85             
0600   7B85~            	endif
0600   7B85~            	endif
0600   7B85             
0601   7B85             	
0602   7B85 3B          	rti
0603   7B86             afterInterrupt:
0604   7B86             
0605   7FF8             pointers: 	.org $7FF8  	
0606   7FF8             	.msfirst
0607   7FF8 79 FF       	.dw interrupt			
0608   7FFA 79 FF       	.dw interrupt			
0609   7FFC 79 FF       	.dw interrupt			
0610   7FFE 78 00       	.dw main
0611   8000             	
0612   8000             	
0613   8000             	.endtasm: Number of errors = 0
