0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             curCol:			.equ RAM + $50 ; +
0041+  0000             tempX:			.equ RAM + $52 ; +
0042+  0000             queueHead:		.equ RAM + $54 ; +
0043+  0000             queueTail:		.equ RAM + $56 ; +
0044+  0000             tempQ:			.equ RAM + $58 ; +
0045+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0046+  0000             queueEnd:		.equ RAM + $67
0047+  0000             ;
0048+  0000             displayBcd1:	.equ RAM + $70
0049+  0000             displayBcd16:	.equ RAM + $7F
0050+  0000             ballCount:		.equ displayBcd1 + 7
0051+  0000             waitLeft: 		.equ RAM + $80
0052+  0000             waitLeftEnd:		.equ RAM + $87
0053+  0000             waitMsb:		.equ RAM + $88
0054+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0055+  0000             flashLampCol1:		.equ RAM + $98
0056+  0000             flashLampCol8:		.equ RAM + $9F
0057+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0058+  0000             
0059+  0000             
0060+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0061+  0000             settleRow8:		.equ settleRow1+  (8*8)-1
0062+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0063+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0064+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0065+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0066+  0000             #DEFINE s(n) 		(0 + n)
0067+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0068+  0000             pA_10:			.equ pA_1m + 5
0069+  0000             pB_1m:			.equ pA_10 + 1
0070+  0000             pB_10:			.equ pB_1m + 5
0071+  0000             pC_1m:			.equ pB_10 + 1
0072+  0000             pC_10:			.equ pC_1m + 5
0073+  0000             pD_1m:			.equ pC_10 + 1
0074+  0000             pD_10:			.equ pD_1m + 5  
0075+  0000             displayCol:		.equ cRAM + $68
0076+  0000             state:			.equ cRAM + $69	; ? | strobe reset | don't validate | ?
0077+  0000             
0078+  0000             instant:		.equ 4
0079+  0000             debounce:		.equ 1
0080+  0000             slow:			.equ 2
0081+  0000             
0082+  0000             switchSettle:	.equ cRAM + $30
0083+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7AFF             utils:	.org $7800 + $2FF
0002+  7AFF             
0003+  7AFF             ; copy players' scores to display 
0004+  7AFF             copyScores13:
0005+  7AFF CE 00 70    	ldX	displayBcd1
0006+  7B02 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7B04             copy13Loop:
0008+  7B04 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7B06 84 0F       	andA	$0F
0010+  7B08 81 00       	cmpA	$00 
0011+  7B0A             	\ .push  *, 0 \ BNE  * 		 ; if pA score = 0?
0011+  7B0A             
0011+  7B0A 26 FE       
0012+  7B0C 8C 00 74    		cpX	displayBcd1 + 4
0013+  7B0F             		\ .push  *, 0 \ BNE  * 		
0013+  7B0F             
0013+  7B0F 26 FE       
0014+  7B11 C4 0F       			andB	00001111b 
0015+  7B13 86 0F       			ldaA	$0F
0016+  7B15             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0016+  7B15             
0016+  7B15             
0016+  7B15             
0016+  7B15             
0016+  7B10             
0016+  7B10             
0016+  7B10             
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10             
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10             
0016+  7B10             
0016+  7B10 06          
0016+  7B15             
0016+  7B15 20 FE       
0016+  7B17             
0016+  7B17             
0016+  7B17             
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17             
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17             
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17             
0017+  7B17 17          			tBA	; replace 0 with blank/0
0018+  7B18             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0018+  7B18             
0018+  7B18             
0018+  7B18             
0018+  7B18             
0018+  7B18             
0018+  7B18~            		endif
0018+  7B18~            		endif
0018+  7B18             
0018+  7B18~            		endif
0018+  7B18~            		endif
0018+  7B18             
0018+  7B16             
0018+  7B16 01          
0018+  7B17             
0018+  7B17             
0018+  7B17~            		endif
0018+  7B17~            		endif
0018+  7B17~            		endif
0018+  7B17             
0018+  7B18             
0018+  7B18~            		endif
0018+  7B18~            		endif
0018+  7B18             
0019+  7B18             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0019+  7B18             
0019+  7B18             
0019+  7B18             
0019+  7B18             
0019+  7B0B             
0019+  7B0B             
0019+  7B0B             
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B             
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B             
0019+  7B0B             
0019+  7B0B 0E          
0019+  7B18             
0019+  7B18 20 FE       
0019+  7B1A             
0019+  7B1A             
0019+  7B1A             
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A             
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A             
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A             
0020+  7B1A 48          		aslA
0021+  7B1B 48          		aslA
0022+  7B1C 48          		aslA
0023+  7B1D 48          		aslA
0024+  7B1E C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7B20 8A 0F       		oraA	00001111b
0026+  7B22             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0026+  7B22             
0026+  7B22             
0026+  7B22             
0026+  7B22             
0026+  7B22             
0026+  7B22~            	endif
0026+  7B22~            	endif
0026+  7B22             
0026+  7B22~            	endif
0026+  7B22~            	endif
0026+  7B22             
0026+  7B19             
0026+  7B19 08          
0026+  7B1A             
0026+  7B1A             
0026+  7B1A~            	endif
0026+  7B1A~            	endif
0026+  7B1A~            	endif
0026+  7B1A             
0026+  7B22             
0026+  7B22~            	endif
0026+  7B22~            	endif
0026+  7B22             
0027+  7B22             	;andA	pC_1m - displayBcd1, X
0028+  7B22             	
0029+  7B22 84 F0       	andA	$F0
0030+  7B24 85 0F       	bitA	00001111b
0031+  7B26             	\ .push  *, 0 \ BNE  * 		 ; pC is 0
0031+  7B26             
0031+  7B26 26 FE       
0032+  7B28 C5 0F       		bitB	1111b
0033+  7B2A             		\ .push  *, 0 \ BEQ  * 
0033+  7B2A             
0033+  7B2A 27 FE       
0034+  7B2C 8C 00 74    			cpX	displayBcd1 + 4
0035+  7B2F             			\ .push  *, 0 \ BNE  * 		
0035+  7B2F             
0035+  7B2F 26 FE       
0036+  7B31 C4 F0       				andB	11110000b
0037+  7B33             			\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0037+  7B33             
0037+  7B33             
0037+  7B33             
0037+  7B33             
0037+  7B30             
0037+  7B30             
0037+  7B30             
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30             
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30             
0037+  7B30             
0037+  7B30 04          
0037+  7B33             
0037+  7B33 20 FE       
0037+  7B35             
0037+  7B35             
0037+  7B35             
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35             
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35             
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35             
0038+  7B35 8A 0F       				oraA	$F
0039+  7B37             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0039+  7B37             
0039+  7B37             
0039+  7B37             
0039+  7B37             
0039+  7B37             
0039+  7B37~            			endif
0039+  7B37~            			endif
0039+  7B37             
0039+  7B37~            			endif
0039+  7B37~            			endif
0039+  7B37             
0039+  7B34             
0039+  7B34 02          
0039+  7B35             
0039+  7B35             
0039+  7B35~            			endif
0039+  7B35~            			endif
0039+  7B35~            			endif
0039+  7B35             
0039+  7B37             
0039+  7B37~            			endif
0039+  7B37~            			endif
0039+  7B37             
0040+  7B37             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0040+  7B37             
0040+  7B37             
0040+  7B37             
0040+  7B37             
0040+  7B37             
0040+  7B37~            		endif
0040+  7B37~            		endif
0040+  7B37             
0040+  7B37~            		endif
0040+  7B37~            		endif
0040+  7B37             
0040+  7B2B             
0040+  7B2B 0B          
0040+  7B2C             
0040+  7B2C             
0040+  7B2C~            		endif
0040+  7B2C~            		endif
0040+  7B2C~            		endif
0040+  7B2C             
0040+  7B37             
0040+  7B37~            		endif
0040+  7B37~            		endif
0040+  7B37             
0041+  7B37             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0041+  7B37             
0041+  7B37             
0041+  7B37             
0041+  7B37             
0041+  7B27             
0041+  7B27             
0041+  7B27             
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27             
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27             
0041+  7B27             
0041+  7B27 11          
0041+  7B37             
0041+  7B37 20 FE       
0041+  7B39             
0041+  7B39             
0041+  7B39             
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39             
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39             
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39             
0042+  7B39 C4 F0       		andB	11110000b
0043+  7B3B             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0043+  7B3B             
0043+  7B3B             
0043+  7B3B             
0043+  7B3B             
0043+  7B3B             
0043+  7B3B~            	endif
0043+  7B3B~            	endif
0043+  7B3B             
0043+  7B3B~            	endif
0043+  7B3B~            	endif
0043+  7B3B             
0043+  7B38             
0043+  7B38 02          
0043+  7B39             
0043+  7B39             
0043+  7B39~            	endif
0043+  7B39~            	endif
0043+  7B39~            	endif
0043+  7B39             
0043+  7B3B             
0043+  7B3B~            	endif
0043+  7B3B~            	endif
0043+  7B3B             
0044+  7B3B A7 00       	staA	0, X
0045+  7B3D             	
0046+  7B3D 08          	inX
0047+  7B3E 8C 00 76    	cpX	displayBcd1 + 6
0048+  7B41 26 C1       	bne 	copy13Loop
0049+  7B43             	
0050+  7B43 39          	rts
0051+  7B44             
0052+  7B44             copyScores24:
0053+  7B44 CE 00 78    	ldX	displayBcd1 + 8
0054+  7B47 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7B49             copy24Loop:
0056+  7B49 A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7B4B 84 0F       	andA	$0F
0058+  7B4D 81 00       	cmpA	$00 ; is pA score 0?
0059+  7B4F             	\ .push  *, 0 \ BNE  * 		 ; if pA score = 0?
0059+  7B4F             
0059+  7B4F 26 FE       
0060+  7B51 8C 00 7C    		cpX	displayBcd1 + 8 + 4
0061+  7B54             		\ .push  *, 0 \ BNE  * 		
0061+  7B54             
0061+  7B54 26 FE       
0062+  7B56 C4 0F       			andB	00001111b 
0063+  7B58 86 0F       			ldaA	$0F
0064+  7B5A             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0064+  7B5A             
0064+  7B5A             
0064+  7B5A             
0064+  7B5A             
0064+  7B55             
0064+  7B55             
0064+  7B55             
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55             
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55             
0064+  7B55             
0064+  7B55 06          
0064+  7B5A             
0064+  7B5A 20 FE       
0064+  7B5C             
0064+  7B5C             
0064+  7B5C             
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C             
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C             
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C             
0065+  7B5C 17          			tBA	; replace 0 with blank/0
0066+  7B5D             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0066+  7B5D             
0066+  7B5D             
0066+  7B5D             
0066+  7B5D             
0066+  7B5D             
0066+  7B5D~            		endif
0066+  7B5D~            		endif
0066+  7B5D             
0066+  7B5D~            		endif
0066+  7B5D~            		endif
0066+  7B5D             
0066+  7B5B             
0066+  7B5B 01          
0066+  7B5C             
0066+  7B5C             
0066+  7B5C~            		endif
0066+  7B5C~            		endif
0066+  7B5C~            		endif
0066+  7B5C             
0066+  7B5D             
0066+  7B5D~            		endif
0066+  7B5D~            		endif
0066+  7B5D             
0067+  7B5D             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0067+  7B5D             
0067+  7B5D             
0067+  7B5D             
0067+  7B5D             
0067+  7B50             
0067+  7B50             
0067+  7B50             
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50             
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50             
0067+  7B50             
0067+  7B50 0E          
0067+  7B5D             
0067+  7B5D 20 FE       
0067+  7B5F             
0067+  7B5F             
0067+  7B5F             
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F             
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F             
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F             
0068+  7B5F 48          		aslA
0069+  7B60 48          		aslA
0070+  7B61 48          		aslA
0071+  7B62 48          		aslA
0072+  7B63 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7B65 8A 0F       		oraA	00001111b
0074+  7B67             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0074+  7B67             
0074+  7B67             
0074+  7B67             
0074+  7B67             
0074+  7B67             
0074+  7B67~            	endif
0074+  7B67~            	endif
0074+  7B67             
0074+  7B67~            	endif
0074+  7B67~            	endif
0074+  7B67             
0074+  7B5E             
0074+  7B5E 08          
0074+  7B5F             
0074+  7B5F             
0074+  7B5F~            	endif
0074+  7B5F~            	endif
0074+  7B5F~            	endif
0074+  7B5F             
0074+  7B67             
0074+  7B67~            	endif
0074+  7B67~            	endif
0074+  7B67             
0075+  7B67             	;andA	pD_1m - (displayBcd1 + 8), X
0076+  7B67 84 F0       	andA	$F0
0077+  7B69 85 0F       	bitA	00001111b
0078+  7B6B             	\ .push  *, 0 \ BNE  * 		 ; pC is 0
0078+  7B6B             
0078+  7B6B 26 FE       
0079+  7B6D C5 0F       		bitB	1111b
0080+  7B6F             		\ .push  *, 0 \ BEQ  * 
0080+  7B6F             
0080+  7B6F 27 FE       
0081+  7B71 8C 00 7C    			cpX	displayBcd1 + 8 + 4
0082+  7B74             			\ .push  *, 0 \ BNE  * 		
0082+  7B74             
0082+  7B74 26 FE       
0083+  7B76 C4 F0       				andB	11110000b
0084+  7B78             			\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0084+  7B78             
0084+  7B78             
0084+  7B78             
0084+  7B78             
0084+  7B75             
0084+  7B75             
0084+  7B75             
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75             
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75             
0084+  7B75             
0084+  7B75 04          
0084+  7B78             
0084+  7B78 20 FE       
0084+  7B7A             
0084+  7B7A             
0084+  7B7A             
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A             
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A             
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A             
0085+  7B7A 8A 0F       				oraA	$F
0086+  7B7C             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0086+  7B7C             
0086+  7B7C             
0086+  7B7C             
0086+  7B7C             
0086+  7B7C             
0086+  7B7C~            			endif
0086+  7B7C~            			endif
0086+  7B7C             
0086+  7B7C~            			endif
0086+  7B7C~            			endif
0086+  7B7C             
0086+  7B79             
0086+  7B79 02          
0086+  7B7A             
0086+  7B7A             
0086+  7B7A~            			endif
0086+  7B7A~            			endif
0086+  7B7A~            			endif
0086+  7B7A             
0086+  7B7C             
0086+  7B7C~            			endif
0086+  7B7C~            			endif
0086+  7B7C             
0087+  7B7C             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0087+  7B7C             
0087+  7B7C             
0087+  7B7C             
0087+  7B7C             
0087+  7B7C             
0087+  7B7C~            		endif
0087+  7B7C~            		endif
0087+  7B7C             
0087+  7B7C~            		endif
0087+  7B7C~            		endif
0087+  7B7C             
0087+  7B70             
0087+  7B70 0B          
0087+  7B71             
0087+  7B71             
0087+  7B71~            		endif
0087+  7B71~            		endif
0087+  7B71~            		endif
0087+  7B71             
0087+  7B7C             
0087+  7B7C~            		endif
0087+  7B7C~            		endif
0087+  7B7C             
0088+  7B7C             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0088+  7B7C             
0088+  7B7C             
0088+  7B7C             
0088+  7B7C             
0088+  7B6C             
0088+  7B6C             
0088+  7B6C             
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C             
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C             
0088+  7B6C             
0088+  7B6C 11          
0088+  7B7C             
0088+  7B7C 20 FE       
0088+  7B7E             
0088+  7B7E             
0088+  7B7E             
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E             
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E             
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E             
0089+  7B7E C4 F0       		andB	11110000b
0090+  7B80             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0090+  7B80             
0090+  7B80             
0090+  7B80             
0090+  7B80             
0090+  7B80             
0090+  7B80~            	endif
0090+  7B80~            	endif
0090+  7B80             
0090+  7B80~            	endif
0090+  7B80~            	endif
0090+  7B80             
0090+  7B7D             
0090+  7B7D 02          
0090+  7B7E             
0090+  7B7E             
0090+  7B7E~            	endif
0090+  7B7E~            	endif
0090+  7B7E~            	endif
0090+  7B7E             
0090+  7B80             
0090+  7B80~            	endif
0090+  7B80~            	endif
0090+  7B80             
0091+  7B80 A7 00       	staA  0, X 
0092+  7B82             	
0093+  7B82 08          	inX
0094+  7B83 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7B86 26 C1       	bne copy24Loop	
0096+  7B88             	
0097+  7B88 39          	rts
0098+  7B89             	
0099+  7B89             blankNonPlayerScores:
0100+  7B89 C6 0E       	ldaB	lampCol1 + (7-1)
0101+  7B8B C5 02       	bitB	((1 << (2-1))
0102+  7B8D 26 1A       	bne	blankP2
0103+  7B8F C5 04       	bitB	((1 << (3-1))
0104+  7B91 26 22       	bne	blankP3
0105+  7B93 C5 08       	bitB	((1 << (4-1))
0106+  7B95 26 2A       	bne	blankP4
0107+  7B97 C5 10       	bitB	((1 << (5-1))
0108+  7B99 26 32       	bne	blankDone
0109+  7B9B 20 00       	bra	blankP1
0110+  7B9D             blankP1:
0111+  7B9D 86 F0       	ldaA	$F0
0112+  7B9F 9A 74       	oraA	>displayBcd1 + 4
0113+  7BA1 97 74       	staA	displayBcd1 + 4
0114+  7BA3 86 F0       	ldaA	$F0
0115+  7BA5 9A 75       	oraA	>displayBcd1 + 5
0116+  7BA7 97 75       	staA	displayBcd1 + 5
0117+  7BA9             blankP2:
0118+  7BA9 86 F0       	ldaA	$F0
0119+  7BAB 9A 7C       	oraA	>displayBcd1 + 12
0120+  7BAD 97 7C       	staA	displayBcd1 + 12
0121+  7BAF 86 F0       	ldaA	$F0
0122+  7BB1 9A 7D       	oraA	>displayBcd1 + 13
0123+  7BB3 97 7D       	staA	displayBcd1 + 13
0124+  7BB5             blankP3:
0125+  7BB5 86 0F       	ldaA	$0F
0126+  7BB7 9A 74       	oraA	>displayBcd1 + 4
0127+  7BB9 97 74       	staA	displayBcd1 + 4
0128+  7BBB 86 0F       	ldaA	$0F
0129+  7BBD 9A 75       	oraA	>displayBcd1 + 5
0130+  7BBF 97 75       	staA	displayBcd1 + 5
0131+  7BC1             blankP4:
0132+  7BC1 86 0F       	ldaA	$0F
0133+  7BC3 9A 7C       	oraA	>displayBcd1 + 12
0134+  7BC5 97 7C       	staA	displayBcd1 + 12
0135+  7BC7 86 0F       	ldaA	$0F
0136+  7BC9 9A 7D       	oraA	>displayBcd1 + 13
0137+  7BCB 97 7D       	staA	displayBcd1 + 13
0138+  7BCD             blankDone:
0139+  7BCD 39          	rts
0140+  7BCE             	
0141+  7BCE             refreshPlayerScores:
0142+  7BCE BD 7A FF    	jsr copyScores13
0143+  7BD1 BD 7B 44    	jsr copyScores24
0144+  7BD4 BD 7B 89    	jsr blankNonPlayerScores
0145+  7BD7 39          	rts
0146+  7BD8             	
0147+  7BD8             ; X = place in p*_1* to add the score to
0148+  7BD8             ; A = amount to add (max 9)
0149+  7BD8             ; tail call
0150+  7BD8             _addScore:
0151+  7BD8 AB 00       	addA	0, X
0152+  7BDA             	\ .push  *, 0 \ BCC  *  ; overflowed, need to increment next number
0152+  7BDA             
0152+  7BDA 24 FE       
0153+  7BDC 8B 06       		addA	6	; adjust A back into BCD
0154+  7BDE A7 00       		staA	0, X
0155+  7BE0             addScore_carryOver:		; loop to propagate carry
0156+  7BE0 09          		deX	; go to next decimal place
0157+  7BE1 A6 00       		ldaA	0, X	
0158+  7BE3 81 F9       		cmpA	$F9
0159+  7BE5             		\ .push  *, 0 \ BNE  * 					; if it's already a 9, reset it and carry again
0159+  7BE5             
0159+  7BE5 26 FE       
0160+  7BE7 6F 00       			clr	0, X
0161+  7BE9 27 F5       			beq addScore_carryOver
0162+  7BEB             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif			; otherwise ++ it and done
0162+  7BEB             
0162+  7BEB             
0162+  7BEB             
0162+  7BEB             
0162+  7BE6             
0162+  7BE6             
0162+  7BE6             
0162+  7BE6~            		else			; otherwise ++ it and done
0162+  7BE6~            		else			; otherwise ++ it and done
0162+  7BE6~            		else			; otherwise ++ it and done
0162+  7BE6~            		else			; otherwise ++ it and done
0162+  7BE6             
0162+  7BE6~            		else			; otherwise ++ it and done
0162+  7BE6~            		else			; otherwise ++ it and done
0162+  7BE6~            		else			; otherwise ++ it and done
0162+  7BE6~            		else			; otherwise ++ it and done
0162+  7BE6             
0162+  7BE6             
0162+  7BE6 06          
0162+  7BEB             
0162+  7BEB 20 FE       
0162+  7BED             
0162+  7BED             
0162+  7BED             
0162+  7BED~            		else			; otherwise ++ it and done
0162+  7BED~            		else			; otherwise ++ it and done
0162+  7BED~            		else			; otherwise ++ it and done
0162+  7BED~            		else			; otherwise ++ it and done
0162+  7BED~            		else			; otherwise ++ it and done
0162+  7BED             
0162+  7BED~            		else			; otherwise ++ it and done
0162+  7BED~            		else			; otherwise ++ it and done
0162+  7BED             
0162+  7BED~            		else			; otherwise ++ it and done
0162+  7BED~            		else			; otherwise ++ it and done
0162+  7BED             
0163+  7BED 6C 00       			inc	0, X
0164+  7BEF             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif	
0164+  7BEF             
0164+  7BEF             
0164+  7BEF             
0164+  7BEF             
0164+  7BEF             
0164+  7BEF~            		endif	
0164+  7BEF~            		endif	
0164+  7BEF             
0164+  7BEF~            		endif	
0164+  7BEF~            		endif	
0164+  7BEF             
0164+  7BEC             
0164+  7BEC 02          
0164+  7BED             
0164+  7BED             
0164+  7BED~            		endif	
0164+  7BED~            		endif	
0164+  7BED~            		endif	
0164+  7BED             
0164+  7BEF             
0164+  7BEF~            		endif	
0164+  7BEF~            		endif	
0164+  7BEF             
0165+  7BEF             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0165+  7BEF             
0165+  7BEF             
0165+  7BEF             
0165+  7BEF             
0165+  7BDB             
0165+  7BDB             
0165+  7BDB             
0165+  7BDB~            	else
0165+  7BDB~            	else
0165+  7BDB~            	else
0165+  7BDB~            	else
0165+  7BDB             
0165+  7BDB~            	else
0165+  7BDB~            	else
0165+  7BDB~            	else
0165+  7BDB~            	else
0165+  7BDB             
0165+  7BDB             
0165+  7BDB 15          
0165+  7BEF             
0165+  7BEF 20 FE       
0165+  7BF1             
0165+  7BF1             
0165+  7BF1             
0165+  7BF1~            	else
0165+  7BF1~            	else
0165+  7BF1~            	else
0165+  7BF1~            	else
0165+  7BF1~            	else
0165+  7BF1             
0165+  7BF1~            	else
0165+  7BF1~            	else
0165+  7BF1             
0165+  7BF1~            	else
0165+  7BF1~            	else
0165+  7BF1             
0166+  7BF1 81 F9       		cmpA	$F9
0167+  7BF3             		\ .push  *, 0 \ BLS  *  ; >9 -> need to adjust back into BCD
0167+  7BF3             
0167+  7BF3 23 FE       
0168+  7BF5 8B 06       			addA	6
0169+  7BF7 A7 00       			staA	0, X
0170+  7BF9             addScore_carryDa:
0171+  7BF9 09          			deX
0172+  7BFA A6 00       			ldaA	0, X
0173+  7BFC 81 F9       			cmpA	$F9
0174+  7BFE             			\ .push  *, 0 \ BNE  * 		
0174+  7BFE             
0174+  7BFE 26 FE       
0175+  7C00 6F 00       				clr	0, X
0176+  7C02 27 F5       				beq 	addScore_carryDa
0177+  7C04             			\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0177+  7C04             
0177+  7C04             
0177+  7C04             
0177+  7C04             
0177+  7BFF             
0177+  7BFF             
0177+  7BFF             
0177+  7BFF~            			else
0177+  7BFF~            			else
0177+  7BFF~            			else
0177+  7BFF~            			else
0177+  7BFF             
0177+  7BFF~            			else
0177+  7BFF~            			else
0177+  7BFF~            			else
0177+  7BFF~            			else
0177+  7BFF             
0177+  7BFF             
0177+  7BFF 06          
0177+  7C04             
0177+  7C04 20 FE       
0177+  7C06             
0177+  7C06             
0177+  7C06             
0177+  7C06~            			else
0177+  7C06~            			else
0177+  7C06~            			else
0177+  7C06~            			else
0177+  7C06~            			else
0177+  7C06             
0177+  7C06~            			else
0177+  7C06~            			else
0177+  7C06             
0177+  7C06~            			else
0177+  7C06~            			else
0177+  7C06             
0178+  7C06 6C 00       				inc	0, X
0179+  7C08             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif	
0179+  7C08             
0179+  7C08             
0179+  7C08             
0179+  7C08             
0179+  7C08             
0179+  7C08~            			endif	
0179+  7C08~            			endif	
0179+  7C08             
0179+  7C08~            			endif	
0179+  7C08~            			endif	
0179+  7C08             
0179+  7C05             
0179+  7C05 02          
0179+  7C06             
0179+  7C06             
0179+  7C06~            			endif	
0179+  7C06~            			endif	
0179+  7C06~            			endif	
0179+  7C06             
0179+  7C08             
0179+  7C08~            			endif	
0179+  7C08~            			endif	
0179+  7C08             
0180+  7C08             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0180+  7C08             
0180+  7C08             
0180+  7C08             
0180+  7C08             
0180+  7BF4             
0180+  7BF4             
0180+  7BF4             
0180+  7BF4~            		else
0180+  7BF4~            		else
0180+  7BF4~            		else
0180+  7BF4~            		else
0180+  7BF4             
0180+  7BF4~            		else
0180+  7BF4~            		else
0180+  7BF4~            		else
0180+  7BF4~            		else
0180+  7BF4             
0180+  7BF4             
0180+  7BF4 15          
0180+  7C08             
0180+  7C08 20 FE       
0180+  7C0A             
0180+  7C0A             
0180+  7C0A             
0180+  7C0A~            		else
0180+  7C0A~            		else
0180+  7C0A~            		else
0180+  7C0A~            		else
0180+  7C0A~            		else
0180+  7C0A             
0180+  7C0A~            		else
0180+  7C0A~            		else
0180+  7C0A             
0180+  7C0A~            		else
0180+  7C0A~            		else
0180+  7C0A             
0181+  7C0A A7 00       			staA	0, X
0182+  7C0C             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0182+  7C0C             
0182+  7C0C             
0182+  7C0C             
0182+  7C0C             
0182+  7C0C             
0182+  7C0C~            		endif
0182+  7C0C~            		endif
0182+  7C0C             
0182+  7C0C~            		endif
0182+  7C0C~            		endif
0182+  7C0C             
0182+  7C09             
0182+  7C09 02          
0182+  7C0A             
0182+  7C0A             
0182+  7C0A~            		endif
0182+  7C0A~            		endif
0182+  7C0A~            		endif
0182+  7C0A             
0182+  7C0C             
0182+  7C0C~            		endif
0182+  7C0C~            		endif
0182+  7C0C             
0183+  7C0C             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0183+  7C0C             
0183+  7C0C             
0183+  7C0C             
0183+  7C0C             
0183+  7C0C             
0183+  7C0C~            	endif
0183+  7C0C~            	endif
0183+  7C0C             
0183+  7C0C~            	endif
0183+  7C0C~            	endif
0183+  7C0C             
0183+  7BF0             
0183+  7BF0 1B          
0183+  7BF1             
0183+  7BF1             
0183+  7BF1~            	endif
0183+  7BF1~            	endif
0183+  7BF1~            	endif
0183+  7BF1             
0183+  7C0C             
0183+  7C0C~            	endif
0183+  7C0C~            	endif
0183+  7C0C             
0184+  7C0C             
0185+  7C0C 7E 7B CE    	jmp refreshPlayerScores
0186+  7C0F             
0187+  7C0F             _delay:	
0188+  7C0F CE 00 7F    	ldX	waitLeft - 1
0189+  7C12             findEmptyLoop:
0190+  7C12 08          	inX
0191+  7C13 A6 00       	ldaA	0, X
0192+  7C15 26 FB       	bne 	findEmptyLoop ; ld sets Z if = 0
0193+  7C17             	; X = first waitLeft that = 0
0194+  7C17 32          	pulA	; A = MSB of PC
0195+  7C18 A7 08       	staA	waitMsb - waitLeft, X
0196+  7C1A 32          	pulA	; A = LSB of PC
0197+  7C1B A7 10       	staA	waitLsb - waitLeft, X
0198+  7C1D E7 00       	staB	0, X
0199+  7C1F             	; time and add stored
0200+  7C1F 7E 79 5D    	jmp afterQueueEvent
0201+  7C22             	
0202+  7C22             resetScores:
0203+  7C22 86 00       	ldaA	00
0204+  7C24 CE 01 55    	ldX	pA_10
0205+  7C27             _zeroScores:
0206+  7C27 A7 00       	staA	0, X
0207+  7C29 08          	inX
0208+  7C2A 8C 01 63    	cpX	pD_1m + 1
0209+  7C2D 26 F8       	bne	_zeroScores
0210+  7C2F             	
0211+  7C2F 86 00       	ldaA	0
0212+  7C31 97 12       	staA	curPlayer
0213+  7C33 97 13       	staA	curPlayer + 1
0214+  7C35 86 FF       	ldaA	$FF
0215+  7C37 97 76       	staA	displayBcd1 + 6
0216+  7C39 97 7E       	staA	displayBcd1 + 14
0217+  7C3B 97 7F       	staA	displayBcd1 + 15
0218+  7C3D             	
0219+  7C3D BD 7B CE    	jsr	refreshPlayerScores
0220+  7C40 39          	rts
0221+  7C41             
0222+  7C41             ; trash all
0223+  7C41             ; delay for ms (16-4000)
0224+  7C41             #DEFINE delay(ms) ldaB ms/16\ jsr _delay
0225+  7C41             	
0226+  7C41             ; trashes B (max 104ms)
0227+  7C41             #DEFINE fireSolenoidFor(n,ms)	ldaB ms/8\ staB solenoid1+n-1 
0228+  7C41             #DEFINE fireSolenoid(n)			fireSolenoidFor(n, 32)
0229+  7C41             
0230+  7C41             ; trashes AX
0231+  7C41             ; place: 1-5 = 10s thru 100ks
0232+  7C41             ; amount: 1-9
0233+  7C41             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0234+  7C41             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0235+  7C41             
0236+  7C41             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0237+  7C41             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0238+  7C41             
0239+  7C41             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0240+  7C41             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0006   7C41             
0007   7C41             #include "game.asm"
0001+  7C41             ; Laser Ball solenoids
0002+  7C41             ;#DEFINE KICKOUT 		01
0003+  7C41             ;#DEFINE LEFT_KICKER 	02
0004+  7C41             ;#DEFINE DROP_LA			03
0005+  7C41             ;#DEFINE DROP_SER		04
0006+  7C41             ;#DEFINE EJECT_HOLE		05
0007+  7C41             ;#DEFINE DROP_BA			06
0008+  7C41             ;#DEFINE DROP_LL			07
0009+  7C41             ;#DEFINE RIGHT_KICKER	08
0010+  7C41             ;#DEFINE SOUND1			09 ; thru 13
0011+  7C41             ;#DEFINE KNOCKER			14
0012+  7C41             ;#DEFINE	FLASHERS		15
0013+  7C41             ;#DEFINE COIN_LOCKOUT	16
0014+  7C41             
0015+  7C41             ; Hot Tip solenoids
0016+  7C41             #DEFINE TOP_EJECT 	01
0017+  7C41             #DEFINE DROP_TIP	02
0018+  7C41             #DEFINE DROP_HOT	03
0019+  7C41             #DEFINE LEFT_EJECT	04
0020+  7C41             #DEFINE OUTHOLE		05
0021+  7C41             #DEFINE CHIME_10	09
0022+  7C41             #DEFINE CHIME_100	10
0023+  7C41             #DEFINE CHIME_1000	11
0024+  7C41             #DEFINE CHIME_10k	12
0025+  7C41             #DEFINE CLICKER		13
0026+  7C41             #DEFINE	KNOCKER		14
0027+  7C41             #DEFINE BUZZER		15
0028+  7C41             
0029+  7C41             #DEFINE done jmp afterQueueEvent
0030+  7C41             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0031+  7C41             ; switch callbacks:
0032+  7C41             
0033+  7E00             none:	.org $7800 + $500 + 256 ; size of callback table
0034+  7E00 7E 79 5D    	jmp afterQueueEvent
0035+  7E03             	
0036+  7E03             startGame:
0037+  7E03 86 DF       	ldaA ~((1 << (6-1))\ andA >lampCol1 + (8-1)\ staA lampCol1 + (8-1) ; game over
0037+  7E05 94 0F       
0037+  7E07 97 0F       
0038+  7E09 B6 22 03    	ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0038+  7E0C 8A 38       
0038+  7E0E B7 22 03    
0039+  7E11             	
0040+  7E11 C6 04       	ldaB  32/8\ staB solenoid1+2-1 
0040+  7E13 F7 01 41    
0041+  7E16 C6 04       	ldaB  32/8\ staB solenoid1+3-1 
0041+  7E18 F7 01 42    
0042+  7E1B             	
0043+  7E1B             	; clear lights
0044+  7E1B CE 00 08    	ldX	lampCol1
0045+  7E1E 86 00       	ldaA	0b
0046+  7E20             lClearLights:
0047+  7E20 A7 00       	staA	0, X
0048+  7E22 A7 90       	staA	flashLampCol1 - lampCol1, X
0049+  7E24 08          	inX
0050+  7E25 8C 00 10    	cpX	lampCol8 + 1
0051+  7E28 26 F6       	bne	lClearLights
0052+  7E2A             	;
0053+  7E2A             	
0054+  7E2A             	; reset scores
0055+  7E2A BD 7C 22    	jsr 	resetScores
0056+  7E2D             	
0057+  7E2D             	; reset ball count
0058+  7E2D 86 10       	ldaA	$10
0059+  7E2F 97 77       	staA	ballCount
0060+  7E31             
0061+  7E31 C6 00       	ldaB	0
0062+  7E33 D7 13       	staB	curPlayer + 1
0063+  7E35             	
0064+  7E35             	; invalidate playfield
0065+  7E35 86 01       	ldaA	((1 << (1-1))
0066+  7E37 9A 9F       	oraA	>flashLampCol1 + (8 - 1)
0067+  7E39 97 9F       	staA	flashLampCol1 + (8 - 1)
0068+  7E3B 9A 0F       	oraA	>lampCol1 + (8-1)
0069+  7E3D 97 0F       	staA	lampCol1 + (8-1)
0070+  7E3F             	
0071+  7E3F 86 02       	ldaA ((1 << (2-1))\ oraA >lampCol1 + (7-1)\ staA lampCol1 + (7-1) ; one player
0071+  7E41 9A 0E       
0071+  7E43 97 0E       
0072+  7E45             	
0073+  7E45 86 01       	ldaA	(1 << (1-1)) ; check outhole
0074+  7E47 95 21       	bitA	>switchRow1 + 2 - 1
0075+  7E49             	\ .push  *, 0 \ BEQ  *  ; ball in hole
0075+  7E49             
0075+  7E49 27 FE       
0076+  7E4B C6 04       		ldaB  32/8\ staB solenoid1+5-1 
0076+  7E4D F7 01 44    
0077+  7E50             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0077+  7E50             
0077+  7E50             
0077+  7E50             
0077+  7E50             
0077+  7E50             
0077+  7E50~            	endif
0077+  7E50~            	endif
0077+  7E50             
0077+  7E50~            	endif
0077+  7E50~            	endif
0077+  7E50             
0077+  7E4A             
0077+  7E4A 05          
0077+  7E4B             
0077+  7E4B             
0077+  7E4B~            	endif
0077+  7E4B~            	endif
0077+  7E4B~            	endif
0077+  7E4B             
0077+  7E50             
0077+  7E50~            	endif
0077+  7E50~            	endif
0077+  7E50             
0078+  7E50             	
0079+  7E50 39          	rts
0080+  7E51             	
0081+  7E51             	
0082+  7E51             
0083+  7E51             sw32:
0084+  7E51 7E 79 5D    	jmp afterQueueEvent
0085+  7E54             	
0086+  7E54             addP2_10:
0087+  7E54             	;ldX		#pB_10
0088+  7E54             	;ldaA	#9
0089+  7E54             	;jmp 	addScore
0090+  7E54 C6 3E       	ldaB 1000/16\ jsr _delay
0090+  7E56 BD 7C 0F    
0091+  7E59 CE 01 5B    	ldX pB_10-1+1\ ldaA 0+9\ jsr _addScore
0091+  7E5C 86 09       
0091+  7E5E BD 7B D8    
0092+  7E61 7E 79 5D    	jmp afterQueueEvent
0093+  7E64             	
0094+  7E64 86 02       swTilt: ldaA 10b\ oraA >state\ staA state
0094+  7E66 BA 01 69    
0094+  7E69 B7 01 69    
0095+  7E6C 86 10       	ldaA ((1 << (5-1))\ oraA >lampCol1 + (8-1)\ staA lampCol1 + (8-1) ; tilt
0095+  7E6E 9A 0F       
0095+  7E70 97 0F       
0096+  7E72 B6 22 03    	ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0096+  7E75 84 F7       
0096+  7E77 B7 22 03    
0097+  7E7A 7E 79 5D    	jmp afterQueueEvent
0098+  7E7D             	
0099+  7E7D 86 02       swStart: ldaA 10b\ oraA >state\ staA state
0099+  7E7F BA 01 69    
0099+  7E82 B7 01 69    
0100+  7E85 96 0F       	ldaA >lampCol1 + (8-1)
0101+  7E87 85 20       	bitA ((1 << (6-1))
0102+  7E89             	\ .push  *, 0 \ BEQ  *  ; in game over
0102+  7E89             
0102+  7E89 27 FE       
0103+  7E8B BD 7E 03    		jsr startGame
0104+  7E8E             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif 
0104+  7E8E             
0104+  7E8E             
0104+  7E8E             
0104+  7E8E             
0104+  7E8A             
0104+  7E8A             
0104+  7E8A             
0104+  7E8A~            	else 
0104+  7E8A~            	else 
0104+  7E8A~            	else 
0104+  7E8A~            	else 
0104+  7E8A             
0104+  7E8A~            	else 
0104+  7E8A~            	else 
0104+  7E8A~            	else 
0104+  7E8A~            	else 
0104+  7E8A             
0104+  7E8A             
0104+  7E8A 05          
0104+  7E8E             
0104+  7E8E 20 FE       
0104+  7E90             
0104+  7E90             
0104+  7E90             
0104+  7E90~            	else 
0104+  7E90~            	else 
0104+  7E90~            	else 
0104+  7E90~            	else 
0104+  7E90~            	else 
0104+  7E90             
0104+  7E90~            	else 
0104+  7E90~            	else 
0104+  7E90             
0104+  7E90~            	else 
0104+  7E90~            	else 
0104+  7E90             
0105+  7E90 86 10       		ldaA	$10
0106+  7E92 91 77       		cmpA	>ballCount
0107+  7E94             		\ .push  *, 0 \ BNE  * 		 ; add player
0107+  7E94             
0107+  7E94 26 FE       
0108+  7E96 86 1E       			ldaA	00011110b
0109+  7E98 94 0E       			andA	>lampCol1 + (7-1) ; player count lights
0110+  7E9A 85 10       			bitA	((1 << (5-1))
0111+  7E9C             			\ .push  *, 0 \ BNE  * 			; if not on P4 already, add player
0111+  7E9C             
0111+  7E9C 26 FE       
0112+  7E9E 48          				aslA
0113+  7E9F C6 E1       				ldaB	11100001b
0114+  7EA1 D4 0E       				andB	>lampCol1 + (7-1)
0115+  7EA3 D7 0E       				staB	lampCol1 + (7-1)
0116+  7EA5 9A 0E       				oraA	>lampCol1 + (7-1)
0117+  7EA7 97 0E       				staA	lampCol1 + (7-1)
0118+  7EA9             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0118+  7EA9             
0118+  7EA9             
0118+  7EA9             
0118+  7EA9             
0118+  7EA9             
0118+  7EA9~            			endif
0118+  7EA9~            			endif
0118+  7EA9             
0118+  7EA9~            			endif
0118+  7EA9~            			endif
0118+  7EA9             
0118+  7E9D             
0118+  7E9D 0B          
0118+  7E9E             
0118+  7E9E             
0118+  7E9E~            			endif
0118+  7E9E~            			endif
0118+  7E9E~            			endif
0118+  7E9E             
0118+  7EA9             
0118+  7EA9~            			endif
0118+  7EA9~            			endif
0118+  7EA9             
0119+  7EA9             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif ; restart game
0119+  7EA9             
0119+  7EA9             
0119+  7EA9             
0119+  7EA9             
0119+  7E95             
0119+  7E95             
0119+  7E95             
0119+  7E95~            		else ; restart game
0119+  7E95~            		else ; restart game
0119+  7E95~            		else ; restart game
0119+  7E95~            		else ; restart game
0119+  7E95             
0119+  7E95~            		else ; restart game
0119+  7E95~            		else ; restart game
0119+  7E95~            		else ; restart game
0119+  7E95~            		else ; restart game
0119+  7E95             
0119+  7E95             
0119+  7E95 15          
0119+  7EA9             
0119+  7EA9 20 FE       
0119+  7EAB             
0119+  7EAB             
0119+  7EAB             
0119+  7EAB~            		else ; restart game
0119+  7EAB~            		else ; restart game
0119+  7EAB~            		else ; restart game
0119+  7EAB~            		else ; restart game
0119+  7EAB~            		else ; restart game
0119+  7EAB             
0119+  7EAB~            		else ; restart game
0119+  7EAB~            		else ; restart game
0119+  7EAB             
0119+  7EAB~            		else ; restart game
0119+  7EAB~            		else ; restart game
0119+  7EAB             
0120+  7EAB BD 7E 03    			jsr startGame
0121+  7EAE             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif		
0121+  7EAE             
0121+  7EAE             
0121+  7EAE             
0121+  7EAE             
0121+  7EAE             
0121+  7EAE~            		endif		
0121+  7EAE~            		endif		
0121+  7EAE             
0121+  7EAE~            		endif		
0121+  7EAE~            		endif		
0121+  7EAE             
0121+  7EAA             
0121+  7EAA 03          
0121+  7EAB             
0121+  7EAB             
0121+  7EAB~            		endif		
0121+  7EAB~            		endif		
0121+  7EAB~            		endif		
0121+  7EAB             
0121+  7EAE             
0121+  7EAE~            		endif		
0121+  7EAE~            		endif		
0121+  7EAE             
0122+  7EAE             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0122+  7EAE             
0122+  7EAE             
0122+  7EAE             
0122+  7EAE             
0122+  7EAE             
0122+  7EAE~            	endif
0122+  7EAE~            	endif
0122+  7EAE             
0122+  7EAE~            	endif
0122+  7EAE~            	endif
0122+  7EAE             
0122+  7E8F             
0122+  7E8F 1E          
0122+  7E90             
0122+  7E90             
0122+  7E90~            	endif
0122+  7E90~            	endif
0122+  7E90~            	endif
0122+  7E90             
0122+  7EAE             
0122+  7EAE~            	endif
0122+  7EAE~            	endif
0122+  7EAE             
0123+  7EAE             	
0124+  7EAE 7E 79 5D    	jmp afterQueueEvent
0125+  7EB1             	
0126+  7EB1 86 02       swOuthole: ldaA 10b\ oraA >state\ staA state
0126+  7EB3 BA 01 69    
0126+  7EB6 B7 01 69    
0127+  7EB9 96 0F       	ldaA	>lampCol1 + (8-1) ; !game over
0128+  7EBB 85 20       	bitA	((1 << (6-1))
0129+  7EBD             	\ .push  *, 0 \ BNE  * 		 ; !game over
0129+  7EBD             
0129+  7EBD 26 FE       
0130+  7EBF 86 0F       		ldaA	00001111b ; player up lights
0131+  7EC1 95 9F       		bitA	>flashLampCol1 + (8 - 1)	; check if any player is flashing
0132+  7EC3             		\ .push  *, 0 \ BEQ  *  ; any flashing -> playfield invalid
0132+  7EC3             
0132+  7EC3 27 FE       
0133+  7EC5 86 EF       			ldaA ~((1 << (5-1))\ andA >lampCol1 + (8-1)\ staA lampCol1 + (8-1) ; tilt
0133+  7EC7 94 0F       
0133+  7EC9 97 0F       
0134+  7ECB             			
0135+  7ECB B6 22 03    			ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0135+  7ECE 8A 38       
0135+  7ED0 B7 22 03    
0136+  7ED3 C6 04       			ldaB  32/8\ staB solenoid1+05-1 
0136+  7ED5 F7 01 44    
0137+  7ED8             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif ; none flashing -> playfield valid -> end ball
0137+  7ED8             
0137+  7ED8             
0137+  7ED8             
0137+  7ED8             
0137+  7EC4             
0137+  7EC4             
0137+  7EC4             
0137+  7EC4~            		else ; none flashing -> playfield valid -> end ball
0137+  7EC4~            		else ; none flashing -> playfield valid -> end ball
0137+  7EC4~            		else ; none flashing -> playfield valid -> end ball
0137+  7EC4~            		else ; none flashing -> playfield valid -> end ball
0137+  7EC4             
0137+  7EC4~            		else ; none flashing -> playfield valid -> end ball
0137+  7EC4~            		else ; none flashing -> playfield valid -> end ball
0137+  7EC4~            		else ; none flashing -> playfield valid -> end ball
0137+  7EC4~            		else ; none flashing -> playfield valid -> end ball
0137+  7EC4             
0137+  7EC4             
0137+  7EC4 15          
0137+  7ED8             
0137+  7ED8 20 FE       
0137+  7EDA             
0137+  7EDA             
0137+  7EDA             
0137+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0137+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0137+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0137+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0137+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0137+  7EDA             
0137+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0137+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0137+  7EDA             
0137+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0137+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0137+  7EDA             
0138+  7EDA 94 0F       			andA	>lampCol1 + (8-1)
0139+  7EDC D6 0A       			ldaB	>lampCol1 + (3-1)
0140+  7EDE C5 01       			bitB	((1 << (1-1))
0141+  7EE0             			\ .push  *, 0 \ BNE  * 		 ; shoot again not lit
0141+  7EE0             
0141+  7EE0 26 FE       
0142+  7EE2             				; go to next player
0143+  7EE2 48          				aslA
0144+  7EE3 7C 00 13    				inc	curPlayer + 1
0145+  7EE6 95 0E       				bitA	>lampCol1 + (7-1)	; is player count < player #
0146+  7EE8             				\ .push  *, 0 \ BEQ  *  ; last player
0146+  7EE8             
0146+  7EE8 27 FE       
0147+  7EEA 86 01       					ldaA	00000001b; ; back to player 1
0148+  7EEC C6 00       					ldaB	0
0149+  7EEE D7 13       					staB	curPlayer + 1
0150+  7EF0             					
0151+  7EF0             					; increase ball count
0152+  7EF0 D6 77       					ldaB	>ballCount
0153+  7EF2 CB 10       					addB	$10
0154+  7EF4 C1 40       					cmpB	$40
0155+  7EF6             					\ .push  *, 0 \ BNE  * 		 ; game over
0155+  7EF6             
0155+  7EF6 26 FE       
0156+  7EF8 86 20       						ldaA ((1 << (6-1))\ oraA >lampCol1 + (8-1)\ staA lampCol1 + (8-1)
0156+  7EFA 9A 0F       
0156+  7EFC 97 0F       
0157+  7EFE B6 22 03    						ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0157+  7F01 84 F7       
0157+  7F03 B7 22 03    
0158+  7F06 7E 79 5D    						jmp afterQueueEvent
0159+  7F09             					\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0159+  7F09             
0159+  7F09             
0159+  7F09             
0159+  7F09             
0159+  7EF7             
0159+  7EF7             
0159+  7EF7             
0159+  7EF7~            					else
0159+  7EF7~            					else
0159+  7EF7~            					else
0159+  7EF7~            					else
0159+  7EF7             
0159+  7EF7~            					else
0159+  7EF7~            					else
0159+  7EF7~            					else
0159+  7EF7~            					else
0159+  7EF7             
0159+  7EF7             
0159+  7EF7 13          
0159+  7F09             
0159+  7F09 20 FE       
0159+  7F0B             
0159+  7F0B             
0159+  7F0B             
0159+  7F0B~            					else
0159+  7F0B~            					else
0159+  7F0B~            					else
0159+  7F0B~            					else
0159+  7F0B~            					else
0159+  7F0B             
0159+  7F0B~            					else
0159+  7F0B~            					else
0159+  7F0B             
0159+  7F0B~            					else
0159+  7F0B~            					else
0159+  7F0B             
0160+  7F0B D7 77       						staB	ballCount
0161+  7F0D             					\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif		
0161+  7F0D             
0161+  7F0D             
0161+  7F0D             
0161+  7F0D             
0161+  7F0D             
0161+  7F0D~            					endif		
0161+  7F0D~            					endif		
0161+  7F0D             
0161+  7F0D~            					endif		
0161+  7F0D~            					endif		
0161+  7F0D             
0161+  7F0A             
0161+  7F0A 02          
0161+  7F0B             
0161+  7F0B             
0161+  7F0B~            					endif		
0161+  7F0B~            					endif		
0161+  7F0B~            					endif		
0161+  7F0B             
0161+  7F0D             
0161+  7F0D~            					endif		
0161+  7F0D~            					endif		
0161+  7F0D             
0162+  7F0D             				\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0162+  7F0D             
0162+  7F0D             
0162+  7F0D             
0162+  7F0D             
0162+  7F0D             
0162+  7F0D~            				endif
0162+  7F0D~            				endif
0162+  7F0D             
0162+  7F0D~            				endif
0162+  7F0D~            				endif
0162+  7F0D             
0162+  7EE9             
0162+  7EE9 23          
0162+  7EEA             
0162+  7EEA             
0162+  7EEA~            				endif
0162+  7EEA~            				endif
0162+  7EEA~            				endif
0162+  7EEA             
0162+  7F0D             
0162+  7F0D~            				endif
0162+  7F0D~            				endif
0162+  7F0D             
0163+  7F0D             				
0164+  7F0D 97 0F       				staA	lampCol1 + (8-1)
0165+  7F0F             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0165+  7F0F             
0165+  7F0F             
0165+  7F0F             
0165+  7F0F             
0165+  7F0F             
0165+  7F0F~            			endif
0165+  7F0F~            			endif
0165+  7F0F             
0165+  7F0F~            			endif
0165+  7F0F~            			endif
0165+  7F0F             
0165+  7EE1             
0165+  7EE1 2D          
0165+  7EE2             
0165+  7EE2             
0165+  7EE2~            			endif
0165+  7EE2~            			endif
0165+  7EE2~            			endif
0165+  7EE2             
0165+  7F0F             
0165+  7F0F~            			endif
0165+  7F0F~            			endif
0165+  7F0F             
0166+  7F0F             			
0167+  7F0F             			; flash player light
0168+  7F0F 86 0F       			ldaA	00001111b ; player up lights
0169+  7F11 9A 9F       			oraA	>flashLampCol1 + (8 - 1)
0170+  7F13 97 9F       			staA	flashLampCol1 + (8 - 1)
0171+  7F15             			
0172+  7F15             			
0173+  7F15 B6 22 03    			ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0173+  7F18 8A 38       
0173+  7F1A B7 22 03    
0174+  7F1D             			
0175+  7F1D C6 04       			ldaB  32/8\ staB solenoid1+05-1 
0175+  7F1F F7 01 44    
0176+  7F22             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0176+  7F22             
0176+  7F22             
0176+  7F22             
0176+  7F22             
0176+  7F22             
0176+  7F22~            		endif
0176+  7F22~            		endif
0176+  7F22             
0176+  7F22~            		endif
0176+  7F22~            		endif
0176+  7F22             
0176+  7ED9             
0176+  7ED9 48          
0176+  7EDA             
0176+  7EDA             
0176+  7EDA~            		endif
0176+  7EDA~            		endif
0176+  7EDA~            		endif
0176+  7EDA             
0176+  7F22             
0176+  7F22~            		endif
0176+  7F22~            		endif
0176+  7F22             
0177+  7F22             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif		
0177+  7F22             
0177+  7F22             
0177+  7F22             
0177+  7F22             
0177+  7F22             
0177+  7F22~            	endif		
0177+  7F22~            	endif		
0177+  7F22             
0177+  7F22~            	endif		
0177+  7F22~            	endif		
0177+  7F22             
0177+  7EBE             
0177+  7EBE 63          
0177+  7EBF             
0177+  7EBF             
0177+  7EBF~            	endif		
0177+  7EBF~            	endif		
0177+  7EBF~            	endif		
0177+  7EBF             
0177+  7F22             
0177+  7F22~            	endif		
0177+  7F22~            	endif		
0177+  7F22             
0178+  7F22 7E 79 5D    	jmp afterQueueEvent
0179+  7F25             	
0180+  7F25             swEjectHole:
0181+  7F25             	;fireSolenoid(EJECT_HOLE)
0182+  7F25 7E 79 5D    	jmp afterQueueEvent
0183+  7F28             	
0184+  7F28             swLeftEject:
0185+  7F28 96 0F       	ldaA	>lampCol1 + (8-1)
0186+  7F2A 85 20       	bitA	((1 << (6-1))
0187+  7F2C             	\ .push  *, 0 \ BNE  * 		 ; in game
0187+  7F2C             
0187+  7F2C 26 FE       
0188+  7F2E 86 01       		ldaA ((1 << (1-1))\ oraA >lampCol1 + (3-1)\ staA lampCol1 + (3-1)
0188+  7F30 9A 0A       
0188+  7F32 97 0A       
0189+  7F34 86 40       		ldaA ((1 << (7-1))\ oraA >lampCol1 + (8-1)\ staA lampCol1 + (8-1)
0189+  7F36 9A 0F       
0189+  7F38 97 0F       
0190+  7F3A             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0190+  7F3A             
0190+  7F3A             
0190+  7F3A             
0190+  7F3A             
0190+  7F3A             
0190+  7F3A~            	endif
0190+  7F3A~            	endif
0190+  7F3A             
0190+  7F3A~            	endif
0190+  7F3A~            	endif
0190+  7F3A             
0190+  7F2D             
0190+  7F2D 0C          
0190+  7F2E             
0190+  7F2E             
0190+  7F2E~            	endif
0190+  7F2E~            	endif
0190+  7F2E~            	endif
0190+  7F2E             
0190+  7F3A             
0190+  7F3A~            	endif
0190+  7F3A~            	endif
0190+  7F3A             
0191+  7F3A C6 04       	ldaB  32/8\ staB solenoid1+04-1 
0191+  7F3C F7 01 43    
0192+  7F3F 7E 79 5D    	jmp afterQueueEvent
0193+  7F42             	
0194+  7F42             swTopEject:
0195+  7F42 C6 04       	ldaB  32/8\ staB solenoid1+01-1 
0195+  7F44 F7 01 40    
0196+  7F47 7E 79 5D    	jmp afterQueueEvent
0197+  7F4A             	
0198+  7F4A             swRKicker:
0199+  7F4A             	;fireSolenoid(RIGHT_KICKER)
0200+  7F4A 7E 79 5D    	jmp afterQueueEvent
0201+  7F4D             swHotTip:
0202+  7F4D C6 19       	ldaB 400/16\ jsr _delay
0202+  7F4F BD 7C 0F    
0203+  7F52 C6 04       	ldaB  32/8\ staB solenoid1+03-1 
0203+  7F54 F7 01 42    
0204+  7F57 C6 04       	ldaB  32/8\ staB solenoid1+02-1 
0204+  7F59 F7 01 41    
0205+  7F5C 7E 79 5D    	jmp afterQueueEvent
0206+  7F5F             	
0207+  7F5F             ; end callbacks
0208+  7F5F             	.msfirst
0209+  7F5F             ; needs to be on $**00 address
0210+  7D00             callbackTable: 	.org $7800 + $500 ; note: TRANSPOSED
0211+  7D00 7E 64       	.dw swTilt		\.dw swTilt		\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0211+  7D02 7E 64       
0211+  7D04 7E 7D       
0211+  7D06 7E 00       
0211+  7D08 7E 00       
0211+  7D0A 7E 00       
0211+  7D0C 7E 64       
0211+  7D0E 7E 00       
0212+  7D10 7E B1       	.dw swOuthole	\.dw swTilt	\.dw sw32		\.dw none\.dw none\.dw none\.dw none\.dw none
0212+  7D12 7E 64       
0212+  7D14 7E 51       
0212+  7D16 7E 00       
0212+  7D18 7E 00       
0212+  7D1A 7E 00       
0212+  7D1C 7E 00       
0212+  7D1E 7E 00       
0213+  7D20 7E 00       	.dw none		\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0213+  7D22 7E 00       
0213+  7D24 7E 00       
0213+  7D26 7E 00       
0213+  7D28 7E 00       
0213+  7D2A 7E 00       
0213+  7D2C 7E 00       
0213+  7D2E 7E 00       
0214+  7D30 7E 00       	.dw none		\.dw none\.dw none\.dw addP2_10\.dw swLeftEject\.dw none\.dw none\.dw swEjectHole
0214+  7D32 7E 00       
0214+  7D34 7E 00       
0214+  7D36 7E 54       
0214+  7D38 7F 28       
0214+  7D3A 7E 00       
0214+  7D3C 7E 00       
0214+  7D3E 7F 25       
0215+  7D40 7E 00       	.dw none		\.dw none\.dw none\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0215+  7D42 7E 00       
0215+  7D44 7E 00       
0215+  7D46 7E 00       
0215+  7D48 7F 4D       
0215+  7D4A 7E 00       
0215+  7D4C 7E 00       
0215+  7D4E 7E 00       
0216+  7D50 7F 4A       	.dw swRKicker	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0216+  7D52 7E 00       
0216+  7D54 7E 00       
0216+  7D56 7E 00       
0216+  7D58 7E 00       
0216+  7D5A 7E 00       
0216+  7D5C 7E 00       
0216+  7D5E 7E 00       
0217+  7D60 7E 00       	.dw none		\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0217+  7D62 7E 00       
0217+  7D64 7E 00       
0217+  7D66 7E 00       
0217+  7D68 7E 00       
0217+  7D6A 7E 00       
0217+  7D6C 7E 00       
0217+  7D6E 7E 00       
0218+  7D70 7E 00       	.dw none		\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0218+  7D72 7E 00       
0218+  7D74 7E 00       
0218+  7D76 7E 00       
0218+  7D78 7E 00       
0218+  7D7A 7E 00       
0218+  7D7C 7E 00       
0218+  7D7E 7E 00       
0219+  7D80             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0220+  7D80             ; off = how many cycles it must be off for
0221+  7D80             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0222+  7D80             ; gameover = whether the switch is active in gameover or tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0223+  7D80             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0224+  7D80             settleTable: ; must be right after callbackTable
0225+  7D80 87          	.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (1<<7)|(1<<6)|(1<<3)|(2) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 
0225+  7D81 87          
0225+  7D82 CA          
0225+  7D83 47          
0225+  7D84 47          
0225+  7D85 47          
0225+  7D86 87          
0225+  7D87 47          
0226+  7D88 FF          	.db (1<<7)|(1<<6)|(7<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (1<<7)|(1<<6)|(7<<3)|(0) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 
0226+  7D89 87          
0226+  7D8A F8          
0226+  7D8B 47          
0226+  7D8C 47          
0226+  7D8D 47          
0226+  7D8E 47          
0226+  7D8F 47          
0227+  7D90 47          	.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 
0227+  7D91 47          
0227+  7D92 47          
0227+  7D93 47          
0227+  7D94 47          
0227+  7D95 47          
0227+  7D96 47          
0227+  7D97 47          
0228+  7D98 47          	.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (1<<7)|(1<<6)|(7<<3)|(7) \.db (1<<7)|(1<<6)|(7<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (1<<7)|(1<<6)|(7<<3)|(7) 
0228+  7D99 47          
0228+  7D9A 47          
0228+  7D9B FF          
0228+  7D9C FF          
0228+  7D9D 47          
0228+  7D9E 47          
0228+  7D9F FF          
0229+  7DA0 47          	.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 
0229+  7DA1 47          
0229+  7DA2 47          
0229+  7DA3 47          
0229+  7DA4 47          
0229+  7DA5 47          
0229+  7DA6 47          
0229+  7DA7 47          
0230+  7DA8 FF          	.db (1<<7)|(1<<6)|(7<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 
0230+  7DA9 47          
0230+  7DAA 47          
0230+  7DAB 47          
0230+  7DAC 47          
0230+  7DAD 47          
0230+  7DAE 47          
0230+  7DAF 47          
0231+  7DB0 47          	.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 
0231+  7DB1 47          
0231+  7DB2 47          
0231+  7DB3 47          
0231+  7DB4 47          
0231+  7DB5 47          
0231+  7DB6 47          
0231+  7DB7 47          
0232+  7DB8 47          	.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 0232+  7DB9 47          
0232+  7DBA 47          
0232+  7DBB 47          
0232+  7DBC 47          
0232+  7DBD 47          
0232+  7DBE 47          
0232+  7DBF 47          
0008   7DC0             
0009   6000             .org	$6000
0010   6000 01          	nop
0011   6001             	
0012   7800             main:		.org $7800
0013   7800             resetRam:
0014   7800 CE 00 00    	ldX	RAM
0015   7803 86 00       	ldaA	0
0016   7805             resetRamLoop:
0017   7805 A7 00       	staA	0, X
0018   7807 08          	inX
0019   7808 8C 02 00    	cpX	RAMEnd + 1
0020   780B 26 F8       	bne	resetRamLoop
0021   780D             	
0022   780D             	
0023   780D 86 00       	ldaA 	0
0024   780F 97 00       	staA	temp
0025   7811 86 FF       	ldaA	$FF
0026   7813 97 01       	staA	temp + 1
0027   7815 9E 00       	ldS	>temp
0028   7817             
0029   7817             test:
0030   7817             	
0031   7817             piaSetup:
0032   7817 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   7819 B7 28 01    	staA 	displayStrobeC
0034   781C 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0035   781E B7 28 00    	staA 	displayStrobe
0036   7821 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7823 B7 28 01    	staA 	displayStrobeC
0038   7826             	
0039   7826 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0040   7828 B7 28 03    	staA 	displayBcdC
0041   782B 86 FF       	ldaA 	11111111b	;set display BCD to output
0042   782D B7 28 02    	staA 	displayBcd
0043   7830 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0044   7832 B7 28 03    	staA 	displayBcdC
0045   7835             	
0046   7835 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0047   7837 B7 24 01    	staA 	lampColC
0048   783A 86 FF       	ldaA 	11111111b	;set to output
0049   783C B7 24 00    	staA 	lampCol
0050   783F 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0051   7841 B7 24 01    	staA 	lampColC
0052   7844             	
0053   7844 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0054   7846 B7 24 03    	staA 	lampStrobeC
0055   7849 86 FF       	ldaA 	11111111b	;set to output
0056   784B B7 24 02    	staA 	lampStrobe
0057   784E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0058   7850 B7 24 03    	staA 	lampStrobeC
0059   7853             	
0060   7853 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0061   7855 B7 30 03    	staA 	switchStrobeC
0062   7858 86 FF       	ldaA 	11111111b	;set to output
0063   785A B7 30 02    	staA 	switchStrobe
0064   785D 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0065   785F B7 30 03    	staA 	switchStrobeC
0066   7862             	
0067   7862 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0068   7864 B7 30 01    	staA 	switchRowC
0069   7867 86 00       	ldaA 	00000000b	;set to input
0070   7869 B7 30 00    	staA 	switchRow
0071   786C 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0072   786E B7 30 01    	staA 	switchRowC
0073   7871             	
0074   7871 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0075   7873 B7 22 01    	staA 	solenoidAC
0076   7876 B7 22 03    	staA	solenoidBC
0077   7879 86 FF       	ldaA 	11111111b	;set to output
0078   787B B7 22 00    	staA 	solenoidA
0079   787E B7 22 02    	staA 	solenoidB
0080   7881 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0081   7883 B7 22 01    	staA 	solenoidAC
0082   7886 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0083   7888 B7 22 03    	staA 	solenoidBC
0084   788B             	
0085   788B             ;
0086   788B             
0087   788B 86 00       	ldaA	00
0088   788D D7 70       	staB	displayBcd1
0089   788F             	
0090   788F 86 FF       	ldaA	$FF	
0091   7891 B7 28 00    	staA 	displayStrobe
0092   7894             
0093   7894 86 00       	ldaA	00
0094   7896 97 07       	staA	strobe
0095   7898 B7 01 68    	staA	displayCol
0096   789B             	
0097   789B CE 00 00    	ldX 	0
0098   789E DF 50       	stX		curCol
0099   78A0             	
0100   78A0 86 00       	ldaA	0
0101   78A2 97 10       	staA	curSwitchRowLsb
0102   78A4             	
0103   78A4             ; fill solenoid status with off
0104   78A4 86 00       	ldaA	0
0105   78A6 CE 01 40    	ldX	solenoid1
0106   78A9             lSolDefault:
0107   78A9 A7 00       	staA	0, X
0108   78AB A7 40       	staA	waitLeft - solenoid1, X
0109   78AD 08          	inX
0110   78AE 8C 01 4F    	cpX	solenoid16
0111   78B1 26 F6       	bne	lSolDefault
0112   78B3             	
0113   78B3             ; clear 8 banks
0114   78B3 86 00       	ldaA 	0
0115   78B5 CE 00 00    	ldX	0
0116   78B8             lClear8:
0117   78B8 A7 08       	staA	lampCol1, X
0118   78BA A7 98       	staA	flashLampCol1, X
0119   78BC A7 80       	staA	waitLeft, X
0120   78BE 08          	inX
0121   78BF 8C 00 08    	cpX	8
0122   78C2 26 F4       	bne 	lClear8
0123   78C4             	
0124   78C4             ; empty settle
0125   78C4 86 00       	ldaA	$00
0126   78C6 CE 01 00    	ldX	settleRow1
0127   78C9             lSettleDefault:
0128   78C9 A7 00       	staA	0, X
0129   78CB 08          	inX
0130   78CC 8C 01 46    	cpX	settleRow8 + 7
0131   78CF 26 F8       	bne	lSettleDefault
0132   78D1             	
0133   78D1             ; empty queue
0134   78D1 86 FF       	ldaA	$FF
0135   78D3 CE 00 60    	ldX	queue
0136   78D6             lEmptyQueue:
0137   78D6 A7 00       	staA	0, X
0138   78D8 08          	inX
0139   78D9 8C 00 67    	cpX	queueEnd
0140   78DC 26 F8       	bne	lEmptyQueue
0141   78DE             	
0142   78DE 86 00       	ldaA	0
0143   78E0 97 54       	staA	queueHead + 0
0144   78E2 97 56       	staA	queueTail + 0
0145   78E4 86 60       	ldaA	queue
0146   78E6 97 55       	staA	queueHead + 1
0147   78E8 97 57       	staA	queueTail + 1
0148   78EA             	
0149   78EA             ; test numbers
0150   78EA 86 20       	ldaA ((1 << (6-1))\ oraA >lampCol1 + (8-1)\ staA lampCol1 + (8-1) ; game over
0150   78EC 9A 0F       
0150   78EE 97 0F       
0151   78F0             
0152   78F0             	
0153   78F0 BD 7C 22    	jsr resetScores
0154   78F3             	
0155   78F3             ; setup complete
0156   78F3 0E          	clI		; enable timer interrupt
0157   78F4             	
0158   78F4             	
0159   78F4             end:
0160   78F4 B6 01 69    	ldaA	>state
0161   78F7 85 04       	bitA	100b
0162   78F9             	\ .push  *, 0 \ BEQ  * 
0162   78F9             
0162   78F9 27 FE       
0163   78FB             		; dec wait timers
0164   78FB CE 00 7F    		ldX	waitLeft - 1
0165   78FE             decWaitTimers:
0166   78FE 08          		inX
0167   78FF A6 00       		ldaA	0, X
0168   7901             		\ .push  *, 0 \ BEQ  * 
0168   7901             
0168   7901 27 FE       
0169   7903 4A          			decA
0170   7904 A7 00       			staA	0, X
0171   7906             			\ .push  *, 0 \ BNE  * 		
0171   7906             
0171   7906 26 FE       
0172   7908 A6 08       				ldaA	waitMsb - waitLeft, X
0173   790A 97 58       				staA	tempQ
0174   790C A6 10       				ldaA	waitLsb - waitLeft, X
0175   790E 97 59       				staA	tempQ + 1
0176   7910 DE 58       				ldX	>tempQ
0177   7912 6E 00       				jmp	0, X
0178   7914             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0178   7914             
0178   7914             
0178   7914             
0178   7914             
0178   7914             
0178   7914~            			endif
0178   7914~            			endif
0178   7914             
0178   7914~            			endif
0178   7914~            			endif
0178   7914             
0178   7907             
0178   7907 0C          
0178   7908             
0178   7908             
0178   7908~            			endif
0178   7908~            			endif
0178   7908~            			endif
0178   7908             
0178   7914             
0178   7914~            			endif
0178   7914~            			endif
0178   7914             
0179   7914             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0179   7914             
0179   7914             
0179   7914             
0179   7914             
0179   7914             
0179   7914~            		endif
0179   7914~            		endif
0179   7914             
0179   7914~            		endif
0179   7914~            		endif
0179   7914             
0179   7902             
0179   7902 11          
0179   7903             
0179   7903             
0179   7903~            		endif
0179   7903~            		endif
0179   7903~            		endif
0179   7903             
0179   7914             
0179   7914~            		endif
0179   7914~            		endif
0179   7914             
0180   7914 8C 00 87    		cpX	waitLeftEnd
0181   7917 26 E5       		bne	decWaitTimers
0182   7919             		
0183   7919 B6 01 69    		ldaA	>state		; clear strobe reset bit
0184   791C 84 FB       		andA	11111011b
0185   791E B7 01 69    		staA	state
0186   7921             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0186   7921             
0186   7921             
0186   7921             
0186   7921             
0186   7921             
0186   7921~            	endif
0186   7921~            	endif
0186   7921             
0186   7921~            	endif
0186   7921~            	endif
0186   7921             
0186   78FA             
0186   78FA 26          
0186   78FB             
0186   78FB             
0186   78FB~            	endif
0186   78FB~            	endif
0186   78FB~            	endif
0186   78FB             
0186   7921             
0186   7921~            	endif
0186   7921~            	endif
0186   7921             
0187   7921             
0188   7921             		
0189   7921             ; pop queue
0190   7921 D6 57       	ldaB	>queueTail + 1
0191   7923 D1 55       	cmpB	>queueHead + 1
0192   7925 27 73       	beq 	skipQueue
0193   7927             	
0194   7927 DE 54       	ldX	>queueHead
0195   7929 A6 00       	ldaA	0, X	; A now contains the first queue item
0196   792B             	
0197   792B 16          	tAB
0198   792C C4 3F       	andB	00111111b ; B = callback index
0199   792E             	
0200   792E D7 59       	staB	tempQ + 1
0201   7930 C6 7D       	ldaB	callbackTable >> 8
0202   7932 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0203   7934 DE 58       	ldX	>tempQ
0204   7936             	
0205   7936 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0206   7938 C4 80       	andB 	10000000b ; B set if switch limited to closures
0207   793A             	\ .push  *, 0 \ BEQ  * 
0207   793A             
0207   793A 27 FE       
0208   793C DE 54       		ldX	>queueHead
0209   793E E4 00       		andB	0, X	; B set if switch limited to closures and event was not a closure
0210   7940 26 42       		bne	skipEvent
0211   7942             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0211   7942             
0211   7942             
0211   7942             
0211   7942             
0211   7942             
0211   7942~            	endif
0211   7942~            	endif
0211   7942             
0211   7942~            	endif
0211   7942~            	endif
0211   7942             
0211   793B             
0211   793B 06          
0211   793C             
0211   793C             
0211   793C~            	endif
0211   793C~            	endif
0211   793C~            	endif
0211   793C             
0211   7942             
0211   7942~            	endif
0211   7942~            	endif
0211   7942             
0212   7942             	
0213   7942 D6 0F       	ldaB	>lampCol1 + (8-1)	; gameover mask
0214   7944 C5 20       	bitB	((1 << (6-1))
0215   7946 26 08       	bne	inGameover
0216   7948 D6 0F       	ldaB	>lampCol1 + (8-1) ; tilt bit
0217   794A C5 10       	bitB	((1 << (5-1))
0218   794C 26 02       	bne	inGameover
0219   794E 20 04       	bra gameoverPassed
0220   7950             inGameover:
0221   7950 85 40       	bitA 	01000000b
0222   7952 27 30       	beq	skipEvent	; skip if callback not active in game over
0223   7954             gameoverPassed:
0224   7954             	
0225   7954             	; checked passed, do callback
0226   7954 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0227   7957 DE 58       	ldX	>tempQ
0228   7959 EE 00       	ldX	0, X
0229   795B 6E 00       	jmp	0, X
0230   795D             	; everything trashed
0231   795D             afterQueueEvent:
0232   795D 86 02       	ldaA	10b ; no validate bit
0233   795F B5 01 69    	bitA	>state
0234   7962             	\ .push  *, 0 \ BNE  * 		 ; validate pf
0234   7962             
0234   7962 26 FE       
0235   7964             		; check if playfield invalid
0236   7964 86 0F       		ldaA	00001111b ; player up
0237   7966 95 9F       		bitA	>flashLampCol1 + (8 - 1)
0238   7968             		\ .push  *, 0 \ BEQ  *  ; any flashing -> pf invalid
0238   7968             
0238   7968 27 FE       
0239   796A 43          			comA	; turn off flashing
0240   796B 94 9F       			andA	>flashLampCol1 + (8 - 1)
0241   796D 97 9F       			staA	flashLampCol1 + (8 - 1)
0242   796F 86 FE       			ldaA ~((1 << (1-1))\ andA >lampCol1 + (3-1)\ staA lampCol1 + (3-1) ; shoot again
0242   7971 94 0A       
0242   7973 97 0A       
0243   7975 86 BF       			ldaA ~((1 << (7-1))\ andA >lampCol1 + (8-1)\ staA lampCol1 + (8-1)
0243   7977 94 0F       
0243   7979 97 0F       
0244   797B             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0244   797B             
0244   797B             
0244   797B             
0244   797B             
0244   797B             
0244   797B~            		endif
0244   797B~            		endif
0244   797B             
0244   797B~            		endif
0244   797B~            		endif
0244   797B             
0244   7969             
0244   7969 11          
0244   796A             
0244   796A             
0244   796A~            		endif
0244   796A~            		endif
0244   796A~            		endif
0244   796A             
0244   797B             
0244   797B~            		endif
0244   797B~            		endif
0244   797B             
0245   797B             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0245   797B             
0245   797B             
0245   797B             
0245   797B             
0245   7963             
0245   7963             
0245   7963             
0245   7963~            	else
0245   7963~            	else
0245   7963~            	else
0245   7963~            	else
0245   7963             
0245   7963~            	else
0245   7963~            	else
0245   7963~            	else
0245   7963~            	else
0245   7963             
0245   7963             
0245   7963 19          
0245   797B             
0245   797B 20 FE       
0245   797D             
0245   797D             
0245   797D             
0245   797D~            	else
0245   797D~            	else
0245   797D~            	else
0245   797D~            	else
0245   797D~            	else
0245   797D             
0245   797D~            	else
0245   797D~            	else
0245   797D             
0245   797D~            	else
0245   797D~            	else
0245   797D             
0246   797D             		; clear don't validate bit
0247   797D 43          		comA
0248   797E B4 01 69    		andA	>state
0249   7981 B7 01 69    		staA	>state
0250   7984             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0250   7984             
0250   7984             
0250   7984             
0250   7984             
0250   7984             
0250   7984~            	endif
0250   7984~            	endif
0250   7984             
0250   7984~            	endif
0250   7984~            	endif
0250   7984             
0250   797C             
0250   797C 07          
0250   797D             
0250   797D             
0250   797D~            	endif
0250   797D~            	endif
0250   797D~            	endif
0250   797D             
0250   7984             
0250   7984~            	endif
0250   7984~            	endif
0250   7984             
0251   7984             	
0252   7984             skipEvent:
0253   7984 B6 01 69    	ldaA	>state
0254   7987 85 04       	bitA	100b
0255   7989             	\ .push  *, 0 \ BNE  * 			; don't process queue if still finishing timers
0255   7989             
0255   7989 26 FE       
0256   798B C6 67       		ldaB	queueEnd
0257   798D D1 55       		cmpB	>queueHead + 1
0258   798F             		\ .push  *, 0 \ BNE  * 		
0258   798F             
0258   798F 26 FE       
0259   7991 C6 60       			ldaB	queue
0260   7993 D7 55       			staB	queueHead + 1
0261   7995             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0261   7995             
0261   7995             
0261   7995             
0261   7995             
0261   7990             
0261   7990             
0261   7990             
0261   7990~            		else
0261   7990~            		else
0261   7990~            		else
0261   7990~            		else
0261   7990             
0261   7990~            		else
0261   7990~            		else
0261   7990~            		else
0261   7990~            		else
0261   7990             
0261   7990             
0261   7990 06          
0261   7995             
0261   7995 20 FE       
0261   7997             
0261   7997             
0261   7997             
0261   7997~            		else
0261   7997~            		else
0261   7997~            		else
0261   7997~            		else
0261   7997~            		else
0261   7997             
0261   7997~            		else
0261   7997~            		else
0261   7997             
0261   7997~            		else
0261   7997~            		else
0261   7997             
0262   7997 7C 00 55    			inc	queueHead + 1
0263   799A             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0263   799A             
0263   799A             
0263   799A             
0263   799A             
0263   799A             
0263   799A~            		endif
0263   799A~            		endif
0263   799A             
0263   799A~            		endif
0263   799A~            		endif
0263   799A             
0263   7996             
0263   7996 03          
0263   7997             
0263   7997             
0263   7997~            		endif
0263   7997~            		endif
0263   7997~            		endif
0263   7997             
0263   799A             
0263   799A~            		endif
0263   799A~            		endif
0263   799A             
0264   799A             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0264   799A             
0264   799A             
0264   799A             
0264   799A             
0264   799A             
0264   799A~            	endif
0264   799A~            	endif
0264   799A             
0264   799A~            	endif
0264   799A~            	endif
0264   799A             
0264   798A             
0264   798A 0F          
0264   798B             
0264   798B             
0264   798B~            	endif
0264   798B~            	endif
0264   798B~            	endif
0264   798B             
0264   799A             
0264   799A~            	endif
0264   799A~            	endif
0264   799A             
0265   799A             				
0266   799A             skipQueue:
0267   799A             				
0268   799A             	
0269   799A             				
0270   799A 7E 78 F4    	jmp		end
0271   799D 00 00       	.dw 0
0272   799F 00 00       	.dw 0
0273   79A1 00 00       	.dw 0
0274   79A3 00 00       	.dw 0
0275   79A5 00 00       	.dw 0
0276   79A7             		
0277   79A7             interrupt:	
0278   79A7 7C 00 02    	inc	counter
0279   79AA 86 00       	ldaA	0
0280   79AC 91 02       	cmpA	>counter
0281   79AE 26 21       	bne	counterHandled
0282   79B0 7C 00 03    	inc 	counter2
0283   79B3 86 04       	ldaA	4
0284   79B5 91 03       	cmpA	>counter2
0285   79B7 26 18       	bne	counterHandled
0286   79B9             	
0287   79B9 86 00       	ldaA	0
0288   79BB 97 03       	staA	counter2
0289   79BD 86 77       	ldaA	01110111b
0290   79BF 91 70       	cmpA	>displayBcd1
0291   79C1 27 08       	beq	on
0292   79C3             	
0293   79C3 86 F0       	ldaA	$F0
0294   79C5             	;staA	lampRow1
0295   79C5 86 77       	ldaA	01110111b
0296   79C7 97 70       	staA	displayBcd1	
0297   79C9 20 06       	bra	counterHandled
0298   79CB             on:
0299   79CB 86 0F       	ldaA	$0F
0300   79CD             	;staA	lampRow1
0301   79CD 86 33       	ldaA	00110011b
0302   79CF 97 70       	staA	displayBcd1	
0303   79D1             
0304   79D1             counterHandled:
0305   79D1             ; move switch column
0306   79D1 96 07       	ldaA	>strobe
0307   79D3 B7 30 02    	staA	switchStrobe
0308   79D6             	
0309   79D6             ; update display 
0310   79D6             	
0311   79D6 DE 50       	ldX	>curCol
0312   79D8 B6 01 68    	ldaA	>displayCol
0313   79DB C6 FF       	ldaB 	$FF
0314   79DD F7 28 02    	staB	displayBcd
0315   79E0 B7 28 00    	staA	displayStrobe
0316   79E3 85 08       	bitA	00001000b
0317   79E5             	\ .push  *, 0 \ BNE  * 		
0317   79E5             
0317   79E5 26 FE       
0318   79E7 E6 70       		ldaB	displayBcd1, X
0319   79E9             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0319   79E9             
0319   79E9             
0319   79E9             
0319   79E9             
0319   79E6             
0319   79E6             
0319   79E6             
0319   79E6~            	else
0319   79E6~            	else
0319   79E6~            	else
0319   79E6~            	else
0319   79E6             
0319   79E6~            	else
0319   79E6~            	else
0319   79E6~            	else
0319   79E6~            	else
0319   79E6             
0319   79E6             
0319   79E6 04          
0319   79E9             
0319   79E9 20 FE       
0319   79EB             
0319   79EB             
0319   79EB             
0319   79EB~            	else
0319   79EB~            	else
0319   79EB~            	else
0319   79EB~            	else
0319   79EB~            	else
0319   79EB             
0319   79EB~            	else
0319   79EB~            	else
0319   79EB             
0319   79EB~            	else
0319   79EB~            	else
0319   79EB             
0320   79EB E6 78       		ldaB	displayBcd1 + 8, X
0321   79ED             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0321   79ED             
0321   79ED             
0321   79ED             
0321   79ED             
0321   79ED             
0321   79ED~            	endif
0321   79ED~            	endif
0321   79ED             
0321   79ED~            	endif
0321   79ED~            	endif
0321   79ED             
0321   79EA             
0321   79EA 02          
0321   79EB             
0321   79EB             
0321   79EB~            	endif
0321   79EB~            	endif
0321   79EB~            	endif
0321   79EB             
0321   79ED             
0321   79ED~            	endif
0321   79ED~            	endif
0321   79ED             
0322   79ED F7 28 02    	staB	displayBcd
0323   79F0             	
0324   79F0             ; read switches
0325   79F0             	;jmp updateLamps
0326   79F0 DE 50       	ldX	>curCol
0327   79F2 B6 30 00    	ldaA	>switchRow
0328   79F5 16          	tab
0329   79F6 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0330   79F8             	
0331   79F8 D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0332   79FA D7 01       	staB	temp + 1 			; temp = switch / 2
0333   79FC D7 53       	staB	tempX + 1			; tempX = cRAM
0334   79FE C6 7D       	ldaB	callbackTable >> 8
0335   7A00 D7 00       	staB	temp
0336   7A02 C6 01       	ldaB	cRAM >> 8
0337   7A04 D7 52       	staB	tempX
0338   7A06             	
0339   7A06 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0340   7A08             	
0341   7A08             	; temp now contains the beginning of the row in the callbackTable
0342   7A08             swNext:
0343   7A08 85 01       	bitA	00000001b	 ; Z set if switch not different
0344   7A0A             	\ .push  *, 0 \ BEQ  * 		; if bit set, switch different
0344   7A0A             
0344   7A0A 27 FE       
0345   7A0C 36          		pshA ; store changed switches left
0346   7A0D DE 52       		ldX	>tempX
0347   7A0F 86 18       		ldaA	11000b
0348   7A11 95 02       		bitA	>counter
0349   7A13 27 08       		beq checkSettled ;  skip settling (multiplies settle time by 8)
0350   7A15             			; just check if it's currently settled
0351   7A15 A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0352   7A17 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0353   7A19 27 33       			beq 	notSettled; A=0 -> settled
0354   7A1B 20 4C       			bra settledEnd
0355   7A1D             checkSettled:
0356   7A1D A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0357   7A1F 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0358   7A21 27 2B       		beq 	notSettled; A=0 -> settled
0359   7A23             		; else A > 0 -> settling
0360   7A23 4A          			decA
0361   7A24 A7 00       			staA	0, X	; sets Z if now A = 0
0362   7A26             			\ .push  *, 0 \ BNE  * 		 ; A=0 -> now settled, fire event
0362   7A26             
0362   7A26 26 FE       
0363   7A28             settled:		
0364   7A28 DE 50       				ldX	>curCol
0365   7A2A 17          				tBA	; A now the bit in row
0366   7A2B A8 20       				eorA	switchRow1, X ; toggle bit in row
0367   7A2D A7 20       				staA	switchRow1, X ; A now state of row
0368   7A2F             				
0369   7A2F F5 30 00    				bitB	>switchRow
0370   7A32             				\ .push  *, 0 \ BEQ  *  ; switch now on
0370   7A32             
0370   7A32 27 FE       
0371   7A34 86 40       					ldaA	01000000b
0372   7A36             				\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0372   7A36             
0372   7A36             
0372   7A36             
0372   7A36             
0372   7A33             
0372   7A33             
0372   7A33             
0372   7A33~            				else
0372   7A33~            				else
0372   7A33~            				else
0372   7A33~            				else
0372   7A33             
0372   7A33~            				else
0372   7A33~            				else
0372   7A33~            				else
0372   7A33~            				else
0372   7A33             
0372   7A33             
0372   7A33 04          
0372   7A36             
0372   7A36 20 FE       
0372   7A38             
0372   7A38             
0372   7A38             
0372   7A38~            				else
0372   7A38~            				else
0372   7A38~            				else
0372   7A38~            				else
0372   7A38~            				else
0372   7A38             
0372   7A38~            				else
0372   7A38~            				else
0372   7A38             
0372   7A38~            				else
0372   7A38~            				else
0372   7A38             
0373   7A38 86 C0       					ldaA	11000000b
0374   7A3A             				\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0374   7A3A             
0374   7A3A             
0374   7A3A             
0374   7A3A             
0374   7A3A             
0374   7A3A~            				endif
0374   7A3A~            				endif
0374   7A3A             
0374   7A3A~            				endif
0374   7A3A~            				endif
0374   7A3A             
0374   7A37             
0374   7A37 02          
0374   7A38             
0374   7A38             
0374   7A38~            				endif
0374   7A38~            				endif
0374   7A38~            				endif
0374   7A38             
0374   7A3A             
0374   7A3A~            				endif
0374   7A3A~            				endif
0374   7A3A             
0375   7A3A 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0376   7A3C             				
0377   7A3C             				; store event
0378   7A3C DE 56       				ldX	>queueTail
0379   7A3E A7 00       				staA	0, X
0380   7A40 7C 00 57    				inc	queueTail + 1
0381   7A43             				
0382   7A43             				; wrap queueTail if necessary
0383   7A43 8C 00 67    				cpX	queueEnd 
0384   7A46             				\ .push  *, 0 \ BNE  * 		
0384   7A46             
0384   7A46 26 FE       
0385   7A48 86 60       					ldaA	queue 
0386   7A4A 97 57       					staA	queueTail + 1
0387   7A4C             				\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0387   7A4C             
0387   7A4C             
0387   7A4C             
0387   7A4C             
0387   7A4C             
0387   7A4C~            				endif
0387   7A4C~            				endif
0387   7A4C             
0387   7A4C~            				endif
0387   7A4C~            				endif
0387   7A4C             
0387   7A47             
0387   7A47 04          
0387   7A48             
0387   7A48             
0387   7A48~            				endif
0387   7A48~            				endif
0387   7A48~            				endif
0387   7A48             
0387   7A4C             
0387   7A4C~            				endif
0387   7A4C~            				endif
0387   7A4C             
0388   7A4C             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0388   7A4C             
0388   7A4C             
0388   7A4C             
0388   7A4C             
0388   7A4C             
0388   7A4C~            			endif
0388   7A4C~            			endif
0388   7A4C             
0388   7A4C~            			endif
0388   7A4C~            			endif
0388   7A4C             
0388   7A27             
0388   7A27 24          
0388   7A28             
0388   7A28             
0388   7A28~            			endif
0388   7A28~            			endif
0388   7A28~            			endif
0388   7A28             
0388   7A4C             
0388   7A4C~            			endif
0388   7A4C~            			endif
0388   7A4C             
0389   7A4C 20 1B       		bra settledEnd
0390   7A4E             notSettled: ; =0 -> was settled, so now it's not
0391   7A4E             			; get the settle time
0392   7A4E 96 53       			ldaA	>tempX + 1
0393   7A50 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0394   7A52 CE 00 00    			ldX	temp
0395   7A55             			
0396   7A55             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0397   7A55 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0398   7A57             			
0399   7A57             			; need to get correct 3 bits from switch settings
0400   7A57 F5 30 00    			bitB	>switchRow
0401   7A5A             			\ .push  *, 0 \ BEQ  *  ; switch just turned on
0401   7A5A             
0401   7A5A 27 FE       
0402   7A5C 44          				lsrA
0403   7A5D 44          				lsrA
0404   7A5E             			\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0404   7A5E             
0404   7A5E             
0404   7A5E             
0404   7A5E             
0404   7A5B             
0404   7A5B             
0404   7A5B             
0404   7A5B~            			else
0404   7A5B~            			else
0404   7A5B~            			else
0404   7A5B~            			else
0404   7A5B             
0404   7A5B~            			else
0404   7A5B~            			else
0404   7A5B~            			else
0404   7A5B~            			else
0404   7A5B             
0404   7A5B             
0404   7A5B 04          
0404   7A5E             
0404   7A5E 20 FE       
0404   7A60             
0404   7A60             
0404   7A60             
0404   7A60~            			else
0404   7A60~            			else
0404   7A60~            			else
0404   7A60~            			else
0404   7A60~            			else
0404   7A60             
0404   7A60~            			else
0404   7A60~            			else
0404   7A60             
0404   7A60~            			else
0404   7A60~            			else
0404   7A60             
0405   7A60 48          				aslA
0406   7A61             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0406   7A61             
0406   7A61             
0406   7A61             
0406   7A61             
0406   7A61             
0406   7A61~            			endif
0406   7A61~            			endif
0406   7A61             
0406   7A61~            			endif
0406   7A61~            			endif
0406   7A61             
0406   7A5F             
0406   7A5F 01          
0406   7A60             
0406   7A60             
0406   7A60~            			endif
0406   7A60~            			endif
0406   7A60~            			endif
0406   7A60             
0406   7A61             
0406   7A61~            			endif
0406   7A61~            			endif
0406   7A61             
0407   7A61 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0408   7A63             						
0409   7A63 DE 52       			ldX	>tempX
0410   7A65 A7 00       			staA	0, X		; start settling	
0411   7A67 27 BF       			beq	settled		; quick out for 0 settle
0412   7A69             settledEnd:
0413   7A69             			
0414   7A69 32          		pulA
0415   7A6A             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0415   7A6A             
0415   7A6A             
0415   7A6A             
0415   7A6A             
0415   7A6A             
0415   7A6A~            	endif
0415   7A6A~            	endif
0415   7A6A             
0415   7A6A~            	endif
0415   7A6A~            	endif
0415   7A6A             
0415   7A0B             
0415   7A0B 5E          
0415   7A0C             
0415   7A0C             
0415   7A0C~            	endif
0415   7A0C~            	endif
0415   7A0C~            	endif
0415   7A0C             
0415   7A6A             
0415   7A6A~            	endif
0415   7A6A~            	endif
0415   7A6A             
0416   7A6A 7C 00 53    	inc tempX + 1
0417   7A6D 58          	aslB
0418   7A6E 44          	lsrA			; pop lowest bit off, set Z if A is empty
0419   7A6F 26 97       	bne		swNext 	; more 'switched' bits, keep processing 
0420   7A71             	
0421   7A71             	
0422   7A71             ; update lamps
0423   7A71             updateLamps:
0424   7A71             	;jmp updateStrobe
0425   7A71             
0426   7A71 DE 50       	ldX	>curCol
0427   7A73             	
0428   7A73 86 FF       	ldaA	$FF	;lamp row is inverted
0429   7A75 B7 24 00    	staA	lampCol
0430   7A78 96 07       	ldaA	>strobe
0431   7A7A B7 24 02    	staA	lampStrobe
0432   7A7D             	
0433   7A7D D6 03       	ldaB	>counter2
0434   7A7F A6 08       	ldaA	lampCol1, X
0435   7A81 C5 01       	bitB	1b 
0436   7A83             	\ .push  *, 0 \ BNE  * 		
0436   7A83             
0436   7A83 26 FE       
0437   7A85 A8 98       		eorA	flashLampCol1, X
0438   7A87 A4 08       		andA	lampCol1, X
0439   7A89             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0439   7A89             
0439   7A89             
0439   7A89             
0439   7A89             
0439   7A89             
0439   7A89~            	endif
0439   7A89~            	endif
0439   7A89             
0439   7A89~            	endif
0439   7A89~            	endif
0439   7A89             
0439   7A84             
0439   7A84 04          
0439   7A85             
0439   7A85             
0439   7A85~            	endif
0439   7A85~            	endif
0439   7A85~            	endif
0439   7A85             
0439   7A89             
0439   7A89~            	endif
0439   7A89~            	endif
0439   7A89             
0440   7A89 43          	comA	; inverted
0441   7A8A             	
0442   7A8A B7 24 00    	staA	lampCol
0443   7A8D 86 00       	ldaA	00
0444   7A8F             
0445   7A8F             ; update solenoids
0446   7A8F             	; if a solenoid is set to <254, --
0447   7A8F             	; if =255, off, otherwise on
0448   7A8F             	; else leave it at 254
0449   7A8F             	
0450   7A8F 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0451   7A92 86 FE       	ldaA	254
0452   7A94 DE 50       	ldX	>curCol
0453   7A96 E6 40       	ldaB	solenoid1 - cRAM, X
0454   7A98             	; update solenoid in current 'column' (1-8) 
0455   7A98 A1 40       	cmpA	solenoid1 - cRAM, X
0456   7A9A             	\ .push  *, 0 \ BLO  *  	; solenoid <=254, turn on
0456   7A9A             
0456   7A9A 25 FE       
0457   7A9C             		\ .push  *, 0 \ BLS  * 	; solenoid < 254, decrement
0457   7A9C             
0457   7A9C 23 FE       
0458   7A9E 6A 40       			dec	solenoid1 - cRAM, X
0459   7AA0             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0459   7AA0             
0459   7AA0             
0459   7AA0             
0459   7AA0             
0459   7AA0             
0459   7AA0~            		endif
0459   7AA0~            		endif
0459   7AA0             
0459   7AA0~            		endif
0459   7AA0~            		endif
0459   7AA0             
0459   7A9D             
0459   7A9D 02          
0459   7A9E             
0459   7A9E             
0459   7A9E~            		endif
0459   7A9E~            		endif
0459   7A9E~            		endif
0459   7A9E             
0459   7AA0             
0459   7AA0~            		endif
0459   7AA0~            		endif
0459   7AA0             
0460   7AA0 0D          		sec
0461   7AA1             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0461   7AA1             
0461   7AA1             
0461   7AA1             
0461   7AA1             
0461   7A9B             
0461   7A9B             
0461   7A9B             
0461   7A9B~            	else
0461   7A9B~            	else
0461   7A9B~            	else
0461   7A9B~            	else
0461   7A9B             
0461   7A9B~            	else
0461   7A9B~            	else
0461   7A9B~            	else
0461   7A9B~            	else
0461   7A9B             
0461   7A9B             
0461   7A9B 07          
0461   7AA1             
0461   7AA1 20 FE       
0461   7AA3             
0461   7AA3             
0461   7AA3             
0461   7AA3~            	else
0461   7AA3~            	else
0461   7AA3~            	else
0461   7AA3~            	else
0461   7AA3~            	else
0461   7AA3             
0461   7AA3~            	else
0461   7AA3~            	else
0461   7AA3             
0461   7AA3~            	else
0461   7AA3~            	else
0461   7AA3             
0462   7AA3 0C          		clc
0463   7AA4             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0463   7AA4             
0463   7AA4             
0463   7AA4             
0463   7AA4             
0463   7AA4             
0463   7AA4~            	endif
0463   7AA4~            	endif
0463   7AA4             
0463   7AA4~            	endif
0463   7AA4~            	endif
0463   7AA4             
0463   7AA2             
0463   7AA2 01          
0463   7AA3             
0463   7AA3             
0463   7AA3~            	endif
0463   7AA3~            	endif
0463   7AA3~            	endif
0463   7AA3             
0463   7AA4             
0463   7AA4~            	endif
0463   7AA4~            	endif
0463   7AA4             
0464   7AA4 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0465   7AA7             	; repeat above for second bank
0466   7AA7 A1 48       	cmpA	solenoid9 - cRAM, X
0467   7AA9             	\ .push  *, 0 \ BLO  *  	; solenoid <=254, turn on
0467   7AA9             
0467   7AA9 25 FE       
0468   7AAB             		\ .push  *, 0 \ BLS  * 	; solenoid < 254, decrement
0468   7AAB             
0468   7AAB 23 FE       
0469   7AAD 6A 48       			dec	solenoid9 - cRAM, X
0470   7AAF             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0470   7AAF             
0470   7AAF             
0470   7AAF             
0470   7AAF             
0470   7AAF             
0470   7AAF~            		endif
0470   7AAF~            		endif
0470   7AAF             
0470   7AAF~            		endif
0470   7AAF~            		endif
0470   7AAF             
0470   7AAC             
0470   7AAC 02          
0470   7AAD             
0470   7AAD             
0470   7AAD~            		endif
0470   7AAD~            		endif
0470   7AAD~            		endif
0470   7AAD             
0470   7AAF             
0470   7AAF~            		endif
0470   7AAF~            		endif
0470   7AAF             
0471   7AAF 0D          		sec
0472   7AB0             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0472   7AB0             
0472   7AB0             
0472   7AB0             
0472   7AB0             
0472   7AAA             
0472   7AAA             
0472   7AAA             
0472   7AAA~            	else
0472   7AAA~            	else
0472   7AAA~            	else
0472   7AAA~            	else
0472   7AAA             
0472   7AAA~            	else
0472   7AAA~            	else
0472   7AAA~            	else
0472   7AAA~            	else
0472   7AAA             
0472   7AAA             
0472   7AAA 07          
0472   7AB0             
0472   7AB0 20 FE       
0472   7AB2             
0472   7AB2             
0472   7AB2             
0472   7AB2~            	else
0472   7AB2~            	else
0472   7AB2~            	else
0472   7AB2~            	else
0472   7AB2~            	else
0472   7AB2             
0472   7AB2~            	else
0472   7AB2~            	else
0472   7AB2             
0472   7AB2~            	else
0472   7AB2~            	else
0472   7AB2             
0473   7AB2 0C          		clc
0474   7AB3             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0474   7AB3             
0474   7AB3             
0474   7AB3             
0474   7AB3             
0474   7AB3             
0474   7AB3~            	endif
0474   7AB3~            	endif
0474   7AB3             
0474   7AB3~            	endif
0474   7AB3~            	endif
0474   7AB3             
0474   7AB1             
0474   7AB1 01          
0474   7AB2             
0474   7AB2             
0474   7AB2~            	endif
0474   7AB2~            	endif
0474   7AB2~            	endif
0474   7AB2             
0474   7AB3             
0474   7AB3~            	endif
0474   7AB3~            	endif
0474   7AB3             
0475   7AB3 76 00 29    	ror		solBStatus	
0476   7AB6 7A 00 50    	dec		curCol ; undo inc
0477   7AB9             	
0478   7AB9             ; update strobe	
0479   7AB9             updateStrobe:
0480   7AB9             	;ldX		curCol
0481   7AB9             	;inX 	
0482   7AB9 86 08       	ldaA	8 	; pitch
0483   7ABB 9B 10       	addA	>curSwitchRowLsb
0484   7ABD 97 10       	staA	curSwitchRowLsb
0485   7ABF 78 00 07    	asl	strobe
0486   7AC2 7C 01 68    	inc	displayCol
0487   7AC5 86 00       	ldaA	0
0488   7AC7 91 07       	cmpA	>strobe ; strobe done?  reset
0489   7AC9             	\ .push  *, 0 \ BNE  * 				
0489   7AC9             
0489   7AC9 26 FE       
0490   7ACB 96 28       		ldaA	>solAStatus
0491   7ACD B7 22 00    		staA	solenoidA
0492   7AD0 96 29       		ldaA	>solBStatus
0493   7AD2 B7 22 02    		staA	solenoidB
0494   7AD5             	
0495   7AD5 86 01       		ldaA	00000001b
0496   7AD7 97 07       		staA	strobe
0497   7AD9             		
0498   7AD9             		;ldX 	#0
0499   7AD9             		
0500   7AD9 86 00       		ldaA	0
0501   7ADB 97 50       		staA	curCol
0502   7ADD 97 51       		staA	curCol + 1
0503   7ADF 97 10       		staA	curSwitchRowLsb
0504   7AE1 97 28       		staA	solAStatus
0505   7AE3 97 29       		staA	solBStatus
0506   7AE5             		
0507   7AE5 F6 01 68    		ldaB	>displayCol	; reset display col only if it's > 7 
0508   7AE8 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0509   7AEA             		\ .push  *, 0 \ BLS  * 
0509   7AEA             
0509   7AEA 23 FE       
0510   7AEC B7 01 68    			staA	displayCol
0511   7AEF             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0511   7AEF             
0511   7AEF             
0511   7AEF             
0511   7AEF             
0511   7AEF             
0511   7AEF~            		endif
0511   7AEF~            		endif
0511   7AEF             
0511   7AEF~            		endif
0511   7AEF~            		endif
0511   7AEF             
0511   7AEB             
0511   7AEB 03          
0511   7AEC             
0511   7AEC             
0511   7AEC~            		endif
0511   7AEC~            		endif
0511   7AEC~            		endif
0511   7AEC             
0511   7AEF             
0511   7AEF~            		endif
0511   7AEF~            		endif
0511   7AEF             
0512   7AEF             	
0513   7AEF B6 01 69    		ldaA	>state
0514   7AF2 8A 04       		oraA	100b
0515   7AF4 B7 01 69    		staA	state
0516   7AF7             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0516   7AF7             
0516   7AF7             
0516   7AF7             
0516   7AF7             
0516   7ACA             
0516   7ACA             
0516   7ACA             
0516   7ACA~            	else
0516   7ACA~            	else
0516   7ACA~            	else
0516   7ACA~            	else
0516   7ACA             
0516   7ACA~            	else
0516   7ACA~            	else
0516   7ACA~            	else
0516   7ACA~            	else
0516   7ACA             
0516   7ACA             
0516   7ACA 2E          
0516   7AF7             
0516   7AF7 20 FE       
0516   7AF9             
0516   7AF9             
0516   7AF9             
0516   7AF9~            	else
0516   7AF9~            	else
0516   7AF9~            	else
0516   7AF9~            	else
0516   7AF9~            	else
0516   7AF9             
0516   7AF9~            	else
0516   7AF9~            	else
0516   7AF9             
0516   7AF9~            	else
0516   7AF9~            	else
0516   7AF9             
0517   7AF9 7C 00 51    		inc	curCol + 1
0518   7AFC             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0518   7AFC             
0518   7AFC             
0518   7AFC             
0518   7AFC             
0518   7AFC             
0518   7AFC~            	endif
0518   7AFC~            	endif
0518   7AFC             
0518   7AFC~            	endif
0518   7AFC~            	endif
0518   7AFC             
0518   7AF8             
0518   7AF8 03          
0518   7AF9             
0518   7AF9             
0518   7AF9~            	endif
0518   7AF9~            	endif
0518   7AF9~            	endif
0518   7AF9             
0518   7AFC             
0518   7AFC~            	endif
0518   7AFC~            	endif
0518   7AFC             
0519   7AFC             	
0520   7AFC 3B          	rti
0521   7AFD             afterInterrupt:
0522   7AFD             
0523   7FF8             pointers: 	.org $7FF8  	
0524   7FF8             	.msfirst
0525   7FF8 79 A7       	.dw interrupt			
0526   7FFA 79 A7       	.dw interrupt			
0527   7FFC 79 A7       	.dw interrupt			
0528   7FFE 78 00       	.dw main
0529   8000             	
0530   8000             	
0531   8000             	.endtasm: Number of errors = 0
