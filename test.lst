0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             attractX:		.equ RAM + $2A ; +
0041+  0000             forkX			.equ RAM + $2C ; +
0042+  0000             curCol:			.equ RAM + $50 ; +
0043+  0000             tempX:			.equ RAM + $52 ; +
0044+  0000             queueHead:		.equ RAM + $54 ; +
0045+  0000             queueTail:		.equ RAM + $56 ; +
0046+  0000             tempQ:			.equ RAM + $58 ; +
0047+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0048+  0000             queueEnd:		.equ RAM + $6D
0049+  0000             ;
0050+  0000             displayBcd1:	.equ RAM + $70
0051+  0000             displayBcd16:	.equ RAM + $7F
0052+  0000             ballCount:		.equ displayBcd1 + 7
0053+  0000             waitLeft: 		.equ RAM + $80 ; dec every 8ms
0054+  0000             waitLeftEnd:		.equ RAM + $87
0055+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0056+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0057+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0058+  0000             flashLampCol1:		.equ RAM + $A0
0059+  0000             flashLampCol8:		.equ RAM + $A7
0060+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0061+  0000             lastSwitch:		.equ RAM + $A8
0062+  0000             dropResetTimer:		.equ RAM + $A9 ; max 127
0063+  0000             dropsDown		.equ RAM + $AA
0064+  0000             p_Bonus:		.equ RAM + $B0
0065+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0066+  0000             p_DropsDown:		.equ RAM + $B5
0067+  0000             p_LampCol2:		.equ RAM + $B6 ; -> B9
0068+  0000             spinnerTimer:		.equ RAM + $BA 
0069+  0000             
0070+  0000             p_BonusLeft:		.equ RAM + $BE
0071+  0000             bonusTimer:		.equ RAM + $BF ; counts down from 127 during bonus
0072+  0000             
0073+  0000             
0074+  0000             
0075+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0076+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0077+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0078+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0079+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0080+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0081+  0000             #DEFINE s(n) 		(0 + n)
0082+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0083+  0000             pA_10:			.equ pA_1m + 5
0084+  0000             pB_1m:			.equ pA_10 + 1
0085+  0000             pB_10:			.equ pB_1m + 5
0086+  0000             pC_1m:			.equ pB_10 + 1
0087+  0000             pC_10:			.equ pC_1m + 5
0088+  0000             pD_1m:			.equ pC_10 + 1
0089+  0000             pD_10:			.equ pD_1m + 5 
0090+  0000             ; 
0091+  0000             displayCol:		.equ cRAM + $6A
0092+  0000             state:			.equ cRAM + $6B	; _ | strobe reset | don't validate | _
0093+  0000             
0094+  0000             instant:		.equ 4
0095+  0000             debounce:		.equ 1
0096+  0000             slow:			.equ 2
0097+  0000             
0098+  0000             switchSettle:	.equ cRAM + $30
0099+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 75    		cpX	displayBcd1 + 5
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 75    			cpX	displayBcd1 + 5
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7D    		cpX	displayBcd1 + 8 + 5
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7D    			cpX	displayBcd1 + 8 + 5
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0F       	ldaB	>lc(8) ; gameover
0101+  7C8C C5 20       	bitB	lr(6)
0102+  7C8E             	ifne
0102+  7C8E             
0102+  7C8E 27 FE       
0103+  7C90 39          		rts
0104+  7C91             	endif
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C8F             
0104+  7C8F 01          
0104+  7C90             
0104+  7C90             
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0105+  7C91             	
0106+  7C91 D6 0E       	ldaB	>lc(7)
0107+  7C93 C5 02       	bitB	lr(2)
0108+  7C95 26 1A       	bne	blankP2
0109+  7C97 C5 04       	bitB	lr(3)
0110+  7C99 26 22       	bne	blankP3
0111+  7C9B C5 08       	bitB	lr(4)
0112+  7C9D 26 2A       	bne	blankP4
0113+  7C9F C5 10       	bitB	lr(5)
0114+  7CA1 26 32       	bne	blankDone
0115+  7CA3 20 00       	bra	blankP1
0116+  7CA5             blankP1:
0117+  7CA5 86 F0       	ldaA	$F0
0118+  7CA7 9A 74       	oraA	>displayBcd1 + 4
0119+  7CA9 97 74       	staA	displayBcd1 + 4
0120+  7CAB 86 F0       	ldaA	$F0
0121+  7CAD 9A 75       	oraA	>displayBcd1 + 5
0122+  7CAF 97 75       	staA	displayBcd1 + 5
0123+  7CB1             blankP2:
0124+  7CB1 86 F0       	ldaA	$F0
0125+  7CB3 9A 7C       	oraA	>displayBcd1 + 12
0126+  7CB5 97 7C       	staA	displayBcd1 + 12
0127+  7CB7 86 F0       	ldaA	$F0
0128+  7CB9 9A 7D       	oraA	>displayBcd1 + 13
0129+  7CBB 97 7D       	staA	displayBcd1 + 13
0130+  7CBD             blankP3:
0131+  7CBD 86 0F       	ldaA	$0F
0132+  7CBF 9A 74       	oraA	>displayBcd1 + 4
0133+  7CC1 97 74       	staA	displayBcd1 + 4
0134+  7CC3 86 0F       	ldaA	$0F
0135+  7CC5 9A 75       	oraA	>displayBcd1 + 5
0136+  7CC7 97 75       	staA	displayBcd1 + 5
0137+  7CC9             blankP4:
0138+  7CC9 86 0F       	ldaA	$0F
0139+  7CCB 9A 7C       	oraA	>displayBcd1 + 12
0140+  7CCD 97 7C       	staA	displayBcd1 + 12
0141+  7CCF 86 0F       	ldaA	$0F
0142+  7CD1 9A 7D       	oraA	>displayBcd1 + 13
0143+  7CD3 97 7D       	staA	displayBcd1 + 13
0144+  7CD5             blankDone:
0145+  7CD5 39          	rts
0146+  7CD6             	
0147+  7CD6             refreshPlayerScores:
0148+  7CD6 BD 7C 00    	jsr copyScores13
0149+  7CD9 BD 7C 45    	jsr copyScores24
0150+  7CDC             	
0151+  7CDC 86 F0       	ldaA	$F0
0152+  7CDE B1 01 50    	cmpA	>pA_1m
0153+  7CE1 26 29       	bne	refresh_1m
0154+  7CE3 B1 01 56    	cmpA	>pB_1m
0155+  7CE6 26 24       	bne	refresh_1m	
0156+  7CE8 B1 01 5C    	cmpA	>pC_1m
0157+  7CEB 26 1F       	bne	refresh_1m
0158+  7CED B1 01 62    	cmpA	>pD_1m
0159+  7CF0 26 1A       	bne	refresh_1m
0160+  7CF2             	
0161+  7CF2 CE 00 70    	ldX	displayBcd1
0162+  7CF5             refresh_10xloop:
0163+  7CF5 A6 01       	ldaA	1, X
0164+  7CF7 A7 00       	staA	0,X
0165+  7CF9 A6 09       	ldaA	8 + 1, X
0166+  7CFB A7 08       	staA	8, X
0167+  7CFD 08          	inX
0168+  7CFE 8C 00 75    	cpX	displayBcd1+5
0169+  7D01 26 F2       	bne	refresh_10xloop
0170+  7D03 86 00       	ldaA	0
0171+  7D05 97 75       	staA	displayBcd1 + 5
0172+  7D07 97 7D       	staA	displayBcd1 + 5 + 8
0173+  7D09 7E 7C 8A    	jmp blankNonPlayerScores
0174+  7D0C             refresh_1m:
0175+  7D0C 7E 7C 8A    	jmp blankNonPlayerScores
0176+  7D0F             	
0177+  7D0F             	
0178+  7D0F             ; add score instantly
0179+  7D0F             ; X = place in p*_1* to add the score to
0180+  7D0F             ; A = amount to add (max 9)
0181+  7D0F             ; tail call
0182+  7D0F             _addScoreI:
0183+  7D0F AB 00       	addA	0, X
0184+  7D11 8A F0       	oraA	11110000b
0185+  7D13             	ifcs ; overflowed, need to increment next number
0185+  7D13             
0185+  7D13 24 FE       
0186+  7D15 8B 06       		addA	6	; adjust A back into BCD
0187+  7D17 A7 00       		staA	0, X
0188+  7D19             addScore_carryOver:		; loop to propagate carry
0189+  7D19 09          		deX	; go to next decimal place
0190+  7D1A A6 00       		ldaA	0, X	
0191+  7D1C 8A F0       		oraA	11110000b
0192+  7D1E 81 F9       		cmpA	$F9
0193+  7D20             		ifeq			; if it's already a 9, reset it and carry again
0193+  7D20             
0193+  7D20 26 FE       
0194+  7D22 6F 00       			clr	0, X
0195+  7D24 27 F3       			beq addScore_carryOver
0196+  7D26             		else			; otherwise ++ it and done
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D21             
0196+  7D21             
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21             
0196+  7D21 06          
0196+  7D26             
0196+  7D26 20 FE       
0196+  7D28             
0196+  7D28             
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0197+  7D28 6C 00       			inc	0, X
0198+  7D2A             		endif	
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D27             
0198+  7D27 02          
0198+  7D28             
0198+  7D28             
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0199+  7D2A             	else
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D14             
0199+  7D14             
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14             
0199+  7D14 17          
0199+  7D2A             
0199+  7D2A 20 FE       
0199+  7D2C             
0199+  7D2C             
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0200+  7D2C 81 F9       		cmpA	$F9
0201+  7D2E             		ifgt ; >9 -> need to adjust back into BCD
0201+  7D2E             
0201+  7D2E 23 FE       
0202+  7D30 8B 06       			addA	6
0203+  7D32 A7 00       			staA	0, X
0204+  7D34             addScore_carryDa:
0205+  7D34 09          			deX
0206+  7D35 A6 00       			ldaA	0, X
0207+  7D37 8A F0       			oraA	11110000b
0208+  7D39 81 F9       			cmpA	$F9
0209+  7D3B             			ifeq
0209+  7D3B             
0209+  7D3B 26 FE       
0210+  7D3D 6F 00       				clr	0, X
0211+  7D3F 27 F3       				beq 	addScore_carryDa
0212+  7D41             			else
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C             
0212+  7D3C 06          
0212+  7D41             
0212+  7D41 20 FE       
0212+  7D43             
0212+  7D43             
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0213+  7D43 6C 00       				inc	0, X
0214+  7D45             			endif	
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D42             
0214+  7D42 02          
0214+  7D43             
0214+  7D43             
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0215+  7D45             		else
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F             
0215+  7D2F 17          
0215+  7D45             
0215+  7D45 20 FE       
0215+  7D47             
0215+  7D47             
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0216+  7D47 A7 00       			staA	0, X
0217+  7D49             		endif
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D46             
0217+  7D46 02          
0217+  7D47             
0217+  7D47             
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0218+  7D49             	endif
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D2B             
0218+  7D2B 1D          
0218+  7D2C             
0218+  7D2C             
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0219+  7D49             
0220+  7D49 7E 7C D6    	jmp refreshPlayerScores
0221+  7D4C             	
0222+  7D4C 39          	rts
0223+  7D4D             	
0224+  7D4D             ; t A,X
0225+  7D4D             setXToCurPlayer10:
0226+  7D4D 96 0F       	ldaA	>lc(8)
0227+  7D4F 85 01       	bitA	0001b
0228+  7D51 27 04       	beq	_addScore10N_p2
0229+  7D53 CE 01 55    	ldX	pA_10
0230+  7D56 39          	rts
0231+  7D57             _addScore10N_p2:
0232+  7D57 85 02       	bitA	0010b
0233+  7D59 27 04       	beq	_addScore10N_p3
0234+  7D5B CE 01 5B    	ldX	pB_10
0235+  7D5E 39          	rts
0236+  7D5F             _addScore10N_p3:
0237+  7D5F 85 04       	bitA	0100b
0238+  7D61 27 04       	beq	_addScore10N_p4
0239+  7D63 CE 01 61    	ldX	pC_10
0240+  7D66 39          	rts
0241+  7D67             _addScore10N_p4:
0242+  7D67 CE 01 67    	ldX	pD_10
0243+  7D6A 39          	rts
0244+  7D6B             
0245+  7D6B             ; suspends execution for A ms and returns to queue processor
0246+  7D6B             ; should only be called from switch callbacks
0247+  7D6B             ; trashes everything but B
0248+  7D6B             _delay:	
0249+  7D6B CE 00 7F    	ldX	waitLeft - 1
0250+  7D6E             delay_findEmptyLoop:
0251+  7D6E 08          	inX
0252+  7D6F 6D 00       	tst	0, X
0253+  7D71 26 FB       	bne 	delay_findEmptyLoop 
0254+  7D73             	
0255+  7D73             	; X = first waitLeft that = 0
0256+  7D73 E7 18       	staB	waitReg - waitLeft, X
0257+  7D75 33          	pulB	; A = MSB of PC
0258+  7D76 E7 08       	staB	waitMsb - waitLeft, X
0259+  7D78 33          	pulB	; A = LSB of PC
0260+  7D79 E7 10       	staB	waitLsb - waitLeft, X
0261+  7D7B A7 00       	staA	0, X
0262+  7D7D             	; time and add stored
0263+  7D7D 7E 7A 14    	jmp skipEvent
0264+  7D80             	
0265+  7D80             _fork:	
0266+  7D80 CE 00 7F    	ldX	waitLeft - 1
0267+  7D83             fork_findEmptyLoop:
0268+  7D83 08          	inX
0269+  7D84 6D 00       	tst	0, X
0270+  7D86 26 FB       	bne 	fork_findEmptyLoop 
0271+  7D88             	
0272+  7D88             	; X = first waitLeft that = 0
0273+  7D88 E7 18       	staB	waitReg - waitLeft, X
0274+  7D8A 33          	pulB	; A = MSB of PC
0275+  7D8B E7 08       	staB	waitMsb - waitLeft, X
0276+  7D8D 33          	pulB	; A = LSB of PC
0277+  7D8E CB 03       	addB	3
0278+  7D90             	ifcs
0278+  7D90             
0278+  7D90 24 FE       
0279+  7D92 6C 08       		inc	waitMsb - waitLeft, X
0280+  7D94             	endif
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0280+  7D91             
0280+  7D91 02          
0280+  7D92             
0280+  7D92             
0280+  7D92~            	endif
0280+  7D92~            	endif
0280+  7D92~            	endif
0280+  7D92             
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0281+  7D94 E7 10       	staB	waitLsb - waitLeft, X
0282+  7D96 A7 00       	staA	0, X
0283+  7D98             	; time and add stored
0284+  7D98 C0 03       	subB	3
0285+  7D9A 37          	pshB
0286+  7D9B E6 08       	ldaB	waitMsb - waitLeft, X
0287+  7D9D             	ifcs
0287+  7D9D             
0287+  7D9D 24 FE       
0288+  7D9F 5A          		decB
0289+  7DA0             	endif
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0289+  7D9E             
0289+  7D9E 01          
0289+  7D9F             
0289+  7D9F             
0289+  7D9F~            	endif
0289+  7D9F~            	endif
0289+  7D9F~            	endif
0289+  7D9F             
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0290+  7DA0 37          	pshB
0291+  7DA1 39          	rts
0292+  7DA2             	
0293+  7DA2             	
0294+  7DA2             	
0295+  7DA2             resetScores:
0296+  7DA2 86 00       	ldaA	00
0297+  7DA4 CE 01 50    	ldX	pA_1m
0298+  7DA7             _zeroScores:
0299+  7DA7 A7 00       	staA	0, X
0300+  7DA9 08          	inX
0301+  7DAA 8C 01 68    	cpX	pD_10 + 1
0302+  7DAD 26 F8       	bne	_zeroScores
0303+  7DAF             	
0304+  7DAF 86 00       	ldaA	0
0305+  7DB1 97 12       	staA	curPlayer
0306+  7DB3 97 13       	staA	curPlayer + 1
0307+  7DB5 86 FF       	ldaA	$FF
0308+  7DB7 97 76       	staA	displayBcd1 + 6
0309+  7DB9 97 7E       	staA	displayBcd1 + 14
0310+  7DBB 97 7F       	staA	displayBcd1 + 15
0311+  7DBD             	
0312+  7DBD BD 7C D6    	jsr	refreshPlayerScores
0313+  7DC0 39          	rts
0314+  7DC1             
0315+  7DC1             ; trash ~B
0316+  7DC1             ; delay for ms (8-2000)
0317+  7DC1             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0318+  7DC1             ; makes a second thread that will skip the next (3b) instruction
0319+  7DC1             #DEFINE fork(ms) ldaA ms/8\ jsr _fork
0320+  7DC1             #DEFINE beginFork()	
0321+  7DC1             #DEFINE endFork()	ldX >forkX\ jmp afterFork
0322+  7DC1             	
0323+  7DC1             ; trashes B (max 104ms)
0324+  7DC1             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0325+  7DC1             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0326+  7DC1             
0327+  7DC1             ; trashes AX
0328+  7DC1             ; place: 1-5 = 10s thru 100ks
0329+  7DC1             ; amount: 1-9
0330+  7DC1             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0331+  7DC1             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0332+  7DC1             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0333+  7DC1             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0334+  7DC1             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0335+  7DC1             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0336+  7DC1             
0337+  7DC1             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0338+  7DC1             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0339+  7DC1             
0340+  7DC1             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0341+  7DC1             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0342+  7DC1             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0343+  7DC1             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0344+  7DC1             
0345+  7DC1             #include "attract.asm"
0001++ 7DC1             attractStart:
0002++ 7DC1 08          	.db 00001000b
0003++ 7DC2 18          	.db 00011000b
0004++ 7DC3 10          	.db 00010000b
0005++ 7DC4 80          	.db 10000000b
0006++ 7DC5 01          	.db 00000001b
0007++ 7DC6             	
0008++ 7DC6 50          	.db 01010000b
0009++ 7DC7 40          	.db 01000000b
0010++ 7DC8 08          	.db 00001000b
0011++ 7DC9 80          	.db 10000000b
0012++ 7DCA 03          	.db 00000011b
0013++ 7DCB             	
0014++ 7DCB 20          	.db 00100000b
0015++ 7DCC 28          	.db 00101000b
0016++ 7DCD 04          	.db 00000100b
0017++ 7DCE 80          	.db 10000000b
0018++ 7DCF 07          	.db 00000111b
0019++ 7DD0             	
0020++ 7DD0 44          	.db 01000100b
0021++ 7DD1 80          	.db 10000000b
0022++ 7DD2 02          	.db 00000010b
0023++ 7DD3 80          	.db 10000000b
0024++ 7DD4 0F          	.db 00001111b
0025++ 7DD5             	
0026++ 7DD5 08          	.db 00001000b
0027++ 7DD6 18          	.db 00011000b
0028++ 7DD7 01          	.db 00000001b
0029++ 7DD8 80          	.db 10000000b
0030++ 7DD9 1F          	.db 00011111b
0031++ 7DDA             	
0032++ 7DDA 50          	.db 01010000b
0033++ 7DDB 40          	.db 01000000b
0034++ 7DDC 02          	.db 00000010b
0035++ 7DDD 80          	.db 10000000b
0036++ 7DDE 3F          	.db 00111111b
0037++ 7DDF             	
0038++ 7DDF 20          	.db 00100000b
0039++ 7DE0 28          	.db 00101000b
0040++ 7DE1 04          	.db 00000100b
0041++ 7DE2 80          	.db 10000000b
0042++ 7DE3 7F          	.db 01111111b
0043++ 7DE4             	
0044++ 7DE4 44          	.db 01000100b
0045++ 7DE5 80          	.db 10000000b
0046++ 7DE6 08          	.db 00001000b
0047++ 7DE7 80          	.db 10000000b
0048++ 7DE8 FF          	.db 11111111b
0049++ 7DE9             attractEnd:0006   7DE9             
0007   7DE9             #include "game.asm"
0001+  7DE9             ; Laser Ball solenoids
0002+  7DE9             ;#DEFINE KICKOUT 		01
0003+  7DE9             ;#DEFINE LEFT_KICKER 	02
0004+  7DE9             ;#DEFINE DROP_LA			03
0005+  7DE9             ;#DEFINE DROP_SER		04
0006+  7DE9             ;#DEFINE EJECT_HOLE		05
0007+  7DE9             ;#DEFINE DROP_BA			06
0008+  7DE9             ;#DEFINE DROP_LL			07
0009+  7DE9             ;#DEFINE RIGHT_KICKER	08
0010+  7DE9             ;#DEFINE SOUND1			09 ; thru 13
0011+  7DE9             ;#DEFINE KNOCKER			14
0012+  7DE9             ;#DEFINE	FLASHERS		15
0013+  7DE9             ;#DEFINE COIN_LOCKOUT	16
0014+  7DE9             
0015+  7DE9             ; Hot Tip solenoids
0016+  7DE9             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7DE9             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7DE9             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7DE9             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7DE9             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7DE9             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7DE9             #DEFINE CHIME_10	SOL(09, 16)
0023+  7DE9             #DEFINE CHIME_100	SOL(10, 16)
0024+  7DE9             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7DE9             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7DE9             #DEFINE CLICKER		SOL(13, 8)
0027+  7DE9             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7DE9             #DEFINE BUZZER		SOL(15, 100)
0029+  7DE9             #DEFINE SHORT_PAUSE 	115
0030+  7DE9             
0031+  7DE9             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7DE9             #DEFINE done(v)	\
0033+  7DE9             #DEFCONT	#IF (v==0)
0034+  7DE9             #DEFCONT		\ ldaA 10b
0035+  7DE9             #DEFCONT		\ oraA >state
0036+  7DE9             #DEFCONT		\ staA state
0037+  7DE9             #DEFCONT	\#ENDIF
0038+  7DE9             #DEFCONT	\ jmp afterQueueEvent
0039+  7DE9             	
0040+  7DE9             	
0041+  7DE9             _addScore10N:
0042+  7DE9 BD 7D 4D    	jsr setXToCurPlayer10
0043+  7DEC 86 01       	ldaA	1
0044+  7DEE BD 7D 0F    	jsr _addScoreI
0045+  7DF1 86 02       	fireSolenoidA(CHIME_10)
0045+  7DF3 B7 01 48    
0046+  7DF6 39          	rts
0047+  7DF7             _addScore100N:
0048+  7DF7 BD 7D 4D    	jsr setXToCurPlayer10
0049+  7DFA 09          	deX
0050+  7DFB 86 01       	ldaA	1
0051+  7DFD BD 7D 0F    	jsr _addScoreI
0052+  7E00 86 02       	fireSolenoidA(CHIME_100)	
0052+  7E02 B7 01 49    
0053+  7E05 39          	rts
0054+  7E06             _addScore1000N:
0055+  7E06 BD 7D 4D    	jsr setXToCurPlayer10
0056+  7E09 09          	deX
0057+  7E0A 09          	deX
0058+  7E0B 86 01       	ldaA	1
0059+  7E0D BD 7D 0F    	jsr _addScoreI
0060+  7E10 86 02       	fireSolenoidA(CHIME_1000)
0060+  7E12 B7 01 4A    
0061+  7E15 39          	rts
0062+  7E16             #DEFINE score10() jsr _addScore10N
0063+  7E16             #DEFINE score100() jsr _addScore100N
0064+  7E16             #DEFINE score1000() jsr _addScore1000N
0065+  7E16             #DEFINE score500() \ jsr _addScore100N
0066+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7E16             #DEFCONT	\ jsr _addScore100N
0069+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7E16             #DEFCONT	\ jsr _addScore100N
0072+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7E16             #DEFCONT	\ jsr _addScore100N
0075+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7E16             #DEFCONT	\ jsr _addScore100N
0078+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7E16             
0081+  7E16             #DEFINE advBonus()	jsr advanceBonus
0082+  7E16             
0083+  7E16             advanceBonus:
0084+  7E16 86 08       	ldaA	1000b
0085+  7E18 B5 01 6B    	bitA	>state
0086+  7E1B             	ifne
0086+  7E1B             
0086+  7E1B 27 FE       
0087+  7E1D 39          		rts
0088+  7E1E             	endif
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0088+  7E1C             
0088+  7E1C 01          
0088+  7E1D             
0088+  7E1D             
0088+  7E1D~            	endif
0088+  7E1D~            	endif
0088+  7E1D~            	endif
0088+  7E1D             
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0089+  7E1E 7C 00 B0    	inc 	p_Bonus
0090+  7E21 86 7F       	lampOff(8,5) ; 1k
0090+  7E23 94 0C       
0090+  7E25 97 0C       
0091+  7E27 C6 02       	ldaB	2
0092+  7E29 86 08       	fork(64)
0092+  7E2B BD 7D 80    
0093+  7E2E 39          	rts
0094+  7E2F 01          	nop
0095+  7E30 01          	nop
0096+  7E31             	beginFork()
0097+  7E31             advanceBonus_loop:
0098+  7E31 7A 00 B0    	dec	p_Bonus
0099+  7E34 BD 70 C3    	jsr 	bonusLights
0100+  7E37 7C 00 B0    	inc	p_Bonus
0101+  7E3A 86 FE       	ldaA	11111110b
0102+  7E3C             	
0103+  7E3C 37          	pshB
0104+  7E3D 5A          	decB
0105+  7E3E             inner:
0106+  7E3E 5A          	decB
0107+  7E3F 27 04       	beq	innerEnd
0108+  7E41 0D          	seC
0109+  7E42 49          	rolA
0110+  7E43 20 F9       	bra 	inner
0111+  7E45             innerEnd:
0112+  7E45 33          	pulB
0113+  7E46             	
0114+  7E46 94 0D       	andA	>lc(6)
0115+  7E48 97 0D       	staA	lc(6)
0116+  7E4A 86 08       	delay(64)
0116+  7E4C BD 7D 6B    
0117+  7E4F 5C          	incB
0118+  7E50 D1 B0       	cmpB	>p_Bonus
0119+  7E52 2D DD       	blt	advanceBonus_loop
0120+  7E54 D6 B0       	ldaB	>p_Bonus
0121+  7E56 BD 70 C3    	jsr 	bonusLights
0122+  7E59 DE 2C       	endFork()
0122+  7E5B 7E 79 49    
0123+  7E5E             	
0124+  7E5E             ; switch callbacks:
0125+  7E5E             
0126+  70C0             none:	.org $7000 + 192 ; size of callback table
0127+  70C0             	done(1)
0127+  70C0~            	done(1)
0127+  70C0~            	done(1)
0127+  70C0~            	done(1)
0127+  70C0~            	done(1)
0127+  70C0             
0127+  70C0 7E 79 CB    
0128+  70C3             	
0129+  70C3             bonusLights:
0130+  70C3 86 00       	ldaA	0
0131+  70C5 97 0C       	staA	lc(5)
0132+  70C7 97 0D       	staA	lc(6)
0133+  70C9 7D 00 B0    	tst	>p_Bonus
0134+  70CC 27 11       	beq	bonusLights_done
0135+  70CE             	
0136+  70CE 86 80       	lampOn(8,5) ; 1k
0136+  70D0 9A 0C       
0136+  70D2 97 0C       
0137+  70D4             	
0138+  70D4 96 B0       	ldaA	>p_Bonus
0139+  70D6             bonusLights_loop:
0140+  70D6 4A          	decA
0141+  70D7 27 06       	beq 	bonusLights_done
0142+  70D9 0D          	seC
0143+  70DA 79 00 0D    	rol	lc(6)
0144+  70DD 20 F7       	bra	bonusLights_loop
0145+  70DF             	
0146+  70DF             bonusLights_done
0147+  70DF             
0148+  70DF 86 09       	ldaA	9
0149+  70E1 91 B0       	cmpA	>p_Bonus
0150+  70E3             	ifge	
0150+  70E3             
0150+  70E3 25 FE       
0151+  70E5             	else	; bonus >= 10?
0151+  70E5             
0151+  70E5             
0151+  70E5             
0151+  70E5             
0151+  70E4             
0151+  70E4             
0151+  70E4             
0151+  70E4~            	else	; bonus >= 10?
0151+  70E4~            	else	; bonus >= 10?
0151+  70E4~            	else	; bonus >= 10?
0151+  70E4~            	else	; bonus >= 10?
0151+  70E4             
0151+  70E4~            	else	; bonus >= 10?
0151+  70E4~            	else	; bonus >= 10?
0151+  70E4~            	else	; bonus >= 10?
0151+  70E4~            	else	; bonus >= 10?
0151+  70E4             
0151+  70E4             
0151+  70E4 02          
0151+  70E5             
0151+  70E5 20 FE       
0151+  70E7             
0151+  70E7             
0151+  70E7             
0151+  70E7~            	else	; bonus >= 10?
0151+  70E7~            	else	; bonus >= 10?
0151+  70E7~            	else	; bonus >= 10?
0151+  70E7~            	else	; bonus >= 10?
0151+  70E7~            	else	; bonus >= 10?
0151+  70E7             
0151+  70E7~            	else	; bonus >= 10?
0151+  70E7~            	else	; bonus >= 10?
0151+  70E7             
0151+  70E7~            	else	; bonus >= 10?
0151+  70E7~            	else	; bonus >= 10?
0151+  70E7             
0152+  70E7 86 0A       		ldaA	10
0153+  70E9 97 B0       		staA	p_Bonus
0154+  70EB 86 40       		lampOn(7,5) ; 10k light
0154+  70ED 9A 0C       
0154+  70EF 97 0C       
0155+  70F1             	endif
0155+  70F1             
0155+  70F1             
0155+  70F1             
0155+  70F1             
0155+  70F1             
0155+  70F1~            	endif
0155+  70F1~            	endif
0155+  70F1             
0155+  70F1~            	endif
0155+  70F1~            	endif
0155+  70F1             
0155+  70E6             
0155+  70E6 0A          
0155+  70E7             
0155+  70E7             
0155+  70E7~            	endif
0155+  70E7~            	endif
0155+  70E7~            	endif
0155+  70E7             
0155+  70F1             
0155+  70F1~            	endif
0155+  70F1~            	endif
0155+  70F1             
0156+  70F1             	
0157+  70F1 39          	rts
0158+  70F2             	
0159+  70F2             	
0160+  70F2             startBall:
0161+  70F2 DE 12       	ldX	>curPlayer
0162+  70F4 86 01       	ldaA	1
0163+  70F6 97 B0       	staA	p_Bonus
0164+  70F8 86 80       	lampOn(8,5)
0164+  70FA 9A 0C       
0164+  70FC 97 0C       
0165+  70FE B6 22 03    	enablePf
0165+  7101 8A 38       
0165+  7103 B7 22 03    
0166+  7106             	
0167+  7106 86 00       	ldaA	0
0168+  7108 97 B5       	staA	p_DropsDown
0169+  710A 86 41       	ldaA	65
0170+  710C 97 A9       	staA	dropResetTimer
0171+  710E             	
0172+  710E 86 00       	ldaA	0
0173+  7110 97 AA       	staA	dropsDown
0174+  7112             	
0175+  7112 C6 0C       	fireSolenoid(DROP_HOT)
0175+  7114 F7 01 42    
0176+  7117 86 12       	delay(150)
0176+  7119 BD 7D 6B    
0177+  711C C6 0C       	fireSolenoid(DROP_TIP)
0177+  711E F7 01 41    
0178+  7121 86 12       	delay(150)
0178+  7123 BD 7D 6B    
0179+  7126             	
0180+  7126 86 FF       	ldaA	$FF
0181+  7128 97 A8       	staA	lastSwitch
0182+  712A             	
0183+  712A             	; clear lights
0184+  712A CE 00 08    	ldX	lampCol1
0185+  712D 86 00       	ldaA	0b
0186+  712F             lClearLights:
0187+  712F A7 00       	staA	0, X
0188+  7131 A7 98       	staA	flashLampCol1 - lampCol1, X
0189+  7133 08          	inX
0190+  7134 8C 00 0E    	cpX	lc(6) + 1
0191+  7137 26 F6       	bne	lClearLights
0192+  7139             	;
0193+  7139             	
0194+  7139             	; init lights for player data
0195+  7139 DE 12       	ldX	>curPlayer
0196+  713B A6 B1       	ldaA	p_Ejects, X
0197+  713D 97 0B       	staA	lc(4)
0198+  713F E6 B6       	ldaB	p_LampCol2, X
0199+  7141 C5 02       	bitB	lr(2)
0200+  7143             	ifne 
0200+  7143             
0200+  7143 27 FE       
0201+  7145 86 02       		lampOn(2,3)
0201+  7147 9A 0A       
0201+  7149 97 0A       
0202+  714B C4 FD       		andB	11111101b
0203+  714D             	endif
0203+  714D             
0203+  714D             
0203+  714D             
0203+  714D             
0203+  714D             
0203+  714D~            	endif
0203+  714D~            	endif
0203+  714D             
0203+  714D~            	endif
0203+  714D~            	endif
0203+  714D             
0203+  7144             
0203+  7144 08          
0203+  7145             
0203+  7145             
0203+  7145~            	endif
0203+  7145~            	endif
0203+  7145~            	endif
0203+  7145             
0203+  714D             
0203+  714D~            	endif
0203+  714D~            	endif
0203+  714D             
0204+  714D D7 09       	staB	lc(2)
0205+  714F             	
0206+  714F 86 40       	ldaA	lr(7) ; shoot again
0207+  7151 95 0F       	bitA	>lc(8)
0208+  7153             	ifne
0208+  7153             
0208+  7153 27 FE       
0209+  7155 86 01       		lampOn(1,3) ; shoot again
0209+  7157 9A 0A       
0209+  7159 97 0A       
0210+  715B             	endif
0210+  715B             
0210+  715B             
0210+  715B             
0210+  715B             
0210+  715B             
0210+  715B~            	endif
0210+  715B~            	endif
0210+  715B             
0210+  715B~            	endif
0210+  715B~            	endif
0210+  715B             
0210+  7154             
0210+  7154 06          
0210+  7155             
0210+  7155             
0210+  7155~            	endif
0210+  7155~            	endif
0210+  7155~            	endif
0210+  7155             
0210+  715B             
0210+  715B~            	endif
0210+  715B~            	endif
0210+  715B             
0211+  715B             	
0212+  715B             	; flash player light
0213+  715B 86 0F       	ldaA	00001111b ; player up lights
0214+  715D 9A A7       	oraA	>flc(8)
0215+  715F 97 A7       	staA	flc(8)
0216+  7161             	
0217+  7161 86 01       	ldaA	sr(1) ; check outhole
0218+  7163 95 21       	bitA	>sc(2)
0219+  7165             	ifne ; ball in hole
0219+  7165             
0219+  7165 27 FE       
0220+  7167 C6 02       		fireSolenoid(OUTHOLE)
0220+  7169 F7 01 44    
0221+  716C             	endif
0221+  716C             
0221+  716C             
0221+  716C             
0221+  716C             
0221+  716C             
0221+  716C~            	endif
0221+  716C~            	endif
0221+  716C             
0221+  716C~            	endif
0221+  716C~            	endif
0221+  716C             
0221+  7166             
0221+  7166 05          
0221+  7167             
0221+  7167             
0221+  7167~            	endif
0221+  7167~            	endif
0221+  7167~            	endif
0221+  7167             
0221+  716C             
0221+  716C~            	endif
0221+  716C~            	endif
0221+  716C             
0222+  716C             	
0223+  716C 39          	rts
0224+  716D             	
0225+  716D             	
0226+  716D             startGame:
0227+  716D 86 02       	lampOn(2,7) ; one player
0227+  716F 9A 0E       
0227+  7171 97 0E       
0228+  7173             	
0229+  7173 86 DF       	lampOff(6,8) ; game over
0229+  7175 94 0F       
0229+  7177 97 0F       
0230+  7179             	
0231+  7179 C6 02       	fireSolenoid(CHIME_10)
0231+  717B F7 01 48    
0232+  717E 86 0E       	delay(SHORT_PAUSE)
0232+  7180 BD 7D 6B    
0233+  7183 C6 02       	fireSolenoid(CHIME_10)
0233+  7185 F7 01 48    
0234+  7188 86 0E       	delay(SHORT_PAUSE)
0234+  718A BD 7D 6B    
0235+  718D C6 02       	fireSolenoid(CHIME_10)
0235+  718F F7 01 48    
0236+  7192 86 19       	delay(200)
0236+  7194 BD 7D 6B    
0237+  7197             	
0238+  7197 C6 02       	fireSolenoid(CHIME_10)
0238+  7199 F7 01 48    
0239+  719C 86 0E       	delay(SHORT_PAUSE)
0239+  719E BD 7D 6B    
0240+  71A1 C6 02       	fireSolenoid(CHIME_10)
0240+  71A3 F7 01 48    
0241+  71A6 86 0E       	delay(SHORT_PAUSE)
0241+  71A8 BD 7D 6B    
0242+  71AB C6 02       	fireSolenoid(CHIME_10)
0242+  71AD F7 01 48    
0243+  71B0 86 19       	delay(200)
0243+  71B2 BD 7D 6B    
0244+  71B5             	
0245+  71B5 C6 02       	fireSolenoid(CHIME_10)
0245+  71B7 F7 01 48    
0246+  71BA 86 0E       	delay(SHORT_PAUSE)
0246+  71BC BD 7D 6B    
0247+  71BF C6 02       	fireSolenoid(CHIME_10)
0247+  71C1 F7 01 48    
0248+  71C4 86 0E       	delay(SHORT_PAUSE)
0248+  71C6 BD 7D 6B    
0249+  71C9 C6 02       	fireSolenoid(CHIME_100)
0249+  71CB F7 01 49    
0250+  71CE 86 19       	delay(200)
0250+  71D0 BD 7D 6B    
0251+  71D3 C6 02       	fireSolenoid(CHIME_1000)
0251+  71D5 F7 01 4A    
0252+  71D8 86 19       	delay(200)
0252+  71DA BD 7D 6B    
0253+  71DD C6 02       	fireSolenoid(CHIME_10k)
0253+  71DF F7 01 4B    
0254+  71E2 86 12       	delay(150)
0254+  71E4 BD 7D 6B    
0255+  71E7             	
0256+  71E7             	; reset scores
0257+  71E7 BD 7D A2    	jsr 	resetScores
0258+  71EA             	
0259+  71EA             	; reset ball count
0260+  71EA 86 10       	ldaA	$10
0261+  71EC 97 77       	staA	ballCount	
0262+  71EE             
0263+  71EE C6 00       	ldaB	0
0264+  71F0 D7 13       	staB	curPlayer + 1
0265+  71F2             	
0266+  71F2 D7 0E       	staB	lc(7)
0267+  71F4 D7 0F       	staB	lc(8)
0268+  71F6 D7 A6       	staB	flc(7)
0269+  71F8 D7 A7       	staB	flc(8)
0270+  71FA             	
0271+  71FA CE 00 00    	ldX	0
0272+  71FD             lInitPlayers:
0273+  71FD C6 01       	ldaB	lr(1)
0274+  71FF E7 B1       	staB	p_Ejects, X
0275+  7201 C6 00       	ldaB	0
0276+  7203 E7 B6       	staB	p_LampCol2, X
0277+  7205 08          	inX
0278+  7206 8C 00 04    	cpX	4
0279+  7209 26 F2       	bne	lInitPlayers
0280+  720B             	
0281+  720B BD 70 F2    	jsr	startBall
0282+  720E             	
0283+  720E             	; invalidate playfield
0284+  720E 86 01       	ldaA	lr(1)
0285+  7210 9A 0F       	oraA	>lc(8)
0286+  7212 97 0F       	staA	lc(8)
0287+  7214             	
0288+  7214 86 02       	lampOn(2,7) ; one player
0288+  7216 9A 0E       
0288+  7218 97 0E       
0289+  721A             	
0290+  721A 86 DF       	lampOff(6,8) ; game over
0290+  721C 94 0F       
0290+  721E 97 0F       
0291+  7220             	
0292+  7220 39          	rts
0293+  7221             	
0294+  7221             
0295+  7221             	
0296+  7221             swTilt: 
0297+  7221 86 10       	lampOn(5,8) ; tilt
0297+  7223 9A 0F       
0297+  7225 97 0F       
0298+  7227 B6 22 03    	disablePf
0298+  722A 84 F7       
0298+  722C B7 22 03    
0299+  722F             	done(0)
0299+  722F             
0299+  722F 86 02       
0299+  7231 BA 01 6B    
0299+  7234 B7 01 6B    
0299+  7237             
0299+  7237 7E 79 CB    
0300+  723A             	
0301+  723A             swStart: 
0302+  723A 96 0F       	ldaA >lc(8)
0303+  723C 85 20       	bitA lr(6)
0304+  723E             	ifne ; in game over
0304+  723E             
0304+  723E 27 FE       
0305+  7240 BD 71 6D    		jsr startGame
0306+  7243             	else 
0306+  7243             
0306+  7243             
0306+  7243             
0306+  7243             
0306+  723F             
0306+  723F             
0306+  723F             
0306+  723F~            	else 
0306+  723F~            	else 
0306+  723F~            	else 
0306+  723F~            	else 
0306+  723F             
0306+  723F~            	else 
0306+  723F~            	else 
0306+  723F~            	else 
0306+  723F~            	else 
0306+  723F             
0306+  723F             
0306+  723F 05          
0306+  7243             
0306+  7243 20 FE       
0306+  7245             
0306+  7245             
0306+  7245             
0306+  7245~            	else 
0306+  7245~            	else 
0306+  7245~            	else 
0306+  7245~            	else 
0306+  7245~            	else 
0306+  7245             
0306+  7245~            	else 
0306+  7245~            	else 
0306+  7245             
0306+  7245~            	else 
0306+  7245~            	else 
0306+  7245             
0307+  7245 86 10       		ldaA	$10
0308+  7247 91 77       		cmpA	>ballCount
0309+  7249             		ifeq ; add player
0309+  7249             
0309+  7249 26 FE       
0310+  724B 86 1E       			ldaA	00011110b
0311+  724D 94 0E       			andA	>lc(7) ; player count lights
0312+  724F 85 10       			bitA	lr(5)
0313+  7251             			ifeq	; if not on P4 already, add player
0313+  7251             
0313+  7251 26 FE       
0314+  7253 48          				aslA
0315+  7254 C6 E1       				ldaB	11100001b
0316+  7256 D4 0E       				andB	>lc(7)
0317+  7258 D7 0E       				staB	lc(7)
0318+  725A 9A 0E       				oraA	>lc(7)
0319+  725C 97 0E       				staA	lc(7)
0320+  725E             			endif
0320+  725E             
0320+  725E             
0320+  725E             
0320+  725E             
0320+  725E             
0320+  725E~            			endif
0320+  725E~            			endif
0320+  725E             
0320+  725E~            			endif
0320+  725E~            			endif
0320+  725E             
0320+  7252             
0320+  7252 0B          
0320+  7253             
0320+  7253             
0320+  7253~            			endif
0320+  7253~            			endif
0320+  7253~            			endif
0320+  7253             
0320+  725E             
0320+  725E~            			endif
0320+  725E~            			endif
0320+  725E             
0321+  725E             		else ; restart game
0321+  725E             
0321+  725E             
0321+  725E             
0321+  725E             
0321+  724A             
0321+  724A             
0321+  724A             
0321+  724A~            		else ; restart game
0321+  724A~            		else ; restart game
0321+  724A~            		else ; restart game
0321+  724A~            		else ; restart game
0321+  724A             
0321+  724A~            		else ; restart game
0321+  724A~            		else ; restart game
0321+  724A~            		else ; restart game
0321+  724A~            		else ; restart game
0321+  724A             
0321+  724A             
0321+  724A 15          
0321+  725E             
0321+  725E 20 FE       
0321+  7260             
0321+  7260             
0321+  7260             
0321+  7260~            		else ; restart game
0321+  7260~            		else ; restart game
0321+  7260~            		else ; restart game
0321+  7260~            		else ; restart game
0321+  7260~            		else ; restart game
0321+  7260             
0321+  7260~            		else ; restart game
0321+  7260~            		else ; restart game
0321+  7260             
0321+  7260~            		else ; restart game
0321+  7260~            		else ; restart game
0321+  7260             
0322+  7260 BD 71 6D    			jsr startGame
0323+  7263             		endif		
0323+  7263             
0323+  7263             
0323+  7263             
0323+  7263             
0323+  7263             
0323+  7263~            		endif		
0323+  7263~            		endif		
0323+  7263             
0323+  7263~            		endif		
0323+  7263~            		endif		
0323+  7263             
0323+  725F             
0323+  725F 03          
0323+  7260             
0323+  7260             
0323+  7260~            		endif		
0323+  7260~            		endif		
0323+  7260~            		endif		
0323+  7260             
0323+  7263             
0323+  7263~            		endif		
0323+  7263~            		endif		
0323+  7263             
0324+  7263             	endif
0324+  7263             
0324+  7263             
0324+  7263             
0324+  7263             
0324+  7263             
0324+  7263~            	endif
0324+  7263~            	endif
0324+  7263             
0324+  7263~            	endif
0324+  7263~            	endif
0324+  7263             
0324+  7244             
0324+  7244 1E          
0324+  7245             
0324+  7245             
0324+  7245~            	endif
0324+  7245~            	endif
0324+  7245~            	endif
0324+  7245             
0324+  7263             
0324+  7263~            	endif
0324+  7263~            	endif
0324+  7263             
0325+  7263             	
0326+  7263 BD 7C D6    	jsr refreshPlayerScores
0327+  7266             	
0328+  7266             	done(0)
0328+  7266             
0328+  7266 86 02       
0328+  7268 BA 01 6B    
0328+  726B B7 01 6B    
0328+  726E             
0328+  726E 7E 79 CB    
0329+  7271             	
0330+  7271             swOuthole: 
0331+  7271 96 0F       	ldaA	>lc(8) ; !game over
0332+  7273 85 20       	bitA	lr(6)
0333+  7275             	ifne ; game over
0333+  7275             
0333+  7275 27 FE       
0334+  7277             		done(0)
0334+  7277             
0334+  7277 86 02       
0334+  7279 BA 01 6B    
0334+  727C B7 01 6B    
0334+  727F             
0334+  727F 7E 79 CB    
0335+  7282             	endif
0335+  7282             
0335+  7282             
0335+  7282             
0335+  7282             
0335+  7282             
0335+  7282~            	endif
0335+  7282~            	endif
0335+  7282             
0335+  7282~            	endif
0335+  7282~            	endif
0335+  7282             
0335+  7276             
0335+  7276 0B          
0335+  7277             
0335+  7277             
0335+  7277~            	endif
0335+  7277~            	endif
0335+  7277~            	endif
0335+  7277             
0335+  7282             
0335+  7282~            	endif
0335+  7282~            	endif
0335+  7282             
0336+  7282             	
0337+  7282 7D 00 BF    	tst	>bonusTimer
0338+  7285             	ifne
0338+  7285             
0338+  7285 27 FE       
0339+  7287             		done(0)
0339+  7287             
0339+  7287 86 02       
0339+  7289 BA 01 6B    
0339+  728C B7 01 6B    
0339+  728F             
0339+  728F 7E 79 CB    
0340+  7292             	else
0340+  7292             
0340+  7292             
0340+  7292             
0340+  7292             
0340+  7286             
0340+  7286             
0340+  7286             
0340+  7286~            	else
0340+  7286~            	else
0340+  7286~            	else
0340+  7286~            	else
0340+  7286             
0340+  7286~            	else
0340+  7286~            	else
0340+  7286~            	else
0340+  7286~            	else
0340+  7286             
0340+  7286             
0340+  7286 0D          
0340+  7292             
0340+  7292 20 FE       
0340+  7294             
0340+  7294             
0340+  7294             
0340+  7294~            	else
0340+  7294~            	else
0340+  7294~            	else
0340+  7294~            	else
0340+  7294~            	else
0340+  7294             
0340+  7294~            	else
0340+  7294~            	else
0340+  7294             
0340+  7294~            	else
0340+  7294~            	else
0340+  7294             
0341+  7294 86 7F       		ldaA	127
0342+  7296 97 BF       		staA	bonusTimer
0343+  7298             	endif
0343+  7298             
0343+  7298             
0343+  7298             
0343+  7298             
0343+  7298             
0343+  7298~            	endif
0343+  7298~            	endif
0343+  7298             
0343+  7298~            	endif
0343+  7298~            	endif
0343+  7298             
0343+  7293             
0343+  7293 04          
0343+  7294             
0343+  7294             
0343+  7294~            	endif
0343+  7294~            	endif
0343+  7294~            	endif
0343+  7294             
0343+  7298             
0343+  7298~            	endif
0343+  7298~            	endif
0343+  7298             
0344+  7298 86 4B       	delay(600)
0344+  729A BD 7D 6B    
0345+  729D             	
0346+  729D             	; check ballsave
0347+  729D 86 01       	ldaA	lr(1)
0348+  729F 95 0A       	bitA	>lc(3)
0349+  72A1             	ifne	; shoot again on
0349+  72A1             
0349+  72A1 27 FE       
0350+  72A3 95 A2       		bitA	>flc(3)
0351+  72A5             		ifne ; shoot again flashing
0351+  72A5             
0351+  72A5 27 FE       
0352+  72A7             			; turn off used special
0353+  72A7 86 80       			ldaA	lr(8) ; right special
0354+  72A9 95 09       			bitA	>lc(2)
0355+  72AB             			ifne
0355+  72AB             
0355+  72AB 27 FE       
0356+  72AD 86 7F       				lampOff(8,2)
0356+  72AF 94 09       
0356+  72B1 97 09       
0357+  72B3 86 7F       				flashOff(8,2)
0357+  72B5 94 A1       
0357+  72B7 97 A1       
0358+  72B9             			endif
0358+  72B9             
0358+  72B9             
0358+  72B9             
0358+  72B9             
0358+  72B9             
0358+  72B9~            			endif
0358+  72B9~            			endif
0358+  72B9             
0358+  72B9~            			endif
0358+  72B9~            			endif
0358+  72B9             
0358+  72AC             
0358+  72AC 0C          
0358+  72AD             
0358+  72AD             
0358+  72AD~            			endif
0358+  72AD~            			endif
0358+  72AD~            			endif
0358+  72AD             
0358+  72B9             
0358+  72B9~            			endif
0358+  72B9~            			endif
0358+  72B9             
0359+  72B9 86 02       			ldaA	lr(2) ; right special
0360+  72BB 95 0A       			bitA	>lc(3)
0361+  72BD             			ifne
0361+  72BD             
0361+  72BD 27 FE       
0362+  72BF 86 FD       				lampOff(2,3)
0362+  72C1 94 0A       
0362+  72C3 97 0A       
0363+  72C5 86 FD       				flashOff(2,3)
0363+  72C7 94 A2       
0363+  72C9 97 A2       
0364+  72CB             			endif
0364+  72CB             
0364+  72CB             
0364+  72CB             
0364+  72CB             
0364+  72CB             
0364+  72CB~            			endif
0364+  72CB~            			endif
0364+  72CB             
0364+  72CB~            			endif
0364+  72CB~            			endif
0364+  72CB             
0364+  72BE             
0364+  72BE 0C          
0364+  72BF             
0364+  72BF             
0364+  72BF~            			endif
0364+  72BF~            			endif
0364+  72BF~            			endif
0364+  72BF             
0364+  72CB             
0364+  72CB~            			endif
0364+  72CB~            			endif
0364+  72CB             
0365+  72CB             			
0366+  72CB             			; flash player light
0367+  72CB 86 0F       			ldaA	00001111b ; player up lights
0368+  72CD 9A A7       			oraA	>flc(8)
0369+  72CF 97 A7       			staA	flc(8)
0370+  72D1             		endif
0370+  72D1             
0370+  72D1             
0370+  72D1             
0370+  72D1             
0370+  72D1             
0370+  72D1~            		endif
0370+  72D1~            		endif
0370+  72D1             
0370+  72D1~            		endif
0370+  72D1~            		endif
0370+  72D1             
0370+  72A6             
0370+  72A6 2A          
0370+  72A7             
0370+  72A7             
0370+  72A7~            		endif
0370+  72A7~            		endif
0370+  72A7~            		endif
0370+  72A7             
0370+  72D1             
0370+  72D1~            		endif
0370+  72D1~            		endif
0370+  72D1             
0371+  72D1             	endif
0371+  72D1             
0371+  72D1             
0371+  72D1             
0371+  72D1             
0371+  72D1             
0371+  72D1~            	endif
0371+  72D1~            	endif
0371+  72D1             
0371+  72D1~            	endif
0371+  72D1~            	endif
0371+  72D1             
0371+  72A2             
0371+  72A2 2E          
0371+  72A3             
0371+  72A3             
0371+  72A3~            	endif
0371+  72A3~            	endif
0371+  72A3~            	endif
0371+  72A3             
0371+  72D1             
0371+  72D1~            	endif
0371+  72D1~            	endif
0371+  72D1             
0372+  72D1             	
0373+  72D1 86 0F       	ldaA	00001111b ; player up lights
0374+  72D3 95 A7       	bitA	>flc(8)	; check if any player is flashing
0375+  72D5             	ifne ; any flashing -> playfield invalid
0375+  72D5             
0375+  72D5 27 FE       
0376+  72D7             swOuthole_save:
0377+  72D7 86 EF       		lampOff(5,8) ; tilt
0377+  72D9 94 0F       
0377+  72DB 97 0F       
0378+  72DD             		
0379+  72DD B6 22 03    		enablePf
0379+  72E0 8A 38       
0379+  72E2 B7 22 03    
0380+  72E5 C6 02       		fireSolenoid(OUTHOLE)
0380+  72E7 F7 01 44    
0381+  72EA             	else ; none flashing -> playfield valid -> end ball			
0381+  72EA             
0381+  72EA             
0381+  72EA             
0381+  72EA             
0381+  72D6             
0381+  72D6             
0381+  72D6             
0381+  72D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  72D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  72D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  72D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  72D6             
0381+  72D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  72D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  72D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  72D6~            	else ; none flashing -> playfield valid -> end ball			
0381+  72D6             
0381+  72D6             
0381+  72D6 15          
0381+  72EA             
0381+  72EA 20 FE       
0381+  72EC             
0381+  72EC             
0381+  72EC             
0381+  72EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  72EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  72EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  72EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  72EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  72EC             
0381+  72EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  72EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  72EC             
0381+  72EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  72EC~            	else ; none flashing -> playfield valid -> end ball			
0381+  72EC             
0382+  72EC             swOuthole_bonusLoop:
0383+  72EC BD 7E 06    		score1000()
0384+  72EF 96 09       		ldaA	>lc(2) ; double bonus
0385+  72F1 85 04       		bitA	lr(3)
0386+  72F3             		ifne 
0386+  72F3             
0386+  72F3 27 FE       
0387+  72F5 86 0C       			delay(100)
0387+  72F7 BD 7D 6B    
0388+  72FA BD 7E 06    			score1000()
0389+  72FD             		endif
0389+  72FD             
0389+  72FD             
0389+  72FD             
0389+  72FD             
0389+  72FD             
0389+  72FD~            		endif
0389+  72FD~            		endif
0389+  72FD             
0389+  72FD~            		endif
0389+  72FD~            		endif
0389+  72FD             
0389+  72F4             
0389+  72F4 08          
0389+  72F5             
0389+  72F5             
0389+  72F5~            		endif
0389+  72F5~            		endif
0389+  72F5~            		endif
0389+  72F5             
0389+  72FD             
0389+  72FD~            		endif
0389+  72FD~            		endif
0389+  72FD             
0390+  72FD 7A 00 B0    		dec	p_Bonus
0391+  7300 BD 70 C3    		jsr	bonusLights
0392+  7303 86 19       		delay(200)
0392+  7305 BD 7D 6B    
0393+  7308 7D 00 B0    		tst	>p_Bonus
0394+  730B 26 DF       		bne	swOuthole_bonusLoop
0395+  730D             	
0396+  730D 86 0F       		ldaA	00001111b ; player up lights
0397+  730F 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0398+  7311 D6 0A       		ldaB	>lc(3) ; check shoot again light
0399+  7313 C5 01       		bitB	lr(1)
0400+  7315             		ifeq ; shoot again not lit
0400+  7315             
0400+  7315 26 FE       
0401+  7317             			; store player's data
0402+  7317 DE 12       			ldX	>curPlayer
0403+  7319 D6 0B       			ldaB	>lc(4)
0404+  731B E7 B1       			staB	p_Ejects, X
0405+  731D D6 0A       			ldaB	>lc(3)
0406+  731F C4 02       			andB	lr(2)
0407+  7321 DA 09       			oraB	>lc(2)
0408+  7323 E7 B6       			staB	p_LampCol2, X
0409+  7325             			
0410+  7325             		
0411+  7325             			; go to next player
0412+  7325 48          			aslA
0413+  7326 7C 00 13    			inc	curPlayer + 1
0414+  7329 95 0E       			bitA	>lc(7)	; is player count < player #
0415+  732B             			ifne ; last player
0415+  732B             
0415+  732B 27 FE       
0416+  732D 86 01       				ldaA	00000001b; ; back to player 1
0417+  732F C6 00       				ldaB	0
0418+  7331 D7 13       				staB	curPlayer + 1
0419+  7333             				
0420+  7333             				; increase ball count
0421+  7333 D6 77       				ldaB	>ballCount
0422+  7335 CB 10       				addB	$10
0423+  7337 C1 40       				cmpB	$40
0424+  7339             				ifeq ; game over
0424+  7339             
0424+  7339 26 FE       
0425+  733B 86 20       					lampOn(6,8)
0425+  733D 9A 0F       
0425+  733F 97 0F       
0426+  7341 B6 22 03    					disablePf
0426+  7344 84 F7       
0426+  7346 B7 22 03    
0427+  7349             					done(1)
0427+  7349~            					done(1)
0427+  7349~            					done(1)
0427+  7349~            					done(1)
0427+  7349~            					done(1)
0427+  7349             
0427+  7349 7E 79 CB    
0428+  734C             				else
0428+  734C             
0428+  734C             
0428+  734C             
0428+  734C             
0428+  733A             
0428+  733A             
0428+  733A             
0428+  733A~            				else
0428+  733A~            				else
0428+  733A~            				else
0428+  733A~            				else
0428+  733A             
0428+  733A~            				else
0428+  733A~            				else
0428+  733A~            				else
0428+  733A~            				else
0428+  733A             
0428+  733A             
0428+  733A 13          
0428+  734C             
0428+  734C 20 FE       
0428+  734E             
0428+  734E             
0428+  734E             
0428+  734E~            				else
0428+  734E~            				else
0428+  734E~            				else
0428+  734E~            				else
0428+  734E~            				else
0428+  734E             
0428+  734E~            				else
0428+  734E~            				else
0428+  734E             
0428+  734E~            				else
0428+  734E~            				else
0428+  734E             
0429+  734E D7 77       					staB	ballCount
0430+  7350             				endif		
0430+  7350             
0430+  7350             
0430+  7350             
0430+  7350             
0430+  7350             
0430+  7350~            				endif		
0430+  7350~            				endif		
0430+  7350             
0430+  7350~            				endif		
0430+  7350~            				endif		
0430+  7350             
0430+  734D             
0430+  734D 02          
0430+  734E             
0430+  734E             
0430+  734E~            				endif		
0430+  734E~            				endif		
0430+  734E~            				endif		
0430+  734E             
0430+  7350             
0430+  7350~            				endif		
0430+  7350~            				endif		
0430+  7350             
0431+  7350             			endif
0431+  7350             
0431+  7350             
0431+  7350             
0431+  7350             
0431+  7350             
0431+  7350~            			endif
0431+  7350~            			endif
0431+  7350             
0431+  7350~            			endif
0431+  7350~            			endif
0431+  7350             
0431+  732C             
0431+  732C 23          
0431+  732D             
0431+  732D             
0431+  732D~            			endif
0431+  732D~            			endif
0431+  732D~            			endif
0431+  732D             
0431+  7350             
0431+  7350~            			endif
0431+  7350~            			endif
0431+  7350             
0432+  7350             			
0433+  7350 97 0F       			staA	lc(8)
0434+  7352             		endif
0434+  7352             
0434+  7352             
0434+  7352             
0434+  7352             
0434+  7352             
0434+  7352~            		endif
0434+  7352~            		endif
0434+  7352             
0434+  7352~            		endif
0434+  7352~            		endif
0434+  7352             
0434+  7316             
0434+  7316 3B          
0434+  7317             
0434+  7317             
0434+  7317~            		endif
0434+  7317~            		endif
0434+  7317~            		endif
0434+  7317             
0434+  7352             
0434+  7352~            		endif
0434+  7352~            		endif
0434+  7352             
0435+  7352             		
0436+  7352 BD 70 F2    		jsr	startBall
0437+  7355             	endif	
0437+  7355             
0437+  7355             
0437+  7355             
0437+  7355             
0437+  7355             
0437+  7355~            	endif	
0437+  7355~            	endif	
0437+  7355             
0437+  7355~            	endif	
0437+  7355~            	endif	
0437+  7355             
0437+  72EB             
0437+  72EB 69          
0437+  72EC             
0437+  72EC             
0437+  72EC~            	endif	
0437+  72EC~            	endif	
0437+  72EC~            	endif	
0437+  72EC             
0437+  7355             
0437+  7355~            	endif	
0437+  7355~            	endif	
0437+  7355             
0438+  7355             	
0439+  7355 7F 00 BF    	clr 	bonusTimer
0440+  7358             	
0441+  7358             	done(0)
0441+  7358             
0441+  7358 86 02       
0441+  735A BA 01 6B    
0441+  735D B7 01 6B    
0441+  7360             
0441+  7360 7E 79 CB    
0442+  7363             	
0443+  7363             swLeftEject:
0444+  7363 96 0F       	ldaA	>lc(8)
0445+  7365 85 20       	bitA	lr(6)
0446+  7367             	ifne ; not in game
0446+  7367             
0446+  7367 27 FE       
0447+  7369 C6 03       		fireSolenoid(LEFT_EJECT)
0447+  736B F7 01 43    
0448+  736E             		done(0)
0448+  736E             
0448+  736E 86 02       
0448+  7370 BA 01 6B    
0448+  7373 B7 01 6B    
0448+  7376             
0448+  7376 7E 79 CB    
0449+  7379             	endif
0449+  7379             
0449+  7379             
0449+  7379             
0449+  7379             
0449+  7379             
0449+  7379~            	endif
0449+  7379~            	endif
0449+  7379             
0449+  7379~            	endif
0449+  7379~            	endif
0449+  7379             
0449+  7368             
0449+  7368 10          
0449+  7369             
0449+  7369             
0449+  7369~            	endif
0449+  7369~            	endif
0449+  7369~            	endif
0449+  7369             
0449+  7379             
0449+  7379~            	endif
0449+  7379~            	endif
0449+  7379             
0450+  7379             		
0451+  7379 BD 7E 16    	advBonus()
0452+  737C 86 04       	ldaA	lr(3) ; extra ball
0453+  737E 95 0A       	bitA	>lc(3)
0454+  7380             	ifne
0454+  7380             
0454+  7380 27 FE       
0455+  7382 C6 06       		fireSolenoid(KNOCKER)
0455+  7384 F7 01 4D    
0456+  7387 86 01       		lampOn(1,3) ; shoot again
0456+  7389 9A 0A       
0456+  738B 97 0A       
0457+  738D 86 40       		lampOn(7,8)
0457+  738F 9A 0F       
0457+  7391 97 0F       
0458+  7393 86 FB       		lampOff(3,3) ; extra ball
0458+  7395 94 0A       
0458+  7397 97 0A       
0459+  7399 86 3E       		delay(500)
0459+  739B BD 7D 6B    
0460+  739E             	else
0460+  739E             
0460+  739E             
0460+  739E             
0460+  739E             
0460+  7381             
0460+  7381             
0460+  7381             
0460+  7381~            	else
0460+  7381~            	else
0460+  7381~            	else
0460+  7381~            	else
0460+  7381             
0460+  7381~            	else
0460+  7381~            	else
0460+  7381~            	else
0460+  7381~            	else
0460+  7381             
0460+  7381             
0460+  7381 1E          
0460+  739E             
0460+  739E 20 FE       
0460+  73A0             
0460+  73A0             
0460+  73A0             
0460+  73A0~            	else
0460+  73A0~            	else
0460+  73A0~            	else
0460+  73A0~            	else
0460+  73A0~            	else
0460+  73A0             
0460+  73A0~            	else
0460+  73A0~            	else
0460+  73A0             
0460+  73A0~            	else
0460+  73A0~            	else
0460+  73A0             
0461+  73A0 BD 77 78    		jsr	addCollect
0462+  73A3             		score500()
0462+  73A3 BD 7D F7    
0462+  73A6 C6 02       
0462+  73A8 F7 01 49    
0462+  73AB 86 0E       
0462+  73AD BD 7D 6B    
0462+  73B0 BD 7D F7    
0462+  73B3 C6 02       
0462+  73B5 F7 01 49    
0462+  73B8 86 0E       
0462+  73BA BD 7D 6B    
0462+  73BD BD 7D F7    
0462+  73C0 C6 02       
0462+  73C2 F7 01 49    
0462+  73C5 86 0E       
0462+  73C7 BD 7D 6B    
0462+  73CA BD 7D F7    
0462+  73CD C6 02       
0462+  73CF F7 01 49    
0462+  73D2 86 0E       
0462+  73D4 BD 7D 6B    
0462+  73D7 BD 7D F7    
0462+  73DA C6 02       
0462+  73DC F7 01 49    
0462+  73DF 86 0E       
0462+  73E1 BD 7D 6B    
0463+  73E4             	endif
0463+  73E4             
0463+  73E4             
0463+  73E4             
0463+  73E4             
0463+  73E4             
0463+  73E4~            	endif
0463+  73E4~            	endif
0463+  73E4             
0463+  73E4~            	endif
0463+  73E4~            	endif
0463+  73E4             
0463+  739F             
0463+  739F 44          
0463+  73A0             
0463+  73A0             
0463+  73A0~            	endif
0463+  73A0~            	endif
0463+  73A0~            	endif
0463+  73A0             
0463+  73E4             
0463+  73E4~            	endif
0463+  73E4~            	endif
0463+  73E4             
0464+  73E4 C6 03       	fireSolenoid(LEFT_EJECT)
0464+  73E6 F7 01 43    
0465+  73E9             	
0466+  73E9 86 32       	fork(400)
0466+  73EB BD 7D 80    
0467+  73EE             	done(1)
0467+  73EE~            	done(1)
0467+  73EE~            	done(1)
0467+  73EE~            	done(1)
0467+  73EE~            	done(1)
0467+  73EE             
0467+  73EE 7E 79 CB    
0468+  73F1             	beginFork()
0469+  73F1 86 C7       	ldaA	11000111b
0470+  73F3 94 A1       	andA	>flc(2)
0471+  73F5 97 A1       	staA	flc(2)
0472+  73F7 DE 2C       	endFork()
0472+  73F9 7E 79 49    
0473+  73FC             	
0474+  73FC             swTopEject:
0475+  73FC BD 7E 16    	advBonus()
0476+  73FF D6 0B       	ldaB	>lc(4)
0477+  7401 57          	asrB
0478+  7402             	ifeq ; 1k
0478+  7402             
0478+  7402 26 FE       
0479+  7404 BD 7E 06    		score1000()
0480+  7407 86 19       		delay(200)
0480+  7409 BD 7D 6B    
0481+  740C 7E 74 D1    		jmp	swTopEject_scored
0482+  740F             	endif
0482+  740F             
0482+  740F             
0482+  740F             
0482+  740F             
0482+  740F             
0482+  740F~            	endif
0482+  740F~            	endif
0482+  740F             
0482+  740F~            	endif
0482+  740F~            	endif
0482+  740F             
0482+  7403             
0482+  7403 0B          
0482+  7404             
0482+  7404             
0482+  7404~            	endif
0482+  7404~            	endif
0482+  7404~            	endif
0482+  7404             
0482+  740F             
0482+  740F~            	endif
0482+  740F~            	endif
0482+  740F             
0483+  740F 57          	asrB
0484+  7410             	ifeq  ; captive
0484+  7410             
0484+  7410 26 FE       
0485+  7412 86 40       		ldaA	lr(7)
0486+  7414 95 09       		bitA	>lc(2) ; captive ball
0487+  7416             		ifeq	; not lit
0487+  7416             
0487+  7416 26 FE       
0488+  7418 86 40       			lampOn(7,2)
0488+  741A 9A 09       
0488+  741C 97 09       
0489+  741E 86 40       			flashLamp(7,2)
0489+  7420 9A A1       
0489+  7422 97 A1       
0490+  7424             		else
0490+  7424             
0490+  7424             
0490+  7424             
0490+  7424             
0490+  7417             
0490+  7417             
0490+  7417             
0490+  7417~            		else
0490+  7417~            		else
0490+  7417~            		else
0490+  7417~            		else
0490+  7417             
0490+  7417~            		else
0490+  7417~            		else
0490+  7417~            		else
0490+  7417~            		else
0490+  7417             
0490+  7417             
0490+  7417 0E          
0490+  7424             
0490+  7424 20 FE       
0490+  7426             
0490+  7426             
0490+  7426             
0490+  7426~            		else
0490+  7426~            		else
0490+  7426~            		else
0490+  7426~            		else
0490+  7426~            		else
0490+  7426             
0490+  7426~            		else
0490+  7426~            		else
0490+  7426             
0490+  7426~            		else
0490+  7426~            		else
0490+  7426             
0491+  7426 86 BF       			lampOff(7,2)
0491+  7428 94 09       
0491+  742A 97 09       
0492+  742C             		endif
0492+  742C             
0492+  742C             
0492+  742C             
0492+  742C             
0492+  742C             
0492+  742C~            		endif
0492+  742C~            		endif
0492+  742C             
0492+  742C~            		endif
0492+  742C~            		endif
0492+  742C             
0492+  7425             
0492+  7425 06          
0492+  7426             
0492+  7426             
0492+  7426~            		endif
0492+  7426~            		endif
0492+  7426~            		endif
0492+  7426             
0492+  742C             
0492+  742C~            		endif
0492+  742C~            		endif
0492+  742C             
0493+  742C             	score500()
0493+  742C BD 7D F7    
0493+  742F C6 02       
0493+  7431 F7 01 49    
0493+  7434 86 0E       
0493+  7436 BD 7D 6B    
0493+  7439 BD 7D F7    
0493+  743C C6 02       
0493+  743E F7 01 49    
0493+  7441 86 0E       
0493+  7443 BD 7D 6B    
0493+  7446 BD 7D F7    
0493+  7449 C6 02       
0493+  744B F7 01 49    
0493+  744E 86 0E       
0493+  7450 BD 7D 6B    
0493+  7453 BD 7D F7    
0493+  7456 C6 02       
0493+  7458 F7 01 49    
0493+  745B 86 0E       
0493+  745D BD 7D 6B    
0493+  7460 BD 7D F7    
0493+  7463 C6 02       
0493+  7465 F7 01 49    
0493+  7468 86 0E       
0493+  746A BD 7D 6B    
0494+  746D 7E 74 D1    		jmp	swTopEject_scored
0495+  7470             	endif
0495+  7470             
0495+  7470             
0495+  7470             
0495+  7470             
0495+  7470             
0495+  7470~            	endif
0495+  7470~            	endif
0495+  7470             
0495+  7470~            	endif
0495+  7470~            	endif
0495+  7470             
0495+  7411             
0495+  7411 5E          
0495+  7412             
0495+  7412             
0495+  7412~            	endif
0495+  7412~            	endif
0495+  7412~            	endif
0495+  7412             
0495+  7470             
0495+  7470~            	endif
0495+  7470~            	endif
0495+  7470             
0496+  7470 57          	asrB
0497+  7471             	ifne	
0497+  7471             
0497+  7471 27 FE       
0498+  7473 57          		asrB
0499+  7474             		ifeq ; double
0499+  7474             
0499+  7474 26 FE       
0500+  7476 86 04       			ldaA	lr(3)
0501+  7478 95 09       			bitA	>lc(2) ; double bonus
0502+  747A             			ifeq	; not lit
0502+  747A             
0502+  747A 26 FE       
0503+  747C 86 04       				lampOn(3,2)
0503+  747E 9A 09       
0503+  7480 97 09       
0504+  7482 86 04       				flashLamp(3,2)
0504+  7484 9A A1       
0504+  7486 97 A1       
0505+  7488             			else
0505+  7488             
0505+  7488             
0505+  7488             
0505+  7488             
0505+  747B             
0505+  747B             
0505+  747B             
0505+  747B~            			else
0505+  747B~            			else
0505+  747B~            			else
0505+  747B~            			else
0505+  747B             
0505+  747B~            			else
0505+  747B~            			else
0505+  747B~            			else
0505+  747B~            			else
0505+  747B             
0505+  747B             
0505+  747B 0E          
0505+  7488             
0505+  7488 20 FE       
0505+  748A             
0505+  748A             
0505+  748A             
0505+  748A~            			else
0505+  748A~            			else
0505+  748A~            			else
0505+  748A~            			else
0505+  748A~            			else
0505+  748A             
0505+  748A~            			else
0505+  748A~            			else
0505+  748A             
0505+  748A~            			else
0505+  748A~            			else
0505+  748A             
0506+  748A 86 FB       				lampOff(3,2)
0506+  748C 94 09       
0506+  748E 97 09       
0507+  7490             			endif
0507+  7490             
0507+  7490             
0507+  7490             
0507+  7490             
0507+  7490             
0507+  7490~            			endif
0507+  7490~            			endif
0507+  7490             
0507+  7490~            			endif
0507+  7490~            			endif
0507+  7490             
0507+  7489             
0507+  7489 06          
0507+  748A             
0507+  748A             
0507+  748A~            			endif
0507+  748A~            			endif
0507+  748A~            			endif
0507+  748A             
0507+  7490             
0507+  7490~            			endif
0507+  7490~            			endif
0507+  7490             
0508+  7490             		endif
0508+  7490             
0508+  7490             
0508+  7490             
0508+  7490             
0508+  7490             
0508+  7490~            		endif
0508+  7490~            		endif
0508+  7490             
0508+  7490~            		endif
0508+  7490~            		endif
0508+  7490             
0508+  7475             
0508+  7475 1A          
0508+  7476             
0508+  7476             
0508+  7476~            		endif
0508+  7476~            		endif
0508+  7476~            		endif
0508+  7476             
0508+  7490             
0508+  7490~            		endif
0508+  7490~            		endif
0508+  7490             
0509+  7490             	endif
0509+  7490             
0509+  7490             
0509+  7490             
0509+  7490             
0509+  7490             
0509+  7490~            	endif
0509+  7490~            	endif
0509+  7490             
0509+  7490~            	endif
0509+  7490~            	endif
0509+  7490             
0509+  7472             
0509+  7472 1D          
0509+  7473             
0509+  7473             
0509+  7473~            	endif
0509+  7473~            	endif
0509+  7473~            	endif
0509+  7473             
0509+  7490             
0509+  7490~            	endif
0509+  7490~            	endif
0509+  7490             
0510+  7490             	score500()
0510+  7490 BD 7D F7    
0510+  7493 C6 02       
0510+  7495 F7 01 49    
0510+  7498 86 0E       
0510+  749A BD 7D 6B    
0510+  749D BD 7D F7    
0510+  74A0 C6 02       
0510+  74A2 F7 01 49    
0510+  74A5 86 0E       
0510+  74A7 BD 7D 6B    
0510+  74AA BD 7D F7    
0510+  74AD C6 02       
0510+  74AF F7 01 49    
0510+  74B2 86 0E       
0510+  74B4 BD 7D 6B    
0510+  74B7 BD 7D F7    
0510+  74BA C6 02       
0510+  74BC F7 01 49    
0510+  74BF 86 0E       
0510+  74C1 BD 7D 6B    
0510+  74C4 BD 7D F7    
0510+  74C7 C6 02       
0510+  74C9 F7 01 49    
0510+  74CC 86 0E       
0510+  74CE BD 7D 6B    
0511+  74D1             swTopEject_scored:
0512+  74D1 86 FB       	flashOff(3,2)
0512+  74D3 94 A1       
0512+  74D5 97 A1       
0513+  74D7 86 BF       	flashOff(7,2)
0513+  74D9 94 A1       
0513+  74DB 97 A1       
0514+  74DD C6 03       	fireSolenoid(TOP_EJECT)
0514+  74DF F7 01 40    
0515+  74E2             	done(1)
0515+  74E2~            	done(1)
0515+  74E2~            	done(1)
0515+  74E2~            	done(1)
0515+  74E2~            	done(1)
0515+  74E2             
0515+  74E2 7E 79 CB    
0516+  74E5             	
0517+  74E5             swHotTip:
0518+  74E5 7D 00 A9    	tst	>dropResetTimer
0519+  74E8             	ifne
0519+  74E8             
0519+  74E8 27 FE       
0520+  74EA             		done(0)
0520+  74EA             
0520+  74EA 86 02       
0520+  74EC BA 01 6B    
0520+  74EF B7 01 6B    
0520+  74F2             
0520+  74F2 7E 79 CB    
0521+  74F5             	endif
0521+  74F5             
0521+  74F5             
0521+  74F5             
0521+  74F5             
0521+  74F5             
0521+  74F5~            	endif
0521+  74F5~            	endif
0521+  74F5             
0521+  74F5~            	endif
0521+  74F5~            	endif
0521+  74F5             
0521+  74E9             
0521+  74E9 0B          
0521+  74EA             
0521+  74EA             
0521+  74EA~            	endif
0521+  74EA~            	endif
0521+  74EA~            	endif
0521+  74EA             
0521+  74F5             
0521+  74F5~            	endif
0521+  74F5~            	endif
0521+  74F5             
0522+  74F5             	
0523+  74F5 BD 77 78    	jsr	addCollect
0524+  74F8 86 00       	ldaA	0
0525+  74FA 97 B5       	staA	p_DropsDown
0526+  74FC 97 AA       	staA	dropsDown
0527+  74FE 86 41       	ldaA	65
0528+  7500 97 A9       	staA	dropResetTimer
0529+  7502 86 12       	delay(150)
0529+  7504 BD 7D 6B    
0530+  7507 C6 0C       	fireSolenoid(DROP_HOT)
0530+  7509 F7 01 42    
0531+  750C 86 12       	delay(150)
0531+  750E BD 7D 6B    
0532+  7511 C6 0C       	fireSolenoid(DROP_TIP)
0532+  7513 F7 01 41    
0533+  7516 86 F7       	lampOff(4,3) ; spinner
0533+  7518 94 0A       
0533+  751A 97 0A       
0534+  751C             	
0535+  751C 86 70       	fork(900)
0535+  751E BD 7D 80    
0536+  7521             	done(1)
0536+  7521~            	done(1)
0536+  7521~            	done(1)
0536+  7521~            	done(1)
0536+  7521~            	done(1)
0536+  7521             
0536+  7521 7E 79 CB    
0537+  7524             	beginFork()
0538+  7524 86 C7       	ldaA	11000111b
0539+  7526 94 A1       	andA	>flc(2)
0540+  7528 97 A1       	staA	flc(2)
0541+  752A DE 2C       	endFork()
0541+  752C 7E 79 49    
0542+  752F             	
0543+  752F             swLeftOutlane:
0544+  752F 86 02       	ldaA	lr(2) ; left special
0545+  7531 95 0A       	bitA	>lc(3)
0546+  7533             	ifne
0546+  7533             
0546+  7533 27 FE       
0547+  7535 86 01       		lampOn(1,3) ; shoot again
0547+  7537 9A 0A       
0547+  7539 97 0A       
0548+  753B 86 01       		flashLamp(1,3)
0548+  753D 9A A2       
0548+  753F 97 A2       
0549+  7541 C6 0C       		fireSolenoid(BUZZER)
0549+  7543 F7 01 4E    
0550+  7546 86 02       		flashLamp(2,3)
0550+  7548 9A A2       
0550+  754A 97 A2       
0551+  754C             	endif
0551+  754C             
0551+  754C             
0551+  754C             
0551+  754C             
0551+  754C             
0551+  754C~            	endif
0551+  754C~            	endif
0551+  754C             
0551+  754C~            	endif
0551+  754C~            	endif
0551+  754C             
0551+  7534             
0551+  7534 17          
0551+  7535             
0551+  7535             
0551+  7535~            	endif
0551+  7535~            	endif
0551+  7535~            	endif
0551+  7535             
0551+  754C             
0551+  754C~            	endif
0551+  754C~            	endif
0551+  754C             
0552+  754C BD 7E 16    	advBonus()
0553+  754F BD 7E 06    	score1000()
0554+  7552             	done(1)
0554+  7552~            	done(1)
0554+  7552~            	done(1)
0554+  7552~            	done(1)
0554+  7552~            	done(1)
0554+  7552             
0554+  7552 7E 79 CB    
0555+  7555             	
0556+  7555             swRightOutlane:
0557+  7555 86 80       	ldaA	lr(8) ; right special
0558+  7557 95 09       	bitA	>lc(2)
0559+  7559             	ifne
0559+  7559             
0559+  7559 27 FE       
0560+  755B 86 01       		lampOn(1,3) ; shoot again
0560+  755D 9A 0A       
0560+  755F 97 0A       
0561+  7561 86 01       		flashLamp(1,3)
0561+  7563 9A A2       
0561+  7565 97 A2       
0562+  7567 C6 0C       		fireSolenoid(BUZZER)
0562+  7569 F7 01 4E    
0563+  756C 86 80       		flashLamp(8,2)
0563+  756E 9A A1       
0563+  7570 97 A1       
0564+  7572             	endif
0564+  7572             
0564+  7572             
0564+  7572             
0564+  7572             
0564+  7572             
0564+  7572~            	endif
0564+  7572~            	endif
0564+  7572             
0564+  7572~            	endif
0564+  7572~            	endif
0564+  7572             
0564+  755A             
0564+  755A 17          
0564+  755B             
0564+  755B             
0564+  755B~            	endif
0564+  755B~            	endif
0564+  755B~            	endif
0564+  755B             
0564+  7572             
0564+  7572~            	endif
0564+  7572~            	endif
0564+  7572             
0565+  7572 BD 7E 16    	advBonus()
0566+  7575 BD 7E 06    	score1000()
0567+  7578             	done(1)
0567+  7578~            	done(1)
0567+  7578~            	done(1)
0567+  7578~            	done(1)
0567+  7578~            	done(1)
0567+  7578             
0567+  7578 7E 79 CB    
0568+  757B             	
0569+  757B             swLeftInlane:
0570+  757B BD 7E 16    	advBonus()
0571+  757E BD 7E 06    	score1000()
0572+  7581             	done(1)
0572+  7581~            	done(1)
0572+  7581~            	done(1)
0572+  7581~            	done(1)
0572+  7581~            	done(1)
0572+  7581             
0572+  7581 7E 79 CB    
0573+  7584             swRightInlane:
0574+  7584 BD 7E 16    	advBonus()
0575+  7587 BD 7E 06    	score1000()
0576+  758A 86 FF       	ldaA	255
0577+  758C 97 BA       	staA	spinnerTimer
0578+  758E 86 08       	flashLamp(4,3) ; spinner
0578+  7590 9A A2       
0578+  7592 97 A2       
0579+  7594 86 08       	lampOn(4,3)
0579+  7596 9A 0A       
0579+  7598 97 0A       
0580+  759A             	done(1)
0580+  759A~            	done(1)
0580+  759A~            	done(1)
0580+  759A~            	done(1)
0580+  759A~            	done(1)
0580+  759A             
0580+  759A 7E 79 CB    
0581+  759D             sw10pt:
0582+  759D BD 7D E9    	score10()
0583+  75A0 77 00 0B    	asr	lc(4)
0584+  75A3             	ifeq ; shifted off the edge
0584+  75A3             
0584+  75A3 26 FE       
0585+  75A5 86 10       		ldaA	00010000b
0586+  75A7 97 0B       		staA	lc(4)
0587+  75A9             	endif
0587+  75A9             
0587+  75A9             
0587+  75A9             
0587+  75A9             
0587+  75A9             
0587+  75A9~            	endif
0587+  75A9~            	endif
0587+  75A9             
0587+  75A9~            	endif
0587+  75A9~            	endif
0587+  75A9             
0587+  75A4             
0587+  75A4 04          
0587+  75A5             
0587+  75A5             
0587+  75A5~            	endif
0587+  75A5~            	endif
0587+  75A5~            	endif
0587+  75A5             
0587+  75A9             
0587+  75A9~            	endif
0587+  75A9~            	endif
0587+  75A9             
0588+  75A9             	done(1)
0588+  75A9~            	done(1)
0588+  75A9~            	done(1)
0588+  75A9~            	done(1)
0588+  75A9~            	done(1)
0588+  75A9             
0588+  75A9 7E 79 CB    
0589+  75AC             sw100pt:
0590+  75AC BD 7D F7    	score100()
0591+  75AF             	done(1)
0591+  75AF~            	done(1)
0591+  75AF~            	done(1)
0591+  75AF~            	done(1)
0591+  75AF~            	done(1)
0591+  75AF             
0591+  75AF 7E 79 CB    
0592+  75B2             sw500pt:
0593+  75B2 BD 77 4C    	jsr	alternate
0594+  75B5             	score500()
0594+  75B5 BD 7D F7    
0594+  75B8 C6 02       
0594+  75BA F7 01 49    
0594+  75BD 86 0E       
0594+  75BF BD 7D 6B    
0594+  75C2 BD 7D F7    
0594+  75C5 C6 02       
0594+  75C7 F7 01 49    
0594+  75CA 86 0E       
0594+  75CC BD 7D 6B    
0594+  75CF BD 7D F7    
0594+  75D2 C6 02       
0594+  75D4 F7 01 49    
0594+  75D7 86 0E       
0594+  75D9 BD 7D 6B    
0594+  75DC BD 7D F7    
0594+  75DF C6 02       
0594+  75E1 F7 01 49    
0594+  75E4 86 0E       
0594+  75E6 BD 7D 6B    
0594+  75E9 BD 7D F7    
0594+  75EC C6 02       
0594+  75EE F7 01 49    
0594+  75F1 86 0E       
0594+  75F3 BD 7D 6B    
0595+  75F6             	done(1)
0595+  75F6~            	done(1)
0595+  75F6~            	done(1)
0595+  75F6~            	done(1)
0595+  75F6~            	done(1)
0595+  75F6             
0595+  75F6 7E 79 CB    
0596+  75F9             swPop:
0597+  75F9 BD 77 4C    	jsr	alternate
0598+  75FC BD 7D F7    	score100()
0599+  75FF             	done(1)
0599+  75FF~            	done(1)
0599+  75FF~            	done(1)
0599+  75FF~            	done(1)
0599+  75FF~            	done(1)
0599+  75FF             
0599+  75FF 7E 79 CB    
0600+  7602             swDropTip:
0601+  7602 86 08       	ldaA	1<<3
0602+  7604 7E 76 20    	jmp	swDrop
0603+  7607             swDropHot:
0604+  7607 86 01       	ldaA	1<<0
0605+  7609 7E 76 20    	jmp	swDrop
0606+  760C             swDroptIp:
0607+  760C 86 10       	ldaA	1<<4
0608+  760E 7E 76 20    	jmp	swDrop
0609+  7611             swDrophOt:
0610+  7611 86 02       	ldaA	1<<1
0611+  7613 7E 76 20    	jmp	swDrop
0612+  7616             swDroptiP:
0613+  7616 86 20       	ldaA	1<<5
0614+  7618 7E 76 20    	jmp	swDrop
0615+  761B             swDrophoT:
0616+  761B 86 04       	ldaA	1<<2
0617+  761D 7E 76 20    	jmp	swDrop
0618+  7620             swDrop:
0619+  7620 7D 00 A9    	tst	>dropResetTimer
0620+  7623             	ifeq
0620+  7623             
0620+  7623 26 FE       
0621+  7625 95 AA       		bitA	>dropsDown
0622+  7627             		ifne
0622+  7627             
0622+  7627 27 FE       
0623+  7629             			done(0)
0623+  7629             
0623+  7629 86 02       
0623+  762B BA 01 6B    
0623+  762E B7 01 6B    
0623+  7631             
0623+  7631 7E 79 CB    
0624+  7634             		endif
0624+  7634             
0624+  7634             
0624+  7634             
0624+  7634             
0624+  7634             
0624+  7634~            		endif
0624+  7634~            		endif
0624+  7634             
0624+  7634~            		endif
0624+  7634~            		endif
0624+  7634             
0624+  7628             
0624+  7628 0B          
0624+  7629             
0624+  7629             
0624+  7629~            		endif
0624+  7629~            		endif
0624+  7629~            		endif
0624+  7629             
0624+  7634             
0624+  7634~            		endif
0624+  7634~            		endif
0624+  7634             
0625+  7634 9A AA       		oraA	>dropsDown
0626+  7636             		
0627+  7636 97 AA       		staA	dropsDown
0628+  7638 7C 00 B5    		inc	p_DropsDown
0629+  763B 86 04       		ldaA	4
0630+  763D 91 B5       		cmpA	>p_DropsDown
0631+  763F             		ifgt
0631+  763F             
0631+  763F 23 FE       
0632+  7641 86 F7       			lampOff(4,3) ; spinner
0632+  7643 94 0A       
0632+  7645 97 0A       
0633+  7647             		else
0633+  7647             
0633+  7647             
0633+  7647             
0633+  7647             
0633+  7640             
0633+  7640             
0633+  7640             
0633+  7640~            		else
0633+  7640~            		else
0633+  7640~            		else
0633+  7640~            		else
0633+  7640             
0633+  7640~            		else
0633+  7640~            		else
0633+  7640~            		else
0633+  7640~            		else
0633+  7640             
0633+  7640             
0633+  7640 08          
0633+  7647             
0633+  7647 20 FE       
0633+  7649             
0633+  7649             
0633+  7649             
0633+  7649~            		else
0633+  7649~            		else
0633+  7649~            		else
0633+  7649~            		else
0633+  7649~            		else
0633+  7649             
0633+  7649~            		else
0633+  7649~            		else
0633+  7649             
0633+  7649~            		else
0633+  7649~            		else
0633+  7649             
0634+  7649 86 08       			lampOn(4,3)
0634+  764B 9A 0A       
0634+  764D 97 0A       
0635+  764F             		endif
0635+  764F             
0635+  764F             
0635+  764F             
0635+  764F             
0635+  764F             
0635+  764F~            		endif
0635+  764F~            		endif
0635+  764F             
0635+  764F~            		endif
0635+  764F~            		endif
0635+  764F             
0635+  7648             
0635+  7648 06          
0635+  7649             
0635+  7649             
0635+  7649~            		endif
0635+  7649~            		endif
0635+  7649~            		endif
0635+  7649             
0635+  764F             
0635+  764F~            		endif
0635+  764F~            		endif
0635+  764F             
0636+  764F             		
0637+  764F BD 7D E9    		score10()
0638+  7652 BD 7E 16    		advBonus()
0639+  7655             		done(1)
0639+  7655~            		done(1)
0639+  7655~            		done(1)
0639+  7655~            		done(1)
0639+  7655~            		done(1)
0639+  7655             
0639+  7655 7E 79 CB    
0640+  7658             	else
0640+  7658             
0640+  7658             
0640+  7658             
0640+  7658             
0640+  7624             
0640+  7624             
0640+  7624             
0640+  7624~            	else
0640+  7624~            	else
0640+  7624~            	else
0640+  7624~            	else
0640+  7624             
0640+  7624~            	else
0640+  7624~            	else
0640+  7624~            	else
0640+  7624~            	else
0640+  7624             
0640+  7624             
0640+  7624 35          
0640+  7658             
0640+  7658 20 FE       
0640+  765A             
0640+  765A             
0640+  765A             
0640+  765A~            	else
0640+  765A~            	else
0640+  765A~            	else
0640+  765A~            	else
0640+  765A~            	else
0640+  765A             
0640+  765A~            	else
0640+  765A~            	else
0640+  765A             
0640+  765A~            	else
0640+  765A~            	else
0640+  765A             
0641+  765A             		done(0)
0641+  765A             
0641+  765A 86 02       
0641+  765C BA 01 6B    
0641+  765F B7 01 6B    
0641+  7662             
0641+  7662 7E 79 CB    
0642+  7665             	endif
0642+  7665             
0642+  7665             
0642+  7665             
0642+  7665             
0642+  7665             
0642+  7665~            	endif
0642+  7665~            	endif
0642+  7665             
0642+  7665~            	endif
0642+  7665~            	endif
0642+  7665             
0642+  7659             
0642+  7659 0B          
0642+  765A             
0642+  765A             
0642+  765A~            	endif
0642+  765A~            	endif
0642+  765A~            	endif
0642+  765A             
0642+  7665             
0642+  7665~            	endif
0642+  7665~            	endif
0642+  7665             
0643+  7665             swAdvBonus:
0644+  7665 BD 7E 16    	advBonus()
0645+  7668 BD 7E 06    	score1000()
0646+  766B             	done(1)
0646+  766B~            	done(1)
0646+  766B~            	done(1)
0646+  766B~            	done(1)
0646+  766B~            	done(1)
0646+  766B             
0646+  766B 7E 79 CB    
0647+  766E             swSpinner:
0648+  766E             	;ldaA	>sc(4)
0649+  766E             	;bitA	sr(6)
0650+  766E             	;ifne
0651+  766E             	;	score100()
0652+  766E             	;	ldaA	$E
0653+  766E             	;else
0654+  766E             	;	noValidate
0655+  766E             	;	ldaA	0
0656+  766E             	;endif
0657+  766E             	;staA	solenoid1 + CLICKER - 1
0658+  766E             	
0659+  766E 86 08       	ldaA	lr(4) ; spinner
0660+  7670 95 0A       	bitA	>lc(3)
0661+  7672             	ifne ; spinner on
0661+  7672             
0661+  7672 27 FE       
0662+  7674 7D 00 BA    		tst	>spinnerTimer
0663+  7677             		ifne
0663+  7677             
0663+  7677 27 FE       
0664+  7679 86 20       			ldaA	32
0665+  767B 97 BA       			staA	spinnerTimer
0666+  767D 86 0A       			ldaA	10
0667+  767F 95 02       			bitA	>counter
0668+  7681             			ifeq
0668+  7681             
0668+  7681 26 FE       
0669+  7683 BD 7E 16    				advBonus()
0670+  7686             			endif
0670+  7686             
0670+  7686             
0670+  7686             
0670+  7686             
0670+  7686             
0670+  7686~            			endif
0670+  7686~            			endif
0670+  7686             
0670+  7686~            			endif
0670+  7686~            			endif
0670+  7686             
0670+  7682             
0670+  7682 03          
0670+  7683             
0670+  7683             
0670+  7683~            			endif
0670+  7683~            			endif
0670+  7683~            			endif
0670+  7683             
0670+  7686             
0670+  7686~            			endif
0670+  7686~            			endif
0670+  7686             
0671+  7686             		endif
0671+  7686             
0671+  7686             
0671+  7686             
0671+  7686             
0671+  7686             
0671+  7686~            		endif
0671+  7686~            		endif
0671+  7686             
0671+  7686~            		endif
0671+  7686~            		endif
0671+  7686             
0671+  7678             
0671+  7678 0D          
0671+  7679             
0671+  7679             
0671+  7679~            		endif
0671+  7679~            		endif
0671+  7679~            		endif
0671+  7679             
0671+  7686             
0671+  7686~            		endif
0671+  7686~            		endif
0671+  7686             
0672+  7686 BD 7D F7    		score100()
0673+  7689 C6 01       		fireSolenoid(CLICKER)
0673+  768B F7 01 4C    
0674+  768E             	else
0674+  768E             
0674+  768E             
0674+  768E             
0674+  768E             
0674+  7673             
0674+  7673             
0674+  7673             
0674+  7673~            	else
0674+  7673~            	else
0674+  7673~            	else
0674+  7673~            	else
0674+  7673             
0674+  7673~            	else
0674+  7673~            	else
0674+  7673~            	else
0674+  7673~            	else
0674+  7673             
0674+  7673             
0674+  7673 1C          
0674+  768E             
0674+  768E 20 FE       
0674+  7690             
0674+  7690             
0674+  7690             
0674+  7690~            	else
0674+  7690~            	else
0674+  7690~            	else
0674+  7690~            	else
0674+  7690~            	else
0674+  7690             
0674+  7690~            	else
0674+  7690~            	else
0674+  7690             
0674+  7690~            	else
0674+  7690~            	else
0674+  7690             
0675+  7690 7D 00 BA    		tst	>spinnerTimer
0676+  7693             		ifne
0676+  7693             
0676+  7693 27 FE       
0677+  7695 86 20       			ldaA	32
0678+  7697 97 BA       			staA	spinnerTimer
0679+  7699 BD 7D F7    			score100()
0680+  769C C6 01       			fireSolenoid(CLICKER)
0680+  769E F7 01 4C    
0681+  76A1             		else
0681+  76A1             
0681+  76A1             
0681+  76A1             
0681+  76A1             
0681+  7694             
0681+  7694             
0681+  7694             
0681+  7694~            		else
0681+  7694~            		else
0681+  7694~            		else
0681+  7694~            		else
0681+  7694             
0681+  7694~            		else
0681+  7694~            		else
0681+  7694~            		else
0681+  7694~            		else
0681+  7694             
0681+  7694             
0681+  7694 0E          
0681+  76A1             
0681+  76A1 20 FE       
0681+  76A3             
0681+  76A3             
0681+  76A3             
0681+  76A3~            		else
0681+  76A3~            		else
0681+  76A3~            		else
0681+  76A3~            		else
0681+  76A3~            		else
0681+  76A3             
0681+  76A3~            		else
0681+  76A3~            		else
0681+  76A3             
0681+  76A3~            		else
0681+  76A3~            		else
0681+  76A3             
0682+  76A3 BD 7D E9    			score10()
0683+  76A6             		endif
0683+  76A6             
0683+  76A6             
0683+  76A6             
0683+  76A6             
0683+  76A6             
0683+  76A6~            		endif
0683+  76A6~            		endif
0683+  76A6             
0683+  76A6~            		endif
0683+  76A6~            		endif
0683+  76A6             
0683+  76A2             
0683+  76A2 03          
0683+  76A3             
0683+  76A3             
0683+  76A3~            		endif
0683+  76A3~            		endif
0683+  76A3~            		endif
0683+  76A3             
0683+  76A6             
0683+  76A6~            		endif
0683+  76A6~            		endif
0683+  76A6             
0684+  76A6             	endif
0684+  76A6             
0684+  76A6             
0684+  76A6             
0684+  76A6             
0684+  76A6             
0684+  76A6~            	endif
0684+  76A6~            	endif
0684+  76A6             
0684+  76A6~            	endif
0684+  76A6~            	endif
0684+  76A6             
0684+  768F             
0684+  768F 16          
0684+  7690             
0684+  7690             
0684+  7690~            	endif
0684+  7690~            	endif
0684+  7690~            	endif
0684+  7690             
0684+  76A6             
0684+  76A6~            	endif
0684+  76A6~            	endif
0684+  76A6             
0685+  76A6             	done(1)
0685+  76A6~            	done(1)
0685+  76A6~            	done(1)
0685+  76A6~            	done(1)
0685+  76A6~            	done(1)
0685+  76A6             
0685+  76A6 7E 79 CB    
0686+  76A9             
0687+  76A9             swCaptiveRollover:
0688+  76A9 96 09       	ldaA	>lc(2)
0689+  76AB 85 40       	bitA	lr(7)
0690+  76AD             	ifeq ; light off
0690+  76AD             
0690+  76AD 26 FE       
0691+  76AF BD 7D E9    		score10()
0692+  76B2             	else
0692+  76B2             
0692+  76B2             
0692+  76B2             
0692+  76B2             
0692+  76AE             
0692+  76AE             
0692+  76AE             
0692+  76AE~            	else
0692+  76AE~            	else
0692+  76AE~            	else
0692+  76AE~            	else
0692+  76AE             
0692+  76AE~            	else
0692+  76AE~            	else
0692+  76AE~            	else
0692+  76AE~            	else
0692+  76AE             
0692+  76AE             
0692+  76AE 05          
0692+  76B2             
0692+  76B2 20 FE       
0692+  76B4             
0692+  76B4             
0692+  76B4             
0692+  76B4~            	else
0692+  76B4~            	else
0692+  76B4~            	else
0692+  76B4~            	else
0692+  76B4~            	else
0692+  76B4             
0692+  76B4~            	else
0692+  76B4~            	else
0692+  76B4             
0692+  76B4~            	else
0692+  76B4~            	else
0692+  76B4             
0693+  76B4 BD 7E 06    		score1000()
0694+  76B7 86 0E       		ldaA	14 ; captive rollover switch number
0695+  76B9 91 A8       		cmpA	>lastSwitch
0696+  76BB             		ifne
0696+  76BB             
0696+  76BB 27 FE       
0697+  76BD 86 0F       			ldaA	15 ; captive rollover switch number
0698+  76BF 91 A8       			cmpA	>lastSwitch
0699+  76C1             			ifne
0699+  76C1             
0699+  76C1 27 FE       
0700+  76C3 BD 76 E0    				jsr	captiveAward
0701+  76C6             			endif
0701+  76C6             
0701+  76C6             
0701+  76C6             
0701+  76C6             
0701+  76C6             
0701+  76C6~            			endif
0701+  76C6~            			endif
0701+  76C6             
0701+  76C6~            			endif
0701+  76C6~            			endif
0701+  76C6             
0701+  76C2             
0701+  76C2 03          
0701+  76C3             
0701+  76C3             
0701+  76C3~            			endif
0701+  76C3~            			endif
0701+  76C3~            			endif
0701+  76C3             
0701+  76C6             
0701+  76C6~            			endif
0701+  76C6~            			endif
0701+  76C6             
0702+  76C6             		endif
0702+  76C6             
0702+  76C6             
0702+  76C6             
0702+  76C6             
0702+  76C6             
0702+  76C6~            		endif
0702+  76C6~            		endif
0702+  76C6             
0702+  76C6~            		endif
0702+  76C6~            		endif
0702+  76C6             
0702+  76BC             
0702+  76BC 09          
0702+  76BD             
0702+  76BD             
0702+  76BD~            		endif
0702+  76BD~            		endif
0702+  76BD~            		endif
0702+  76BD             
0702+  76C6             
0702+  76C6~            		endif
0702+  76C6~            		endif
0702+  76C6             
0703+  76C6             	endif
0703+  76C6             
0703+  76C6             
0703+  76C6             
0703+  76C6             
0703+  76C6             
0703+  76C6~            	endif
0703+  76C6~            	endif
0703+  76C6             
0703+  76C6~            	endif
0703+  76C6~            	endif
0703+  76C6             
0703+  76B3             
0703+  76B3 12          
0703+  76B4             
0703+  76B4             
0703+  76B4~            	endif
0703+  76B4~            	endif
0703+  76B4~            	endif
0703+  76B4             
0703+  76C6             
0703+  76C6~            	endif
0703+  76C6~            	endif
0703+  76C6             
0704+  76C6             	done(1)
0704+  76C6~            	done(1)
0704+  76C6~            	done(1)
0704+  76C6~            	done(1)
0704+  76C6~            	done(1)
0704+  76C6             
0704+  76C6 7E 79 CB    
0705+  76C9             
0706+  76C9             swCaptiveTarget:
0707+  76C9 BD 7E 16    	advBonus()
0708+  76CC 96 09       	ldaA	>lc(2)
0709+  76CE 85 40       	bitA	lr(7)
0710+  76D0             	ifeq ; light off
0710+  76D0             
0710+  76D0 26 FE       
0711+  76D2 BD 7D E9    		score10()
0712+  76D5 BD 76 E0    		jsr	captiveAward
0713+  76D8             	else
0713+  76D8             
0713+  76D8             
0713+  76D8             
0713+  76D8             
0713+  76D1             
0713+  76D1             
0713+  76D1             
0713+  76D1~            	else
0713+  76D1~            	else
0713+  76D1~            	else
0713+  76D1~            	else
0713+  76D1             
0713+  76D1~            	else
0713+  76D1~            	else
0713+  76D1~            	else
0713+  76D1~            	else
0713+  76D1             
0713+  76D1             
0713+  76D1 08          
0713+  76D8             
0713+  76D8 20 FE       
0713+  76DA             
0713+  76DA             
0713+  76DA             
0713+  76DA~            	else
0713+  76DA~            	else
0713+  76DA~            	else
0713+  76DA~            	else
0713+  76DA~            	else
0713+  76DA             
0713+  76DA~            	else
0713+  76DA~            	else
0713+  76DA             
0713+  76DA~            	else
0713+  76DA~            	else
0713+  76DA             
0714+  76DA BD 7E 06    		score1000()
0715+  76DD             	endif
0715+  76DD             
0715+  76DD             
0715+  76DD             
0715+  76DD             
0715+  76DD             
0715+  76DD~            	endif
0715+  76DD~            	endif
0715+  76DD             
0715+  76DD~            	endif
0715+  76DD~            	endif
0715+  76DD             
0715+  76D9             
0715+  76D9 03          
0715+  76DA             
0715+  76DA             
0715+  76DA~            	endif
0715+  76DA~            	endif
0715+  76DA~            	endif
0715+  76DA             
0715+  76DD             
0715+  76DD~            	endif
0715+  76DD~            	endif
0715+  76DD             
0716+  76DD             	done(1)
0716+  76DD~            	done(1)
0716+  76DD~            	done(1)
0716+  76DD~            	done(1)
0716+  76DD~            	done(1)
0716+  76DD             
0716+  76DD 7E 79 CB    
0717+  76E0             	
0718+  76E0             captiveAward:
0719+  76E0 86 01       	fork(10)
0719+  76E2 BD 7D 80    
0720+  76E5 39          	rts
0721+  76E6 01          	nop
0722+  76E7 01          	nop
0723+  76E8             	
0724+  76E8             	beginFork()
0725+  76E8 86 80       	lampOn(8,2) ; right special
0725+  76EA 9A 09       
0725+  76EC 97 09       
0726+  76EE             	
0727+  76EE 96 09       	ldaA	>lc(2)
0728+  76F0 85 08       	bitA	lr(4) ; shoe 1
0729+  76F2             	ifeq
0729+  76F2             
0729+  76F2 26 FE       
0730+  76F4 DE 2C       		endFork()
0730+  76F6 7E 79 49    
0731+  76F9             	else
0731+  76F9             
0731+  76F9             
0731+  76F9             
0731+  76F9             
0731+  76F3             
0731+  76F3             
0731+  76F3             
0731+  76F3~            	else
0731+  76F3~            	else
0731+  76F3~            	else
0731+  76F3~            	else
0731+  76F3             
0731+  76F3~            	else
0731+  76F3~            	else
0731+  76F3~            	else
0731+  76F3~            	else
0731+  76F3             
0731+  76F3             
0731+  76F3 07          
0731+  76F9             
0731+  76F9 20 FE       
0731+  76FB             
0731+  76FB             
0731+  76FB             
0731+  76FB~            	else
0731+  76FB~            	else
0731+  76FB~            	else
0731+  76FB~            	else
0731+  76FB~            	else
0731+  76FB             
0731+  76FB~            	else
0731+  76FB~            	else
0731+  76FB             
0731+  76FB~            	else
0731+  76FB~            	else
0731+  76FB             
0732+  76FB 85 20       		bitA	lr(6)
0733+  76FD             		ifne
0733+  76FD             
0733+  76FD 27 FE       
0734+  76FF 86 20       			flashLamp(6,2)
0734+  7701 9A A1       
0734+  7703 97 A1       
0735+  7705             		else
0735+  7705             
0735+  7705             
0735+  7705             
0735+  7705             
0735+  76FE             
0735+  76FE             
0735+  76FE             
0735+  76FE~            		else
0735+  76FE~            		else
0735+  76FE~            		else
0735+  76FE~            		else
0735+  76FE             
0735+  76FE~            		else
0735+  76FE~            		else
0735+  76FE~            		else
0735+  76FE~            		else
0735+  76FE             
0735+  76FE             
0735+  76FE 08          
0735+  7705             
0735+  7705 20 FE       
0735+  7707             
0735+  7707             
0735+  7707             
0735+  7707~            		else
0735+  7707~            		else
0735+  7707~            		else
0735+  7707~            		else
0735+  7707~            		else
0735+  7707             
0735+  7707~            		else
0735+  7707~            		else
0735+  7707             
0735+  7707~            		else
0735+  7707~            		else
0735+  7707             
0736+  7707 85 10       			bitA	lr(5)
0737+  7709             			ifne
0737+  7709             
0737+  7709 27 FE       
0738+  770B 86 10       				flashLamp(5,2)
0738+  770D 9A A1       
0738+  770F 97 A1       
0739+  7711             			else
0739+  7711             
0739+  7711             
0739+  7711             
0739+  7711             
0739+  770A             
0739+  770A             
0739+  770A             
0739+  770A~            			else
0739+  770A~            			else
0739+  770A~            			else
0739+  770A~            			else
0739+  770A             
0739+  770A~            			else
0739+  770A~            			else
0739+  770A~            			else
0739+  770A~            			else
0739+  770A             
0739+  770A             
0739+  770A 08          
0739+  7711             
0739+  7711 20 FE       
0739+  7713             
0739+  7713             
0739+  7713             
0739+  7713~            			else
0739+  7713~            			else
0739+  7713~            			else
0739+  7713~            			else
0739+  7713~            			else
0739+  7713             
0739+  7713~            			else
0739+  7713~            			else
0739+  7713             
0739+  7713~            			else
0739+  7713~            			else
0739+  7713             
0740+  7713 86 08       				flashLamp(4,2)
0740+  7715 9A A1       
0740+  7717 97 A1       
0741+  7719             			endif
0741+  7719             
0741+  7719             
0741+  7719             
0741+  7719             
0741+  7719             
0741+  7719~            			endif
0741+  7719~            			endif
0741+  7719             
0741+  7719~            			endif
0741+  7719~            			endif
0741+  7719             
0741+  7712             
0741+  7712 06          
0741+  7713             
0741+  7713             
0741+  7713~            			endif
0741+  7713~            			endif
0741+  7713~            			endif
0741+  7713             
0741+  7719             
0741+  7719~            			endif
0741+  7719~            			endif
0741+  7719             
0742+  7719             		endif
0742+  7719             
0742+  7719             
0742+  7719             
0742+  7719             
0742+  7719             
0742+  7719~            		endif
0742+  7719~            		endif
0742+  7719             
0742+  7719~            		endif
0742+  7719~            		endif
0742+  7719             
0742+  7706             
0742+  7706 12          
0742+  7707             
0742+  7707             
0742+  7707~            		endif
0742+  7707~            		endif
0742+  7707~            		endif
0742+  7707             
0742+  7719             
0742+  7719~            		endif
0742+  7719~            		endif
0742+  7719             
0743+  7719             	endif
0743+  7719             
0743+  7719             
0743+  7719             
0743+  7719             
0743+  7719             
0743+  7719~            	endif
0743+  7719~            	endif
0743+  7719             
0743+  7719~            	endif
0743+  7719~            	endif
0743+  7719             
0743+  76FA             
0743+  76FA 1E          
0743+  76FB             
0743+  76FB             
0743+  76FB~            	endif
0743+  76FB~            	endif
0743+  76FB~            	endif
0743+  76FB             
0743+  7719             
0743+  7719~            	endif
0743+  7719~            	endif
0743+  7719             
0744+  7719             	
0745+  7719 86 04       	ldaA	lr(3)
0746+  771B 95 09       	bitA	>lc(2)
0747+  771D             	ifne ; double bonus
0747+  771D             
0747+  771D 27 FE       
0748+  771F 96 B0       		ldaA	>p_Bonus
0749+  7721             	else
0749+  7721             
0749+  7721             
0749+  7721             
0749+  7721             
0749+  771E             
0749+  771E             
0749+  771E             
0749+  771E~            	else
0749+  771E~            	else
0749+  771E~            	else
0749+  771E~            	else
0749+  771E             
0749+  771E~            	else
0749+  771E~            	else
0749+  771E~            	else
0749+  771E~            	else
0749+  771E             
0749+  771E             
0749+  771E 04          
0749+  7721             
0749+  7721 20 FE       
0749+  7723             
0749+  7723             
0749+  7723             
0749+  7723~            	else
0749+  7723~            	else
0749+  7723~            	else
0749+  7723~            	else
0749+  7723~            	else
0749+  7723             
0749+  7723~            	else
0749+  7723~            	else
0749+  7723             
0749+  7723~            	else
0749+  7723~            	else
0749+  7723             
0750+  7723 86 01       		ldaA	1
0751+  7725             	endif	
0751+  7725             
0751+  7725             
0751+  7725             
0751+  7725             
0751+  7725             
0751+  7725~            	endif	
0751+  7725~            	endif	
0751+  7725             
0751+  7725~            	endif	
0751+  7725~            	endif	
0751+  7725             
0751+  7722             
0751+  7722 02          
0751+  7723             
0751+  7723             
0751+  7723~            	endif	
0751+  7723~            	endif	
0751+  7723~            	endif	
0751+  7723             
0751+  7725             
0751+  7725~            	endif	
0751+  7725~            	endif	
0751+  7725             
0752+  7725 97 BE       	staA	p_BonusLeft
0753+  7727             	
0754+  7727             captiveAward_bonusLoop:
0755+  7727 BD 7E 06    	score1000()
0756+  772A 7A 00 B0    	dec	p_Bonus
0757+  772D BD 70 C3    	jsr	bonusLights
0758+  7730 86 19       	delay(200)
0758+  7732 BD 7D 6B    
0759+  7735 7D 00 B0    	tst	>p_Bonus
0760+  7738 26 ED       	bne	captiveAward_bonusLoop
0761+  773A             	
0762+  773A 86 38       	ldaA	00111000b
0763+  773C 94 A1       	andA	>flc(2)
0764+  773E 43          	comA
0765+  773F 94 09       	andA	>lc(2)
0766+  7741 97 09       	staA	lc(2)
0767+  7743             	
0768+  7743 96 BE       	ldaA	>p_BonusLeft
0769+  7745 97 B0       	staA	p_Bonus
0770+  7747             	
0771+  7747 DE 2C       	endFork()	
0771+  7749 7E 79 49    
0772+  774C             	
0773+  774C             	
0774+  774C             alternate:
0775+  774C C6 00       	ldaB	0 ; turn on left?
0776+  774E 86 80       	ldaA	lr(8) ; right special
0777+  7750 95 09       	bitA	>lc(2)
0778+  7752             	ifne
0778+  7752             
0778+  7752 27 FE       
0779+  7754 C6 01       		ldaB	1
0780+  7756 86 7F       		lampOff(8,2) ; right special
0780+  7758 94 09       
0780+  775A 97 09       
0781+  775C             	endif
0781+  775C             
0781+  775C             
0781+  775C             
0781+  775C             
0781+  775C             
0781+  775C~            	endif
0781+  775C~            	endif
0781+  775C             
0781+  775C~            	endif
0781+  775C~            	endif
0781+  775C             
0781+  7753             
0781+  7753 08          
0781+  7754             
0781+  7754             
0781+  7754~            	endif
0781+  7754~            	endif
0781+  7754~            	endif
0781+  7754             
0781+  775C             
0781+  775C~            	endif
0781+  775C~            	endif
0781+  775C             
0782+  775C 86 02       	ldaA	lr(2) ; left special
0783+  775E 95 0A       	bitA	>lc(3)
0784+  7760             	ifne
0784+  7760             
0784+  7760 27 FE       
0785+  7762 86 80       		lampOn(8,2) ; right special
0785+  7764 9A 09       
0785+  7766 97 09       
0786+  7768 86 FD       		lampOff(2,3) ; left special
0786+  776A 94 0A       
0786+  776C 97 0A       
0787+  776E             	endif
0787+  776E             
0787+  776E             
0787+  776E             
0787+  776E             
0787+  776E             
0787+  776E~            	endif
0787+  776E~            	endif
0787+  776E             
0787+  776E~            	endif
0787+  776E~            	endif
0787+  776E             
0787+  7761             
0787+  7761 0C          
0787+  7762             
0787+  7762             
0787+  7762~            	endif
0787+  7762~            	endif
0787+  7762~            	endif
0787+  7762             
0787+  776E             
0787+  776E~            	endif
0787+  776E~            	endif
0787+  776E             
0788+  776E 5D          	tstB
0789+  776F             	ifne
0789+  776F             
0789+  776F 27 FE       
0790+  7771 86 02       		lampOn(2,3) ; left special
0790+  7773 9A 0A       
0790+  7775 97 0A       
0791+  7777             	endif
0791+  7777             
0791+  7777             
0791+  7777             
0791+  7777             
0791+  7777             
0791+  7777~            	endif
0791+  7777~            	endif
0791+  7777             
0791+  7777~            	endif
0791+  7777~            	endif
0791+  7777             
0791+  7770             
0791+  7770 06          
0791+  7771             
0791+  7771             
0791+  7771~            	endif
0791+  7771~            	endif
0791+  7771~            	endif
0791+  7771             
0791+  7777             
0791+  7777~            	endif
0791+  7777~            	endif
0791+  7777             
0792+  7777 39          	rts
0793+  7778             	
0794+  7778             addCollect:
0795+  7778 96 09       	ldaA	>lc(2)
0796+  777A 85 08       	bitA	lr(4)
0797+  777C             	ifeq
0797+  777C             
0797+  777C 26 FE       
0798+  777E 86 08       		lampOn(4,2)
0798+  7780 9A 09       
0798+  7782 97 09       
0799+  7784 86 08       		flashLamp(4,2)
0799+  7786 9A A1       
0799+  7788 97 A1       
0800+  778A             	else
0800+  778A             
0800+  778A             
0800+  778A             
0800+  778A             
0800+  777D             
0800+  777D             
0800+  777D             
0800+  777D~            	else
0800+  777D~            	else
0800+  777D~            	else
0800+  777D~            	else
0800+  777D             
0800+  777D~            	else
0800+  777D~            	else
0800+  777D~            	else
0800+  777D~            	else
0800+  777D             
0800+  777D             
0800+  777D 0E          
0800+  778A             
0800+  778A 20 FE       
0800+  778C             
0800+  778C             
0800+  778C             
0800+  778C~            	else
0800+  778C~            	else
0800+  778C~            	else
0800+  778C~            	else
0800+  778C~            	else
0800+  778C             
0800+  778C~            	else
0800+  778C~            	else
0800+  778C             
0800+  778C~            	else
0800+  778C~            	else
0800+  778C             
0801+  778C 85 10       		bitA	lr(5)
0802+  778E             		ifeq
0802+  778E             
0802+  778E 26 FE       
0803+  7790 86 10       			lampOn(5,2)
0803+  7792 9A 09       
0803+  7794 97 09       
0804+  7796 86 10       			flashLamp(5,2)
0804+  7798 9A A1       
0804+  779A 97 A1       
0805+  779C             		else
0805+  779C             
0805+  779C             
0805+  779C             
0805+  779C             
0805+  778F             
0805+  778F             
0805+  778F             
0805+  778F~            		else
0805+  778F~            		else
0805+  778F~            		else
0805+  778F~            		else
0805+  778F             
0805+  778F~            		else
0805+  778F~            		else
0805+  778F~            		else
0805+  778F~            		else
0805+  778F             
0805+  778F             
0805+  778F 0E          
0805+  779C             
0805+  779C 20 FE       
0805+  779E             
0805+  779E             
0805+  779E             
0805+  779E~            		else
0805+  779E~            		else
0805+  779E~            		else
0805+  779E~            		else
0805+  779E~            		else
0805+  779E             
0805+  779E~            		else
0805+  779E~            		else
0805+  779E             
0805+  779E~            		else
0805+  779E~            		else
0805+  779E             
0806+  779E 85 20       			bitA	lr(6)
0807+  77A0             			ifeq
0807+  77A0             
0807+  77A0 26 FE       
0808+  77A2 86 20       				lampOn(6,2)
0808+  77A4 9A 09       
0808+  77A6 97 09       
0809+  77A8 86 20       				flashLamp(6,2)
0809+  77AA 9A A1       
0809+  77AC 97 A1       
0810+  77AE             			else
0810+  77AE             
0810+  77AE             
0810+  77AE             
0810+  77AE             
0810+  77A1             
0810+  77A1             
0810+  77A1             
0810+  77A1~            			else
0810+  77A1~            			else
0810+  77A1~            			else
0810+  77A1~            			else
0810+  77A1             
0810+  77A1~            			else
0810+  77A1~            			else
0810+  77A1~            			else
0810+  77A1~            			else
0810+  77A1             
0810+  77A1             
0810+  77A1 0E          
0810+  77AE             
0810+  77AE 20 FE       
0810+  77B0             
0810+  77B0             
0810+  77B0             
0810+  77B0~            			else
0810+  77B0~            			else
0810+  77B0~            			else
0810+  77B0~            			else
0810+  77B0~            			else
0810+  77B0             
0810+  77B0~            			else
0810+  77B0~            			else
0810+  77B0             
0810+  77B0~            			else
0810+  77B0~            			else
0810+  77B0             
0811+  77B0 BD 7E 06    				score1000()
0812+  77B3 86 04       				lampOn(3,3)
0812+  77B5 9A 0A       
0812+  77B7 97 0A       
0813+  77B9             			endif
0813+  77B9             
0813+  77B9             
0813+  77B9             
0813+  77B9             
0813+  77B9             
0813+  77B9~            			endif
0813+  77B9~            			endif
0813+  77B9             
0813+  77B9~            			endif
0813+  77B9~            			endif
0813+  77B9             
0813+  77AF             
0813+  77AF 09          
0813+  77B0             
0813+  77B0             
0813+  77B0~            			endif
0813+  77B0~            			endif
0813+  77B0~            			endif
0813+  77B0             
0813+  77B9             
0813+  77B9~            			endif
0813+  77B9~            			endif
0813+  77B9             
0814+  77B9             		endif
0814+  77B9             
0814+  77B9             
0814+  77B9             
0814+  77B9             
0814+  77B9             
0814+  77B9~            		endif
0814+  77B9~            		endif
0814+  77B9             
0814+  77B9~            		endif
0814+  77B9~            		endif
0814+  77B9             
0814+  779D             
0814+  779D 1B          
0814+  779E             
0814+  779E             
0814+  779E~            		endif
0814+  779E~            		endif
0814+  779E~            		endif
0814+  779E             
0814+  77B9             
0814+  77B9~            		endif
0814+  77B9~            		endif
0814+  77B9             
0815+  77B9             	endif
0815+  77B9             
0815+  77B9             
0815+  77B9             
0815+  77B9             
0815+  77B9             
0815+  77B9~            	endif
0815+  77B9~            	endif
0815+  77B9             
0815+  77B9~            	endif
0815+  77B9~            	endif
0815+  77B9             
0815+  778B             
0815+  778B 2D          
0815+  778C             
0815+  778C             
0815+  778C~            	endif
0815+  778C~            	endif
0815+  778C~            	endif
0815+  778C             
0815+  77B9             
0815+  77B9~            	endif
0815+  77B9~            	endif
0815+  77B9             
0816+  77B9 39          	rts
0817+  77BA             	
0818+  77BA             ; end callbacks
0819+  77BA             	.msfirst
0820+  77BA             ; needs to be on $**00 address
0821+  7000             callbackTable: 	.org $7000 ; note: TRANSPOSED
0822+  7000 72 21       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0822+  7002 72 21       
0822+  7004 72 3A       
0822+  7006 70 C0       
0822+  7008 70 C0       
0822+  700A 70 C0       
0822+  700C 72 21       
0822+  700E 70 C0       
0823+  7010 72 71       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0823+  7012 72 21       
0823+  7014 75 55       
0823+  7016 75 84       
0823+  7018 75 9D       
0823+  701A 75 B2       
0823+  701C 76 A9       
0823+  701E 76 C9       
0824+  7020 76 02       	.dw swDropTip	\.dw swDroptIp\.dw swDroptiP\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0824+  7022 76 0C       
0824+  7024 76 16       
0824+  7026 76 65       
0824+  7028 75 9D       
0824+  702A 73 FC       
0824+  702C 75 9D       
0824+  702E 70 C0       
0825+  7030 76 07       	.dw swDropHot	\.dw swDrophOt\.dw swDrophoT\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0825+  7032 76 11       
0825+  7034 76 1B       
0825+  7036 75 9D       
0825+  7038 73 63       
0825+  703A 76 6E       
0825+  703C 75 F9       
0825+  703E 75 B2       
0826+  7040 75 2F       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0826+  7042 75 7B       
0826+  7044 75 9D       
0826+  7046 70 C0       
0826+  7048 74 E5       
0826+  704A 70 C0       
0826+  704C 70 C0       
0826+  704E 70 C0       
0827+  7050 70 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0827+  7052 70 C0       
0827+  7054 70 C0       
0827+  7056 70 C0       
0827+  7058 70 C0       
0827+  705A 70 C0       
0827+  705C 70 C0       
0827+  705E 70 C0       
0828+  7060 70 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0828+  7062 70 C0       
0828+  7064 70 C0       
0828+  7066 70 C0       
0828+  7068 70 C0       
0828+  706A 70 C0       
0828+  706C 70 C0       
0828+  706E 70 C0       
0829+  7070 70 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0829+  7072 70 C0       
0829+  7074 70 C0       
0829+  7076 70 C0       
0829+  7078 70 C0       
0829+  707A 70 C0       
0829+  707C 70 C0       
0829+  707E 70 C0       
0830+  7080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0831+  7080             ; off = how many cycles it must be off for
0832+  7080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0833+  7080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0834+  7080             ; TRANSPOSED (?)
0835+  7080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0836+  7080             settleTable: ; must be right after callbackTable
0837+  7080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0837+  7081 87          
0837+  7082 C2          
0837+  7083 47          
0837+  7084 47          
0837+  7085 47          
0837+  7086 87          
0837+  7087 47          
0838+  7088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0838+  7089 87          
0838+  708A 87          
0838+  708B 87          
0838+  708C 81          
0838+  708D 81          
0838+  708E 80          
0838+  708F 87          
0839+  7090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,3,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0839+  7091 87          
0839+  7092 87          
0839+  7093 83          
0839+  7094 83          
0839+  7095 E1          
0839+  7096 81          
0839+  7097 80          
0840+  7098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,1,1,0)
0840+  7099 87          
0840+  709A 87          
0840+  709B 81          
0840+  709C E1          
0840+  709D 80          
0840+  709E 80          
0840+  709F 81          
0841+  70A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0841+  70A1 87          
0841+  70A2 81          
0841+  70A3 47          
0841+  70A4 80          
0841+  70A5 47          
0841+  70A6 47          
0841+  70A7 47          
0842+  70A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0842+  70A9 47          
0842+  70AA 47          
0842+  70AB 47          
0842+  70AC 47          
0842+  70AD 47          
0842+  70AE 47          
0842+  70AF 47          
0843+  70B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0843+  70B1 47          
0843+  70B2 47          
0843+  70B3 47          
0843+  70B4 47          
0843+  70B5 47          
0843+  70B6 47          
0843+  70B7 47          
0844+  70B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0844+  70B9 47          
0844+  70BA 47          
0844+  70BB 47          
0844+  70BC 47          
0844+  70BD 47          
0844+  70BE 47          
0844+  70BF 47          
0845+  70C0             	
0846+  6000             .org $6000
0847+  6000 01          	nop0008   6001             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 7D       	ldaA	attractStart >> 8
0102   78AF 97 2A       	staA	attractX
0103   78B1 86 C1       	ldaA	attractStart&$FF
0104   78B3 97 2B       	staA	attractX + 1
0105   78B5             	
0106   78B5 86 FF       	ldaA	$FF	
0107   78B7 B7 28 00    	staA 	displayStrobe
0108   78BA             
0109   78BA 86 00       	ldaA	00
0110   78BC 97 07       	staA	strobe
0111   78BE B7 01 6A    	staA	displayCol
0112   78C1             	
0113   78C1 CE 00 00    	ldX 	0
0114   78C4 DF 50       	stX		curCol
0115   78C6             	
0116   78C6 86 00       	ldaA	0
0117   78C8 97 10       	staA	curSwitchRowLsb
0118   78CA             	
0119   78CA             ; fill solenoid status with off
0120   78CA 86 0F       	ldaA	$F
0121   78CC CE 01 40    	ldX	solenoid1
0122   78CF             lSolDefault:
0123   78CF A7 00       	staA	0, X
0124   78D1 08          	inX
0125   78D2 8C 01 4F    	cpX	solenoid16
0126   78D5 26 F8       	bne	lSolDefault
0127   78D7             	
0128   78D7             ; clear 8 banks
0129   78D7 86 00       	ldaA 	0
0130   78D9 CE 00 00    	ldX	0
0131   78DC             lClear8:
0132   78DC A7 08       	staA	lampCol1, X
0133   78DE A7 A0       	staA	flashLampCol1, X
0134   78E0 A7 80       	staA	waitLeft, X
0135   78E2 08          	inX
0136   78E3 8C 00 08    	cpX	8
0137   78E6 26 F4       	bne 	lClear8
0138   78E8             	
0139   78E8             ; empty settle
0140   78E8 86 00       	ldaA	$00
0141   78EA CE 01 00    	ldX	settleRow1
0142   78ED             lSettleDefault:
0143   78ED A7 00       	staA	0, X
0144   78EF 08          	inX
0145   78F0 8C 01 3F    	cpX	settleRow8End
0146   78F3 26 F8       	bne	lSettleDefault
0147   78F5             	
0148   78F5             ; empty queue
0149   78F5 86 FF       	ldaA	$FF
0150   78F7 CE 00 60    	ldX	queue
0151   78FA             lEmptyQueue:
0152   78FA A7 00       	staA	0, X
0153   78FC 08          	inX
0154   78FD 8C 00 6D    	cpX	queueEnd
0155   7900 26 F8       	bne	lEmptyQueue
0156   7902             	
0157   7902 86 00       	ldaA	0
0158   7904 97 54       	staA	queueHead + 0
0159   7906 97 56       	staA	queueTail + 0
0160   7908 86 60       	ldaA	queue
0161   790A 97 55       	staA	queueHead + 1
0162   790C 97 57       	staA	queueTail + 1
0163   790E             	
0164   790E             ; test numbers
0165   790E 86 20       	lampOn(6,8) ; game over
0165   7910 9A 0F       
0165   7912 97 0F       
0166   7914             	
0167   7914 86 3E       	ldaA	62
0168   7916 B1 17 70    	cmpA	>6000
0169   7919             	ifne
0169   7919             
0169   7919 27 FE       
0170   791B 86 40       		lampOn(7,5)
0170   791D 9A 0C       
0170   791F 97 0C       
0171   7921             	endif
0171   7921             
0171   7921             
0171   7921             
0171   7921             
0171   7921             
0171   7921~            	endif
0171   7921~            	endif
0171   7921             
0171   7921~            	endif
0171   7921~            	endif
0171   7921             
0171   791A             
0171   791A 06          
0171   791B             
0171   791B             
0171   791B~            	endif
0171   791B~            	endif
0171   791B~            	endif
0171   791B             
0171   7921             
0171   7921~            	endif
0171   7921~            	endif
0171   7921             
0172   7921             
0173   7921             	
0174   7921 BD 7D A2    	jsr resetScores
0175   7924             	
0176   7924             ; setup complete
0177   7924 0E          	clI		; enable timer interrupt
0178   7925             	
0179   7925             	
0180   7925             end:
0181   7925 B6 01 6B    	ldaA	>state
0182   7928 85 04       	bitA	100b
0183   792A             	ifne
0183   792A             
0183   792A 27 FE       
0184   792C             		; dec wait timers
0185   792C CE 00 7F    		ldX	waitLeft - 1
0186   792F             decWaitTimers:
0187   792F 08          		inX
0188   7930 A6 00       		ldaA	0, X
0189   7932             		ifne
0189   7932             
0189   7932 27 FE       
0190   7934 4A          			decA
0191   7935 A7 00       			staA	0, X
0192   7937             			ifeq
0192   7937             
0192   7937 26 FE       
0193   7939 A6 08       				ldaA	waitMsb - waitLeft, X
0194   793B 97 58       				staA	tempQ
0195   793D A6 10       				ldaA	waitLsb - waitLeft, X
0196   793F 97 59       				staA	tempQ + 1
0197   7941 E6 18       				ldaB	waitReg - waitLeft, X
0198   7943 DF 2C       				stX	forkX
0199   7945 DE 58       				ldX	>tempQ
0200   7947 6E 00       				jmp	0, X
0201   7949             			endif
0201   7949             
0201   7949             
0201   7949             
0201   7949             
0201   7949             
0201   7949~            			endif
0201   7949~            			endif
0201   7949             
0201   7949~            			endif
0201   7949~            			endif
0201   7949             
0201   7938             
0201   7938 10          
0201   7939             
0201   7939             
0201   7939~            			endif
0201   7939~            			endif
0201   7939~            			endif
0201   7939             
0201   7949             
0201   7949~            			endif
0201   7949~            			endif
0201   7949             
0202   7949             		endif
0202   7949             
0202   7949             
0202   7949             
0202   7949             
0202   7949             
0202   7949~            		endif
0202   7949~            		endif
0202   7949             
0202   7949~            		endif
0202   7949~            		endif
0202   7949             
0202   7933             
0202   7933 15          
0202   7934             
0202   7934             
0202   7934~            		endif
0202   7934~            		endif
0202   7934~            		endif
0202   7934             
0202   7949             
0202   7949~            		endif
0202   7949~            		endif
0202   7949             
0203   7949             afterFork:
0204   7949 8C 00 87    		cpX	waitLeftEnd
0205   794C 26 E1       		bne	decWaitTimers
0206   794E             		
0207   794E             		
0208   794E 7A 00 A9    		dec	dropResetTimer
0209   7951             		ifmi
0209   7951             
0209   7951 2A FE       
0210   7953 7C 00 A9    			inc	dropResetTimer
0211   7956             		endif
0211   7956             
0211   7956             
0211   7956             
0211   7956             
0211   7956             
0211   7956~            		endif
0211   7956~            		endif
0211   7956             
0211   7956~            		endif
0211   7956~            		endif
0211   7956             
0211   7952             
0211   7952 03          
0211   7953             
0211   7953             
0211   7953~            		endif
0211   7953~            		endif
0211   7953~            		endif
0211   7953             
0211   7956             
0211   7956~            		endif
0211   7956~            		endif
0211   7956             
0212   7956 7A 00 BF    		dec	bonusTimer
0213   7959             		ifmi
0213   7959             
0213   7959 2A FE       
0214   795B 7C 00 BF    			inc	bonusTimer
0215   795E             		endif
0215   795E             
0215   795E             
0215   795E             
0215   795E             
0215   795E             
0215   795E~            		endif
0215   795E~            		endif
0215   795E             
0215   795E~            		endif
0215   795E~            		endif
0215   795E             
0215   795A             
0215   795A 03          
0215   795B             
0215   795B             
0215   795B~            		endif
0215   795B~            		endif
0215   795B~            		endif
0215   795B             
0215   795E             
0215   795E~            		endif
0215   795E~            		endif
0215   795E             
0216   795E 7D 00 BA    		tst	>spinnerTimer
0217   7961             		ifne
0217   7961             
0217   7961 27 FE       
0218   7963 7A 00 BA    			dec	spinnerTimer
0219   7966             			ifeq
0219   7966             
0219   7966 26 FE       
0220   7968 86 F7       				flashOff(4,3)
0220   796A 94 A2       
0220   796C 97 A2       
0221   796E 86 F7       				lampOff(4,3)
0221   7970 94 0A       
0221   7972 97 0A       
0222   7974 86 04       				ldaA	4
0223   7976 91 B5       				cmpA	>p_DropsDown
0224   7978             				ifgt
0224   7978             
0224   7978 23 FE       
0225   797A 86 F7       					lampOff(4,3) ; spinner
0225   797C 94 0A       
0225   797E 97 0A       
0226   7980             				else
0226   7980             
0226   7980             
0226   7980             
0226   7980             
0226   7979             
0226   7979             
0226   7979             
0226   7979~            				else
0226   7979~            				else
0226   7979~            				else
0226   7979~            				else
0226   7979             
0226   7979~            				else
0226   7979~            				else
0226   7979~            				else
0226   7979~            				else
0226   7979             
0226   7979             
0226   7979 08          
0226   7980             
0226   7980 20 FE       
0226   7982             
0226   7982             
0226   7982             
0226   7982~            				else
0226   7982~            				else
0226   7982~            				else
0226   7982~            				else
0226   7982~            				else
0226   7982             
0226   7982~            				else
0226   7982~            				else
0226   7982             
0226   7982~            				else
0226   7982~            				else
0226   7982             
0227   7982 86 08       					lampOn(4,3)
0227   7984 9A 0A       
0227   7986 97 0A       
0228   7988             				endif
0228   7988             
0228   7988             
0228   7988             
0228   7988             
0228   7988             
0228   7988~            				endif
0228   7988~            				endif
0228   7988             
0228   7988~            				endif
0228   7988~            				endif
0228   7988             
0228   7981             
0228   7981 06          
0228   7982             
0228   7982             
0228   7982~            				endif
0228   7982~            				endif
0228   7982~            				endif
0228   7982             
0228   7988             
0228   7988~            				endif
0228   7988~            				endif
0228   7988             
0229   7988             			endif
0229   7988             
0229   7988             
0229   7988             
0229   7988             
0229   7988             
0229   7988~            			endif
0229   7988~            			endif
0229   7988             
0229   7988~            			endif
0229   7988~            			endif
0229   7988             
0229   7967             
0229   7967 20          
0229   7968             
0229   7968             
0229   7968~            			endif
0229   7968~            			endif
0229   7968~            			endif
0229   7968             
0229   7988             
0229   7988~            			endif
0229   7988~            			endif
0229   7988             
0230   7988             		endif
0230   7988             
0230   7988             
0230   7988             
0230   7988             
0230   7988             
0230   7988~            		endif
0230   7988~            		endif
0230   7988             
0230   7988~            		endif
0230   7988~            		endif
0230   7988             
0230   7962             
0230   7962 25          
0230   7963             
0230   7963             
0230   7963~            		endif
0230   7963~            		endif
0230   7963~            		endif
0230   7963             
0230   7988             
0230   7988~            		endif
0230   7988~            		endif
0230   7988             
0231   7988             		
0232   7988 B6 01 6B    		ldaA	>state		; clear strobe reset bit
0233   798B 84 FB       		andA	11111011b
0234   798D B7 01 6B    		staA	state
0235   7990             	endif
0235   7990             
0235   7990             
0235   7990             
0235   7990             
0235   7990             
0235   7990~            	endif
0235   7990~            	endif
0235   7990             
0235   7990~            	endif
0235   7990~            	endif
0235   7990             
0235   792B             
0235   792B 64          
0235   792C             
0235   792C             
0235   792C~            	endif
0235   792C~            	endif
0235   792C~            	endif
0235   792C             
0235   7990             
0235   7990~            	endif
0235   7990~            	endif
0235   7990             
0236   7990             
0237   7990             		
0238   7990             ; pop queue
0239   7990 D6 57       	ldaB	>queueTail + 1
0240   7992 D1 55       	cmpB	>queueHead + 1
0241   7994             	ifeq
0241   7994             
0241   7994 26 FE       
0242   7996 7E 7A 31    		jmp skipQueue
0243   7999             	endif
0243   7999             
0243   7999             
0243   7999             
0243   7999             
0243   7999             
0243   7999~            	endif
0243   7999~            	endif
0243   7999             
0243   7999~            	endif
0243   7999~            	endif
0243   7999             
0243   7995             
0243   7995 03          
0243   7996             
0243   7996             
0243   7996~            	endif
0243   7996~            	endif
0243   7996~            	endif
0243   7996             
0243   7999             
0243   7999~            	endif
0243   7999~            	endif
0243   7999             
0244   7999             	
0245   7999 DE 54       	ldX	>queueHead
0246   799B A6 00       	ldaA	0, X	; A now contains the first queue item
0247   799D             	
0248   799D 16          	tAB
0249   799E C4 3F       	andB	00111111b ; B = callback index
0250   79A0             	
0251   79A0 D7 59       	staB	tempQ + 1
0252   79A2 C6 70       	ldaB	callbackTable >> 8
0253   79A4 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0254   79A6 DE 58       	ldX	>tempQ
0255   79A8             	
0256   79A8 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0257   79AA C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0258   79AC             	ifne ; if closure only
0258   79AC             
0258   79AC 27 FE       
0259   79AE 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0260   79B0 26 62       		bne	skipEvent
0261   79B2             	endif
0261   79B2             
0261   79B2             
0261   79B2             
0261   79B2             
0261   79B2             
0261   79B2~            	endif
0261   79B2~            	endif
0261   79B2             
0261   79B2~            	endif
0261   79B2~            	endif
0261   79B2             
0261   79AD             
0261   79AD 04          
0261   79AE             
0261   79AE             
0261   79AE~            	endif
0261   79AE~            	endif
0261   79AE~            	endif
0261   79AE             
0261   79B2             
0261   79B2~            	endif
0261   79B2~            	endif
0261   79B2             
0262   79B2             	
0263   79B2 C5 40       	bitB	01000000b ; B.7 = active in game over
0264   79B4             	ifeq 	 ; not active in game over
0264   79B4             
0264   79B4 26 FE       
0265   79B6 D6 0F       		ldaB	>lc(8)	; gameover mask
0266   79B8 C5 20       		bitB	lr(6)
0267   79BA 26 58       		bne	skipEvent
0268   79BC D6 0F       		ldaB	>lc(8) ; tilt bit
0269   79BE C5 10       		bitB	lr(5)
0270   79C0 26 52       		bne	skipEvent
0271   79C2             	endif
0271   79C2             
0271   79C2             
0271   79C2             
0271   79C2             
0271   79C2             
0271   79C2~            	endif
0271   79C2~            	endif
0271   79C2             
0271   79C2~            	endif
0271   79C2~            	endif
0271   79C2             
0271   79B5             
0271   79B5 0C          
0271   79B6             
0271   79B6             
0271   79B6~            	endif
0271   79B6~            	endif
0271   79B6~            	endif
0271   79B6             
0271   79C2             
0271   79C2~            	endif
0271   79C2~            	endif
0271   79C2             
0272   79C2             	
0273   79C2             	; checked passed, do callback
0274   79C2 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0275   79C5 DE 58       	ldX	>tempQ
0276   79C7 EE 00       	ldX	0, X
0277   79C9 6E 00       	jmp	0, X
0278   79CB             	; everything trashed
0279   79CB             afterQueueEvent:
0280   79CB BD 70 C3    	jsr 	bonusLights
0281   79CE             	
0282   79CE             	; update last switch
0283   79CE 96 59       	ldaA	> tempQ + 1
0284   79D0 44          	lsrA 	; got doubled earlier
0285   79D1 97 A8       	staA	lastSwitch
0286   79D3             
0287   79D3 86 02       	ldaA	10b ; no validate bit
0288   79D5 B5 01 6B    	bitA	>state
0289   79D8             	ifeq ; validate pf
0289   79D8             
0289   79D8 26 FE       
0290   79DA             		; check if playfield invalid
0291   79DA 86 0F       		ldaA	00001111b ; player up
0292   79DC 95 A7       		bitA	>flc(8)
0293   79DE             		ifne ; any flashing -> pf invalid
0293   79DE             
0293   79DE 27 FE       
0294   79E0 43          			comA	; turn off flashing
0295   79E1 94 A7       			andA	>flc(8)
0296   79E3 97 A7       			staA	flc(8)
0297   79E5             			
0298   79E5 86 01       			ldaA	lr(1) ; shoot again pf flashing
0299   79E7 95 A2       			bitA	>flc(3)
0300   79E9             			ifne
0300   79E9             
0300   79E9 27 FE       
0301   79EB             				; turn off ball save
0302   79EB 86 FE       				flashOff(1,3)
0302   79ED 94 A2       
0302   79EF 97 A2       
0303   79F1 86 40       				ldaA	lr(7) ; shoot again backbox
0304   79F3 95 0F       				bitA	>lc(8)
0305   79F5             				ifeq
0305   79F5             
0305   79F5 26 FE       
0306   79F7 86 FE       					lampOff(1,3) ; shoot again pf
0306   79F9 94 0A       
0306   79FB 97 0A       
0307   79FD             				endif
0307   79FD             
0307   79FD             
0307   79FD             
0307   79FD             
0307   79FD             
0307   79FD~            				endif
0307   79FD~            				endif
0307   79FD             
0307   79FD~            				endif
0307   79FD~            				endif
0307   79FD             
0307   79F6             
0307   79F6 06          
0307   79F7             
0307   79F7             
0307   79F7~            				endif
0307   79F7~            				endif
0307   79F7~            				endif
0307   79F7             
0307   79FD             
0307   79FD~            				endif
0307   79FD~            				endif
0307   79FD             
0308   79FD             			else
0308   79FD             
0308   79FD             
0308   79FD             
0308   79FD             
0308   79EA             
0308   79EA             
0308   79EA             
0308   79EA~            			else
0308   79EA~            			else
0308   79EA~            			else
0308   79EA~            			else
0308   79EA             
0308   79EA~            			else
0308   79EA~            			else
0308   79EA~            			else
0308   79EA~            			else
0308   79EA             
0308   79EA             
0308   79EA 14          
0308   79FD             
0308   79FD 20 FE       
0308   79FF             
0308   79FF             
0308   79FF             
0308   79FF~            			else
0308   79FF~            			else
0308   79FF~            			else
0308   79FF~            			else
0308   79FF~            			else
0308   79FF             
0308   79FF~            			else
0308   79FF~            			else
0308   79FF             
0308   79FF~            			else
0308   79FF~            			else
0308   79FF             
0309   79FF 86 FE       				lampOff(1,3) ; shoot again
0309   7A01 94 0A       
0309   7A03 97 0A       
0310   7A05 86 BF       				lampOff(7,8)
0310   7A07 94 0F       
0310   7A09 97 0F       
0311   7A0B             			endif
0311   7A0B             
0311   7A0B             
0311   7A0B             
0311   7A0B             
0311   7A0B             
0311   7A0B~            			endif
0311   7A0B~            			endif
0311   7A0B             
0311   7A0B~            			endif
0311   7A0B~            			endif
0311   7A0B             
0311   79FE             
0311   79FE 0C          
0311   79FF             
0311   79FF             
0311   79FF~            			endif
0311   79FF~            			endif
0311   79FF~            			endif
0311   79FF             
0311   7A0B             
0311   7A0B~            			endif
0311   7A0B~            			endif
0311   7A0B             
0312   7A0B             		endif
0312   7A0B             
0312   7A0B             
0312   7A0B             
0312   7A0B             
0312   7A0B             
0312   7A0B~            		endif
0312   7A0B~            		endif
0312   7A0B             
0312   7A0B~            		endif
0312   7A0B~            		endif
0312   7A0B             
0312   79DF             
0312   79DF 2B          
0312   79E0             
0312   79E0             
0312   79E0~            		endif
0312   79E0~            		endif
0312   79E0~            		endif
0312   79E0             
0312   7A0B             
0312   7A0B~            		endif
0312   7A0B~            		endif
0312   7A0B             
0313   7A0B             	else
0313   7A0B             
0313   7A0B             
0313   7A0B             
0313   7A0B             
0313   79D9             
0313   79D9             
0313   79D9             
0313   79D9~            	else
0313   79D9~            	else
0313   79D9~            	else
0313   79D9~            	else
0313   79D9             
0313   79D9~            	else
0313   79D9~            	else
0313   79D9~            	else
0313   79D9~            	else
0313   79D9             
0313   79D9             
0313   79D9 33          
0313   7A0B             
0313   7A0B 20 FE       
0313   7A0D             
0313   7A0D             
0313   7A0D             
0313   7A0D~            	else
0313   7A0D~            	else
0313   7A0D~            	else
0313   7A0D~            	else
0313   7A0D~            	else
0313   7A0D             
0313   7A0D~            	else
0313   7A0D~            	else
0313   7A0D             
0313   7A0D~            	else
0313   7A0D~            	else
0313   7A0D             
0314   7A0D             		; clear don't validate bit
0315   7A0D 43          		comA
0316   7A0E B4 01 6B    		andA	>state
0317   7A11 B7 01 6B    		staA	state
0318   7A14             	endif
0318   7A14             
0318   7A14             
0318   7A14             
0318   7A14             
0318   7A14             
0318   7A14~            	endif
0318   7A14~            	endif
0318   7A14             
0318   7A14~            	endif
0318   7A14~            	endif
0318   7A14             
0318   7A0C             
0318   7A0C 07          
0318   7A0D             
0318   7A0D             
0318   7A0D~            	endif
0318   7A0D~            	endif
0318   7A0D~            	endif
0318   7A0D             
0318   7A14             
0318   7A14~            	endif
0318   7A14~            	endif
0318   7A14             
0319   7A14             	
0320   7A14             skipEvent:
0321   7A14 B6 01 6B    	ldaA	>state
0322   7A17 85 04       	bitA	100b
0323   7A19             	ifeq	; don't process queue if still finishing timers
0323   7A19             
0323   7A19 26 FE       
0324   7A1B C6 6D       		ldaB	queueEnd
0325   7A1D D1 55       		cmpB	>queueHead + 1
0326   7A1F             		ifeq
0326   7A1F             
0326   7A1F 26 FE       
0327   7A21 C6 60       			ldaB	queue
0328   7A23 D7 55       			staB	queueHead + 1
0329   7A25             		else
0329   7A25             
0329   7A25             
0329   7A25             
0329   7A25             
0329   7A20             
0329   7A20             
0329   7A20             
0329   7A20~            		else
0329   7A20~            		else
0329   7A20~            		else
0329   7A20~            		else
0329   7A20             
0329   7A20~            		else
0329   7A20~            		else
0329   7A20~            		else
0329   7A20~            		else
0329   7A20             
0329   7A20             
0329   7A20 06          
0329   7A25             
0329   7A25 20 FE       
0329   7A27             
0329   7A27             
0329   7A27             
0329   7A27~            		else
0329   7A27~            		else
0329   7A27~            		else
0329   7A27~            		else
0329   7A27~            		else
0329   7A27             
0329   7A27~            		else
0329   7A27~            		else
0329   7A27             
0329   7A27~            		else
0329   7A27~            		else
0329   7A27             
0330   7A27 7C 00 55    			inc	queueHead + 1
0331   7A2A             		endif
0331   7A2A             
0331   7A2A             
0331   7A2A             
0331   7A2A             
0331   7A2A             
0331   7A2A~            		endif
0331   7A2A~            		endif
0331   7A2A             
0331   7A2A~            		endif
0331   7A2A~            		endif
0331   7A2A             
0331   7A26             
0331   7A26 03          
0331   7A27             
0331   7A27             
0331   7A27~            		endif
0331   7A27~            		endif
0331   7A27~            		endif
0331   7A27             
0331   7A2A             
0331   7A2A~            		endif
0331   7A2A~            		endif
0331   7A2A             
0332   7A2A             	else
0332   7A2A             
0332   7A2A             
0332   7A2A             
0332   7A2A             
0332   7A1A             
0332   7A1A             
0332   7A1A             
0332   7A1A~            	else
0332   7A1A~            	else
0332   7A1A~            	else
0332   7A1A~            	else
0332   7A1A             
0332   7A1A~            	else
0332   7A1A~            	else
0332   7A1A~            	else
0332   7A1A~            	else
0332   7A1A             
0332   7A1A             
0332   7A1A 11          
0332   7A2A             
0332   7A2A 20 FE       
0332   7A2C             
0332   7A2C             
0332   7A2C             
0332   7A2C~            	else
0332   7A2C~            	else
0332   7A2C~            	else
0332   7A2C~            	else
0332   7A2C~            	else
0332   7A2C             
0332   7A2C~            	else
0332   7A2C~            	else
0332   7A2C             
0332   7A2C~            	else
0332   7A2C~            	else
0332   7A2C             
0333   7A2C DE 2C       		ldX	>forkX
0334   7A2E 7E 79 49    		jmp	afterFork
0335   7A31             	endif
0335   7A31             
0335   7A31             
0335   7A31             
0335   7A31             
0335   7A31             
0335   7A31~            	endif
0335   7A31~            	endif
0335   7A31             
0335   7A31~            	endif
0335   7A31~            	endif
0335   7A31             
0335   7A2B             
0335   7A2B 05          
0335   7A2C             
0335   7A2C             
0335   7A2C~            	endif
0335   7A2C~            	endif
0335   7A2C~            	endif
0335   7A2C             
0335   7A31             
0335   7A31~            	endif
0335   7A31~            	endif
0335   7A31             
0336   7A31             				
0337   7A31             skipQueue:
0338   7A31             				
0339   7A31             	
0340   7A31             				
0341   7A31 7E 79 25    	jmp		end
0342   7A34 00 00       	.dw 0
0343   7A36 00 00       	.dw 0
0344   7A38 00 00       	.dw 0
0345   7A3A 00 00       	.dw 0
0346   7A3C 00 00       	.dw 0
0347   7A3E             		
0348   7A3E             interrupt:	
0349   7A3E 7C 00 02    	inc	counter
0350   7A41 86 00       	ldaA	0
0351   7A43 91 02       	cmpA	>counter
0352   7A45 26 52       	bne	counterHandled
0353   7A47             	
0354   7A47             	; attract mode
0355   7A47 86 20       	ldaA	lr(6) ; gameover
0356   7A49 95 0F       		bitA	> lc(8)
0357   7A4B             		ifne
0357   7A4B             
0357   7A4B 27 FE       
0358   7A4D DE 2A       		ldX	>attractX
0359   7A4F A6 00       		ldaA	0, X
0360   7A51 97 09       		staA	lc(2)
0361   7A53 A6 01       		ldaA	1, X
0362   7A55 97 0A       		staA	lc(3)
0363   7A57 A6 02       		ldaA	2, X
0364   7A59 97 0B       		staA	lc(4)
0365   7A5B A6 03       		ldaA	3, X
0366   7A5D 97 0C       		staA	lc(5)
0367   7A5F A6 04       		ldaA	4, X
0368   7A61 97 0D       		staA	lc(6)
0369   7A63 96 2B       		ldaA	>attractX + 1
0370   7A65 8B 05       		addA	5
0371   7A67 81 E9       		cmpA	attractEnd&$FF
0372   7A69             		ifeq
0372   7A69             
0372   7A69 26 FE       
0373   7A6B 86 C1       			ldaA	attractStart&$FF
0374   7A6D             		endif
0374   7A6D             
0374   7A6D             
0374   7A6D             
0374   7A6D             
0374   7A6D             
0374   7A6D~            		endif
0374   7A6D~            		endif
0374   7A6D             
0374   7A6D~            		endif
0374   7A6D~            		endif
0374   7A6D             
0374   7A6A             
0374   7A6A 02          
0374   7A6B             
0374   7A6B             
0374   7A6B~            		endif
0374   7A6B~            		endif
0374   7A6B~            		endif
0374   7A6B             
0374   7A6D             
0374   7A6D~            		endif
0374   7A6D~            		endif
0374   7A6D             
0375   7A6D 97 2B       		staA	attractX + 1
0376   7A6F             	endif
0376   7A6F             
0376   7A6F             
0376   7A6F             
0376   7A6F             
0376   7A6F             
0376   7A6F~            	endif
0376   7A6F~            	endif
0376   7A6F             
0376   7A6F~            	endif
0376   7A6F~            	endif
0376   7A6F             
0376   7A4C             
0376   7A4C 22          
0376   7A4D             
0376   7A4D             
0376   7A4D~            	endif
0376   7A4D~            	endif
0376   7A4D~            	endif
0376   7A4D             
0376   7A6F             
0376   7A6F~            	endif
0376   7A6F~            	endif
0376   7A6F             
0377   7A6F             	
0378   7A6F 7C 00 03    	inc 	counter2
0379   7A72 86 08       	ldaA	8
0380   7A74 91 03       	cmpA	>counter2
0381   7A76 26 21       	bne	counterHandled
0382   7A78             	
0383   7A78 86 0A       	ldaA	10
0384   7A7A 91 B0       	cmpA	>p_Bonus
0385   7A7C             	ifeq
0385   7A7C             
0385   7A7C 26 FE       
0386   7A7E BD 7E 16    		jsr advanceBonus
0387   7A81             	endif
0387   7A81             
0387   7A81             
0387   7A81             
0387   7A81             
0387   7A81             
0387   7A81~            	endif
0387   7A81~            	endif
0387   7A81             
0387   7A81~            	endif
0387   7A81~            	endif
0387   7A81             
0387   7A7D             
0387   7A7D 03          
0387   7A7E             
0387   7A7E             
0387   7A7E~            	endif
0387   7A7E~            	endif
0387   7A7E~            	endif
0387   7A7E             
0387   7A81             
0387   7A81~            	endif
0387   7A81~            	endif
0387   7A81             
0388   7A81             	
0389   7A81 86 00       	ldaA	0
0390   7A83 97 03       	staA	counter2
0391   7A85 86 77       	ldaA	01110111b
0392   7A87 91 7E       	cmpA	>displayBcd1 + 14
0393   7A89 27 08       	beq	on
0394   7A8B             	
0395   7A8B 86 F0       	ldaA	$F0
0396   7A8D             	;staA	lampRow1
0397   7A8D 86 77       	ldaA	01110111b
0398   7A8F 97 7E       	staA	displayBcd1	 + 14
0399   7A91 20 06       	bra	counterHandled
0400   7A93             on:
0401   7A93 86 0F       	ldaA	$0F
0402   7A95             	;staA	lampRow1
0403   7A95 86 33       	ldaA	00110011b
0404   7A97 97 7E       	staA	displayBcd1	 + 14
0405   7A99             
0406   7A99             counterHandled:
0407   7A99             ; move switch column
0408   7A99 96 07       	ldaA	>strobe
0409   7A9B B7 30 02    	staA	switchStrobe
0410   7A9E             	
0411   7A9E             ; update display 
0412   7A9E             	
0413   7A9E 96 BF       	ldaA	>$BF
0414   7AA0 97 7F       	staA	displayBcd1 + 15
0415   7AA2 96 6F       	ldaA	>$6F
0416   7AA4 97 76       	staA	displayBcd1 + 6
0417   7AA6             	
0418   7AA6 DE 50       	ldX	>curCol
0419   7AA8 B6 01 6A    	ldaA	>displayCol
0420   7AAB 84 0F       	andA	1111b
0421   7AAD C6 FF       	ldaB 	$FF
0422   7AAF F7 28 02    	staB	displayBcd
0423   7AB2 B7 28 00    	staA	displayStrobe
0424   7AB5 85 08       	bitA	00001000b
0425   7AB7             	ifeq
0425   7AB7             
0425   7AB7 26 FE       
0426   7AB9 E6 70       		ldaB	displayBcd1, X
0427   7ABB             	else
0427   7ABB             
0427   7ABB             
0427   7ABB             
0427   7ABB             
0427   7AB8             
0427   7AB8             
0427   7AB8             
0427   7AB8~            	else
0427   7AB8~            	else
0427   7AB8~            	else
0427   7AB8~            	else
0427   7AB8             
0427   7AB8~            	else
0427   7AB8~            	else
0427   7AB8~            	else
0427   7AB8~            	else
0427   7AB8             
0427   7AB8             
0427   7AB8 04          
0427   7ABB             
0427   7ABB 20 FE       
0427   7ABD             
0427   7ABD             
0427   7ABD             
0427   7ABD~            	else
0427   7ABD~            	else
0427   7ABD~            	else
0427   7ABD~            	else
0427   7ABD~            	else
0427   7ABD             
0427   7ABD~            	else
0427   7ABD~            	else
0427   7ABD             
0427   7ABD~            	else
0427   7ABD~            	else
0427   7ABD             
0428   7ABD E6 78       		ldaB	displayBcd1 + 8, X
0429   7ABF             	endif
0429   7ABF             
0429   7ABF             
0429   7ABF             
0429   7ABF             
0429   7ABF             
0429   7ABF~            	endif
0429   7ABF~            	endif
0429   7ABF             
0429   7ABF~            	endif
0429   7ABF~            	endif
0429   7ABF             
0429   7ABC             
0429   7ABC 02          
0429   7ABD             
0429   7ABD             
0429   7ABD~            	endif
0429   7ABD~            	endif
0429   7ABD~            	endif
0429   7ABD             
0429   7ABF             
0429   7ABF~            	endif
0429   7ABF~            	endif
0429   7ABF             
0430   7ABF F7 28 02    	staB	displayBcd
0431   7AC2             	
0432   7AC2             ; read switches
0433   7AC2             	;jmp updateLamps
0434   7AC2 DE 50       	ldX	>curCol
0435   7AC4 B6 30 00    	ldaA	>switchRow
0436   7AC7 16          	tab
0437   7AC8 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0438   7ACA             	
0439   7ACA D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0440   7ACC D7 01       	staB	temp + 1 			; temp = switch / 2
0441   7ACE D7 53       	staB	tempX + 1			; tempX = cRAM
0442   7AD0 C6 70       	ldaB	callbackTable >> 8
0443   7AD2 D7 00       	staB	temp
0444   7AD4 C6 01       	ldaB	cRAM >> 8
0445   7AD6 D7 52       	staB	tempX
0446   7AD8             	
0447   7AD8 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0448   7ADA             	
0449   7ADA             	; temp now contains the beginning of the row in the callbackTable
0450   7ADA             swNext:
0451   7ADA 85 01       	bitA	00000001b	 ; Z set if switch not different
0452   7ADC             	ifne		; if bit set, switch different
0452   7ADC             
0452   7ADC 27 FE       
0453   7ADE 36          		pshA ; store changed switches left
0454   7ADF DE 52       		ldX	>tempX
0455   7AE1             checkSettled:
0456   7AE1 A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0457   7AE3 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0458   7AE5 27 35       		beq 	notSettled; A=0 -> was settled
0459   7AE7             		; else A > 0 -> settling
0460   7AE7 86 18       			ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0461   7AE9             				; but checking 'multiple of 8' would miss 7/8 switch
0462   7AE9             				; columns completely since they're in sync
0463   7AE9             				; so instead the lowest bits are empty (so that it'll
0464   7AE9             				; get all switch cols) and instead it skips 7/8 groups 
0465   7AE9             				; of 8 IRQs
0466   7AE9 95 02       			bitA	>counter
0467   7AEB 26 49       			bne	settledEnd
0468   7AED A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0469   7AEF 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0470   7AF1 4A          			decA
0471   7AF2 A7 00       			staA	0, X	; sets Z if now A = 0
0472   7AF4             			ifeq ; A=0 -> now settled, fire event
0472   7AF4             
0472   7AF4 26 FE       
0473   7AF6             settled:		
0474   7AF6 DE 50       				ldX	>curCol
0475   7AF8 17          				tBA	; A now the bit in row
0476   7AF9 A8 20       				eorA	switchRow1, X ; toggle bit in row
0477   7AFB A7 20       				staA	switchRow1, X ; A now state of row
0478   7AFD             				
0479   7AFD F5 30 00    				bitB	>switchRow
0480   7B00             				ifne ; switch now on
0480   7B00             
0480   7B00 27 FE       
0481   7B02 86 40       					ldaA	01000000b
0482   7B04             				else
0482   7B04             
0482   7B04             
0482   7B04             
0482   7B04             
0482   7B01             
0482   7B01             
0482   7B01             
0482   7B01~            				else
0482   7B01~            				else
0482   7B01~            				else
0482   7B01~            				else
0482   7B01             
0482   7B01~            				else
0482   7B01~            				else
0482   7B01~            				else
0482   7B01~            				else
0482   7B01             
0482   7B01             
0482   7B01 04          
0482   7B04             
0482   7B04 20 FE       
0482   7B06             
0482   7B06             
0482   7B06             
0482   7B06~            				else
0482   7B06~            				else
0482   7B06~            				else
0482   7B06~            				else
0482   7B06~            				else
0482   7B06             
0482   7B06~            				else
0482   7B06~            				else
0482   7B06             
0482   7B06~            				else
0482   7B06~            				else
0482   7B06             
0483   7B06 86 C0       					ldaA	11000000b
0484   7B08             				endif
0484   7B08             
0484   7B08             
0484   7B08             
0484   7B08             
0484   7B08             
0484   7B08~            				endif
0484   7B08~            				endif
0484   7B08             
0484   7B08~            				endif
0484   7B08~            				endif
0484   7B08             
0484   7B05             
0484   7B05 02          
0484   7B06             
0484   7B06             
0484   7B06~            				endif
0484   7B06~            				endif
0484   7B06~            				endif
0484   7B06             
0484   7B08             
0484   7B08~            				endif
0484   7B08~            				endif
0484   7B08             
0485   7B08 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0486   7B0A             				
0487   7B0A             				; store event
0488   7B0A DE 56       				ldX	>queueTail
0489   7B0C A7 00       				staA	0, X
0490   7B0E 7C 00 57    				inc	queueTail + 1
0491   7B11             				
0492   7B11             				; wrap queueTail if necessary
0493   7B11 8C 00 6D    				cpX	queueEnd 
0494   7B14             				ifeq
0494   7B14             
0494   7B14 26 FE       
0495   7B16 86 60       					ldaA	queue 
0496   7B18 97 57       					staA	queueTail + 1
0497   7B1A             				endif
0497   7B1A             
0497   7B1A             
0497   7B1A             
0497   7B1A             
0497   7B1A             
0497   7B1A~            				endif
0497   7B1A~            				endif
0497   7B1A             
0497   7B1A~            				endif
0497   7B1A~            				endif
0497   7B1A             
0497   7B15             
0497   7B15 04          
0497   7B16             
0497   7B16             
0497   7B16~            				endif
0497   7B16~            				endif
0497   7B16~            				endif
0497   7B16             
0497   7B1A             
0497   7B1A~            				endif
0497   7B1A~            				endif
0497   7B1A             
0498   7B1A             			endif
0498   7B1A             
0498   7B1A             
0498   7B1A             
0498   7B1A             
0498   7B1A             
0498   7B1A~            			endif
0498   7B1A~            			endif
0498   7B1A             
0498   7B1A~            			endif
0498   7B1A~            			endif
0498   7B1A             
0498   7AF5             
0498   7AF5 24          
0498   7AF6             
0498   7AF6             
0498   7AF6~            			endif
0498   7AF6~            			endif
0498   7AF6~            			endif
0498   7AF6             
0498   7B1A             
0498   7B1A~            			endif
0498   7B1A~            			endif
0498   7B1A             
0499   7B1A 20 1A       		bra settledEnd
0500   7B1C             notSettled: ; =0 -> was settled, so now it's not
0501   7B1C             			; get the settle time
0502   7B1C 96 53       			ldaA	>tempX + 1
0503   7B1E 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0504   7B20 DE 00       			ldX	>temp
0505   7B22             			
0506   7B22             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0507   7B22 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0508   7B24             			
0509   7B24             			; need to get correct 3 bits from switch settings
0510   7B24 F5 30 00    			bitB	>switchRow
0511   7B27             			ifne ; switch just turned on
0511   7B27             
0511   7B27 27 FE       
0512   7B29 44          				lsrA
0513   7B2A 44          				lsrA
0514   7B2B             			else
0514   7B2B             
0514   7B2B             
0514   7B2B             
0514   7B2B             
0514   7B28             
0514   7B28             
0514   7B28             
0514   7B28~            			else
0514   7B28~            			else
0514   7B28~            			else
0514   7B28~            			else
0514   7B28             
0514   7B28~            			else
0514   7B28~            			else
0514   7B28~            			else
0514   7B28~            			else
0514   7B28             
0514   7B28             
0514   7B28 04          
0514   7B2B             
0514   7B2B 20 FE       
0514   7B2D             
0514   7B2D             
0514   7B2D             
0514   7B2D~            			else
0514   7B2D~            			else
0514   7B2D~            			else
0514   7B2D~            			else
0514   7B2D~            			else
0514   7B2D             
0514   7B2D~            			else
0514   7B2D~            			else
0514   7B2D             
0514   7B2D~            			else
0514   7B2D~            			else
0514   7B2D             
0515   7B2D 48          				aslA
0516   7B2E             			endif
0516   7B2E             
0516   7B2E             
0516   7B2E             
0516   7B2E             
0516   7B2E             
0516   7B2E~            			endif
0516   7B2E~            			endif
0516   7B2E             
0516   7B2E~            			endif
0516   7B2E~            			endif
0516   7B2E             
0516   7B2C             
0516   7B2C 01          
0516   7B2D             
0516   7B2D             
0516   7B2D~            			endif
0516   7B2D~            			endif
0516   7B2D~            			endif
0516   7B2D             
0516   7B2E             
0516   7B2E~            			endif
0516   7B2E~            			endif
0516   7B2E             
0517   7B2E 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0518   7B30             						
0519   7B30 DE 52       			ldX	>tempX
0520   7B32 A7 00       			staA	0, X		; start settling	
0521   7B34 27 C0       			beq	settled		; quick out for 0 settle
0522   7B36             settledEnd:
0523   7B36             			
0524   7B36 32          		pulA
0525   7B37             	endif
0525   7B37             
0525   7B37             
0525   7B37             
0525   7B37             
0525   7B37             
0525   7B37~            	endif
0525   7B37~            	endif
0525   7B37             
0525   7B37~            	endif
0525   7B37~            	endif
0525   7B37             
0525   7ADD             
0525   7ADD 59          
0525   7ADE             
0525   7ADE             
0525   7ADE~            	endif
0525   7ADE~            	endif
0525   7ADE~            	endif
0525   7ADE             
0525   7B37             
0525   7B37~            	endif
0525   7B37~            	endif
0525   7B37             
0526   7B37 7C 00 53    	inc tempX + 1
0527   7B3A 58          	aslB
0528   7B3B 44          	lsrA			; pop lowest bit off, set Z if A is empty
0529   7B3C 26 9C       	bne		swNext 	; more 'switched' bits, keep processing 
0530   7B3E             	
0531   7B3E             	
0532   7B3E             ; update lamps
0533   7B3E             updateLamps:
0534   7B3E             	;jmp updateStrobe
0535   7B3E             
0536   7B3E DE 50       	ldX	>curCol
0537   7B40             	
0538   7B40 86 FF       	ldaA	$FF	;lamp row is inverted
0539   7B42 B7 24 00    	staA	lampCol
0540   7B45 96 07       	ldaA	>strobe
0541   7B47 B7 24 02    	staA	lampStrobe
0542   7B4A             	
0543   7B4A D6 02       	ldaB	>counter
0544   7B4C A6 08       	ldaA	lampCol1, X
0545   7B4E C5 80       	bitB	10000000b 
0546   7B50             	ifeq
0546   7B50             
0546   7B50 26 FE       
0547   7B52 A8 A0       		eorA	flashLampCol1, X
0548   7B54 A4 08       		andA	lampCol1, X
0549   7B56             	endif
0549   7B56             
0549   7B56             
0549   7B56             
0549   7B56             
0549   7B56             
0549   7B56~            	endif
0549   7B56~            	endif
0549   7B56             
0549   7B56~            	endif
0549   7B56~            	endif
0549   7B56             
0549   7B51             
0549   7B51 04          
0549   7B52             
0549   7B52             
0549   7B52~            	endif
0549   7B52~            	endif
0549   7B52~            	endif
0549   7B52             
0549   7B56             
0549   7B56~            	endif
0549   7B56~            	endif
0549   7B56             
0550   7B56 43          	comA	; inverted
0551   7B57             	
0552   7B57 B7 24 00    	staA	lampCol
0553   7B5A 86 00       	ldaA	00
0554   7B5C             
0555   7B5C             ; update solenoids
0556   7B5C             	; if a solenoid is set to <254, --
0557   7B5C             	; if =255, off, otherwise on
0558   7B5C             	; else leave it at 254
0559   7B5C             	
0560   7B5C 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0561   7B5F 86 FE       	ldaA	254
0562   7B61 DE 50       	ldX	>curCol
0563   7B63             	; update solenoid in current 'column' (1-8) 
0564   7B63 A1 40       	cmpA	solenoid1 - cRAM, X
0565   7B65             	ifge 	; solenoid <=254, turn on
0565   7B65             
0565   7B65 25 FE       
0566   7B67             		ifgt	; solenoid < 254, decrement
0566   7B67             
0566   7B67 23 FE       
0567   7B69 6A 40       			dec	solenoid1 - cRAM, X
0568   7B6B             		endif
0568   7B6B             
0568   7B6B             
0568   7B6B             
0568   7B6B             
0568   7B6B             
0568   7B6B~            		endif
0568   7B6B~            		endif
0568   7B6B             
0568   7B6B~            		endif
0568   7B6B~            		endif
0568   7B6B             
0568   7B68             
0568   7B68 02          
0568   7B69             
0568   7B69             
0568   7B69~            		endif
0568   7B69~            		endif
0568   7B69~            		endif
0568   7B69             
0568   7B6B             
0568   7B6B~            		endif
0568   7B6B~            		endif
0568   7B6B             
0569   7B6B 0D          		sec
0570   7B6C             	else
0570   7B6C             
0570   7B6C             
0570   7B6C             
0570   7B6C             
0570   7B66             
0570   7B66             
0570   7B66             
0570   7B66~            	else
0570   7B66~            	else
0570   7B66~            	else
0570   7B66~            	else
0570   7B66             
0570   7B66~            	else
0570   7B66~            	else
0570   7B66~            	else
0570   7B66~            	else
0570   7B66             
0570   7B66             
0570   7B66 07          
0570   7B6C             
0570   7B6C 20 FE       
0570   7B6E             
0570   7B6E             
0570   7B6E             
0570   7B6E~            	else
0570   7B6E~            	else
0570   7B6E~            	else
0570   7B6E~            	else
0570   7B6E~            	else
0570   7B6E             
0570   7B6E~            	else
0570   7B6E~            	else
0570   7B6E             
0570   7B6E~            	else
0570   7B6E~            	else
0570   7B6E             
0571   7B6E 0C          		clc
0572   7B6F             	endif
0572   7B6F             
0572   7B6F             
0572   7B6F             
0572   7B6F             
0572   7B6F             
0572   7B6F~            	endif
0572   7B6F~            	endif
0572   7B6F             
0572   7B6F~            	endif
0572   7B6F~            	endif
0572   7B6F             
0572   7B6D             
0572   7B6D 01          
0572   7B6E             
0572   7B6E             
0572   7B6E~            	endif
0572   7B6E~            	endif
0572   7B6E~            	endif
0572   7B6E             
0572   7B6F             
0572   7B6F~            	endif
0572   7B6F~            	endif
0572   7B6F             
0573   7B6F 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0574   7B72             	; repeat above for second bank
0575   7B72 A1 48       	cmpA	solenoid9 - cRAM, X
0576   7B74             	ifge 	; solenoid <=254, turn on
0576   7B74             
0576   7B74 25 FE       
0577   7B76             		ifgt	; solenoid < 254, decrement
0577   7B76             
0577   7B76 23 FE       
0578   7B78 6A 48       			dec	solenoid9 - cRAM, X
0579   7B7A             		endif
0579   7B7A             
0579   7B7A             
0579   7B7A             
0579   7B7A             
0579   7B7A             
0579   7B7A~            		endif
0579   7B7A~            		endif
0579   7B7A             
0579   7B7A~            		endif
0579   7B7A~            		endif
0579   7B7A             
0579   7B77             
0579   7B77 02          
0579   7B78             
0579   7B78             
0579   7B78~            		endif
0579   7B78~            		endif
0579   7B78~            		endif
0579   7B78             
0579   7B7A             
0579   7B7A~            		endif
0579   7B7A~            		endif
0579   7B7A             
0580   7B7A 0D          		sec
0581   7B7B             	else
0581   7B7B             
0581   7B7B             
0581   7B7B             
0581   7B7B             
0581   7B75             
0581   7B75             
0581   7B75             
0581   7B75~            	else
0581   7B75~            	else
0581   7B75~            	else
0581   7B75~            	else
0581   7B75             
0581   7B75~            	else
0581   7B75~            	else
0581   7B75~            	else
0581   7B75~            	else
0581   7B75             
0581   7B75             
0581   7B75 07          
0581   7B7B             
0581   7B7B 20 FE       
0581   7B7D             
0581   7B7D             
0581   7B7D             
0581   7B7D~            	else
0581   7B7D~            	else
0581   7B7D~            	else
0581   7B7D~            	else
0581   7B7D~            	else
0581   7B7D             
0581   7B7D~            	else
0581   7B7D~            	else
0581   7B7D             
0581   7B7D~            	else
0581   7B7D~            	else
0581   7B7D             
0582   7B7D 0C          		clc
0583   7B7E             	endif
0583   7B7E             
0583   7B7E             
0583   7B7E             
0583   7B7E             
0583   7B7E             
0583   7B7E~            	endif
0583   7B7E~            	endif
0583   7B7E             
0583   7B7E~            	endif
0583   7B7E~            	endif
0583   7B7E             
0583   7B7C             
0583   7B7C 01          
0583   7B7D             
0583   7B7D             
0583   7B7D~            	endif
0583   7B7D~            	endif
0583   7B7D~            	endif
0583   7B7D             
0583   7B7E             
0583   7B7E~            	endif
0583   7B7E~            	endif
0583   7B7E             
0584   7B7E 76 00 29    	ror		solBStatus	
0585   7B81 7A 00 50    	dec		curCol ; undo inc
0586   7B84             	
0587   7B84             ; update strobe	
0588   7B84             updateStrobe:
0589   7B84             	;ldX		curCol
0590   7B84             	;inX 	
0591   7B84 86 08       	ldaA	8 	; pitch
0592   7B86 9B 10       	addA	>curSwitchRowLsb
0593   7B88 97 10       	staA	curSwitchRowLsb
0594   7B8A 78 00 07    	asl	strobe
0595   7B8D 7C 01 6A    	inc	displayCol
0596   7B90 86 00       	ldaA	0
0597   7B92 91 07       	cmpA	>strobe ; strobe done?  reset
0598   7B94             	ifeq		
0598   7B94             
0598   7B94 26 FE       
0599   7B96 96 28       		ldaA	>solAStatus
0600   7B98 B7 22 00    		staA	solenoidA
0601   7B9B 96 29       		ldaA	>solBStatus
0602   7B9D B7 22 02    		staA	solenoidB
0603   7BA0             	
0604   7BA0 86 01       		ldaA	00000001b
0605   7BA2 97 07       		staA	strobe
0606   7BA4             		
0607   7BA4             		;ldX 	#0
0608   7BA4             		
0609   7BA4 86 00       		ldaA	0
0610   7BA6 97 50       		staA	curCol
0611   7BA8 97 51       		staA	curCol + 1
0612   7BAA 97 10       		staA	curSwitchRowLsb
0613   7BAC 97 28       		staA	solAStatus
0614   7BAE 97 29       		staA	solBStatus
0615   7BB0             		
0616   7BB0 F6 01 6A    		ldaB	>displayCol	; reset display col only if it's > 7 
0617   7BB3 CA F0       		oraB	11110000b
0618   7BB5 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0619   7BB7             		ifgt
0619   7BB7             
0619   7BB7 23 FE       
0620   7BB9 B7 01 6A    			staA	displayCol
0621   7BBC             		endif
0621   7BBC             
0621   7BBC             
0621   7BBC             
0621   7BBC             
0621   7BBC             
0621   7BBC~            		endif
0621   7BBC~            		endif
0621   7BBC             
0621   7BBC~            		endif
0621   7BBC~            		endif
0621   7BBC             
0621   7BB8             
0621   7BB8 03          
0621   7BB9             
0621   7BB9             
0621   7BB9~            		endif
0621   7BB9~            		endif
0621   7BB9~            		endif
0621   7BB9             
0621   7BBC             
0621   7BBC~            		endif
0621   7BBC~            		endif
0621   7BBC             
0622   7BBC             	
0623   7BBC B6 01 6B    		ldaA	>state
0624   7BBF 8A 04       		oraA	100b
0625   7BC1 B7 01 6B    		staA	state
0626   7BC4             	else
0626   7BC4             
0626   7BC4             
0626   7BC4             
0626   7BC4             
0626   7B95             
0626   7B95             
0626   7B95             
0626   7B95~            	else
0626   7B95~            	else
0626   7B95~            	else
0626   7B95~            	else
0626   7B95             
0626   7B95~            	else
0626   7B95~            	else
0626   7B95~            	else
0626   7B95~            	else
0626   7B95             
0626   7B95             
0626   7B95 30          
0626   7BC4             
0626   7BC4 20 FE       
0626   7BC6             
0626   7BC6             
0626   7BC6             
0626   7BC6~            	else
0626   7BC6~            	else
0626   7BC6~            	else
0626   7BC6~            	else
0626   7BC6~            	else
0626   7BC6             
0626   7BC6~            	else
0626   7BC6~            	else
0626   7BC6             
0626   7BC6~            	else
0626   7BC6~            	else
0626   7BC6             
0627   7BC6 7C 00 51    		inc	curCol + 1
0628   7BC9             	endif
0628   7BC9             
0628   7BC9             
0628   7BC9             
0628   7BC9             
0628   7BC9             
0628   7BC9~            	endif
0628   7BC9~            	endif
0628   7BC9             
0628   7BC9~            	endif
0628   7BC9~            	endif
0628   7BC9             
0628   7BC5             
0628   7BC5 03          
0628   7BC6             
0628   7BC6             
0628   7BC6~            	endif
0628   7BC6~            	endif
0628   7BC6~            	endif
0628   7BC6             
0628   7BC9             
0628   7BC9~            	endif
0628   7BC9~            	endif
0628   7BC9             
0629   7BC9             	
0630   7BC9 3B          	rti
0631   7BCA             afterInterrupt:
0632   7BCA             
0633   7FF8             pointers: 	.org $7FF8  	
0634   7FF8             	.msfirst
0635   7FF8 7A 3E       	.dw interrupt			
0636   7FFA 7A 3E       	.dw interrupt			
0637   7FFC 7A 3E       	.dw interrupt			
0638   7FFE 78 00       	.dw main
0639   8000             	
0640   8000             	
0641   8000             	.endtasm: Number of errors = 0
