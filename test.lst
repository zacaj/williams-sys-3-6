0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             attractX:		.equ RAM + $2A ; +
0041+  0000             forkX			.equ RAM + $2C ; +
0042+  0000             curCol:			.equ RAM + $50 ; +
0043+  0000             tempX:			.equ RAM + $52 ; +
0044+  0000             queueHead:		.equ RAM + $54 ; +
0045+  0000             queueTail:		.equ RAM + $56 ; +
0046+  0000             tempQ:			.equ RAM + $58 ; +
0047+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0048+  0000             queueEnd:		.equ RAM + $6D
0049+  0000             ;
0050+  0000             displayBcd1:	.equ RAM + $70
0051+  0000             displayBcd16:	.equ RAM + $7F
0052+  0000             ballCount:		.equ displayBcd1 + 7
0053+  0000             waitLeft: 		.equ RAM + $80 ; dec every 8ms
0054+  0000             waitLeftEnd:		.equ RAM + $87
0055+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0056+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0057+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0058+  0000             flashLampCol1:		.equ RAM + $A0
0059+  0000             flashLampCol8:		.equ RAM + $A7
0060+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0061+  0000             lastSwitch:		.equ RAM + $A8
0062+  0000             dropResetTimer:		.equ RAM + $A9 ; max 127
0063+  0000             dropsDown		.equ RAM + $AA
0064+  0000             p_Bonus:		.equ RAM + $B0
0065+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0066+  0000             p_DropsDown:		.equ RAM + $B5
0067+  0000             p_LampCol2:		.equ RAM + $B6 ; -> B9
0068+  0000             p_EachDropDown:		.equ RAM + $BA ; -> BD
0069+  0000             p_BonusLeft:		.equ RAM + $BE
0070+  0000             bonusTimer:		.equ RAM + $BF ; counts down from 127 during bonus
0071+  0000             
0072+  0000             
0073+  0000             
0074+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0075+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0076+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0077+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0078+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0079+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0080+  0000             #DEFINE s(n) 		(0 + n)
0081+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0082+  0000             pA_10:			.equ pA_1m + 5
0083+  0000             pB_1m:			.equ pA_10 + 1
0084+  0000             pB_10:			.equ pB_1m + 5
0085+  0000             pC_1m:			.equ pB_10 + 1
0086+  0000             pC_10:			.equ pC_1m + 5
0087+  0000             pD_1m:			.equ pC_10 + 1
0088+  0000             pD_10:			.equ pD_1m + 5 
0089+  0000             ; 
0090+  0000             displayCol:		.equ cRAM + $6A
0091+  0000             state:			.equ cRAM + $6B	; _ | strobe reset | don't validate | _
0092+  0000             
0093+  0000             instant:		.equ 4
0094+  0000             debounce:		.equ 1
0095+  0000             slow:			.equ 2
0096+  0000             
0097+  0000             switchSettle:	.equ cRAM + $30
0098+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 75    		cpX	displayBcd1 + 5
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 75    			cpX	displayBcd1 + 5
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7D    		cpX	displayBcd1 + 8 + 5
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7D    			cpX	displayBcd1 + 8 + 5
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0F       	ldaB	>lc(8) ; gameover
0101+  7C8C C5 20       	bitB	lr(6)
0102+  7C8E             	ifne
0102+  7C8E             
0102+  7C8E 27 FE       
0103+  7C90 39          		rts
0104+  7C91             	endif
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C8F             
0104+  7C8F 01          
0104+  7C90             
0104+  7C90             
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0105+  7C91             	
0106+  7C91 D6 0E       	ldaB	>lc(7)
0107+  7C93 C5 02       	bitB	lr(2)
0108+  7C95 26 1A       	bne	blankP2
0109+  7C97 C5 04       	bitB	lr(3)
0110+  7C99 26 22       	bne	blankP3
0111+  7C9B C5 08       	bitB	lr(4)
0112+  7C9D 26 2A       	bne	blankP4
0113+  7C9F C5 10       	bitB	lr(5)
0114+  7CA1 26 32       	bne	blankDone
0115+  7CA3 20 00       	bra	blankP1
0116+  7CA5             blankP1:
0117+  7CA5 86 F0       	ldaA	$F0
0118+  7CA7 9A 74       	oraA	>displayBcd1 + 4
0119+  7CA9 97 74       	staA	displayBcd1 + 4
0120+  7CAB 86 F0       	ldaA	$F0
0121+  7CAD 9A 75       	oraA	>displayBcd1 + 5
0122+  7CAF 97 75       	staA	displayBcd1 + 5
0123+  7CB1             blankP2:
0124+  7CB1 86 F0       	ldaA	$F0
0125+  7CB3 9A 7C       	oraA	>displayBcd1 + 12
0126+  7CB5 97 7C       	staA	displayBcd1 + 12
0127+  7CB7 86 F0       	ldaA	$F0
0128+  7CB9 9A 7D       	oraA	>displayBcd1 + 13
0129+  7CBB 97 7D       	staA	displayBcd1 + 13
0130+  7CBD             blankP3:
0131+  7CBD 86 0F       	ldaA	$0F
0132+  7CBF 9A 74       	oraA	>displayBcd1 + 4
0133+  7CC1 97 74       	staA	displayBcd1 + 4
0134+  7CC3 86 0F       	ldaA	$0F
0135+  7CC5 9A 75       	oraA	>displayBcd1 + 5
0136+  7CC7 97 75       	staA	displayBcd1 + 5
0137+  7CC9             blankP4:
0138+  7CC9 86 0F       	ldaA	$0F
0139+  7CCB 9A 7C       	oraA	>displayBcd1 + 12
0140+  7CCD 97 7C       	staA	displayBcd1 + 12
0141+  7CCF 86 0F       	ldaA	$0F
0142+  7CD1 9A 7D       	oraA	>displayBcd1 + 13
0143+  7CD3 97 7D       	staA	displayBcd1 + 13
0144+  7CD5             blankDone:
0145+  7CD5 39          	rts
0146+  7CD6             	
0147+  7CD6             refreshPlayerScores:
0148+  7CD6 BD 7C 00    	jsr copyScores13
0149+  7CD9 BD 7C 45    	jsr copyScores24
0150+  7CDC             	
0151+  7CDC 86 F0       	ldaA	$F0
0152+  7CDE B1 01 50    	cmpA	>pA_1m
0153+  7CE1 26 29       	bne	refresh_1m
0154+  7CE3 B1 01 56    	cmpA	>pB_1m
0155+  7CE6 26 24       	bne	refresh_1m	
0156+  7CE8 B1 01 5C    	cmpA	>pC_1m
0157+  7CEB 26 1F       	bne	refresh_1m
0158+  7CED B1 01 62    	cmpA	>pD_1m
0159+  7CF0 26 1A       	bne	refresh_1m
0160+  7CF2             	
0161+  7CF2 CE 00 70    	ldX	displayBcd1
0162+  7CF5             refresh_10xloop:
0163+  7CF5 A6 01       	ldaA	1, X
0164+  7CF7 A7 00       	staA	0,X
0165+  7CF9 A6 09       	ldaA	8 + 1, X
0166+  7CFB A7 08       	staA	8, X
0167+  7CFD 08          	inX
0168+  7CFE 8C 00 75    	cpX	displayBcd1+5
0169+  7D01 26 F2       	bne	refresh_10xloop
0170+  7D03 86 00       	ldaA	0
0171+  7D05 97 75       	staA	displayBcd1 + 5
0172+  7D07 97 7D       	staA	displayBcd1 + 5 + 8
0173+  7D09 7E 7C 8A    	jmp blankNonPlayerScores
0174+  7D0C             refresh_1m:
0175+  7D0C 7E 7C 8A    	jmp blankNonPlayerScores
0176+  7D0F             	
0177+  7D0F             	
0178+  7D0F             ; add score instantly
0179+  7D0F             ; X = place in p*_1* to add the score to
0180+  7D0F             ; A = amount to add (max 9)
0181+  7D0F             ; tail call
0182+  7D0F             _addScoreI:
0183+  7D0F AB 00       	addA	0, X
0184+  7D11 8A F0       	oraA	11110000b
0185+  7D13             	ifcs ; overflowed, need to increment next number
0185+  7D13             
0185+  7D13 24 FE       
0186+  7D15 8B 06       		addA	6	; adjust A back into BCD
0187+  7D17 A7 00       		staA	0, X
0188+  7D19             addScore_carryOver:		; loop to propagate carry
0189+  7D19 09          		deX	; go to next decimal place
0190+  7D1A A6 00       		ldaA	0, X	
0191+  7D1C 8A F0       		oraA	11110000b
0192+  7D1E 81 F9       		cmpA	$F9
0193+  7D20             		ifeq			; if it's already a 9, reset it and carry again
0193+  7D20             
0193+  7D20 26 FE       
0194+  7D22 6F 00       			clr	0, X
0195+  7D24 27 F3       			beq addScore_carryOver
0196+  7D26             		else			; otherwise ++ it and done
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D21             
0196+  7D21             
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21             
0196+  7D21 06          
0196+  7D26             
0196+  7D26 20 FE       
0196+  7D28             
0196+  7D28             
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0197+  7D28 6C 00       			inc	0, X
0198+  7D2A             		endif	
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D27             
0198+  7D27 02          
0198+  7D28             
0198+  7D28             
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0199+  7D2A             	else
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D14             
0199+  7D14             
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14             
0199+  7D14 17          
0199+  7D2A             
0199+  7D2A 20 FE       
0199+  7D2C             
0199+  7D2C             
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0200+  7D2C 81 F9       		cmpA	$F9
0201+  7D2E             		ifgt ; >9 -> need to adjust back into BCD
0201+  7D2E             
0201+  7D2E 23 FE       
0202+  7D30 8B 06       			addA	6
0203+  7D32 A7 00       			staA	0, X
0204+  7D34             addScore_carryDa:
0205+  7D34 09          			deX
0206+  7D35 A6 00       			ldaA	0, X
0207+  7D37 8A F0       			oraA	11110000b
0208+  7D39 81 F9       			cmpA	$F9
0209+  7D3B             			ifeq
0209+  7D3B             
0209+  7D3B 26 FE       
0210+  7D3D 6F 00       				clr	0, X
0211+  7D3F 27 F3       				beq 	addScore_carryDa
0212+  7D41             			else
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C             
0212+  7D3C 06          
0212+  7D41             
0212+  7D41 20 FE       
0212+  7D43             
0212+  7D43             
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0213+  7D43 6C 00       				inc	0, X
0214+  7D45             			endif	
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D42             
0214+  7D42 02          
0214+  7D43             
0214+  7D43             
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0215+  7D45             		else
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F             
0215+  7D2F 17          
0215+  7D45             
0215+  7D45 20 FE       
0215+  7D47             
0215+  7D47             
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0216+  7D47 A7 00       			staA	0, X
0217+  7D49             		endif
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D46             
0217+  7D46 02          
0217+  7D47             
0217+  7D47             
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0218+  7D49             	endif
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D2B             
0218+  7D2B 1D          
0218+  7D2C             
0218+  7D2C             
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0219+  7D49             
0220+  7D49 7E 7C D6    	jmp refreshPlayerScores
0221+  7D4C             	
0222+  7D4C 39          	rts
0223+  7D4D             	
0224+  7D4D             ; t A,X
0225+  7D4D             setXToCurPlayer10:
0226+  7D4D 96 0F       	ldaA	>lc(8)
0227+  7D4F 85 01       	bitA	0001b
0228+  7D51 27 04       	beq	_addScore10N_p2
0229+  7D53 CE 01 55    	ldX	pA_10
0230+  7D56 39          	rts
0231+  7D57             _addScore10N_p2:
0232+  7D57 85 02       	bitA	0010b
0233+  7D59 27 04       	beq	_addScore10N_p3
0234+  7D5B CE 01 5B    	ldX	pB_10
0235+  7D5E 39          	rts
0236+  7D5F             _addScore10N_p3:
0237+  7D5F 85 04       	bitA	0100b
0238+  7D61 27 04       	beq	_addScore10N_p4
0239+  7D63 CE 01 61    	ldX	pC_10
0240+  7D66 39          	rts
0241+  7D67             _addScore10N_p4:
0242+  7D67 CE 01 67    	ldX	pD_10
0243+  7D6A 39          	rts
0244+  7D6B             
0245+  7D6B             ; suspends execution for A ms and returns to queue processor
0246+  7D6B             ; should only be called from switch callbacks
0247+  7D6B             ; trashes everything but B
0248+  7D6B             _delay:	
0249+  7D6B CE 00 7F    	ldX	waitLeft - 1
0250+  7D6E             delay_findEmptyLoop:
0251+  7D6E 08          	inX
0252+  7D6F 6D 00       	tst	0, X
0253+  7D71 26 FB       	bne 	delay_findEmptyLoop 
0254+  7D73             	
0255+  7D73             	; X = first waitLeft that = 0
0256+  7D73 E7 18       	staB	waitReg - waitLeft, X
0257+  7D75 33          	pulB	; A = MSB of PC
0258+  7D76 E7 08       	staB	waitMsb - waitLeft, X
0259+  7D78 33          	pulB	; A = LSB of PC
0260+  7D79 E7 10       	staB	waitLsb - waitLeft, X
0261+  7D7B A7 00       	staA	0, X
0262+  7D7D             	; time and add stored
0263+  7D7D 7E 79 DD    	jmp skipEvent
0264+  7D80             	
0265+  7D80             _fork:	
0266+  7D80 CE 00 7F    	ldX	waitLeft - 1
0267+  7D83             fork_findEmptyLoop:
0268+  7D83 08          	inX
0269+  7D84 6D 00       	tst	0, X
0270+  7D86 26 FB       	bne 	fork_findEmptyLoop 
0271+  7D88             	
0272+  7D88             	; X = first waitLeft that = 0
0273+  7D88 E7 18       	staB	waitReg - waitLeft, X
0274+  7D8A 33          	pulB	; A = MSB of PC
0275+  7D8B E7 08       	staB	waitMsb - waitLeft, X
0276+  7D8D 33          	pulB	; A = LSB of PC
0277+  7D8E CB 03       	addB	3
0278+  7D90             	ifcs
0278+  7D90             
0278+  7D90 24 FE       
0279+  7D92 6C 08       		inc	waitMsb - waitLeft, X
0280+  7D94             	endif
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0280+  7D91             
0280+  7D91 02          
0280+  7D92             
0280+  7D92             
0280+  7D92~            	endif
0280+  7D92~            	endif
0280+  7D92~            	endif
0280+  7D92             
0280+  7D94             
0280+  7D94~            	endif
0280+  7D94~            	endif
0280+  7D94             
0281+  7D94 E7 10       	staB	waitLsb - waitLeft, X
0282+  7D96 A7 00       	staA	0, X
0283+  7D98             	; time and add stored
0284+  7D98 C0 03       	subB	3
0285+  7D9A 37          	pshB
0286+  7D9B E6 08       	ldaB	waitMsb - waitLeft, X
0287+  7D9D             	ifcs
0287+  7D9D             
0287+  7D9D 24 FE       
0288+  7D9F 5A          		decB
0289+  7DA0             	endif
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0289+  7D9E             
0289+  7D9E 01          
0289+  7D9F             
0289+  7D9F             
0289+  7D9F~            	endif
0289+  7D9F~            	endif
0289+  7D9F~            	endif
0289+  7D9F             
0289+  7DA0             
0289+  7DA0~            	endif
0289+  7DA0~            	endif
0289+  7DA0             
0290+  7DA0 37          	pshB
0291+  7DA1 39          	rts
0292+  7DA2             	
0293+  7DA2             	
0294+  7DA2             	
0295+  7DA2             resetScores:
0296+  7DA2 86 00       	ldaA	00
0297+  7DA4 CE 01 50    	ldX	pA_1m
0298+  7DA7             _zeroScores:
0299+  7DA7 A7 00       	staA	0, X
0300+  7DA9 08          	inX
0301+  7DAA 8C 01 68    	cpX	pD_10 + 1
0302+  7DAD 26 F8       	bne	_zeroScores
0303+  7DAF             	
0304+  7DAF 86 00       	ldaA	0
0305+  7DB1 97 12       	staA	curPlayer
0306+  7DB3 97 13       	staA	curPlayer + 1
0307+  7DB5 86 FF       	ldaA	$FF
0308+  7DB7 97 76       	staA	displayBcd1 + 6
0309+  7DB9 97 7E       	staA	displayBcd1 + 14
0310+  7DBB 97 7F       	staA	displayBcd1 + 15
0311+  7DBD             	
0312+  7DBD BD 7C D6    	jsr	refreshPlayerScores
0313+  7DC0 39          	rts
0314+  7DC1             
0315+  7DC1             ; trash ~B
0316+  7DC1             ; delay for ms (8-2000)
0317+  7DC1             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0318+  7DC1             ; makes a second thread that will skip the next (3b) instruction
0319+  7DC1             #DEFINE fork(ms) ldaA ms/8\ jsr _fork
0320+  7DC1             #DEFINE beginFork()	
0321+  7DC1             #DEFINE endFork()	ldX >forkX\ jmp afterFork
0322+  7DC1             	
0323+  7DC1             ; trashes B (max 104ms)
0324+  7DC1             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0325+  7DC1             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0326+  7DC1             
0327+  7DC1             ; trashes AX
0328+  7DC1             ; place: 1-5 = 10s thru 100ks
0329+  7DC1             ; amount: 1-9
0330+  7DC1             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0331+  7DC1             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0332+  7DC1             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0333+  7DC1             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0334+  7DC1             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0335+  7DC1             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0336+  7DC1             
0337+  7DC1             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0338+  7DC1             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0339+  7DC1             
0340+  7DC1             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0341+  7DC1             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0342+  7DC1             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0343+  7DC1             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0344+  7DC1             
0345+  7DC1             #include "attract.asm"
0001++ 7DC1             attractStart:
0002++ 7DC1 08          	.db 00001000b
0003++ 7DC2 18          	.db 00011000b
0004++ 7DC3 10          	.db 00010000b
0005++ 7DC4 80          	.db 10000000b
0006++ 7DC5 01          	.db 00000001b
0007++ 7DC6             	
0008++ 7DC6 50          	.db 01010000b
0009++ 7DC7 40          	.db 01000000b
0010++ 7DC8 08          	.db 00001000b
0011++ 7DC9 80          	.db 10000000b
0012++ 7DCA 03          	.db 00000011b
0013++ 7DCB             	
0014++ 7DCB 20          	.db 00100000b
0015++ 7DCC 28          	.db 00101000b
0016++ 7DCD 04          	.db 00000100b
0017++ 7DCE 80          	.db 10000000b
0018++ 7DCF 07          	.db 00000111b
0019++ 7DD0             	
0020++ 7DD0 44          	.db 01000100b
0021++ 7DD1 80          	.db 10000000b
0022++ 7DD2 02          	.db 00000010b
0023++ 7DD3 80          	.db 10000000b
0024++ 7DD4 0F          	.db 00001111b
0025++ 7DD5             	
0026++ 7DD5 08          	.db 00001000b
0027++ 7DD6 18          	.db 00011000b
0028++ 7DD7 01          	.db 00000001b
0029++ 7DD8 80          	.db 10000000b
0030++ 7DD9 1F          	.db 00011111b
0031++ 7DDA             	
0032++ 7DDA 50          	.db 01010000b
0033++ 7DDB 40          	.db 01000000b
0034++ 7DDC 02          	.db 00000010b
0035++ 7DDD 80          	.db 10000000b
0036++ 7DDE 3F          	.db 00111111b
0037++ 7DDF             	
0038++ 7DDF 20          	.db 00100000b
0039++ 7DE0 28          	.db 00101000b
0040++ 7DE1 04          	.db 00000100b
0041++ 7DE2 80          	.db 10000000b
0042++ 7DE3 7F          	.db 01111111b
0043++ 7DE4             	
0044++ 7DE4 44          	.db 01000100b
0045++ 7DE5 80          	.db 10000000b
0046++ 7DE6 08          	.db 00001000b
0047++ 7DE7 80          	.db 10000000b
0048++ 7DE8 FF          	.db 11111111b
0049++ 7DE9             attractEnd:0006   7DE9             
0007   7DE9             #include "game.asm"
0001+  7DE9             ; Laser Ball solenoids
0002+  7DE9             ;#DEFINE KICKOUT 		01
0003+  7DE9             ;#DEFINE LEFT_KICKER 	02
0004+  7DE9             ;#DEFINE DROP_LA			03
0005+  7DE9             ;#DEFINE DROP_SER		04
0006+  7DE9             ;#DEFINE EJECT_HOLE		05
0007+  7DE9             ;#DEFINE DROP_BA			06
0008+  7DE9             ;#DEFINE DROP_LL			07
0009+  7DE9             ;#DEFINE RIGHT_KICKER	08
0010+  7DE9             ;#DEFINE SOUND1			09 ; thru 13
0011+  7DE9             ;#DEFINE KNOCKER			14
0012+  7DE9             ;#DEFINE	FLASHERS		15
0013+  7DE9             ;#DEFINE COIN_LOCKOUT	16
0014+  7DE9             
0015+  7DE9             ; Hot Tip solenoids
0016+  7DE9             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7DE9             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7DE9             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7DE9             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7DE9             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7DE9             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7DE9             #DEFINE CHIME_10	SOL(09, 16)
0023+  7DE9             #DEFINE CHIME_100	SOL(10, 16)
0024+  7DE9             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7DE9             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7DE9             #DEFINE CLICKER		SOL(13, 8)
0027+  7DE9             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7DE9             #DEFINE BUZZER		SOL(15, 100)
0029+  7DE9             #DEFINE SHORT_PAUSE 	115
0030+  7DE9             
0031+  7DE9             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7DE9             #DEFINE done(v)	\
0033+  7DE9             #DEFCONT	#IF (v==0)
0034+  7DE9             #DEFCONT		\ ldaA 10b
0035+  7DE9             #DEFCONT		\ oraA >state
0036+  7DE9             #DEFCONT		\ staA state
0037+  7DE9             #DEFCONT	\#ENDIF
0038+  7DE9             #DEFCONT	\ jmp afterQueueEvent
0039+  7DE9             	
0040+  7DE9             	
0041+  7DE9             _addScore10N:
0042+  7DE9 BD 7D 4D    	jsr setXToCurPlayer10
0043+  7DEC 86 01       	ldaA	1
0044+  7DEE BD 7D 0F    	jsr _addScoreI
0045+  7DF1 86 02       	fireSolenoidA(CHIME_10)
0045+  7DF3 B7 01 48    
0046+  7DF6 39          	rts
0047+  7DF7             _addScore100N:
0048+  7DF7 BD 7D 4D    	jsr setXToCurPlayer10
0049+  7DFA 09          	deX
0050+  7DFB 86 01       	ldaA	1
0051+  7DFD BD 7D 0F    	jsr _addScoreI
0052+  7E00 86 02       	fireSolenoidA(CHIME_100)	
0052+  7E02 B7 01 49    
0053+  7E05 39          	rts
0054+  7E06             _addScore1000N:
0055+  7E06 BD 7D 4D    	jsr setXToCurPlayer10
0056+  7E09 09          	deX
0057+  7E0A 09          	deX
0058+  7E0B 86 01       	ldaA	1
0059+  7E0D BD 7D 0F    	jsr _addScoreI
0060+  7E10 86 02       	fireSolenoidA(CHIME_1000)
0060+  7E12 B7 01 4A    
0061+  7E15 39          	rts
0062+  7E16             #DEFINE score10() jsr _addScore10N
0063+  7E16             #DEFINE score100() jsr _addScore100N
0064+  7E16             #DEFINE score1000() jsr _addScore1000N
0065+  7E16             #DEFINE score500() \ jsr _addScore100N
0066+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7E16             #DEFCONT	\ jsr _addScore100N
0069+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7E16             #DEFCONT	\ jsr _addScore100N
0072+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7E16             #DEFCONT	\ jsr _addScore100N
0075+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7E16             #DEFCONT	\ jsr _addScore100N
0078+  7E16             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7E16             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7E16             
0081+  7E16             #DEFINE advBonus()	jsr advanceBonus
0082+  7E16             
0083+  7E16             advanceBonus:
0084+  7E16 86 08       	ldaA	1000b
0085+  7E18 B5 01 6B    	bitA	>state
0086+  7E1B             	ifne
0086+  7E1B             
0086+  7E1B 27 FE       
0087+  7E1D 39          		rts
0088+  7E1E             	endif
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0088+  7E1C             
0088+  7E1C 01          
0088+  7E1D             
0088+  7E1D             
0088+  7E1D~            	endif
0088+  7E1D~            	endif
0088+  7E1D~            	endif
0088+  7E1D             
0088+  7E1E             
0088+  7E1E~            	endif
0088+  7E1E~            	endif
0088+  7E1E             
0089+  7E1E 7C 00 B0    	inc 	p_Bonus
0090+  7E21 86 7F       	lampOff(8,5) ; 1k
0090+  7E23 94 0C       
0090+  7E25 97 0C       
0091+  7E27 C6 02       	ldaB	2
0092+  7E29 86 08       	fork(64)
0092+  7E2B BD 7D 80    
0093+  7E2E 39          	rts
0094+  7E2F 01          	nop
0095+  7E30 01          	nop
0096+  7E31             	beginFork()
0097+  7E31             advanceBonus_loop:
0098+  7E31 7A 00 B0    	dec	p_Bonus
0099+  7E34 BD 60 C3    	jsr 	bonusLights
0100+  7E37 7C 00 B0    	inc	p_Bonus
0101+  7E3A 86 FE       	ldaA	11111110b
0102+  7E3C             	
0103+  7E3C 37          	pshB
0104+  7E3D 5A          	decB
0105+  7E3E             inner:
0106+  7E3E 5A          	decB
0107+  7E3F 27 04       	beq	innerEnd
0108+  7E41 0D          	seC
0109+  7E42 49          	rolA
0110+  7E43 20 F9       	bra 	inner
0111+  7E45             innerEnd:
0112+  7E45 33          	pulB
0113+  7E46             	
0114+  7E46 94 0D       	andA	>lc(6)
0115+  7E48 97 0D       	staA	lc(6)
0116+  7E4A 86 08       	delay(64)
0116+  7E4C BD 7D 6B    
0117+  7E4F 5C          	incB
0118+  7E50 D1 B0       	cmpB	>p_Bonus
0119+  7E52 2D DD       	blt	advanceBonus_loop
0120+  7E54 D6 B0       	ldaB	>p_Bonus
0121+  7E56 BD 60 C3    	jsr 	bonusLights
0122+  7E59 DE 2C       	endFork()
0122+  7E5B 7E 79 3C    
0123+  7E5E             	
0124+  7E5E             ; switch callbacks:
0125+  7E5E             
0126+  60C0             none:	.org $6000 + 192 ; size of callback table
0127+  60C0             	done(1)
0127+  60C0~            	done(1)
0127+  60C0~            	done(1)
0127+  60C0~            	done(1)
0127+  60C0~            	done(1)
0127+  60C0             
0127+  60C0 7E 79 94    
0128+  60C3             	
0129+  60C3             bonusLights:
0130+  60C3 86 00       	ldaA	0
0131+  60C5 97 0C       	staA	lc(5)
0132+  60C7 97 0D       	staA	lc(6)
0133+  60C9 7D 00 B0    	tst	>p_Bonus
0134+  60CC 27 11       	beq	bonusLights_done
0135+  60CE             	
0136+  60CE 86 80       	lampOn(8,5) ; 1k
0136+  60D0 9A 0C       
0136+  60D2 97 0C       
0137+  60D4             	
0138+  60D4 96 B0       	ldaA	>p_Bonus
0139+  60D6             bonusLights_loop:
0140+  60D6 4A          	decA
0141+  60D7 27 06       	beq 	bonusLights_done
0142+  60D9 0D          	seC
0143+  60DA 79 00 0D    	rol	lc(6)
0144+  60DD 20 F7       	bra	bonusLights_loop
0145+  60DF             	
0146+  60DF             bonusLights_done
0147+  60DF             
0148+  60DF 86 09       	ldaA	9
0149+  60E1 91 B0       	cmpA	>p_Bonus
0150+  60E3             	ifge	
0150+  60E3             
0150+  60E3 25 FE       
0151+  60E5             	else	; bonus >= 10?
0151+  60E5             
0151+  60E5             
0151+  60E5             
0151+  60E5             
0151+  60E4             
0151+  60E4             
0151+  60E4             
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4             
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4~            	else	; bonus >= 10?
0151+  60E4             
0151+  60E4             
0151+  60E4 02          
0151+  60E5             
0151+  60E5 20 FE       
0151+  60E7             
0151+  60E7             
0151+  60E7             
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7             
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7             
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7~            	else	; bonus >= 10?
0151+  60E7             
0152+  60E7 86 0A       		ldaA	10
0153+  60E9 97 B0       		staA	p_Bonus
0154+  60EB 86 40       		lampOn(7,5) ; 10k light
0154+  60ED 9A 0C       
0154+  60EF 97 0C       
0155+  60F1             	endif
0155+  60F1             
0155+  60F1             
0155+  60F1             
0155+  60F1             
0155+  60F1             
0155+  60F1~            	endif
0155+  60F1~            	endif
0155+  60F1             
0155+  60F1~            	endif
0155+  60F1~            	endif
0155+  60F1             
0155+  60E6             
0155+  60E6 0A          
0155+  60E7             
0155+  60E7             
0155+  60E7~            	endif
0155+  60E7~            	endif
0155+  60E7~            	endif
0155+  60E7             
0155+  60F1             
0155+  60F1~            	endif
0155+  60F1~            	endif
0155+  60F1             
0156+  60F1             	
0157+  60F1 39          	rts
0158+  60F2             	
0159+  60F2             	
0160+  60F2             startBall:
0161+  60F2 DE 12       	ldX	>curPlayer
0162+  60F4 86 01       	ldaA	1
0163+  60F6 97 B0       	staA	p_Bonus
0164+  60F8 86 80       	lampOn(8,5)
0164+  60FA 9A 0C       
0164+  60FC 97 0C       
0165+  60FE B6 22 03    	enablePf
0165+  6101 8A 38       
0165+  6103 B7 22 03    
0166+  6106             	
0167+  6106 86 00       	ldaA	0
0168+  6108 97 B5       	staA	p_DropsDown
0169+  610A 86 41       	ldaA	65
0170+  610C 97 A9       	staA	dropResetTimer
0171+  610E             	
0172+  610E 86 00       	ldaA	0
0173+  6110 97 AA       	staA	dropsDown
0174+  6112             	
0175+  6112 C6 0C       	fireSolenoid(DROP_HOT)
0175+  6114 F7 01 42    
0176+  6117 86 12       	delay(150)
0176+  6119 BD 7D 6B    
0177+  611C C6 0C       	fireSolenoid(DROP_TIP)
0177+  611E F7 01 41    
0178+  6121 86 12       	delay(150)
0178+  6123 BD 7D 6B    
0179+  6126             	
0180+  6126 86 FF       	ldaA	$FF
0181+  6128 97 A8       	staA	lastSwitch
0182+  612A             	
0183+  612A             	; clear lights
0184+  612A CE 00 08    	ldX	lampCol1
0185+  612D 86 00       	ldaA	0b
0186+  612F             lClearLights:
0187+  612F A7 00       	staA	0, X
0188+  6131 A7 98       	staA	flashLampCol1 - lampCol1, X
0189+  6133 08          	inX
0190+  6134 8C 00 0E    	cpX	lc(6) + 1
0191+  6137 26 F6       	bne	lClearLights
0192+  6139             	;
0193+  6139             	
0194+  6139             	; init lights for player data
0195+  6139 DE 12       	ldX	>curPlayer
0196+  613B A6 B1       	ldaA	p_Ejects, X
0197+  613D 97 0B       	staA	lc(4)
0198+  613F E6 B6       	ldaB	p_LampCol2, X
0199+  6141 C5 02       	bitB	lr(2)
0200+  6143             	ifne 
0200+  6143             
0200+  6143 27 FE       
0201+  6145 86 02       		lampOn(2,3)
0201+  6147 9A 0A       
0201+  6149 97 0A       
0202+  614B C4 FD       		andB	11111101b
0203+  614D             	endif
0203+  614D             
0203+  614D             
0203+  614D             
0203+  614D             
0203+  614D             
0203+  614D~            	endif
0203+  614D~            	endif
0203+  614D             
0203+  614D~            	endif
0203+  614D~            	endif
0203+  614D             
0203+  6144             
0203+  6144 08          
0203+  6145             
0203+  6145             
0203+  6145~            	endif
0203+  6145~            	endif
0203+  6145~            	endif
0203+  6145             
0203+  614D             
0203+  614D~            	endif
0203+  614D~            	endif
0203+  614D             
0204+  614D D7 09       	staB	lc(2)
0205+  614F             	
0206+  614F 86 40       	ldaA	lr(7) ; shoot again
0207+  6151 95 0F       	bitA	>lc(8)
0208+  6153             	ifne
0208+  6153             
0208+  6153 27 FE       
0209+  6155 86 01       		lampOn(1,3) ; shoot again
0209+  6157 9A 0A       
0209+  6159 97 0A       
0210+  615B             	endif
0210+  615B             
0210+  615B             
0210+  615B             
0210+  615B             
0210+  615B             
0210+  615B~            	endif
0210+  615B~            	endif
0210+  615B             
0210+  615B~            	endif
0210+  615B~            	endif
0210+  615B             
0210+  6154             
0210+  6154 06          
0210+  6155             
0210+  6155             
0210+  6155~            	endif
0210+  6155~            	endif
0210+  6155~            	endif
0210+  6155             
0210+  615B             
0210+  615B~            	endif
0210+  615B~            	endif
0210+  615B             
0211+  615B             	
0212+  615B             	; flash player light
0213+  615B 86 0F       	ldaA	00001111b ; player up lights
0214+  615D 9A A7       	oraA	>flc(8)
0215+  615F 97 A7       	staA	flc(8)
0216+  6161             	
0217+  6161 86 01       	ldaA	sr(1) ; check outhole
0218+  6163 95 21       	bitA	>sc(2)
0219+  6165             	ifne ; ball in hole
0219+  6165             
0219+  6165 27 FE       
0220+  6167 C6 02       		fireSolenoid(OUTHOLE)
0220+  6169 F7 01 44    
0221+  616C             	endif
0221+  616C             
0221+  616C             
0221+  616C             
0221+  616C             
0221+  616C             
0221+  616C~            	endif
0221+  616C~            	endif
0221+  616C             
0221+  616C~            	endif
0221+  616C~            	endif
0221+  616C             
0221+  6166             
0221+  6166 05          
0221+  6167             
0221+  6167             
0221+  6167~            	endif
0221+  6167~            	endif
0221+  6167~            	endif
0221+  6167             
0221+  616C             
0221+  616C~            	endif
0221+  616C~            	endif
0221+  616C             
0222+  616C             	
0223+  616C 39          	rts
0224+  616D             	
0225+  616D             	
0226+  616D             startGame:
0227+  616D 86 02       	lampOn(2,7) ; one player
0227+  616F 9A 0E       
0227+  6171 97 0E       
0228+  6173             	
0229+  6173 86 DF       	lampOff(6,8) ; game over
0229+  6175 94 0F       
0229+  6177 97 0F       
0230+  6179             	
0231+  6179 C6 02       	fireSolenoid(CHIME_10)
0231+  617B F7 01 48    
0232+  617E 86 0E       	delay(SHORT_PAUSE)
0232+  6180 BD 7D 6B    
0233+  6183 C6 02       	fireSolenoid(CHIME_10)
0233+  6185 F7 01 48    
0234+  6188 86 0E       	delay(SHORT_PAUSE)
0234+  618A BD 7D 6B    
0235+  618D C6 02       	fireSolenoid(CHIME_10)
0235+  618F F7 01 48    
0236+  6192 86 19       	delay(200)
0236+  6194 BD 7D 6B    
0237+  6197             	
0238+  6197 C6 02       	fireSolenoid(CHIME_10)
0238+  6199 F7 01 48    
0239+  619C 86 0E       	delay(SHORT_PAUSE)
0239+  619E BD 7D 6B    
0240+  61A1 C6 02       	fireSolenoid(CHIME_10)
0240+  61A3 F7 01 48    
0241+  61A6 86 0E       	delay(SHORT_PAUSE)
0241+  61A8 BD 7D 6B    
0242+  61AB C6 02       	fireSolenoid(CHIME_10)
0242+  61AD F7 01 48    
0243+  61B0 86 19       	delay(200)
0243+  61B2 BD 7D 6B    
0244+  61B5             	
0245+  61B5 C6 02       	fireSolenoid(CHIME_10)
0245+  61B7 F7 01 48    
0246+  61BA 86 0E       	delay(SHORT_PAUSE)
0246+  61BC BD 7D 6B    
0247+  61BF C6 02       	fireSolenoid(CHIME_10)
0247+  61C1 F7 01 48    
0248+  61C4 86 0E       	delay(SHORT_PAUSE)
0248+  61C6 BD 7D 6B    
0249+  61C9 C6 02       	fireSolenoid(CHIME_100)
0249+  61CB F7 01 49    
0250+  61CE 86 19       	delay(200)
0250+  61D0 BD 7D 6B    
0251+  61D3 C6 02       	fireSolenoid(CHIME_1000)
0251+  61D5 F7 01 4A    
0252+  61D8 86 19       	delay(200)
0252+  61DA BD 7D 6B    
0253+  61DD C6 02       	fireSolenoid(CHIME_10k)
0253+  61DF F7 01 4B    
0254+  61E2 86 12       	delay(150)
0254+  61E4 BD 7D 6B    
0255+  61E7             	
0256+  61E7             	; reset scores
0257+  61E7 BD 7D A2    	jsr 	resetScores
0258+  61EA             	
0259+  61EA             	; reset ball count
0260+  61EA 86 10       	ldaA	$10
0261+  61EC 97 77       	staA	ballCount	
0262+  61EE             
0263+  61EE C6 00       	ldaB	0
0264+  61F0 D7 13       	staB	curPlayer + 1
0265+  61F2             	
0266+  61F2 D7 0E       	staB	lc(7)
0267+  61F4 D7 0F       	staB	lc(8)
0268+  61F6 D7 A6       	staB	flc(7)
0269+  61F8 D7 A7       	staB	flc(8)
0270+  61FA             	
0271+  61FA CE 00 00    	ldX	0
0272+  61FD             lInitPlayers:
0273+  61FD C6 01       	ldaB	lr(1)
0274+  61FF E7 B1       	staB	p_Ejects, X
0275+  6201 C6 00       	ldaB	0
0276+  6203 E7 B6       	staB	p_LampCol2, X
0277+  6205 E7 BA       	staB	p_EachDropDown, X
0278+  6207 08          	inX
0279+  6208 8C 00 04    	cpX	4
0280+  620B 26 F0       	bne	lInitPlayers
0281+  620D             	
0282+  620D BD 60 F2    	jsr	startBall
0283+  6210             	
0284+  6210             	; invalidate playfield
0285+  6210 86 01       	ldaA	lr(1)
0286+  6212 9A 0F       	oraA	>lc(8)
0287+  6214 97 0F       	staA	lc(8)
0288+  6216             	
0289+  6216 86 02       	lampOn(2,7) ; one player
0289+  6218 9A 0E       
0289+  621A 97 0E       
0290+  621C             	
0291+  621C 86 DF       	lampOff(6,8) ; game over
0291+  621E 94 0F       
0291+  6220 97 0F       
0292+  6222             	
0293+  6222 39          	rts
0294+  6223             	
0295+  6223             
0296+  6223             	
0297+  6223             swTilt: 
0298+  6223 86 10       	lampOn(5,8) ; tilt
0298+  6225 9A 0F       
0298+  6227 97 0F       
0299+  6229 B6 22 03    	disablePf
0299+  622C 84 F7       
0299+  622E B7 22 03    
0300+  6231             	done(0)
0300+  6231             
0300+  6231 86 02       
0300+  6233 BA 01 6B    
0300+  6236 B7 01 6B    
0300+  6239             
0300+  6239 7E 79 94    
0301+  623C             	
0302+  623C             swStart: 
0303+  623C 96 0F       	ldaA >lc(8)
0304+  623E 85 20       	bitA lr(6)
0305+  6240             	ifne ; in game over
0305+  6240             
0305+  6240 27 FE       
0306+  6242 BD 61 6D    		jsr startGame
0307+  6245             	else 
0307+  6245             
0307+  6245             
0307+  6245             
0307+  6245             
0307+  6241             
0307+  6241             
0307+  6241             
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241             
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241~            	else 
0307+  6241             
0307+  6241             
0307+  6241 05          
0307+  6245             
0307+  6245 20 FE       
0307+  6247             
0307+  6247             
0307+  6247             
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247             
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247             
0307+  6247~            	else 
0307+  6247~            	else 
0307+  6247             
0308+  6247 86 10       		ldaA	$10
0309+  6249 91 77       		cmpA	>ballCount
0310+  624B             		ifeq ; add player
0310+  624B             
0310+  624B 26 FE       
0311+  624D 86 1E       			ldaA	00011110b
0312+  624F 94 0E       			andA	>lc(7) ; player count lights
0313+  6251 85 10       			bitA	lr(5)
0314+  6253             			ifeq	; if not on P4 already, add player
0314+  6253             
0314+  6253 26 FE       
0315+  6255 48          				aslA
0316+  6256 C6 E1       				ldaB	11100001b
0317+  6258 D4 0E       				andB	>lc(7)
0318+  625A D7 0E       				staB	lc(7)
0319+  625C 9A 0E       				oraA	>lc(7)
0320+  625E 97 0E       				staA	lc(7)
0321+  6260             			endif
0321+  6260             
0321+  6260             
0321+  6260             
0321+  6260             
0321+  6260             
0321+  6260~            			endif
0321+  6260~            			endif
0321+  6260             
0321+  6260~            			endif
0321+  6260~            			endif
0321+  6260             
0321+  6254             
0321+  6254 0B          
0321+  6255             
0321+  6255             
0321+  6255~            			endif
0321+  6255~            			endif
0321+  6255~            			endif
0321+  6255             
0321+  6260             
0321+  6260~            			endif
0321+  6260~            			endif
0321+  6260             
0322+  6260             		else ; restart game
0322+  6260             
0322+  6260             
0322+  6260             
0322+  6260             
0322+  624C             
0322+  624C             
0322+  624C             
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C             
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C~            		else ; restart game
0322+  624C             
0322+  624C             
0322+  624C 15          
0322+  6260             
0322+  6260 20 FE       
0322+  6262             
0322+  6262             
0322+  6262             
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262             
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262             
0322+  6262~            		else ; restart game
0322+  6262~            		else ; restart game
0322+  6262             
0323+  6262 BD 61 6D    			jsr startGame
0324+  6265             		endif		
0324+  6265             
0324+  6265             
0324+  6265             
0324+  6265             
0324+  6265             
0324+  6265~            		endif		
0324+  6265~            		endif		
0324+  6265             
0324+  6265~            		endif		
0324+  6265~            		endif		
0324+  6265             
0324+  6261             
0324+  6261 03          
0324+  6262             
0324+  6262             
0324+  6262~            		endif		
0324+  6262~            		endif		
0324+  6262~            		endif		
0324+  6262             
0324+  6265             
0324+  6265~            		endif		
0324+  6265~            		endif		
0324+  6265             
0325+  6265             	endif
0325+  6265             
0325+  6265             
0325+  6265             
0325+  6265             
0325+  6265             
0325+  6265~            	endif
0325+  6265~            	endif
0325+  6265             
0325+  6265~            	endif
0325+  6265~            	endif
0325+  6265             
0325+  6246             
0325+  6246 1E          
0325+  6247             
0325+  6247             
0325+  6247~            	endif
0325+  6247~            	endif
0325+  6247~            	endif
0325+  6247             
0325+  6265             
0325+  6265~            	endif
0325+  6265~            	endif
0325+  6265             
0326+  6265             	
0327+  6265 BD 7C D6    	jsr refreshPlayerScores
0328+  6268             	
0329+  6268             	done(0)
0329+  6268             
0329+  6268 86 02       
0329+  626A BA 01 6B    
0329+  626D B7 01 6B    
0329+  6270             
0329+  6270 7E 79 94    
0330+  6273             	
0331+  6273             swOuthole: 
0332+  6273 96 0F       	ldaA	>lc(8) ; !game over
0333+  6275 85 20       	bitA	lr(6)
0334+  6277             	ifne ; game over
0334+  6277             
0334+  6277 27 FE       
0335+  6279             		done(0)
0335+  6279             
0335+  6279 86 02       
0335+  627B BA 01 6B    
0335+  627E B7 01 6B    
0335+  6281             
0335+  6281 7E 79 94    
0336+  6284             	endif
0336+  6284             
0336+  6284             
0336+  6284             
0336+  6284             
0336+  6284             
0336+  6284~            	endif
0336+  6284~            	endif
0336+  6284             
0336+  6284~            	endif
0336+  6284~            	endif
0336+  6284             
0336+  6278             
0336+  6278 0B          
0336+  6279             
0336+  6279             
0336+  6279~            	endif
0336+  6279~            	endif
0336+  6279~            	endif
0336+  6279             
0336+  6284             
0336+  6284~            	endif
0336+  6284~            	endif
0336+  6284             
0337+  6284             	
0338+  6284 7D 00 BF    	tst	>bonusTimer
0339+  6287             	ifne
0339+  6287             
0339+  6287 27 FE       
0340+  6289             		done(0)
0340+  6289             
0340+  6289 86 02       
0340+  628B BA 01 6B    
0340+  628E B7 01 6B    
0340+  6291             
0340+  6291 7E 79 94    
0341+  6294             	else
0341+  6294             
0341+  6294             
0341+  6294             
0341+  6294             
0341+  6288             
0341+  6288             
0341+  6288             
0341+  6288~            	else
0341+  6288~            	else
0341+  6288~            	else
0341+  6288~            	else
0341+  6288             
0341+  6288~            	else
0341+  6288~            	else
0341+  6288~            	else
0341+  6288~            	else
0341+  6288             
0341+  6288             
0341+  6288 0D          
0341+  6294             
0341+  6294 20 FE       
0341+  6296             
0341+  6296             
0341+  6296             
0341+  6296~            	else
0341+  6296~            	else
0341+  6296~            	else
0341+  6296~            	else
0341+  6296~            	else
0341+  6296             
0341+  6296~            	else
0341+  6296~            	else
0341+  6296             
0341+  6296~            	else
0341+  6296~            	else
0341+  6296             
0342+  6296 86 7F       		ldaA	127
0343+  6298 97 BF       		staA	bonusTimer
0344+  629A             	endif
0344+  629A             
0344+  629A             
0344+  629A             
0344+  629A             
0344+  629A             
0344+  629A~            	endif
0344+  629A~            	endif
0344+  629A             
0344+  629A~            	endif
0344+  629A~            	endif
0344+  629A             
0344+  6295             
0344+  6295 04          
0344+  6296             
0344+  6296             
0344+  6296~            	endif
0344+  6296~            	endif
0344+  6296~            	endif
0344+  6296             
0344+  629A             
0344+  629A~            	endif
0344+  629A~            	endif
0344+  629A             
0345+  629A 86 4B       	delay(600)
0345+  629C BD 7D 6B    
0346+  629F             	
0347+  629F             	; check ballsave
0348+  629F 86 01       	ldaA	lr(1)
0349+  62A1 95 0A       	bitA	>lc(3)
0350+  62A3             	ifne	; shoot again on
0350+  62A3             
0350+  62A3 27 FE       
0351+  62A5 95 A2       		bitA	>flc(3)
0352+  62A7             		ifne ; shoot again flashing
0352+  62A7             
0352+  62A7 27 FE       
0353+  62A9             			; turn off used special
0354+  62A9 86 80       			ldaA	lr(8) ; right special
0355+  62AB 95 09       			bitA	>lc(2)
0356+  62AD             			ifne
0356+  62AD             
0356+  62AD 27 FE       
0357+  62AF 86 7F       				lampOff(8,2)
0357+  62B1 94 09       
0357+  62B3 97 09       
0358+  62B5 86 7F       				flashOff(8,2)
0358+  62B7 94 A1       
0358+  62B9 97 A1       
0359+  62BB             			endif
0359+  62BB             
0359+  62BB             
0359+  62BB             
0359+  62BB             
0359+  62BB             
0359+  62BB~            			endif
0359+  62BB~            			endif
0359+  62BB             
0359+  62BB~            			endif
0359+  62BB~            			endif
0359+  62BB             
0359+  62AE             
0359+  62AE 0C          
0359+  62AF             
0359+  62AF             
0359+  62AF~            			endif
0359+  62AF~            			endif
0359+  62AF~            			endif
0359+  62AF             
0359+  62BB             
0359+  62BB~            			endif
0359+  62BB~            			endif
0359+  62BB             
0360+  62BB 86 02       			ldaA	lr(2) ; right special
0361+  62BD 95 0A       			bitA	>lc(3)
0362+  62BF             			ifne
0362+  62BF             
0362+  62BF 27 FE       
0363+  62C1 86 FD       				lampOff(2,3)
0363+  62C3 94 0A       
0363+  62C5 97 0A       
0364+  62C7 86 FD       				flashOff(2,3)
0364+  62C9 94 A2       
0364+  62CB 97 A2       
0365+  62CD             			endif
0365+  62CD             
0365+  62CD             
0365+  62CD             
0365+  62CD             
0365+  62CD             
0365+  62CD~            			endif
0365+  62CD~            			endif
0365+  62CD             
0365+  62CD~            			endif
0365+  62CD~            			endif
0365+  62CD             
0365+  62C0             
0365+  62C0 0C          
0365+  62C1             
0365+  62C1             
0365+  62C1~            			endif
0365+  62C1~            			endif
0365+  62C1~            			endif
0365+  62C1             
0365+  62CD             
0365+  62CD~            			endif
0365+  62CD~            			endif
0365+  62CD             
0366+  62CD             			
0367+  62CD             			; flash player light
0368+  62CD 86 0F       			ldaA	00001111b ; player up lights
0369+  62CF 9A A7       			oraA	>flc(8)
0370+  62D1 97 A7       			staA	flc(8)
0371+  62D3             		endif
0371+  62D3             
0371+  62D3             
0371+  62D3             
0371+  62D3             
0371+  62D3             
0371+  62D3~            		endif
0371+  62D3~            		endif
0371+  62D3             
0371+  62D3~            		endif
0371+  62D3~            		endif
0371+  62D3             
0371+  62A8             
0371+  62A8 2A          
0371+  62A9             
0371+  62A9             
0371+  62A9~            		endif
0371+  62A9~            		endif
0371+  62A9~            		endif
0371+  62A9             
0371+  62D3             
0371+  62D3~            		endif
0371+  62D3~            		endif
0371+  62D3             
0372+  62D3             	endif
0372+  62D3             
0372+  62D3             
0372+  62D3             
0372+  62D3             
0372+  62D3             
0372+  62D3~            	endif
0372+  62D3~            	endif
0372+  62D3             
0372+  62D3~            	endif
0372+  62D3~            	endif
0372+  62D3             
0372+  62A4             
0372+  62A4 2E          
0372+  62A5             
0372+  62A5             
0372+  62A5~            	endif
0372+  62A5~            	endif
0372+  62A5~            	endif
0372+  62A5             
0372+  62D3             
0372+  62D3~            	endif
0372+  62D3~            	endif
0372+  62D3             
0373+  62D3             	
0374+  62D3 86 0F       	ldaA	00001111b ; player up lights
0375+  62D5 95 A7       	bitA	>flc(8)	; check if any player is flashing
0376+  62D7             	ifne ; any flashing -> playfield invalid
0376+  62D7             
0376+  62D7 27 FE       
0377+  62D9             swOuthole_save:
0378+  62D9 86 EF       		lampOff(5,8) ; tilt
0378+  62DB 94 0F       
0378+  62DD 97 0F       
0379+  62DF             		
0380+  62DF B6 22 03    		enablePf
0380+  62E2 8A 38       
0380+  62E4 B7 22 03    
0381+  62E7 C6 02       		fireSolenoid(OUTHOLE)
0381+  62E9 F7 01 44    
0382+  62EC             	else ; none flashing -> playfield valid -> end ball			
0382+  62EC             
0382+  62EC             
0382+  62EC             
0382+  62EC             
0382+  62D8             
0382+  62D8             
0382+  62D8             
0382+  62D8~            	else ; none flashing -> playfield valid -> end ball			
0382+  62D8~            	else ; none flashing -> playfield valid -> end ball			
0382+  62D8~            	else ; none flashing -> playfield valid -> end ball			
0382+  62D8~            	else ; none flashing -> playfield valid -> end ball			
0382+  62D8             
0382+  62D8~            	else ; none flashing -> playfield valid -> end ball			
0382+  62D8~            	else ; none flashing -> playfield valid -> end ball			
0382+  62D8~            	else ; none flashing -> playfield valid -> end ball			
0382+  62D8~            	else ; none flashing -> playfield valid -> end ball			
0382+  62D8             
0382+  62D8             
0382+  62D8 15          
0382+  62EC             
0382+  62EC 20 FE       
0382+  62EE             
0382+  62EE             
0382+  62EE             
0382+  62EE~            	else ; none flashing -> playfield valid -> end ball			
0382+  62EE~            	else ; none flashing -> playfield valid -> end ball			
0382+  62EE~            	else ; none flashing -> playfield valid -> end ball			
0382+  62EE~            	else ; none flashing -> playfield valid -> end ball			
0382+  62EE~            	else ; none flashing -> playfield valid -> end ball			
0382+  62EE             
0382+  62EE~            	else ; none flashing -> playfield valid -> end ball			
0382+  62EE~            	else ; none flashing -> playfield valid -> end ball			
0382+  62EE             
0382+  62EE~            	else ; none flashing -> playfield valid -> end ball			
0382+  62EE~            	else ; none flashing -> playfield valid -> end ball			
0382+  62EE             
0383+  62EE             swOuthole_bonusLoop:
0384+  62EE BD 7E 06    		score1000()
0385+  62F1 96 09       		ldaA	>lc(2) ; double bonus
0386+  62F3 85 04       		bitA	lr(3)
0387+  62F5             		ifne 
0387+  62F5             
0387+  62F5 27 FE       
0388+  62F7 86 0C       			delay(100)
0388+  62F9 BD 7D 6B    
0389+  62FC BD 7E 06    			score1000()
0390+  62FF             		endif
0390+  62FF             
0390+  62FF             
0390+  62FF             
0390+  62FF             
0390+  62FF             
0390+  62FF~            		endif
0390+  62FF~            		endif
0390+  62FF             
0390+  62FF~            		endif
0390+  62FF~            		endif
0390+  62FF             
0390+  62F6             
0390+  62F6 08          
0390+  62F7             
0390+  62F7             
0390+  62F7~            		endif
0390+  62F7~            		endif
0390+  62F7~            		endif
0390+  62F7             
0390+  62FF             
0390+  62FF~            		endif
0390+  62FF~            		endif
0390+  62FF             
0391+  62FF 7A 00 B0    		dec	p_Bonus
0392+  6302 BD 60 C3    		jsr	bonusLights
0393+  6305 86 19       		delay(200)
0393+  6307 BD 7D 6B    
0394+  630A 7D 00 B0    		tst	>p_Bonus
0395+  630D 26 DF       		bne	swOuthole_bonusLoop
0396+  630F             	
0397+  630F 86 0F       		ldaA	00001111b ; player up lights
0398+  6311 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0399+  6313 D6 0A       		ldaB	>lc(3) ; check shoot again light
0400+  6315 C5 01       		bitB	lr(1)
0401+  6317             		ifeq ; shoot again not lit
0401+  6317             
0401+  6317 26 FE       
0402+  6319             			; store player's data
0403+  6319 DE 12       			ldX	>curPlayer
0404+  631B D6 0B       			ldaB	>lc(4)
0405+  631D E7 B1       			staB	p_Ejects, X
0406+  631F D6 0A       			ldaB	>lc(3)
0407+  6321 C4 02       			andB	lr(2)
0408+  6323 DA 09       			oraB	>lc(2)
0409+  6325 E7 B6       			staB	p_LampCol2, X
0410+  6327 D6 AA       			ldaB	>dropsDown
0411+  6329 E7 BA       			staB	p_EachDropDown, X
0412+  632B             			
0413+  632B             		
0414+  632B             			; go to next player
0415+  632B 48          			aslA
0416+  632C 7C 00 13    			inc	curPlayer + 1
0417+  632F 95 0E       			bitA	>lc(7)	; is player count < player #
0418+  6331             			ifne ; last player
0418+  6331             
0418+  6331 27 FE       
0419+  6333 86 01       				ldaA	00000001b; ; back to player 1
0420+  6335 C6 00       				ldaB	0
0421+  6337 D7 13       				staB	curPlayer + 1
0422+  6339             				
0423+  6339             				; increase ball count
0424+  6339 D6 77       				ldaB	>ballCount
0425+  633B CB 10       				addB	$10
0426+  633D C1 40       				cmpB	$40
0427+  633F             				ifeq ; game over
0427+  633F             
0427+  633F 26 FE       
0428+  6341 86 20       					lampOn(6,8)
0428+  6343 9A 0F       
0428+  6345 97 0F       
0429+  6347 B6 22 03    					disablePf
0429+  634A 84 F7       
0429+  634C B7 22 03    
0430+  634F             					done(1)
0430+  634F~            					done(1)
0430+  634F~            					done(1)
0430+  634F~            					done(1)
0430+  634F~            					done(1)
0430+  634F             
0430+  634F 7E 79 94    
0431+  6352             				else
0431+  6352             
0431+  6352             
0431+  6352             
0431+  6352             
0431+  6340             
0431+  6340             
0431+  6340             
0431+  6340~            				else
0431+  6340~            				else
0431+  6340~            				else
0431+  6340~            				else
0431+  6340             
0431+  6340~            				else
0431+  6340~            				else
0431+  6340~            				else
0431+  6340~            				else
0431+  6340             
0431+  6340             
0431+  6340 13          
0431+  6352             
0431+  6352 20 FE       
0431+  6354             
0431+  6354             
0431+  6354             
0431+  6354~            				else
0431+  6354~            				else
0431+  6354~            				else
0431+  6354~            				else
0431+  6354~            				else
0431+  6354             
0431+  6354~            				else
0431+  6354~            				else
0431+  6354             
0431+  6354~            				else
0431+  6354~            				else
0431+  6354             
0432+  6354 D7 77       					staB	ballCount
0433+  6356             				endif		
0433+  6356             
0433+  6356             
0433+  6356             
0433+  6356             
0433+  6356             
0433+  6356~            				endif		
0433+  6356~            				endif		
0433+  6356             
0433+  6356~            				endif		
0433+  6356~            				endif		
0433+  6356             
0433+  6353             
0433+  6353 02          
0433+  6354             
0433+  6354             
0433+  6354~            				endif		
0433+  6354~            				endif		
0433+  6354~            				endif		
0433+  6354             
0433+  6356             
0433+  6356~            				endif		
0433+  6356~            				endif		
0433+  6356             
0434+  6356             			endif
0434+  6356             
0434+  6356             
0434+  6356             
0434+  6356             
0434+  6356             
0434+  6356~            			endif
0434+  6356~            			endif
0434+  6356             
0434+  6356~            			endif
0434+  6356~            			endif
0434+  6356             
0434+  6332             
0434+  6332 23          
0434+  6333             
0434+  6333             
0434+  6333~            			endif
0434+  6333~            			endif
0434+  6333~            			endif
0434+  6333             
0434+  6356             
0434+  6356~            			endif
0434+  6356~            			endif
0434+  6356             
0435+  6356             			
0436+  6356 97 0F       			staA	lc(8)
0437+  6358             		endif
0437+  6358             
0437+  6358             
0437+  6358             
0437+  6358             
0437+  6358             
0437+  6358~            		endif
0437+  6358~            		endif
0437+  6358             
0437+  6358~            		endif
0437+  6358~            		endif
0437+  6358             
0437+  6318             
0437+  6318 3F          
0437+  6319             
0437+  6319             
0437+  6319~            		endif
0437+  6319~            		endif
0437+  6319~            		endif
0437+  6319             
0437+  6358             
0437+  6358~            		endif
0437+  6358~            		endif
0437+  6358             
0438+  6358             		
0439+  6358 BD 60 F2    		jsr	startBall
0440+  635B             	endif	
0440+  635B             
0440+  635B             
0440+  635B             
0440+  635B             
0440+  635B             
0440+  635B~            	endif	
0440+  635B~            	endif	
0440+  635B             
0440+  635B~            	endif	
0440+  635B~            	endif	
0440+  635B             
0440+  62ED             
0440+  62ED 6D          
0440+  62EE             
0440+  62EE             
0440+  62EE~            	endif	
0440+  62EE~            	endif	
0440+  62EE~            	endif	
0440+  62EE             
0440+  635B             
0440+  635B~            	endif	
0440+  635B~            	endif	
0440+  635B             
0441+  635B             	
0442+  635B 7F 00 BF    	clr 	bonusTimer
0443+  635E             	
0444+  635E             	done(0)
0444+  635E             
0444+  635E 86 02       
0444+  6360 BA 01 6B    
0444+  6363 B7 01 6B    
0444+  6366             
0444+  6366 7E 79 94    
0445+  6369             	
0446+  6369             swLeftEject:
0447+  6369 96 0F       	ldaA	>lc(8)
0448+  636B 85 20       	bitA	lr(6)
0449+  636D             	ifne ; not in game
0449+  636D             
0449+  636D 27 FE       
0450+  636F C6 03       		fireSolenoid(LEFT_EJECT)
0450+  6371 F7 01 43    
0451+  6374             		done(0)
0451+  6374             
0451+  6374 86 02       
0451+  6376 BA 01 6B    
0451+  6379 B7 01 6B    
0451+  637C             
0451+  637C 7E 79 94    
0452+  637F             	endif
0452+  637F             
0452+  637F             
0452+  637F             
0452+  637F             
0452+  637F             
0452+  637F~            	endif
0452+  637F~            	endif
0452+  637F             
0452+  637F~            	endif
0452+  637F~            	endif
0452+  637F             
0452+  636E             
0452+  636E 10          
0452+  636F             
0452+  636F             
0452+  636F~            	endif
0452+  636F~            	endif
0452+  636F~            	endif
0452+  636F             
0452+  637F             
0452+  637F~            	endif
0452+  637F~            	endif
0452+  637F             
0453+  637F             		
0454+  637F BD 7E 16    	advBonus()
0455+  6382 86 04       	ldaA	lr(3) ; extra ball
0456+  6384 95 0A       	bitA	>lc(3)
0457+  6386             	ifne
0457+  6386             
0457+  6386 27 FE       
0458+  6388 C6 06       		fireSolenoid(KNOCKER)
0458+  638A F7 01 4D    
0459+  638D 86 01       		lampOn(1,3) ; shoot again
0459+  638F 9A 0A       
0459+  6391 97 0A       
0460+  6393 86 40       		lampOn(7,8)
0460+  6395 9A 0F       
0460+  6397 97 0F       
0461+  6399 86 FB       		lampOff(3,3) ; extra ball
0461+  639B 94 0A       
0461+  639D 97 0A       
0462+  639F 86 3E       		delay(500)
0462+  63A1 BD 7D 6B    
0463+  63A4             	else
0463+  63A4             
0463+  63A4             
0463+  63A4             
0463+  63A4             
0463+  6387             
0463+  6387             
0463+  6387             
0463+  6387~            	else
0463+  6387~            	else
0463+  6387~            	else
0463+  6387~            	else
0463+  6387             
0463+  6387~            	else
0463+  6387~            	else
0463+  6387~            	else
0463+  6387~            	else
0463+  6387             
0463+  6387             
0463+  6387 1E          
0463+  63A4             
0463+  63A4 20 FE       
0463+  63A6             
0463+  63A6             
0463+  63A6             
0463+  63A6~            	else
0463+  63A6~            	else
0463+  63A6~            	else
0463+  63A6~            	else
0463+  63A6~            	else
0463+  63A6             
0463+  63A6~            	else
0463+  63A6~            	else
0463+  63A6             
0463+  63A6~            	else
0463+  63A6~            	else
0463+  63A6             
0464+  63A6 BD 67 40    		jsr	addCollect
0465+  63A9             		score500()
0465+  63A9 BD 7D F7    
0465+  63AC C6 02       
0465+  63AE F7 01 49    
0465+  63B1 86 0E       
0465+  63B3 BD 7D 6B    
0465+  63B6 BD 7D F7    
0465+  63B9 C6 02       
0465+  63BB F7 01 49    
0465+  63BE 86 0E       
0465+  63C0 BD 7D 6B    
0465+  63C3 BD 7D F7    
0465+  63C6 C6 02       
0465+  63C8 F7 01 49    
0465+  63CB 86 0E       
0465+  63CD BD 7D 6B    
0465+  63D0 BD 7D F7    
0465+  63D3 C6 02       
0465+  63D5 F7 01 49    
0465+  63D8 86 0E       
0465+  63DA BD 7D 6B    
0465+  63DD BD 7D F7    
0465+  63E0 C6 02       
0465+  63E2 F7 01 49    
0465+  63E5 86 0E       
0465+  63E7 BD 7D 6B    
0466+  63EA             	endif
0466+  63EA             
0466+  63EA             
0466+  63EA             
0466+  63EA             
0466+  63EA             
0466+  63EA~            	endif
0466+  63EA~            	endif
0466+  63EA             
0466+  63EA~            	endif
0466+  63EA~            	endif
0466+  63EA             
0466+  63A5             
0466+  63A5 44          
0466+  63A6             
0466+  63A6             
0466+  63A6~            	endif
0466+  63A6~            	endif
0466+  63A6~            	endif
0466+  63A6             
0466+  63EA             
0466+  63EA~            	endif
0466+  63EA~            	endif
0466+  63EA             
0467+  63EA C6 03       	fireSolenoid(LEFT_EJECT)
0467+  63EC F7 01 43    
0468+  63EF             	
0469+  63EF 86 32       	fork(400)
0469+  63F1 BD 7D 80    
0470+  63F4             	done(1)
0470+  63F4~            	done(1)
0470+  63F4~            	done(1)
0470+  63F4~            	done(1)
0470+  63F4~            	done(1)
0470+  63F4             
0470+  63F4 7E 79 94    
0471+  63F7             	beginFork()
0472+  63F7 86 C7       	ldaA	11000111b
0473+  63F9 94 A1       	andA	>flc(2)
0474+  63FB 97 A1       	staA	flc(2)
0475+  63FD DE 2C       	endFork()
0475+  63FF 7E 79 3C    
0476+  6402             	
0477+  6402             swTopEject:
0478+  6402 BD 7E 16    	advBonus()
0479+  6405 D6 0B       	ldaB	>lc(4)
0480+  6407 57          	asrB
0481+  6408             	ifeq ; 1k
0481+  6408             
0481+  6408 26 FE       
0482+  640A BD 7E 06    		score1000()
0483+  640D 86 19       		delay(200)
0483+  640F BD 7D 6B    
0484+  6412 7E 64 D7    		jmp	swTopEject_scored
0485+  6415             	endif
0485+  6415             
0485+  6415             
0485+  6415             
0485+  6415             
0485+  6415             
0485+  6415~            	endif
0485+  6415~            	endif
0485+  6415             
0485+  6415~            	endif
0485+  6415~            	endif
0485+  6415             
0485+  6409             
0485+  6409 0B          
0485+  640A             
0485+  640A             
0485+  640A~            	endif
0485+  640A~            	endif
0485+  640A~            	endif
0485+  640A             
0485+  6415             
0485+  6415~            	endif
0485+  6415~            	endif
0485+  6415             
0486+  6415 57          	asrB
0487+  6416             	ifeq  ; captive
0487+  6416             
0487+  6416 26 FE       
0488+  6418 86 40       		ldaA	lr(7)
0489+  641A 95 09       		bitA	>lc(2) ; captive ball
0490+  641C             		ifeq	; not lit
0490+  641C             
0490+  641C 26 FE       
0491+  641E 86 40       			lampOn(7,2)
0491+  6420 9A 09       
0491+  6422 97 09       
0492+  6424 86 40       			flashLamp(7,2)
0492+  6426 9A A1       
0492+  6428 97 A1       
0493+  642A             		else
0493+  642A             
0493+  642A             
0493+  642A             
0493+  642A             
0493+  641D             
0493+  641D             
0493+  641D             
0493+  641D~            		else
0493+  641D~            		else
0493+  641D~            		else
0493+  641D~            		else
0493+  641D             
0493+  641D~            		else
0493+  641D~            		else
0493+  641D~            		else
0493+  641D~            		else
0493+  641D             
0493+  641D             
0493+  641D 0E          
0493+  642A             
0493+  642A 20 FE       
0493+  642C             
0493+  642C             
0493+  642C             
0493+  642C~            		else
0493+  642C~            		else
0493+  642C~            		else
0493+  642C~            		else
0493+  642C~            		else
0493+  642C             
0493+  642C~            		else
0493+  642C~            		else
0493+  642C             
0493+  642C~            		else
0493+  642C~            		else
0493+  642C             
0494+  642C 86 BF       			lampOff(7,2)
0494+  642E 94 09       
0494+  6430 97 09       
0495+  6432             		endif
0495+  6432             
0495+  6432             
0495+  6432             
0495+  6432             
0495+  6432             
0495+  6432~            		endif
0495+  6432~            		endif
0495+  6432             
0495+  6432~            		endif
0495+  6432~            		endif
0495+  6432             
0495+  642B             
0495+  642B 06          
0495+  642C             
0495+  642C             
0495+  642C~            		endif
0495+  642C~            		endif
0495+  642C~            		endif
0495+  642C             
0495+  6432             
0495+  6432~            		endif
0495+  6432~            		endif
0495+  6432             
0496+  6432             	score500()
0496+  6432 BD 7D F7    
0496+  6435 C6 02       
0496+  6437 F7 01 49    
0496+  643A 86 0E       
0496+  643C BD 7D 6B    
0496+  643F BD 7D F7    
0496+  6442 C6 02       
0496+  6444 F7 01 49    
0496+  6447 86 0E       
0496+  6449 BD 7D 6B    
0496+  644C BD 7D F7    
0496+  644F C6 02       
0496+  6451 F7 01 49    
0496+  6454 86 0E       
0496+  6456 BD 7D 6B    
0496+  6459 BD 7D F7    
0496+  645C C6 02       
0496+  645E F7 01 49    
0496+  6461 86 0E       
0496+  6463 BD 7D 6B    
0496+  6466 BD 7D F7    
0496+  6469 C6 02       
0496+  646B F7 01 49    
0496+  646E 86 0E       
0496+  6470 BD 7D 6B    
0497+  6473 7E 64 D7    		jmp	swTopEject_scored
0498+  6476             	endif
0498+  6476             
0498+  6476             
0498+  6476             
0498+  6476             
0498+  6476             
0498+  6476~            	endif
0498+  6476~            	endif
0498+  6476             
0498+  6476~            	endif
0498+  6476~            	endif
0498+  6476             
0498+  6417             
0498+  6417 5E          
0498+  6418             
0498+  6418             
0498+  6418~            	endif
0498+  6418~            	endif
0498+  6418~            	endif
0498+  6418             
0498+  6476             
0498+  6476~            	endif
0498+  6476~            	endif
0498+  6476             
0499+  6476 57          	asrB
0500+  6477             	ifne	
0500+  6477             
0500+  6477 27 FE       
0501+  6479 57          		asrB
0502+  647A             		ifeq ; double
0502+  647A             
0502+  647A 26 FE       
0503+  647C 86 04       			ldaA	lr(3)
0504+  647E 95 09       			bitA	>lc(2) ; double bonus
0505+  6480             			ifeq	; not lit
0505+  6480             
0505+  6480 26 FE       
0506+  6482 86 04       				lampOn(3,2)
0506+  6484 9A 09       
0506+  6486 97 09       
0507+  6488 86 04       				flashLamp(3,2)
0507+  648A 9A A1       
0507+  648C 97 A1       
0508+  648E             			else
0508+  648E             
0508+  648E             
0508+  648E             
0508+  648E             
0508+  6481             
0508+  6481             
0508+  6481             
0508+  6481~            			else
0508+  6481~            			else
0508+  6481~            			else
0508+  6481~            			else
0508+  6481             
0508+  6481~            			else
0508+  6481~            			else
0508+  6481~            			else
0508+  6481~            			else
0508+  6481             
0508+  6481             
0508+  6481 0E          
0508+  648E             
0508+  648E 20 FE       
0508+  6490             
0508+  6490             
0508+  6490             
0508+  6490~            			else
0508+  6490~            			else
0508+  6490~            			else
0508+  6490~            			else
0508+  6490~            			else
0508+  6490             
0508+  6490~            			else
0508+  6490~            			else
0508+  6490             
0508+  6490~            			else
0508+  6490~            			else
0508+  6490             
0509+  6490 86 FB       				lampOff(3,2)
0509+  6492 94 09       
0509+  6494 97 09       
0510+  6496             			endif
0510+  6496             
0510+  6496             
0510+  6496             
0510+  6496             
0510+  6496             
0510+  6496~            			endif
0510+  6496~            			endif
0510+  6496             
0510+  6496~            			endif
0510+  6496~            			endif
0510+  6496             
0510+  648F             
0510+  648F 06          
0510+  6490             
0510+  6490             
0510+  6490~            			endif
0510+  6490~            			endif
0510+  6490~            			endif
0510+  6490             
0510+  6496             
0510+  6496~            			endif
0510+  6496~            			endif
0510+  6496             
0511+  6496             		endif
0511+  6496             
0511+  6496             
0511+  6496             
0511+  6496             
0511+  6496             
0511+  6496~            		endif
0511+  6496~            		endif
0511+  6496             
0511+  6496~            		endif
0511+  6496~            		endif
0511+  6496             
0511+  647B             
0511+  647B 1A          
0511+  647C             
0511+  647C             
0511+  647C~            		endif
0511+  647C~            		endif
0511+  647C~            		endif
0511+  647C             
0511+  6496             
0511+  6496~            		endif
0511+  6496~            		endif
0511+  6496             
0512+  6496             	endif
0512+  6496             
0512+  6496             
0512+  6496             
0512+  6496             
0512+  6496             
0512+  6496~            	endif
0512+  6496~            	endif
0512+  6496             
0512+  6496~            	endif
0512+  6496~            	endif
0512+  6496             
0512+  6478             
0512+  6478 1D          
0512+  6479             
0512+  6479             
0512+  6479~            	endif
0512+  6479~            	endif
0512+  6479~            	endif
0512+  6479             
0512+  6496             
0512+  6496~            	endif
0512+  6496~            	endif
0512+  6496             
0513+  6496             	score500()
0513+  6496 BD 7D F7    
0513+  6499 C6 02       
0513+  649B F7 01 49    
0513+  649E 86 0E       
0513+  64A0 BD 7D 6B    
0513+  64A3 BD 7D F7    
0513+  64A6 C6 02       
0513+  64A8 F7 01 49    
0513+  64AB 86 0E       
0513+  64AD BD 7D 6B    
0513+  64B0 BD 7D F7    
0513+  64B3 C6 02       
0513+  64B5 F7 01 49    
0513+  64B8 86 0E       
0513+  64BA BD 7D 6B    
0513+  64BD BD 7D F7    
0513+  64C0 C6 02       
0513+  64C2 F7 01 49    
0513+  64C5 86 0E       
0513+  64C7 BD 7D 6B    
0513+  64CA BD 7D F7    
0513+  64CD C6 02       
0513+  64CF F7 01 49    
0513+  64D2 86 0E       
0513+  64D4 BD 7D 6B    
0514+  64D7             swTopEject_scored:
0515+  64D7 86 FB       	flashOff(3,2)
0515+  64D9 94 A1       
0515+  64DB 97 A1       
0516+  64DD 86 BF       	flashOff(7,2)
0516+  64DF 94 A1       
0516+  64E1 97 A1       
0517+  64E3 C6 03       	fireSolenoid(TOP_EJECT)
0517+  64E5 F7 01 40    
0518+  64E8             	done(1)
0518+  64E8~            	done(1)
0518+  64E8~            	done(1)
0518+  64E8~            	done(1)
0518+  64E8~            	done(1)
0518+  64E8             
0518+  64E8 7E 79 94    
0519+  64EB             	
0520+  64EB             swHotTip:
0521+  64EB 7D 00 A9    	tst	>dropResetTimer
0522+  64EE             	ifne
0522+  64EE             
0522+  64EE 27 FE       
0523+  64F0             		done(0)
0523+  64F0             
0523+  64F0 86 02       
0523+  64F2 BA 01 6B    
0523+  64F5 B7 01 6B    
0523+  64F8             
0523+  64F8 7E 79 94    
0524+  64FB             	endif
0524+  64FB             
0524+  64FB             
0524+  64FB             
0524+  64FB             
0524+  64FB             
0524+  64FB~            	endif
0524+  64FB~            	endif
0524+  64FB             
0524+  64FB~            	endif
0524+  64FB~            	endif
0524+  64FB             
0524+  64EF             
0524+  64EF 0B          
0524+  64F0             
0524+  64F0             
0524+  64F0~            	endif
0524+  64F0~            	endif
0524+  64F0~            	endif
0524+  64F0             
0524+  64FB             
0524+  64FB~            	endif
0524+  64FB~            	endif
0524+  64FB             
0525+  64FB             	
0526+  64FB BD 67 40    	jsr	addCollect
0527+  64FE 86 00       	ldaA	0
0528+  6500 97 B5       	staA	p_DropsDown
0529+  6502 97 AA       	staA	dropsDown
0530+  6504 86 41       	ldaA	65
0531+  6506 97 A9       	staA	dropResetTimer
0532+  6508 86 12       	delay(150)
0532+  650A BD 7D 6B    
0533+  650D C6 0C       	fireSolenoid(DROP_HOT)
0533+  650F F7 01 42    
0534+  6512 86 12       	delay(150)
0534+  6514 BD 7D 6B    
0535+  6517 C6 0C       	fireSolenoid(DROP_TIP)
0535+  6519 F7 01 41    
0536+  651C 86 F7       	lampOff(4,3) ; spinner
0536+  651E 94 0A       
0536+  6520 97 0A       
0537+  6522             	
0538+  6522 86 70       	fork(900)
0538+  6524 BD 7D 80    
0539+  6527             	done(1)
0539+  6527~            	done(1)
0539+  6527~            	done(1)
0539+  6527~            	done(1)
0539+  6527~            	done(1)
0539+  6527             
0539+  6527 7E 79 94    
0540+  652A             	beginFork()
0541+  652A 86 C7       	ldaA	11000111b
0542+  652C 94 A1       	andA	>flc(2)
0543+  652E 97 A1       	staA	flc(2)
0544+  6530 DE 2C       	endFork()
0544+  6532 7E 79 3C    
0545+  6535             	
0546+  6535             swLeftOutlane:
0547+  6535 86 02       	ldaA	lr(2) ; left special
0548+  6537 95 0A       	bitA	>lc(3)
0549+  6539             	ifne
0549+  6539             
0549+  6539 27 FE       
0550+  653B 86 01       		lampOn(1,3) ; shoot again
0550+  653D 9A 0A       
0550+  653F 97 0A       
0551+  6541 86 01       		flashLamp(1,3)
0551+  6543 9A A2       
0551+  6545 97 A2       
0552+  6547 C6 0C       		fireSolenoid(BUZZER)
0552+  6549 F7 01 4E    
0553+  654C 86 02       		flashLamp(2,3)
0553+  654E 9A A2       
0553+  6550 97 A2       
0554+  6552             	endif
0554+  6552             
0554+  6552             
0554+  6552             
0554+  6552             
0554+  6552             
0554+  6552~            	endif
0554+  6552~            	endif
0554+  6552             
0554+  6552~            	endif
0554+  6552~            	endif
0554+  6552             
0554+  653A             
0554+  653A 17          
0554+  653B             
0554+  653B             
0554+  653B~            	endif
0554+  653B~            	endif
0554+  653B~            	endif
0554+  653B             
0554+  6552             
0554+  6552~            	endif
0554+  6552~            	endif
0554+  6552             
0555+  6552 BD 7E 16    	advBonus()
0556+  6555 BD 7E 06    	score1000()
0557+  6558             	done(1)
0557+  6558~            	done(1)
0557+  6558~            	done(1)
0557+  6558~            	done(1)
0557+  6558~            	done(1)
0557+  6558             
0557+  6558 7E 79 94    
0558+  655B             	
0559+  655B             swRightOutlane:
0560+  655B 86 80       	ldaA	lr(8) ; right special
0561+  655D 95 09       	bitA	>lc(2)
0562+  655F             	ifne
0562+  655F             
0562+  655F 27 FE       
0563+  6561 86 01       		lampOn(1,3) ; shoot again
0563+  6563 9A 0A       
0563+  6565 97 0A       
0564+  6567 86 01       		flashLamp(1,3)
0564+  6569 9A A2       
0564+  656B 97 A2       
0565+  656D C6 0C       		fireSolenoid(BUZZER)
0565+  656F F7 01 4E    
0566+  6572 86 80       		flashLamp(8,2)
0566+  6574 9A A1       
0566+  6576 97 A1       
0567+  6578             	endif
0567+  6578             
0567+  6578             
0567+  6578             
0567+  6578             
0567+  6578             
0567+  6578~            	endif
0567+  6578~            	endif
0567+  6578             
0567+  6578~            	endif
0567+  6578~            	endif
0567+  6578             
0567+  6560             
0567+  6560 17          
0567+  6561             
0567+  6561             
0567+  6561~            	endif
0567+  6561~            	endif
0567+  6561~            	endif
0567+  6561             
0567+  6578             
0567+  6578~            	endif
0567+  6578~            	endif
0567+  6578             
0568+  6578 BD 7E 16    	advBonus()
0569+  657B BD 7E 06    	score1000()
0570+  657E             	done(1)
0570+  657E~            	done(1)
0570+  657E~            	done(1)
0570+  657E~            	done(1)
0570+  657E~            	done(1)
0570+  657E             
0570+  657E 7E 79 94    
0571+  6581             	
0572+  6581             swLeftInlane:
0573+  6581             swRightInlane:
0574+  6581 BD 7E 16    	advBonus()
0575+  6584 BD 7E 06    	score1000()
0576+  6587             	done(1)
0576+  6587~            	done(1)
0576+  6587~            	done(1)
0576+  6587~            	done(1)
0576+  6587~            	done(1)
0576+  6587             
0576+  6587 7E 79 94    
0577+  658A             sw10pt:
0578+  658A BD 7D E9    	score10()
0579+  658D 77 00 0B    	asr	lc(4)
0580+  6590             	ifeq ; shifted off the edge
0580+  6590             
0580+  6590 26 FE       
0581+  6592 86 10       		ldaA	00010000b
0582+  6594 97 0B       		staA	lc(4)
0583+  6596             	endif
0583+  6596             
0583+  6596             
0583+  6596             
0583+  6596             
0583+  6596             
0583+  6596~            	endif
0583+  6596~            	endif
0583+  6596             
0583+  6596~            	endif
0583+  6596~            	endif
0583+  6596             
0583+  6591             
0583+  6591 04          
0583+  6592             
0583+  6592             
0583+  6592~            	endif
0583+  6592~            	endif
0583+  6592~            	endif
0583+  6592             
0583+  6596             
0583+  6596~            	endif
0583+  6596~            	endif
0583+  6596             
0584+  6596             	done(1)
0584+  6596~            	done(1)
0584+  6596~            	done(1)
0584+  6596~            	done(1)
0584+  6596~            	done(1)
0584+  6596             
0584+  6596 7E 79 94    
0585+  6599             sw100pt:
0586+  6599 BD 7D F7    	score100()
0587+  659C             	done(1)
0587+  659C~            	done(1)
0587+  659C~            	done(1)
0587+  659C~            	done(1)
0587+  659C~            	done(1)
0587+  659C             
0587+  659C 7E 79 94    
0588+  659F             sw500pt:
0589+  659F BD 67 14    	jsr	alternate
0590+  65A2             	score500()
0590+  65A2 BD 7D F7    
0590+  65A5 C6 02       
0590+  65A7 F7 01 49    
0590+  65AA 86 0E       
0590+  65AC BD 7D 6B    
0590+  65AF BD 7D F7    
0590+  65B2 C6 02       
0590+  65B4 F7 01 49    
0590+  65B7 86 0E       
0590+  65B9 BD 7D 6B    
0590+  65BC BD 7D F7    
0590+  65BF C6 02       
0590+  65C1 F7 01 49    
0590+  65C4 86 0E       
0590+  65C6 BD 7D 6B    
0590+  65C9 BD 7D F7    
0590+  65CC C6 02       
0590+  65CE F7 01 49    
0590+  65D1 86 0E       
0590+  65D3 BD 7D 6B    
0590+  65D6 BD 7D F7    
0590+  65D9 C6 02       
0590+  65DB F7 01 49    
0590+  65DE 86 0E       
0590+  65E0 BD 7D 6B    
0591+  65E3             	done(1)
0591+  65E3~            	done(1)
0591+  65E3~            	done(1)
0591+  65E3~            	done(1)
0591+  65E3~            	done(1)
0591+  65E3             
0591+  65E3 7E 79 94    
0592+  65E6             swPop:
0593+  65E6 BD 67 14    	jsr	alternate
0594+  65E9 BD 7D F7    	score100()
0595+  65EC             	done(1)
0595+  65EC~            	done(1)
0595+  65EC~            	done(1)
0595+  65EC~            	done(1)
0595+  65EC~            	done(1)
0595+  65EC             
0595+  65EC 7E 79 94    
0596+  65EF             swDropTip:
0597+  65EF 86 08       	ldaA	1<<3
0598+  65F1 7E 66 0D    	jmp	swDrop
0599+  65F4             swDropHot:
0600+  65F4 86 01       	ldaA	1<<0
0601+  65F6 7E 66 0D    	jmp	swDrop
0602+  65F9             swDroptIp:
0603+  65F9 86 10       	ldaA	1<<4
0604+  65FB 7E 66 0D    	jmp	swDrop
0605+  65FE             swDrophOt:
0606+  65FE 86 02       	ldaA	1<<1
0607+  6600 7E 66 0D    	jmp	swDrop
0608+  6603             swDroptiP:
0609+  6603 86 20       	ldaA	1<<5
0610+  6605 7E 66 0D    	jmp	swDrop
0611+  6608             swDrophoT:
0612+  6608 86 04       	ldaA	1<<2
0613+  660A 7E 66 0D    	jmp	swDrop
0614+  660D             swDrop:
0615+  660D 7D 00 A9    	tst	>dropResetTimer
0616+  6610             	ifeq
0616+  6610             
0616+  6610 26 FE       
0617+  6612 95 AA       		bitA	>dropsDown
0618+  6614             		ifne
0618+  6614             
0618+  6614 27 FE       
0619+  6616             			done(0)
0619+  6616             
0619+  6616 86 02       
0619+  6618 BA 01 6B    
0619+  661B B7 01 6B    
0619+  661E             
0619+  661E 7E 79 94    
0620+  6621             		endif
0620+  6621             
0620+  6621             
0620+  6621             
0620+  6621             
0620+  6621             
0620+  6621~            		endif
0620+  6621~            		endif
0620+  6621             
0620+  6621~            		endif
0620+  6621~            		endif
0620+  6621             
0620+  6615             
0620+  6615 0B          
0620+  6616             
0620+  6616             
0620+  6616~            		endif
0620+  6616~            		endif
0620+  6616~            		endif
0620+  6616             
0620+  6621             
0620+  6621~            		endif
0620+  6621~            		endif
0620+  6621             
0621+  6621 9A AA       		oraA	>dropsDown
0622+  6623             		
0623+  6623 97 AA       		staA	dropsDown
0624+  6625 7C 00 B5    		inc	p_DropsDown
0625+  6628 86 04       		ldaA	4
0626+  662A 91 B5       		cmpA	>p_DropsDown
0627+  662C             		ifgt
0627+  662C             
0627+  662C 23 FE       
0628+  662E 86 F7       			lampOff(4,3) ; spinner
0628+  6630 94 0A       
0628+  6632 97 0A       
0629+  6634             		else
0629+  6634             
0629+  6634             
0629+  6634             
0629+  6634             
0629+  662D             
0629+  662D             
0629+  662D             
0629+  662D~            		else
0629+  662D~            		else
0629+  662D~            		else
0629+  662D~            		else
0629+  662D             
0629+  662D~            		else
0629+  662D~            		else
0629+  662D~            		else
0629+  662D~            		else
0629+  662D             
0629+  662D             
0629+  662D 08          
0629+  6634             
0629+  6634 20 FE       
0629+  6636             
0629+  6636             
0629+  6636             
0629+  6636~            		else
0629+  6636~            		else
0629+  6636~            		else
0629+  6636~            		else
0629+  6636~            		else
0629+  6636             
0629+  6636~            		else
0629+  6636~            		else
0629+  6636             
0629+  6636~            		else
0629+  6636~            		else
0629+  6636             
0630+  6636 86 08       			lampOn(4,3)
0630+  6638 9A 0A       
0630+  663A 97 0A       
0631+  663C             		endif
0631+  663C             
0631+  663C             
0631+  663C             
0631+  663C             
0631+  663C             
0631+  663C~            		endif
0631+  663C~            		endif
0631+  663C             
0631+  663C~            		endif
0631+  663C~            		endif
0631+  663C             
0631+  6635             
0631+  6635 06          
0631+  6636             
0631+  6636             
0631+  6636~            		endif
0631+  6636~            		endif
0631+  6636~            		endif
0631+  6636             
0631+  663C             
0631+  663C~            		endif
0631+  663C~            		endif
0631+  663C             
0632+  663C             		
0633+  663C BD 7D E9    		score10()
0634+  663F BD 7E 16    		advBonus()
0635+  6642             		done(1)
0635+  6642~            		done(1)
0635+  6642~            		done(1)
0635+  6642~            		done(1)
0635+  6642~            		done(1)
0635+  6642             
0635+  6642 7E 79 94    
0636+  6645             	else
0636+  6645             
0636+  6645             
0636+  6645             
0636+  6645             
0636+  6611             
0636+  6611             
0636+  6611             
0636+  6611~            	else
0636+  6611~            	else
0636+  6611~            	else
0636+  6611~            	else
0636+  6611             
0636+  6611~            	else
0636+  6611~            	else
0636+  6611~            	else
0636+  6611~            	else
0636+  6611             
0636+  6611             
0636+  6611 35          
0636+  6645             
0636+  6645 20 FE       
0636+  6647             
0636+  6647             
0636+  6647             
0636+  6647~            	else
0636+  6647~            	else
0636+  6647~            	else
0636+  6647~            	else
0636+  6647~            	else
0636+  6647             
0636+  6647~            	else
0636+  6647~            	else
0636+  6647             
0636+  6647~            	else
0636+  6647~            	else
0636+  6647             
0637+  6647             		done(0)
0637+  6647             
0637+  6647 86 02       
0637+  6649 BA 01 6B    
0637+  664C B7 01 6B    
0637+  664F             
0637+  664F 7E 79 94    
0638+  6652             	endif
0638+  6652             
0638+  6652             
0638+  6652             
0638+  6652             
0638+  6652             
0638+  6652~            	endif
0638+  6652~            	endif
0638+  6652             
0638+  6652~            	endif
0638+  6652~            	endif
0638+  6652             
0638+  6646             
0638+  6646 0B          
0638+  6647             
0638+  6647             
0638+  6647~            	endif
0638+  6647~            	endif
0638+  6647~            	endif
0638+  6647             
0638+  6652             
0638+  6652~            	endif
0638+  6652~            	endif
0638+  6652             
0639+  6652             swAdvBonus:
0640+  6652 BD 7E 16    	advBonus()
0641+  6655 BD 7E 06    	score1000()
0642+  6658             	done(1)
0642+  6658~            	done(1)
0642+  6658~            	done(1)
0642+  6658~            	done(1)
0642+  6658~            	done(1)
0642+  6658             
0642+  6658 7E 79 94    
0643+  665B             swSpinner:
0644+  665B             	;ldaA	>sc(4)
0645+  665B             	;bitA	sr(6)
0646+  665B             	;ifne
0647+  665B             	;	score100()
0648+  665B             	;	ldaA	$E
0649+  665B             	;else
0650+  665B             	;	noValidate
0651+  665B             	;	ldaA	0
0652+  665B             	;endif
0653+  665B             	;staA	solenoid1 + CLICKER - 1
0654+  665B             	
0655+  665B 86 08       	ldaA	lr(4) ; spinner
0656+  665D 95 0A       	bitA	>lc(3)
0657+  665F             	ifne ; spinner on
0657+  665F             
0657+  665F 27 FE       
0658+  6661 BD 7D F7    		score100()
0659+  6664 C6 01       		fireSolenoid(CLICKER)
0659+  6666 F7 01 4C    
0660+  6669             	else
0660+  6669             
0660+  6669             
0660+  6669             
0660+  6669             
0660+  6660             
0660+  6660             
0660+  6660             
0660+  6660~            	else
0660+  6660~            	else
0660+  6660~            	else
0660+  6660~            	else
0660+  6660             
0660+  6660~            	else
0660+  6660~            	else
0660+  6660~            	else
0660+  6660~            	else
0660+  6660             
0660+  6660             
0660+  6660 0A          
0660+  6669             
0660+  6669 20 FE       
0660+  666B             
0660+  666B             
0660+  666B             
0660+  666B~            	else
0660+  666B~            	else
0660+  666B~            	else
0660+  666B~            	else
0660+  666B~            	else
0660+  666B             
0660+  666B~            	else
0660+  666B~            	else
0660+  666B             
0660+  666B~            	else
0660+  666B~            	else
0660+  666B             
0661+  666B BD 7D E9    		score10()
0662+  666E             	endif
0662+  666E             
0662+  666E             
0662+  666E             
0662+  666E             
0662+  666E             
0662+  666E~            	endif
0662+  666E~            	endif
0662+  666E             
0662+  666E~            	endif
0662+  666E~            	endif
0662+  666E             
0662+  666A             
0662+  666A 03          
0662+  666B             
0662+  666B             
0662+  666B~            	endif
0662+  666B~            	endif
0662+  666B~            	endif
0662+  666B             
0662+  666E             
0662+  666E~            	endif
0662+  666E~            	endif
0662+  666E             
0663+  666E             	done(1)
0663+  666E~            	done(1)
0663+  666E~            	done(1)
0663+  666E~            	done(1)
0663+  666E~            	done(1)
0663+  666E             
0663+  666E 7E 79 94    
0664+  6671             
0665+  6671             swCaptiveRollover:
0666+  6671 96 09       	ldaA	>lc(2)
0667+  6673 85 40       	bitA	lr(7)
0668+  6675             	ifeq ; light off
0668+  6675             
0668+  6675 26 FE       
0669+  6677 BD 7D E9    		score10()
0670+  667A             	else
0670+  667A             
0670+  667A             
0670+  667A             
0670+  667A             
0670+  6676             
0670+  6676             
0670+  6676             
0670+  6676~            	else
0670+  6676~            	else
0670+  6676~            	else
0670+  6676~            	else
0670+  6676             
0670+  6676~            	else
0670+  6676~            	else
0670+  6676~            	else
0670+  6676~            	else
0670+  6676             
0670+  6676             
0670+  6676 05          
0670+  667A             
0670+  667A 20 FE       
0670+  667C             
0670+  667C             
0670+  667C             
0670+  667C~            	else
0670+  667C~            	else
0670+  667C~            	else
0670+  667C~            	else
0670+  667C~            	else
0670+  667C             
0670+  667C~            	else
0670+  667C~            	else
0670+  667C             
0670+  667C~            	else
0670+  667C~            	else
0670+  667C             
0671+  667C BD 7E 06    		score1000()
0672+  667F 86 0E       		ldaA	14 ; captive rollover switch number
0673+  6681 91 A8       		cmpA	>lastSwitch
0674+  6683             		ifne
0674+  6683             
0674+  6683 27 FE       
0675+  6685 86 0F       			ldaA	15 ; captive rollover switch number
0676+  6687 91 A8       			cmpA	>lastSwitch
0677+  6689             			ifne
0677+  6689             
0677+  6689 27 FE       
0678+  668B BD 66 A8    				jsr	captiveAward
0679+  668E             			endif
0679+  668E             
0679+  668E             
0679+  668E             
0679+  668E             
0679+  668E             
0679+  668E~            			endif
0679+  668E~            			endif
0679+  668E             
0679+  668E~            			endif
0679+  668E~            			endif
0679+  668E             
0679+  668A             
0679+  668A 03          
0679+  668B             
0679+  668B             
0679+  668B~            			endif
0679+  668B~            			endif
0679+  668B~            			endif
0679+  668B             
0679+  668E             
0679+  668E~            			endif
0679+  668E~            			endif
0679+  668E             
0680+  668E             		endif
0680+  668E             
0680+  668E             
0680+  668E             
0680+  668E             
0680+  668E             
0680+  668E~            		endif
0680+  668E~            		endif
0680+  668E             
0680+  668E~            		endif
0680+  668E~            		endif
0680+  668E             
0680+  6684             
0680+  6684 09          
0680+  6685             
0680+  6685             
0680+  6685~            		endif
0680+  6685~            		endif
0680+  6685~            		endif
0680+  6685             
0680+  668E             
0680+  668E~            		endif
0680+  668E~            		endif
0680+  668E             
0681+  668E             	endif
0681+  668E             
0681+  668E             
0681+  668E             
0681+  668E             
0681+  668E             
0681+  668E~            	endif
0681+  668E~            	endif
0681+  668E             
0681+  668E~            	endif
0681+  668E~            	endif
0681+  668E             
0681+  667B             
0681+  667B 12          
0681+  667C             
0681+  667C             
0681+  667C~            	endif
0681+  667C~            	endif
0681+  667C~            	endif
0681+  667C             
0681+  668E             
0681+  668E~            	endif
0681+  668E~            	endif
0681+  668E             
0682+  668E             	done(1)
0682+  668E~            	done(1)
0682+  668E~            	done(1)
0682+  668E~            	done(1)
0682+  668E~            	done(1)
0682+  668E             
0682+  668E 7E 79 94    
0683+  6691             
0684+  6691             swCaptiveTarget:
0685+  6691 BD 7E 16    	advBonus()
0686+  6694 96 09       	ldaA	>lc(2)
0687+  6696 85 40       	bitA	lr(7)
0688+  6698             	ifeq ; light off
0688+  6698             
0688+  6698 26 FE       
0689+  669A BD 7D E9    		score10()
0690+  669D BD 66 A8    		jsr	captiveAward
0691+  66A0             	else
0691+  66A0             
0691+  66A0             
0691+  66A0             
0691+  66A0             
0691+  6699             
0691+  6699             
0691+  6699             
0691+  6699~            	else
0691+  6699~            	else
0691+  6699~            	else
0691+  6699~            	else
0691+  6699             
0691+  6699~            	else
0691+  6699~            	else
0691+  6699~            	else
0691+  6699~            	else
0691+  6699             
0691+  6699             
0691+  6699 08          
0691+  66A0             
0691+  66A0 20 FE       
0691+  66A2             
0691+  66A2             
0691+  66A2             
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2             
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2             
0691+  66A2~            	else
0691+  66A2~            	else
0691+  66A2             
0692+  66A2 BD 7E 06    		score1000()
0693+  66A5             	endif
0693+  66A5             
0693+  66A5             
0693+  66A5             
0693+  66A5             
0693+  66A5             
0693+  66A5~            	endif
0693+  66A5~            	endif
0693+  66A5             
0693+  66A5~            	endif
0693+  66A5~            	endif
0693+  66A5             
0693+  66A1             
0693+  66A1 03          
0693+  66A2             
0693+  66A2             
0693+  66A2~            	endif
0693+  66A2~            	endif
0693+  66A2~            	endif
0693+  66A2             
0693+  66A5             
0693+  66A5~            	endif
0693+  66A5~            	endif
0693+  66A5             
0694+  66A5             	done(1)
0694+  66A5~            	done(1)
0694+  66A5~            	done(1)
0694+  66A5~            	done(1)
0694+  66A5~            	done(1)
0694+  66A5             
0694+  66A5 7E 79 94    
0695+  66A8             	
0696+  66A8             captiveAward:
0697+  66A8 86 01       	fork(10)
0697+  66AA BD 7D 80    
0698+  66AD 39          	rts
0699+  66AE 01          	nop
0700+  66AF 01          	nop
0701+  66B0             	
0702+  66B0             	beginFork()
0703+  66B0 86 80       	lampOn(8,2) ; right special
0703+  66B2 9A 09       
0703+  66B4 97 09       
0704+  66B6             	
0705+  66B6 96 09       	ldaA	>lc(2)
0706+  66B8 85 08       	bitA	lr(4) ; shoe 1
0707+  66BA             	ifeq
0707+  66BA             
0707+  66BA 26 FE       
0708+  66BC DE 2C       		endFork()
0708+  66BE 7E 79 3C    
0709+  66C1             	else
0709+  66C1             
0709+  66C1             
0709+  66C1             
0709+  66C1             
0709+  66BB             
0709+  66BB             
0709+  66BB             
0709+  66BB~            	else
0709+  66BB~            	else
0709+  66BB~            	else
0709+  66BB~            	else
0709+  66BB             
0709+  66BB~            	else
0709+  66BB~            	else
0709+  66BB~            	else
0709+  66BB~            	else
0709+  66BB             
0709+  66BB             
0709+  66BB 07          
0709+  66C1             
0709+  66C1 20 FE       
0709+  66C3             
0709+  66C3             
0709+  66C3             
0709+  66C3~            	else
0709+  66C3~            	else
0709+  66C3~            	else
0709+  66C3~            	else
0709+  66C3~            	else
0709+  66C3             
0709+  66C3~            	else
0709+  66C3~            	else
0709+  66C3             
0709+  66C3~            	else
0709+  66C3~            	else
0709+  66C3             
0710+  66C3 85 20       		bitA	lr(6)
0711+  66C5             		ifne
0711+  66C5             
0711+  66C5 27 FE       
0712+  66C7 86 20       			flashLamp(6,2)
0712+  66C9 9A A1       
0712+  66CB 97 A1       
0713+  66CD             		else
0713+  66CD             
0713+  66CD             
0713+  66CD             
0713+  66CD             
0713+  66C6             
0713+  66C6             
0713+  66C6             
0713+  66C6~            		else
0713+  66C6~            		else
0713+  66C6~            		else
0713+  66C6~            		else
0713+  66C6             
0713+  66C6~            		else
0713+  66C6~            		else
0713+  66C6~            		else
0713+  66C6~            		else
0713+  66C6             
0713+  66C6             
0713+  66C6 08          
0713+  66CD             
0713+  66CD 20 FE       
0713+  66CF             
0713+  66CF             
0713+  66CF             
0713+  66CF~            		else
0713+  66CF~            		else
0713+  66CF~            		else
0713+  66CF~            		else
0713+  66CF~            		else
0713+  66CF             
0713+  66CF~            		else
0713+  66CF~            		else
0713+  66CF             
0713+  66CF~            		else
0713+  66CF~            		else
0713+  66CF             
0714+  66CF 85 10       			bitA	lr(5)
0715+  66D1             			ifne
0715+  66D1             
0715+  66D1 27 FE       
0716+  66D3 86 10       				flashLamp(5,2)
0716+  66D5 9A A1       
0716+  66D7 97 A1       
0717+  66D9             			else
0717+  66D9             
0717+  66D9             
0717+  66D9             
0717+  66D9             
0717+  66D2             
0717+  66D2             
0717+  66D2             
0717+  66D2~            			else
0717+  66D2~            			else
0717+  66D2~            			else
0717+  66D2~            			else
0717+  66D2             
0717+  66D2~            			else
0717+  66D2~            			else
0717+  66D2~            			else
0717+  66D2~            			else
0717+  66D2             
0717+  66D2             
0717+  66D2 08          
0717+  66D9             
0717+  66D9 20 FE       
0717+  66DB             
0717+  66DB             
0717+  66DB             
0717+  66DB~            			else
0717+  66DB~            			else
0717+  66DB~            			else
0717+  66DB~            			else
0717+  66DB~            			else
0717+  66DB             
0717+  66DB~            			else
0717+  66DB~            			else
0717+  66DB             
0717+  66DB~            			else
0717+  66DB~            			else
0717+  66DB             
0718+  66DB 86 08       				flashLamp(4,2)
0718+  66DD 9A A1       
0718+  66DF 97 A1       
0719+  66E1             			endif
0719+  66E1             
0719+  66E1             
0719+  66E1             
0719+  66E1             
0719+  66E1             
0719+  66E1~            			endif
0719+  66E1~            			endif
0719+  66E1             
0719+  66E1~            			endif
0719+  66E1~            			endif
0719+  66E1             
0719+  66DA             
0719+  66DA 06          
0719+  66DB             
0719+  66DB             
0719+  66DB~            			endif
0719+  66DB~            			endif
0719+  66DB~            			endif
0719+  66DB             
0719+  66E1             
0719+  66E1~            			endif
0719+  66E1~            			endif
0719+  66E1             
0720+  66E1             		endif
0720+  66E1             
0720+  66E1             
0720+  66E1             
0720+  66E1             
0720+  66E1             
0720+  66E1~            		endif
0720+  66E1~            		endif
0720+  66E1             
0720+  66E1~            		endif
0720+  66E1~            		endif
0720+  66E1             
0720+  66CE             
0720+  66CE 12          
0720+  66CF             
0720+  66CF             
0720+  66CF~            		endif
0720+  66CF~            		endif
0720+  66CF~            		endif
0720+  66CF             
0720+  66E1             
0720+  66E1~            		endif
0720+  66E1~            		endif
0720+  66E1             
0721+  66E1             	endif
0721+  66E1             
0721+  66E1             
0721+  66E1             
0721+  66E1             
0721+  66E1             
0721+  66E1~            	endif
0721+  66E1~            	endif
0721+  66E1             
0721+  66E1~            	endif
0721+  66E1~            	endif
0721+  66E1             
0721+  66C2             
0721+  66C2 1E          
0721+  66C3             
0721+  66C3             
0721+  66C3~            	endif
0721+  66C3~            	endif
0721+  66C3~            	endif
0721+  66C3             
0721+  66E1             
0721+  66E1~            	endif
0721+  66E1~            	endif
0721+  66E1             
0722+  66E1             	
0723+  66E1 86 04       	ldaA	lr(3)
0724+  66E3 95 09       	bitA	>lc(2)
0725+  66E5             	ifne ; double bonus
0725+  66E5             
0725+  66E5 27 FE       
0726+  66E7 96 B0       		ldaA	>p_Bonus
0727+  66E9             	else
0727+  66E9             
0727+  66E9             
0727+  66E9             
0727+  66E9             
0727+  66E6             
0727+  66E6             
0727+  66E6             
0727+  66E6~            	else
0727+  66E6~            	else
0727+  66E6~            	else
0727+  66E6~            	else
0727+  66E6             
0727+  66E6~            	else
0727+  66E6~            	else
0727+  66E6~            	else
0727+  66E6~            	else
0727+  66E6             
0727+  66E6             
0727+  66E6 04          
0727+  66E9             
0727+  66E9 20 FE       
0727+  66EB             
0727+  66EB             
0727+  66EB             
0727+  66EB~            	else
0727+  66EB~            	else
0727+  66EB~            	else
0727+  66EB~            	else
0727+  66EB~            	else
0727+  66EB             
0727+  66EB~            	else
0727+  66EB~            	else
0727+  66EB             
0727+  66EB~            	else
0727+  66EB~            	else
0727+  66EB             
0728+  66EB 86 01       		ldaA	1
0729+  66ED             	endif	
0729+  66ED             
0729+  66ED             
0729+  66ED             
0729+  66ED             
0729+  66ED             
0729+  66ED~            	endif	
0729+  66ED~            	endif	
0729+  66ED             
0729+  66ED~            	endif	
0729+  66ED~            	endif	
0729+  66ED             
0729+  66EA             
0729+  66EA 02          
0729+  66EB             
0729+  66EB             
0729+  66EB~            	endif	
0729+  66EB~            	endif	
0729+  66EB~            	endif	
0729+  66EB             
0729+  66ED             
0729+  66ED~            	endif	
0729+  66ED~            	endif	
0729+  66ED             
0730+  66ED 97 BE       	staA	p_BonusLeft
0731+  66EF             	
0732+  66EF             captiveAward_bonusLoop:
0733+  66EF BD 7E 06    	score1000()
0734+  66F2 7A 00 B0    	dec	p_Bonus
0735+  66F5 BD 60 C3    	jsr	bonusLights
0736+  66F8 86 19       	delay(200)
0736+  66FA BD 7D 6B    
0737+  66FD 7D 00 B0    	tst	>p_Bonus
0738+  6700 26 ED       	bne	captiveAward_bonusLoop
0739+  6702             	
0740+  6702 86 38       	ldaA	00111000b
0741+  6704 94 A1       	andA	>flc(2)
0742+  6706 43          	comA
0743+  6707 94 09       	andA	>lc(2)
0744+  6709 97 09       	staA	lc(2)
0745+  670B             	
0746+  670B 96 BE       	ldaA	>p_BonusLeft
0747+  670D 97 B0       	staA	p_Bonus
0748+  670F             	
0749+  670F DE 2C       	endFork()	
0749+  6711 7E 79 3C    
0750+  6714             	
0751+  6714             	
0752+  6714             alternate:
0753+  6714 C6 00       	ldaB	0 ; turn on left?
0754+  6716 86 80       	ldaA	lr(8) ; right special
0755+  6718 95 09       	bitA	>lc(2)
0756+  671A             	ifne
0756+  671A             
0756+  671A 27 FE       
0757+  671C C6 01       		ldaB	1
0758+  671E 86 7F       		lampOff(8,2) ; right special
0758+  6720 94 09       
0758+  6722 97 09       
0759+  6724             	endif
0759+  6724             
0759+  6724             
0759+  6724             
0759+  6724             
0759+  6724             
0759+  6724~            	endif
0759+  6724~            	endif
0759+  6724             
0759+  6724~            	endif
0759+  6724~            	endif
0759+  6724             
0759+  671B             
0759+  671B 08          
0759+  671C             
0759+  671C             
0759+  671C~            	endif
0759+  671C~            	endif
0759+  671C~            	endif
0759+  671C             
0759+  6724             
0759+  6724~            	endif
0759+  6724~            	endif
0759+  6724             
0760+  6724 86 02       	ldaA	lr(2) ; left special
0761+  6726 95 0A       	bitA	>lc(3)
0762+  6728             	ifne
0762+  6728             
0762+  6728 27 FE       
0763+  672A 86 80       		lampOn(8,2) ; right special
0763+  672C 9A 09       
0763+  672E 97 09       
0764+  6730 86 FD       		lampOff(2,3) ; left special
0764+  6732 94 0A       
0764+  6734 97 0A       
0765+  6736             	endif
0765+  6736             
0765+  6736             
0765+  6736             
0765+  6736             
0765+  6736             
0765+  6736~            	endif
0765+  6736~            	endif
0765+  6736             
0765+  6736~            	endif
0765+  6736~            	endif
0765+  6736             
0765+  6729             
0765+  6729 0C          
0765+  672A             
0765+  672A             
0765+  672A~            	endif
0765+  672A~            	endif
0765+  672A~            	endif
0765+  672A             
0765+  6736             
0765+  6736~            	endif
0765+  6736~            	endif
0765+  6736             
0766+  6736 5D          	tstB
0767+  6737             	ifne
0767+  6737             
0767+  6737 27 FE       
0768+  6739 86 02       		lampOn(2,3) ; left special
0768+  673B 9A 0A       
0768+  673D 97 0A       
0769+  673F             	endif
0769+  673F             
0769+  673F             
0769+  673F             
0769+  673F             
0769+  673F             
0769+  673F~            	endif
0769+  673F~            	endif
0769+  673F             
0769+  673F~            	endif
0769+  673F~            	endif
0769+  673F             
0769+  6738             
0769+  6738 06          
0769+  6739             
0769+  6739             
0769+  6739~            	endif
0769+  6739~            	endif
0769+  6739~            	endif
0769+  6739             
0769+  673F             
0769+  673F~            	endif
0769+  673F~            	endif
0769+  673F             
0770+  673F 39          	rts
0771+  6740             	
0772+  6740             addCollect:
0773+  6740 96 09       	ldaA	>lc(2)
0774+  6742 85 08       	bitA	lr(4)
0775+  6744             	ifeq
0775+  6744             
0775+  6744 26 FE       
0776+  6746 86 08       		lampOn(4,2)
0776+  6748 9A 09       
0776+  674A 97 09       
0777+  674C 86 08       		flashLamp(4,2)
0777+  674E 9A A1       
0777+  6750 97 A1       
0778+  6752             	else
0778+  6752             
0778+  6752             
0778+  6752             
0778+  6752             
0778+  6745             
0778+  6745             
0778+  6745             
0778+  6745~            	else
0778+  6745~            	else
0778+  6745~            	else
0778+  6745~            	else
0778+  6745             
0778+  6745~            	else
0778+  6745~            	else
0778+  6745~            	else
0778+  6745~            	else
0778+  6745             
0778+  6745             
0778+  6745 0E          
0778+  6752             
0778+  6752 20 FE       
0778+  6754             
0778+  6754             
0778+  6754             
0778+  6754~            	else
0778+  6754~            	else
0778+  6754~            	else
0778+  6754~            	else
0778+  6754~            	else
0778+  6754             
0778+  6754~            	else
0778+  6754~            	else
0778+  6754             
0778+  6754~            	else
0778+  6754~            	else
0778+  6754             
0779+  6754 85 10       		bitA	lr(5)
0780+  6756             		ifeq
0780+  6756             
0780+  6756 26 FE       
0781+  6758 86 10       			lampOn(5,2)
0781+  675A 9A 09       
0781+  675C 97 09       
0782+  675E 86 10       			flashLamp(5,2)
0782+  6760 9A A1       
0782+  6762 97 A1       
0783+  6764             		else
0783+  6764             
0783+  6764             
0783+  6764             
0783+  6764             
0783+  6757             
0783+  6757             
0783+  6757             
0783+  6757~            		else
0783+  6757~            		else
0783+  6757~            		else
0783+  6757~            		else
0783+  6757             
0783+  6757~            		else
0783+  6757~            		else
0783+  6757~            		else
0783+  6757~            		else
0783+  6757             
0783+  6757             
0783+  6757 0E          
0783+  6764             
0783+  6764 20 FE       
0783+  6766             
0783+  6766             
0783+  6766             
0783+  6766~            		else
0783+  6766~            		else
0783+  6766~            		else
0783+  6766~            		else
0783+  6766~            		else
0783+  6766             
0783+  6766~            		else
0783+  6766~            		else
0783+  6766             
0783+  6766~            		else
0783+  6766~            		else
0783+  6766             
0784+  6766 85 20       			bitA	lr(6)
0785+  6768             			ifeq
0785+  6768             
0785+  6768 26 FE       
0786+  676A 86 20       				lampOn(6,2)
0786+  676C 9A 09       
0786+  676E 97 09       
0787+  6770 86 20       				flashLamp(6,2)
0787+  6772 9A A1       
0787+  6774 97 A1       
0788+  6776             			else
0788+  6776             
0788+  6776             
0788+  6776             
0788+  6776             
0788+  6769             
0788+  6769             
0788+  6769             
0788+  6769~            			else
0788+  6769~            			else
0788+  6769~            			else
0788+  6769~            			else
0788+  6769             
0788+  6769~            			else
0788+  6769~            			else
0788+  6769~            			else
0788+  6769~            			else
0788+  6769             
0788+  6769             
0788+  6769 0E          
0788+  6776             
0788+  6776 20 FE       
0788+  6778             
0788+  6778             
0788+  6778             
0788+  6778~            			else
0788+  6778~            			else
0788+  6778~            			else
0788+  6778~            			else
0788+  6778~            			else
0788+  6778             
0788+  6778~            			else
0788+  6778~            			else
0788+  6778             
0788+  6778~            			else
0788+  6778~            			else
0788+  6778             
0789+  6778 BD 7E 06    				score1000()
0790+  677B 86 04       				lampOn(3,3)
0790+  677D 9A 0A       
0790+  677F 97 0A       
0791+  6781             			endif
0791+  6781             
0791+  6781             
0791+  6781             
0791+  6781             
0791+  6781             
0791+  6781~            			endif
0791+  6781~            			endif
0791+  6781             
0791+  6781~            			endif
0791+  6781~            			endif
0791+  6781             
0791+  6777             
0791+  6777 09          
0791+  6778             
0791+  6778             
0791+  6778~            			endif
0791+  6778~            			endif
0791+  6778~            			endif
0791+  6778             
0791+  6781             
0791+  6781~            			endif
0791+  6781~            			endif
0791+  6781             
0792+  6781             		endif
0792+  6781             
0792+  6781             
0792+  6781             
0792+  6781             
0792+  6781             
0792+  6781~            		endif
0792+  6781~            		endif
0792+  6781             
0792+  6781~            		endif
0792+  6781~            		endif
0792+  6781             
0792+  6765             
0792+  6765 1B          
0792+  6766             
0792+  6766             
0792+  6766~            		endif
0792+  6766~            		endif
0792+  6766~            		endif
0792+  6766             
0792+  6781             
0792+  6781~            		endif
0792+  6781~            		endif
0792+  6781             
0793+  6781             	endif
0793+  6781             
0793+  6781             
0793+  6781             
0793+  6781             
0793+  6781             
0793+  6781~            	endif
0793+  6781~            	endif
0793+  6781             
0793+  6781~            	endif
0793+  6781~            	endif
0793+  6781             
0793+  6753             
0793+  6753 2D          
0793+  6754             
0793+  6754             
0793+  6754~            	endif
0793+  6754~            	endif
0793+  6754~            	endif
0793+  6754             
0793+  6781             
0793+  6781~            	endif
0793+  6781~            	endif
0793+  6781             
0794+  6781 39          	rts
0795+  6782             	
0796+  6782             ; end callbacks
0797+  6782             	.msfirst
0798+  6782             ; needs to be on $**00 address
0799+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0800+  6000 62 23       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0800+  6002 62 23       
0800+  6004 62 3C       
0800+  6006 60 C0       
0800+  6008 60 C0       
0800+  600A 60 C0       
0800+  600C 62 23       
0800+  600E 60 C0       
0801+  6010 62 73       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0801+  6012 62 23       
0801+  6014 65 5B       
0801+  6016 65 81       
0801+  6018 65 8A       
0801+  601A 65 9F       
0801+  601C 66 71       
0801+  601E 66 91       
0802+  6020 65 EF       	.dw swDropTip	\.dw swDroptIp\.dw swDroptiP\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0802+  6022 65 F9       
0802+  6024 66 03       
0802+  6026 66 52       
0802+  6028 65 8A       
0802+  602A 64 02       
0802+  602C 65 8A       
0802+  602E 60 C0       
0803+  6030 65 F4       	.dw swDropHot	\.dw swDrophOt\.dw swDrophoT\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0803+  6032 65 FE       
0803+  6034 66 08       
0803+  6036 65 8A       
0803+  6038 63 69       
0803+  603A 66 5B       
0803+  603C 65 E6       
0803+  603E 65 9F       
0804+  6040 65 35       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0804+  6042 65 81       
0804+  6044 65 8A       
0804+  6046 60 C0       
0804+  6048 64 EB       
0804+  604A 60 C0       
0804+  604C 60 C0       
0804+  604E 60 C0       
0805+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0805+  6052 60 C0       
0805+  6054 60 C0       
0805+  6056 60 C0       
0805+  6058 60 C0       
0805+  605A 60 C0       
0805+  605C 60 C0       
0805+  605E 60 C0       
0806+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0806+  6062 60 C0       
0806+  6064 60 C0       
0806+  6066 60 C0       
0806+  6068 60 C0       
0806+  606A 60 C0       
0806+  606C 60 C0       
0806+  606E 60 C0       
0807+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0807+  6072 60 C0       
0807+  6074 60 C0       
0807+  6076 60 C0       
0807+  6078 60 C0       
0807+  607A 60 C0       
0807+  607C 60 C0       
0807+  607E 60 C0       
0808+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0809+  6080             ; off = how many cycles it must be off for
0810+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0811+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0812+  6080             ; TRANSPOSED (?)
0813+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0814+  6080             settleTable: ; must be right after callbackTable
0815+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0815+  6081 87          
0815+  6082 C2          
0815+  6083 47          
0815+  6084 47          
0815+  6085 47          
0815+  6086 87          
0815+  6087 47          
0816+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0816+  6089 87          
0816+  608A 87          
0816+  608B 87          
0816+  608C 81          
0816+  608D 81          
0816+  608E 80          
0816+  608F 87          
0817+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,3,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0817+  6091 87          
0817+  6092 87          
0817+  6093 83          
0817+  6094 83          
0817+  6095 E1          
0817+  6096 81          
0817+  6097 80          
0818+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,1,1,0)
0818+  6099 87          
0818+  609A 87          
0818+  609B 81          
0818+  609C E1          
0818+  609D 80          
0818+  609E 80          
0818+  609F 81          
0819+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0819+  60A1 87          
0819+  60A2 81          
0819+  60A3 47          
0819+  60A4 80          
0819+  60A5 47          
0819+  60A6 47          
0819+  60A7 47          
0820+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0820+  60A9 47          
0820+  60AA 47          
0820+  60AB 47          
0820+  60AC 47          
0820+  60AD 47          
0820+  60AE 47          
0820+  60AF 47          
0821+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0821+  60B1 47          
0821+  60B2 47          
0821+  60B3 47          
0821+  60B4 47          
0821+  60B5 47          
0821+  60B6 47          
0821+  60B7 47          
0822+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0822+  60B9 47          
0822+  60BA 47          
0822+  60BB 47          
0822+  60BC 47          
0822+  60BD 47          
0822+  60BE 47          
0822+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 7D       	ldaA	attractStart >> 8
0102   78AF 97 2A       	staA	attractX
0103   78B1 86 C1       	ldaA	attractStart&$FF
0104   78B3 97 2B       	staA	attractX + 1
0105   78B5             	
0106   78B5 86 FF       	ldaA	$FF	
0107   78B7 B7 28 00    	staA 	displayStrobe
0108   78BA             
0109   78BA 86 00       	ldaA	00
0110   78BC 97 07       	staA	strobe
0111   78BE B7 01 6A    	staA	displayCol
0112   78C1             	
0113   78C1 CE 00 00    	ldX 	0
0114   78C4 DF 50       	stX		curCol
0115   78C6             	
0116   78C6 86 00       	ldaA	0
0117   78C8 97 10       	staA	curSwitchRowLsb
0118   78CA             	
0119   78CA             ; fill solenoid status with off
0120   78CA 86 0F       	ldaA	$F
0121   78CC CE 01 40    	ldX	solenoid1
0122   78CF             lSolDefault:
0123   78CF A7 00       	staA	0, X
0124   78D1 08          	inX
0125   78D2 8C 01 4F    	cpX	solenoid16
0126   78D5 26 F8       	bne	lSolDefault
0127   78D7             	
0128   78D7             ; clear 8 banks
0129   78D7 86 00       	ldaA 	0
0130   78D9 CE 00 00    	ldX	0
0131   78DC             lClear8:
0132   78DC A7 08       	staA	lampCol1, X
0133   78DE A7 A0       	staA	flashLampCol1, X
0134   78E0 A7 80       	staA	waitLeft, X
0135   78E2 08          	inX
0136   78E3 8C 00 08    	cpX	8
0137   78E6 26 F4       	bne 	lClear8
0138   78E8             	
0139   78E8             ; empty settle
0140   78E8 86 00       	ldaA	$00
0141   78EA CE 01 00    	ldX	settleRow1
0142   78ED             lSettleDefault:
0143   78ED A7 00       	staA	0, X
0144   78EF 08          	inX
0145   78F0 8C 01 3F    	cpX	settleRow8End
0146   78F3 26 F8       	bne	lSettleDefault
0147   78F5             	
0148   78F5             ; empty queue
0149   78F5 86 FF       	ldaA	$FF
0150   78F7 CE 00 60    	ldX	queue
0151   78FA             lEmptyQueue:
0152   78FA A7 00       	staA	0, X
0153   78FC 08          	inX
0154   78FD 8C 00 6D    	cpX	queueEnd
0155   7900 26 F8       	bne	lEmptyQueue
0156   7902             	
0157   7902 86 00       	ldaA	0
0158   7904 97 54       	staA	queueHead + 0
0159   7906 97 56       	staA	queueTail + 0
0160   7908 86 60       	ldaA	queue
0161   790A 97 55       	staA	queueHead + 1
0162   790C 97 57       	staA	queueTail + 1
0163   790E             	
0164   790E             ; test numbers
0165   790E 86 20       	lampOn(6,8) ; game over
0165   7910 9A 0F       
0165   7912 97 0F       
0166   7914             
0167   7914             	
0168   7914 BD 7D A2    	jsr resetScores
0169   7917             	
0170   7917             ; setup complete
0171   7917 0E          	clI		; enable timer interrupt
0172   7918             	
0173   7918             	
0174   7918             end:
0175   7918 B6 01 6B    	ldaA	>state
0176   791B 85 04       	bitA	100b
0177   791D             	ifne
0177   791D             
0177   791D 27 FE       
0178   791F             		; dec wait timers
0179   791F CE 00 7F    		ldX	waitLeft - 1
0180   7922             decWaitTimers:
0181   7922 08          		inX
0182   7923 A6 00       		ldaA	0, X
0183   7925             		ifne
0183   7925             
0183   7925 27 FE       
0184   7927 4A          			decA
0185   7928 A7 00       			staA	0, X
0186   792A             			ifeq
0186   792A             
0186   792A 26 FE       
0187   792C A6 08       				ldaA	waitMsb - waitLeft, X
0188   792E 97 58       				staA	tempQ
0189   7930 A6 10       				ldaA	waitLsb - waitLeft, X
0190   7932 97 59       				staA	tempQ + 1
0191   7934 E6 18       				ldaB	waitReg - waitLeft, X
0192   7936 DF 2C       				stX	forkX
0193   7938 DE 58       				ldX	>tempQ
0194   793A 6E 00       				jmp	0, X
0195   793C             			endif
0195   793C             
0195   793C             
0195   793C             
0195   793C             
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0195   792B             
0195   792B 10          
0195   792C             
0195   792C             
0195   792C~            			endif
0195   792C~            			endif
0195   792C~            			endif
0195   792C             
0195   793C             
0195   793C~            			endif
0195   793C~            			endif
0195   793C             
0196   793C             		endif
0196   793C             
0196   793C             
0196   793C             
0196   793C             
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0196   7926             
0196   7926 15          
0196   7927             
0196   7927             
0196   7927~            		endif
0196   7927~            		endif
0196   7927~            		endif
0196   7927             
0196   793C             
0196   793C~            		endif
0196   793C~            		endif
0196   793C             
0197   793C             afterFork:
0198   793C 8C 00 87    		cpX	waitLeftEnd
0199   793F 26 E1       		bne	decWaitTimers
0200   7941             		
0201   7941             		
0202   7941 7A 00 A9    		dec	dropResetTimer
0203   7944             		ifmi
0203   7944             
0203   7944 2A FE       
0204   7946 7C 00 A9    			inc	dropResetTimer
0205   7949             		endif
0205   7949             
0205   7949             
0205   7949             
0205   7949             
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0205   7945             
0205   7945 03          
0205   7946             
0205   7946             
0205   7946~            		endif
0205   7946~            		endif
0205   7946~            		endif
0205   7946             
0205   7949             
0205   7949~            		endif
0205   7949~            		endif
0205   7949             
0206   7949 7A 00 BF    		dec	bonusTimer
0207   794C             		ifmi
0207   794C             
0207   794C 2A FE       
0208   794E 7C 00 BF    			inc	bonusTimer
0209   7951             		endif
0209   7951             
0209   7951             
0209   7951             
0209   7951             
0209   7951             
0209   7951~            		endif
0209   7951~            		endif
0209   7951             
0209   7951~            		endif
0209   7951~            		endif
0209   7951             
0209   794D             
0209   794D 03          
0209   794E             
0209   794E             
0209   794E~            		endif
0209   794E~            		endif
0209   794E~            		endif
0209   794E             
0209   7951             
0209   7951~            		endif
0209   7951~            		endif
0209   7951             
0210   7951             		
0211   7951 B6 01 6B    		ldaA	>state		; clear strobe reset bit
0212   7954 84 FB       		andA	11111011b
0213   7956 B7 01 6B    		staA	state
0214   7959             	endif
0214   7959             
0214   7959             
0214   7959             
0214   7959             
0214   7959             
0214   7959~            	endif
0214   7959~            	endif
0214   7959             
0214   7959~            	endif
0214   7959~            	endif
0214   7959             
0214   791E             
0214   791E 3A          
0214   791F             
0214   791F             
0214   791F~            	endif
0214   791F~            	endif
0214   791F~            	endif
0214   791F             
0214   7959             
0214   7959~            	endif
0214   7959~            	endif
0214   7959             
0215   7959             
0216   7959             		
0217   7959             ; pop queue
0218   7959 D6 57       	ldaB	>queueTail + 1
0219   795B D1 55       	cmpB	>queueHead + 1
0220   795D             	ifeq
0220   795D             
0220   795D 26 FE       
0221   795F 7E 79 FA    		jmp skipQueue
0222   7962             	endif
0222   7962             
0222   7962             
0222   7962             
0222   7962             
0222   7962             
0222   7962~            	endif
0222   7962~            	endif
0222   7962             
0222   7962~            	endif
0222   7962~            	endif
0222   7962             
0222   795E             
0222   795E 03          
0222   795F             
0222   795F             
0222   795F~            	endif
0222   795F~            	endif
0222   795F~            	endif
0222   795F             
0222   7962             
0222   7962~            	endif
0222   7962~            	endif
0222   7962             
0223   7962             	
0224   7962 DE 54       	ldX	>queueHead
0225   7964 A6 00       	ldaA	0, X	; A now contains the first queue item
0226   7966             	
0227   7966 16          	tAB
0228   7967 C4 3F       	andB	00111111b ; B = callback index
0229   7969             	
0230   7969 D7 59       	staB	tempQ + 1
0231   796B C6 60       	ldaB	callbackTable >> 8
0232   796D D7 58       	staB	tempQ + 0	; callback address LSB / 2
0233   796F DE 58       	ldX	>tempQ
0234   7971             	
0235   7971 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0236   7973 C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0237   7975             	ifne ; if closure only
0237   7975             
0237   7975 27 FE       
0238   7977 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0239   7979 26 62       		bne	skipEvent
0240   797B             	endif
0240   797B             
0240   797B             
0240   797B             
0240   797B             
0240   797B             
0240   797B~            	endif
0240   797B~            	endif
0240   797B             
0240   797B~            	endif
0240   797B~            	endif
0240   797B             
0240   7976             
0240   7976 04          
0240   7977             
0240   7977             
0240   7977~            	endif
0240   7977~            	endif
0240   7977~            	endif
0240   7977             
0240   797B             
0240   797B~            	endif
0240   797B~            	endif
0240   797B             
0241   797B             	
0242   797B C5 40       	bitB	01000000b ; B.7 = active in game over
0243   797D             	ifeq 	 ; not active in game over
0243   797D             
0243   797D 26 FE       
0244   797F D6 0F       		ldaB	>lc(8)	; gameover mask
0245   7981 C5 20       		bitB	lr(6)
0246   7983 26 58       		bne	skipEvent
0247   7985 D6 0F       		ldaB	>lc(8) ; tilt bit
0248   7987 C5 10       		bitB	lr(5)
0249   7989 26 52       		bne	skipEvent
0250   798B             	endif
0250   798B             
0250   798B             
0250   798B             
0250   798B             
0250   798B             
0250   798B~            	endif
0250   798B~            	endif
0250   798B             
0250   798B~            	endif
0250   798B~            	endif
0250   798B             
0250   797E             
0250   797E 0C          
0250   797F             
0250   797F             
0250   797F~            	endif
0250   797F~            	endif
0250   797F~            	endif
0250   797F             
0250   798B             
0250   798B~            	endif
0250   798B~            	endif
0250   798B             
0251   798B             	
0252   798B             	; checked passed, do callback
0253   798B 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0254   798E DE 58       	ldX	>tempQ
0255   7990 EE 00       	ldX	0, X
0256   7992 6E 00       	jmp	0, X
0257   7994             	; everything trashed
0258   7994             afterQueueEvent:
0259   7994 BD 60 C3    	jsr 	bonusLights
0260   7997             	
0261   7997             	; update last switch
0262   7997 96 59       	ldaA	> tempQ + 1
0263   7999 44          	lsrA 	; got doubled earlier
0264   799A 97 A8       	staA	lastSwitch
0265   799C             
0266   799C 86 02       	ldaA	10b ; no validate bit
0267   799E B5 01 6B    	bitA	>state
0268   79A1             	ifeq ; validate pf
0268   79A1             
0268   79A1 26 FE       
0269   79A3             		; check if playfield invalid
0270   79A3 86 0F       		ldaA	00001111b ; player up
0271   79A5 95 A7       		bitA	>flc(8)
0272   79A7             		ifne ; any flashing -> pf invalid
0272   79A7             
0272   79A7 27 FE       
0273   79A9 43          			comA	; turn off flashing
0274   79AA 94 A7       			andA	>flc(8)
0275   79AC 97 A7       			staA	flc(8)
0276   79AE             			
0277   79AE 86 01       			ldaA	lr(1) ; shoot again pf flashing
0278   79B0 95 A2       			bitA	>flc(3)
0279   79B2             			ifne
0279   79B2             
0279   79B2 27 FE       
0280   79B4             				; turn off ball save
0281   79B4 86 FE       				flashOff(1,3)
0281   79B6 94 A2       
0281   79B8 97 A2       
0282   79BA 86 40       				ldaA	lr(7) ; shoot again backbox
0283   79BC 95 0F       				bitA	>lc(8)
0284   79BE             				ifeq
0284   79BE             
0284   79BE 26 FE       
0285   79C0 86 FE       					lampOff(1,3) ; shoot again pf
0285   79C2 94 0A       
0285   79C4 97 0A       
0286   79C6             				endif
0286   79C6             
0286   79C6             
0286   79C6             
0286   79C6             
0286   79C6             
0286   79C6~            				endif
0286   79C6~            				endif
0286   79C6             
0286   79C6~            				endif
0286   79C6~            				endif
0286   79C6             
0286   79BF             
0286   79BF 06          
0286   79C0             
0286   79C0             
0286   79C0~            				endif
0286   79C0~            				endif
0286   79C0~            				endif
0286   79C0             
0286   79C6             
0286   79C6~            				endif
0286   79C6~            				endif
0286   79C6             
0287   79C6             			else
0287   79C6             
0287   79C6             
0287   79C6             
0287   79C6             
0287   79B3             
0287   79B3             
0287   79B3             
0287   79B3~            			else
0287   79B3~            			else
0287   79B3~            			else
0287   79B3~            			else
0287   79B3             
0287   79B3~            			else
0287   79B3~            			else
0287   79B3~            			else
0287   79B3~            			else
0287   79B3             
0287   79B3             
0287   79B3 14          
0287   79C6             
0287   79C6 20 FE       
0287   79C8             
0287   79C8             
0287   79C8             
0287   79C8~            			else
0287   79C8~            			else
0287   79C8~            			else
0287   79C8~            			else
0287   79C8~            			else
0287   79C8             
0287   79C8~            			else
0287   79C8~            			else
0287   79C8             
0287   79C8~            			else
0287   79C8~            			else
0287   79C8             
0288   79C8 86 FE       				lampOff(1,3) ; shoot again
0288   79CA 94 0A       
0288   79CC 97 0A       
0289   79CE 86 BF       				lampOff(7,8)
0289   79D0 94 0F       
0289   79D2 97 0F       
0290   79D4             			endif
0290   79D4             
0290   79D4             
0290   79D4             
0290   79D4             
0290   79D4             
0290   79D4~            			endif
0290   79D4~            			endif
0290   79D4             
0290   79D4~            			endif
0290   79D4~            			endif
0290   79D4             
0290   79C7             
0290   79C7 0C          
0290   79C8             
0290   79C8             
0290   79C8~            			endif
0290   79C8~            			endif
0290   79C8~            			endif
0290   79C8             
0290   79D4             
0290   79D4~            			endif
0290   79D4~            			endif
0290   79D4             
0291   79D4             		endif
0291   79D4             
0291   79D4             
0291   79D4             
0291   79D4             
0291   79D4             
0291   79D4~            		endif
0291   79D4~            		endif
0291   79D4             
0291   79D4~            		endif
0291   79D4~            		endif
0291   79D4             
0291   79A8             
0291   79A8 2B          
0291   79A9             
0291   79A9             
0291   79A9~            		endif
0291   79A9~            		endif
0291   79A9~            		endif
0291   79A9             
0291   79D4             
0291   79D4~            		endif
0291   79D4~            		endif
0291   79D4             
0292   79D4             	else
0292   79D4             
0292   79D4             
0292   79D4             
0292   79D4             
0292   79A2             
0292   79A2             
0292   79A2             
0292   79A2~            	else
0292   79A2~            	else
0292   79A2~            	else
0292   79A2~            	else
0292   79A2             
0292   79A2~            	else
0292   79A2~            	else
0292   79A2~            	else
0292   79A2~            	else
0292   79A2             
0292   79A2             
0292   79A2 33          
0292   79D4             
0292   79D4 20 FE       
0292   79D6             
0292   79D6             
0292   79D6             
0292   79D6~            	else
0292   79D6~            	else
0292   79D6~            	else
0292   79D6~            	else
0292   79D6~            	else
0292   79D6             
0292   79D6~            	else
0292   79D6~            	else
0292   79D6             
0292   79D6~            	else
0292   79D6~            	else
0292   79D6             
0293   79D6             		; clear don't validate bit
0294   79D6 43          		comA
0295   79D7 B4 01 6B    		andA	>state
0296   79DA B7 01 6B    		staA	state
0297   79DD             	endif
0297   79DD             
0297   79DD             
0297   79DD             
0297   79DD             
0297   79DD             
0297   79DD~            	endif
0297   79DD~            	endif
0297   79DD             
0297   79DD~            	endif
0297   79DD~            	endif
0297   79DD             
0297   79D5             
0297   79D5 07          
0297   79D6             
0297   79D6             
0297   79D6~            	endif
0297   79D6~            	endif
0297   79D6~            	endif
0297   79D6             
0297   79DD             
0297   79DD~            	endif
0297   79DD~            	endif
0297   79DD             
0298   79DD             	
0299   79DD             skipEvent:
0300   79DD B6 01 6B    	ldaA	>state
0301   79E0 85 04       	bitA	100b
0302   79E2             	ifeq	; don't process queue if still finishing timers
0302   79E2             
0302   79E2 26 FE       
0303   79E4 C6 6D       		ldaB	queueEnd
0304   79E6 D1 55       		cmpB	>queueHead + 1
0305   79E8             		ifeq
0305   79E8             
0305   79E8 26 FE       
0306   79EA C6 60       			ldaB	queue
0307   79EC D7 55       			staB	queueHead + 1
0308   79EE             		else
0308   79EE             
0308   79EE             
0308   79EE             
0308   79EE             
0308   79E9             
0308   79E9             
0308   79E9             
0308   79E9~            		else
0308   79E9~            		else
0308   79E9~            		else
0308   79E9~            		else
0308   79E9             
0308   79E9~            		else
0308   79E9~            		else
0308   79E9~            		else
0308   79E9~            		else
0308   79E9             
0308   79E9             
0308   79E9 06          
0308   79EE             
0308   79EE 20 FE       
0308   79F0             
0308   79F0             
0308   79F0             
0308   79F0~            		else
0308   79F0~            		else
0308   79F0~            		else
0308   79F0~            		else
0308   79F0~            		else
0308   79F0             
0308   79F0~            		else
0308   79F0~            		else
0308   79F0             
0308   79F0~            		else
0308   79F0~            		else
0308   79F0             
0309   79F0 7C 00 55    			inc	queueHead + 1
0310   79F3             		endif
0310   79F3             
0310   79F3             
0310   79F3             
0310   79F3             
0310   79F3             
0310   79F3~            		endif
0310   79F3~            		endif
0310   79F3             
0310   79F3~            		endif
0310   79F3~            		endif
0310   79F3             
0310   79EF             
0310   79EF 03          
0310   79F0             
0310   79F0             
0310   79F0~            		endif
0310   79F0~            		endif
0310   79F0~            		endif
0310   79F0             
0310   79F3             
0310   79F3~            		endif
0310   79F3~            		endif
0310   79F3             
0311   79F3             	else
0311   79F3             
0311   79F3             
0311   79F3             
0311   79F3             
0311   79E3             
0311   79E3             
0311   79E3             
0311   79E3~            	else
0311   79E3~            	else
0311   79E3~            	else
0311   79E3~            	else
0311   79E3             
0311   79E3~            	else
0311   79E3~            	else
0311   79E3~            	else
0311   79E3~            	else
0311   79E3             
0311   79E3             
0311   79E3 11          
0311   79F3             
0311   79F3 20 FE       
0311   79F5             
0311   79F5             
0311   79F5             
0311   79F5~            	else
0311   79F5~            	else
0311   79F5~            	else
0311   79F5~            	else
0311   79F5~            	else
0311   79F5             
0311   79F5~            	else
0311   79F5~            	else
0311   79F5             
0311   79F5~            	else
0311   79F5~            	else
0311   79F5             
0312   79F5 DE 2C       		ldX	>forkX
0313   79F7 7E 79 3C    		jmp	afterFork
0314   79FA             	endif
0314   79FA             
0314   79FA             
0314   79FA             
0314   79FA             
0314   79FA             
0314   79FA~            	endif
0314   79FA~            	endif
0314   79FA             
0314   79FA~            	endif
0314   79FA~            	endif
0314   79FA             
0314   79F4             
0314   79F4 05          
0314   79F5             
0314   79F5             
0314   79F5~            	endif
0314   79F5~            	endif
0314   79F5~            	endif
0314   79F5             
0314   79FA             
0314   79FA~            	endif
0314   79FA~            	endif
0314   79FA             
0315   79FA             				
0316   79FA             skipQueue:
0317   79FA             				
0318   79FA             	
0319   79FA             				
0320   79FA 7E 79 18    	jmp		end
0321   79FD 00 00       	.dw 0
0322   79FF 00 00       	.dw 0
0323   7A01 00 00       	.dw 0
0324   7A03 00 00       	.dw 0
0325   7A05 00 00       	.dw 0
0326   7A07             		
0327   7A07             interrupt:	
0328   7A07 7C 00 02    	inc	counter
0329   7A0A 86 00       	ldaA	0
0330   7A0C 91 02       	cmpA	>counter
0331   7A0E 26 52       	bne	counterHandled
0332   7A10             	
0333   7A10             	; attract mode
0334   7A10 86 20       	ldaA	lr(6) ; gameover
0335   7A12 95 0F       		bitA	> lc(8)
0336   7A14             		ifne
0336   7A14             
0336   7A14 27 FE       
0337   7A16 DE 2A       		ldX	>attractX
0338   7A18 A6 00       		ldaA	0, X
0339   7A1A 97 09       		staA	lc(2)
0340   7A1C A6 01       		ldaA	1, X
0341   7A1E 97 0A       		staA	lc(3)
0342   7A20 A6 02       		ldaA	2, X
0343   7A22 97 0B       		staA	lc(4)
0344   7A24 A6 03       		ldaA	3, X
0345   7A26 97 0C       		staA	lc(5)
0346   7A28 A6 04       		ldaA	4, X
0347   7A2A 97 0D       		staA	lc(6)
0348   7A2C 96 2B       		ldaA	>attractX + 1
0349   7A2E 8B 05       		addA	5
0350   7A30 81 E9       		cmpA	attractEnd&$FF
0351   7A32             		ifeq
0351   7A32             
0351   7A32 26 FE       
0352   7A34 86 C1       			ldaA	attractStart&$FF
0353   7A36             		endif
0353   7A36             
0353   7A36             
0353   7A36             
0353   7A36             
0353   7A36             
0353   7A36~            		endif
0353   7A36~            		endif
0353   7A36             
0353   7A36~            		endif
0353   7A36~            		endif
0353   7A36             
0353   7A33             
0353   7A33 02          
0353   7A34             
0353   7A34             
0353   7A34~            		endif
0353   7A34~            		endif
0353   7A34~            		endif
0353   7A34             
0353   7A36             
0353   7A36~            		endif
0353   7A36~            		endif
0353   7A36             
0354   7A36 97 2B       		staA	attractX + 1
0355   7A38             	endif
0355   7A38             
0355   7A38             
0355   7A38             
0355   7A38             
0355   7A38             
0355   7A38~            	endif
0355   7A38~            	endif
0355   7A38             
0355   7A38~            	endif
0355   7A38~            	endif
0355   7A38             
0355   7A15             
0355   7A15 22          
0355   7A16             
0355   7A16             
0355   7A16~            	endif
0355   7A16~            	endif
0355   7A16~            	endif
0355   7A16             
0355   7A38             
0355   7A38~            	endif
0355   7A38~            	endif
0355   7A38             
0356   7A38             	
0357   7A38 7C 00 03    	inc 	counter2
0358   7A3B 86 08       	ldaA	8
0359   7A3D 91 03       	cmpA	>counter2
0360   7A3F 26 21       	bne	counterHandled
0361   7A41             	
0362   7A41 86 0A       	ldaA	10
0363   7A43 91 B0       	cmpA	>p_Bonus
0364   7A45             	ifeq
0364   7A45             
0364   7A45 26 FE       
0365   7A47 BD 7E 16    		jsr advanceBonus
0366   7A4A             	endif
0366   7A4A             
0366   7A4A             
0366   7A4A             
0366   7A4A             
0366   7A4A             
0366   7A4A~            	endif
0366   7A4A~            	endif
0366   7A4A             
0366   7A4A~            	endif
0366   7A4A~            	endif
0366   7A4A             
0366   7A46             
0366   7A46 03          
0366   7A47             
0366   7A47             
0366   7A47~            	endif
0366   7A47~            	endif
0366   7A47~            	endif
0366   7A47             
0366   7A4A             
0366   7A4A~            	endif
0366   7A4A~            	endif
0366   7A4A             
0367   7A4A             	
0368   7A4A 86 00       	ldaA	0
0369   7A4C 97 03       	staA	counter2
0370   7A4E 86 77       	ldaA	01110111b
0371   7A50 91 7E       	cmpA	>displayBcd1 + 14
0372   7A52 27 08       	beq	on
0373   7A54             	
0374   7A54 86 F0       	ldaA	$F0
0375   7A56             	;staA	lampRow1
0376   7A56 86 77       	ldaA	01110111b
0377   7A58 97 7E       	staA	displayBcd1	 + 14
0378   7A5A 20 06       	bra	counterHandled
0379   7A5C             on:
0380   7A5C 86 0F       	ldaA	$0F
0381   7A5E             	;staA	lampRow1
0382   7A5E 86 33       	ldaA	00110011b
0383   7A60 97 7E       	staA	displayBcd1	 + 14
0384   7A62             
0385   7A62             counterHandled:
0386   7A62             ; move switch column
0387   7A62 96 07       	ldaA	>strobe
0388   7A64 B7 30 02    	staA	switchStrobe
0389   7A67             	
0390   7A67             ; update display 
0391   7A67             	
0392   7A67 96 BF       	ldaA	>$BF
0393   7A69 97 7F       	staA	displayBcd1 + 15
0394   7A6B 96 6F       	ldaA	>$6F
0395   7A6D 97 76       	staA	displayBcd1 + 6
0396   7A6F             	
0397   7A6F DE 50       	ldX	>curCol
0398   7A71 B6 01 6A    	ldaA	>displayCol
0399   7A74 84 0F       	andA	1111b
0400   7A76 C6 FF       	ldaB 	$FF
0401   7A78 F7 28 02    	staB	displayBcd
0402   7A7B B7 28 00    	staA	displayStrobe
0403   7A7E 85 08       	bitA	00001000b
0404   7A80             	ifeq
0404   7A80             
0404   7A80 26 FE       
0405   7A82 E6 70       		ldaB	displayBcd1, X
0406   7A84             	else
0406   7A84             
0406   7A84             
0406   7A84             
0406   7A84             
0406   7A81             
0406   7A81             
0406   7A81             
0406   7A81~            	else
0406   7A81~            	else
0406   7A81~            	else
0406   7A81~            	else
0406   7A81             
0406   7A81~            	else
0406   7A81~            	else
0406   7A81~            	else
0406   7A81~            	else
0406   7A81             
0406   7A81             
0406   7A81 04          
0406   7A84             
0406   7A84 20 FE       
0406   7A86             
0406   7A86             
0406   7A86             
0406   7A86~            	else
0406   7A86~            	else
0406   7A86~            	else
0406   7A86~            	else
0406   7A86~            	else
0406   7A86             
0406   7A86~            	else
0406   7A86~            	else
0406   7A86             
0406   7A86~            	else
0406   7A86~            	else
0406   7A86             
0407   7A86 E6 78       		ldaB	displayBcd1 + 8, X
0408   7A88             	endif
0408   7A88             
0408   7A88             
0408   7A88             
0408   7A88             
0408   7A88             
0408   7A88~            	endif
0408   7A88~            	endif
0408   7A88             
0408   7A88~            	endif
0408   7A88~            	endif
0408   7A88             
0408   7A85             
0408   7A85 02          
0408   7A86             
0408   7A86             
0408   7A86~            	endif
0408   7A86~            	endif
0408   7A86~            	endif
0408   7A86             
0408   7A88             
0408   7A88~            	endif
0408   7A88~            	endif
0408   7A88             
0409   7A88 F7 28 02    	staB	displayBcd
0410   7A8B             	
0411   7A8B             ; read switches
0412   7A8B             	;jmp updateLamps
0413   7A8B DE 50       	ldX	>curCol
0414   7A8D B6 30 00    	ldaA	>switchRow
0415   7A90 16          	tab
0416   7A91 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0417   7A93             	
0418   7A93 D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0419   7A95 D7 01       	staB	temp + 1 			; temp = switch / 2
0420   7A97 D7 53       	staB	tempX + 1			; tempX = cRAM
0421   7A99 C6 60       	ldaB	callbackTable >> 8
0422   7A9B D7 00       	staB	temp
0423   7A9D C6 01       	ldaB	cRAM >> 8
0424   7A9F D7 52       	staB	tempX
0425   7AA1             	
0426   7AA1 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0427   7AA3             	
0428   7AA3             	; temp now contains the beginning of the row in the callbackTable
0429   7AA3             swNext:
0430   7AA3 85 01       	bitA	00000001b	 ; Z set if switch not different
0431   7AA5             	ifne		; if bit set, switch different
0431   7AA5             
0431   7AA5 27 FE       
0432   7AA7 36          		pshA ; store changed switches left
0433   7AA8 DE 52       		ldX	>tempX
0434   7AAA             checkSettled:
0435   7AAA A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0436   7AAC 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0437   7AAE 27 35       		beq 	notSettled; A=0 -> was settled
0438   7AB0             		; else A > 0 -> settling
0439   7AB0 86 18       			ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0440   7AB2             				; but checking 'multiple of 8' would miss 7/8 switch
0441   7AB2             				; columns completely since they're in sync
0442   7AB2             				; so instead the lowest bits are empty (so that it'll
0443   7AB2             				; get all switch cols) and instead it skips 7/8 groups 
0444   7AB2             				; of 8 IRQs
0445   7AB2 95 02       			bitA	>counter
0446   7AB4 26 49       			bne	settledEnd
0447   7AB6 A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0448   7AB8 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0449   7ABA 4A          			decA
0450   7ABB A7 00       			staA	0, X	; sets Z if now A = 0
0451   7ABD             			ifeq ; A=0 -> now settled, fire event
0451   7ABD             
0451   7ABD 26 FE       
0452   7ABF             settled:		
0453   7ABF DE 50       				ldX	>curCol
0454   7AC1 17          				tBA	; A now the bit in row
0455   7AC2 A8 20       				eorA	switchRow1, X ; toggle bit in row
0456   7AC4 A7 20       				staA	switchRow1, X ; A now state of row
0457   7AC6             				
0458   7AC6 F5 30 00    				bitB	>switchRow
0459   7AC9             				ifne ; switch now on
0459   7AC9             
0459   7AC9 27 FE       
0460   7ACB 86 40       					ldaA	01000000b
0461   7ACD             				else
0461   7ACD             
0461   7ACD             
0461   7ACD             
0461   7ACD             
0461   7ACA             
0461   7ACA             
0461   7ACA             
0461   7ACA~            				else
0461   7ACA~            				else
0461   7ACA~            				else
0461   7ACA~            				else
0461   7ACA             
0461   7ACA~            				else
0461   7ACA~            				else
0461   7ACA~            				else
0461   7ACA~            				else
0461   7ACA             
0461   7ACA             
0461   7ACA 04          
0461   7ACD             
0461   7ACD 20 FE       
0461   7ACF             
0461   7ACF             
0461   7ACF             
0461   7ACF~            				else
0461   7ACF~            				else
0461   7ACF~            				else
0461   7ACF~            				else
0461   7ACF~            				else
0461   7ACF             
0461   7ACF~            				else
0461   7ACF~            				else
0461   7ACF             
0461   7ACF~            				else
0461   7ACF~            				else
0461   7ACF             
0462   7ACF 86 C0       					ldaA	11000000b
0463   7AD1             				endif
0463   7AD1             
0463   7AD1             
0463   7AD1             
0463   7AD1             
0463   7AD1             
0463   7AD1~            				endif
0463   7AD1~            				endif
0463   7AD1             
0463   7AD1~            				endif
0463   7AD1~            				endif
0463   7AD1             
0463   7ACE             
0463   7ACE 02          
0463   7ACF             
0463   7ACF             
0463   7ACF~            				endif
0463   7ACF~            				endif
0463   7ACF~            				endif
0463   7ACF             
0463   7AD1             
0463   7AD1~            				endif
0463   7AD1~            				endif
0463   7AD1             
0464   7AD1 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0465   7AD3             				
0466   7AD3             				; store event
0467   7AD3 DE 56       				ldX	>queueTail
0468   7AD5 A7 00       				staA	0, X
0469   7AD7 7C 00 57    				inc	queueTail + 1
0470   7ADA             				
0471   7ADA             				; wrap queueTail if necessary
0472   7ADA 8C 00 6D    				cpX	queueEnd 
0473   7ADD             				ifeq
0473   7ADD             
0473   7ADD 26 FE       
0474   7ADF 86 60       					ldaA	queue 
0475   7AE1 97 57       					staA	queueTail + 1
0476   7AE3             				endif
0476   7AE3             
0476   7AE3             
0476   7AE3             
0476   7AE3             
0476   7AE3             
0476   7AE3~            				endif
0476   7AE3~            				endif
0476   7AE3             
0476   7AE3~            				endif
0476   7AE3~            				endif
0476   7AE3             
0476   7ADE             
0476   7ADE 04          
0476   7ADF             
0476   7ADF             
0476   7ADF~            				endif
0476   7ADF~            				endif
0476   7ADF~            				endif
0476   7ADF             
0476   7AE3             
0476   7AE3~            				endif
0476   7AE3~            				endif
0476   7AE3             
0477   7AE3             			endif
0477   7AE3             
0477   7AE3             
0477   7AE3             
0477   7AE3             
0477   7AE3             
0477   7AE3~            			endif
0477   7AE3~            			endif
0477   7AE3             
0477   7AE3~            			endif
0477   7AE3~            			endif
0477   7AE3             
0477   7ABE             
0477   7ABE 24          
0477   7ABF             
0477   7ABF             
0477   7ABF~            			endif
0477   7ABF~            			endif
0477   7ABF~            			endif
0477   7ABF             
0477   7AE3             
0477   7AE3~            			endif
0477   7AE3~            			endif
0477   7AE3             
0478   7AE3 20 1A       		bra settledEnd
0479   7AE5             notSettled: ; =0 -> was settled, so now it's not
0480   7AE5             			; get the settle time
0481   7AE5 96 53       			ldaA	>tempX + 1
0482   7AE7 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0483   7AE9 DE 00       			ldX	>temp
0484   7AEB             			
0485   7AEB             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0486   7AEB A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0487   7AED             			
0488   7AED             			; need to get correct 3 bits from switch settings
0489   7AED F5 30 00    			bitB	>switchRow
0490   7AF0             			ifne ; switch just turned on
0490   7AF0             
0490   7AF0 27 FE       
0491   7AF2 44          				lsrA
0492   7AF3 44          				lsrA
0493   7AF4             			else
0493   7AF4             
0493   7AF4             
0493   7AF4             
0493   7AF4             
0493   7AF1             
0493   7AF1             
0493   7AF1             
0493   7AF1~            			else
0493   7AF1~            			else
0493   7AF1~            			else
0493   7AF1~            			else
0493   7AF1             
0493   7AF1~            			else
0493   7AF1~            			else
0493   7AF1~            			else
0493   7AF1~            			else
0493   7AF1             
0493   7AF1             
0493   7AF1 04          
0493   7AF4             
0493   7AF4 20 FE       
0493   7AF6             
0493   7AF6             
0493   7AF6             
0493   7AF6~            			else
0493   7AF6~            			else
0493   7AF6~            			else
0493   7AF6~            			else
0493   7AF6~            			else
0493   7AF6             
0493   7AF6~            			else
0493   7AF6~            			else
0493   7AF6             
0493   7AF6~            			else
0493   7AF6~            			else
0493   7AF6             
0494   7AF6 48          				aslA
0495   7AF7             			endif
0495   7AF7             
0495   7AF7             
0495   7AF7             
0495   7AF7             
0495   7AF7             
0495   7AF7~            			endif
0495   7AF7~            			endif
0495   7AF7             
0495   7AF7~            			endif
0495   7AF7~            			endif
0495   7AF7             
0495   7AF5             
0495   7AF5 01          
0495   7AF6             
0495   7AF6             
0495   7AF6~            			endif
0495   7AF6~            			endif
0495   7AF6~            			endif
0495   7AF6             
0495   7AF7             
0495   7AF7~            			endif
0495   7AF7~            			endif
0495   7AF7             
0496   7AF7 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0497   7AF9             						
0498   7AF9 DE 52       			ldX	>tempX
0499   7AFB A7 00       			staA	0, X		; start settling	
0500   7AFD 27 C0       			beq	settled		; quick out for 0 settle
0501   7AFF             settledEnd:
0502   7AFF             			
0503   7AFF 32          		pulA
0504   7B00             	endif
0504   7B00             
0504   7B00             
0504   7B00             
0504   7B00             
0504   7B00             
0504   7B00~            	endif
0504   7B00~            	endif
0504   7B00             
0504   7B00~            	endif
0504   7B00~            	endif
0504   7B00             
0504   7AA6             
0504   7AA6 59          
0504   7AA7             
0504   7AA7             
0504   7AA7~            	endif
0504   7AA7~            	endif
0504   7AA7~            	endif
0504   7AA7             
0504   7B00             
0504   7B00~            	endif
0504   7B00~            	endif
0504   7B00             
0505   7B00 7C 00 53    	inc tempX + 1
0506   7B03 58          	aslB
0507   7B04 44          	lsrA			; pop lowest bit off, set Z if A is empty
0508   7B05 26 9C       	bne		swNext 	; more 'switched' bits, keep processing 
0509   7B07             	
0510   7B07             	
0511   7B07             ; update lamps
0512   7B07             updateLamps:
0513   7B07             	;jmp updateStrobe
0514   7B07             
0515   7B07 DE 50       	ldX	>curCol
0516   7B09             	
0517   7B09 86 FF       	ldaA	$FF	;lamp row is inverted
0518   7B0B B7 24 00    	staA	lampCol
0519   7B0E 96 07       	ldaA	>strobe
0520   7B10 B7 24 02    	staA	lampStrobe
0521   7B13             	
0522   7B13 D6 02       	ldaB	>counter
0523   7B15 A6 08       	ldaA	lampCol1, X
0524   7B17 C5 80       	bitB	10000000b 
0525   7B19             	ifeq
0525   7B19             
0525   7B19 26 FE       
0526   7B1B A8 A0       		eorA	flashLampCol1, X
0527   7B1D A4 08       		andA	lampCol1, X
0528   7B1F             	endif
0528   7B1F             
0528   7B1F             
0528   7B1F             
0528   7B1F             
0528   7B1F             
0528   7B1F~            	endif
0528   7B1F~            	endif
0528   7B1F             
0528   7B1F~            	endif
0528   7B1F~            	endif
0528   7B1F             
0528   7B1A             
0528   7B1A 04          
0528   7B1B             
0528   7B1B             
0528   7B1B~            	endif
0528   7B1B~            	endif
0528   7B1B~            	endif
0528   7B1B             
0528   7B1F             
0528   7B1F~            	endif
0528   7B1F~            	endif
0528   7B1F             
0529   7B1F 43          	comA	; inverted
0530   7B20             	
0531   7B20 B7 24 00    	staA	lampCol
0532   7B23 86 00       	ldaA	00
0533   7B25             
0534   7B25             ; update solenoids
0535   7B25             	; if a solenoid is set to <254, --
0536   7B25             	; if =255, off, otherwise on
0537   7B25             	; else leave it at 254
0538   7B25             	
0539   7B25 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0540   7B28 86 FE       	ldaA	254
0541   7B2A DE 50       	ldX	>curCol
0542   7B2C             	; update solenoid in current 'column' (1-8) 
0543   7B2C A1 40       	cmpA	solenoid1 - cRAM, X
0544   7B2E             	ifge 	; solenoid <=254, turn on
0544   7B2E             
0544   7B2E 25 FE       
0545   7B30             		ifgt	; solenoid < 254, decrement
0545   7B30             
0545   7B30 23 FE       
0546   7B32 6A 40       			dec	solenoid1 - cRAM, X
0547   7B34             		endif
0547   7B34             
0547   7B34             
0547   7B34             
0547   7B34             
0547   7B34             
0547   7B34~            		endif
0547   7B34~            		endif
0547   7B34             
0547   7B34~            		endif
0547   7B34~            		endif
0547   7B34             
0547   7B31             
0547   7B31 02          
0547   7B32             
0547   7B32             
0547   7B32~            		endif
0547   7B32~            		endif
0547   7B32~            		endif
0547   7B32             
0547   7B34             
0547   7B34~            		endif
0547   7B34~            		endif
0547   7B34             
0548   7B34 0D          		sec
0549   7B35             	else
0549   7B35             
0549   7B35             
0549   7B35             
0549   7B35             
0549   7B2F             
0549   7B2F             
0549   7B2F             
0549   7B2F~            	else
0549   7B2F~            	else
0549   7B2F~            	else
0549   7B2F~            	else
0549   7B2F             
0549   7B2F~            	else
0549   7B2F~            	else
0549   7B2F~            	else
0549   7B2F~            	else
0549   7B2F             
0549   7B2F             
0549   7B2F 07          
0549   7B35             
0549   7B35 20 FE       
0549   7B37             
0549   7B37             
0549   7B37             
0549   7B37~            	else
0549   7B37~            	else
0549   7B37~            	else
0549   7B37~            	else
0549   7B37~            	else
0549   7B37             
0549   7B37~            	else
0549   7B37~            	else
0549   7B37             
0549   7B37~            	else
0549   7B37~            	else
0549   7B37             
0550   7B37 0C          		clc
0551   7B38             	endif
0551   7B38             
0551   7B38             
0551   7B38             
0551   7B38             
0551   7B38             
0551   7B38~            	endif
0551   7B38~            	endif
0551   7B38             
0551   7B38~            	endif
0551   7B38~            	endif
0551   7B38             
0551   7B36             
0551   7B36 01          
0551   7B37             
0551   7B37             
0551   7B37~            	endif
0551   7B37~            	endif
0551   7B37~            	endif
0551   7B37             
0551   7B38             
0551   7B38~            	endif
0551   7B38~            	endif
0551   7B38             
0552   7B38 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0553   7B3B             	; repeat above for second bank
0554   7B3B A1 48       	cmpA	solenoid9 - cRAM, X
0555   7B3D             	ifge 	; solenoid <=254, turn on
0555   7B3D             
0555   7B3D 25 FE       
0556   7B3F             		ifgt	; solenoid < 254, decrement
0556   7B3F             
0556   7B3F 23 FE       
0557   7B41 6A 48       			dec	solenoid9 - cRAM, X
0558   7B43             		endif
0558   7B43             
0558   7B43             
0558   7B43             
0558   7B43             
0558   7B43             
0558   7B43~            		endif
0558   7B43~            		endif
0558   7B43             
0558   7B43~            		endif
0558   7B43~            		endif
0558   7B43             
0558   7B40             
0558   7B40 02          
0558   7B41             
0558   7B41             
0558   7B41~            		endif
0558   7B41~            		endif
0558   7B41~            		endif
0558   7B41             
0558   7B43             
0558   7B43~            		endif
0558   7B43~            		endif
0558   7B43             
0559   7B43 0D          		sec
0560   7B44             	else
0560   7B44             
0560   7B44             
0560   7B44             
0560   7B44             
0560   7B3E             
0560   7B3E             
0560   7B3E             
0560   7B3E~            	else
0560   7B3E~            	else
0560   7B3E~            	else
0560   7B3E~            	else
0560   7B3E             
0560   7B3E~            	else
0560   7B3E~            	else
0560   7B3E~            	else
0560   7B3E~            	else
0560   7B3E             
0560   7B3E             
0560   7B3E 07          
0560   7B44             
0560   7B44 20 FE       
0560   7B46             
0560   7B46             
0560   7B46             
0560   7B46~            	else
0560   7B46~            	else
0560   7B46~            	else
0560   7B46~            	else
0560   7B46~            	else
0560   7B46             
0560   7B46~            	else
0560   7B46~            	else
0560   7B46             
0560   7B46~            	else
0560   7B46~            	else
0560   7B46             
0561   7B46 0C          		clc
0562   7B47             	endif
0562   7B47             
0562   7B47             
0562   7B47             
0562   7B47             
0562   7B47             
0562   7B47~            	endif
0562   7B47~            	endif
0562   7B47             
0562   7B47~            	endif
0562   7B47~            	endif
0562   7B47             
0562   7B45             
0562   7B45 01          
0562   7B46             
0562   7B46             
0562   7B46~            	endif
0562   7B46~            	endif
0562   7B46~            	endif
0562   7B46             
0562   7B47             
0562   7B47~            	endif
0562   7B47~            	endif
0562   7B47             
0563   7B47 76 00 29    	ror		solBStatus	
0564   7B4A 7A 00 50    	dec		curCol ; undo inc
0565   7B4D             	
0566   7B4D             ; update strobe	
0567   7B4D             updateStrobe:
0568   7B4D             	;ldX		curCol
0569   7B4D             	;inX 	
0570   7B4D 86 08       	ldaA	8 	; pitch
0571   7B4F 9B 10       	addA	>curSwitchRowLsb
0572   7B51 97 10       	staA	curSwitchRowLsb
0573   7B53 78 00 07    	asl	strobe
0574   7B56 7C 01 6A    	inc	displayCol
0575   7B59 86 00       	ldaA	0
0576   7B5B 91 07       	cmpA	>strobe ; strobe done?  reset
0577   7B5D             	ifeq		
0577   7B5D             
0577   7B5D 26 FE       
0578   7B5F 96 28       		ldaA	>solAStatus
0579   7B61 B7 22 00    		staA	solenoidA
0580   7B64 96 29       		ldaA	>solBStatus
0581   7B66 B7 22 02    		staA	solenoidB
0582   7B69             	
0583   7B69 86 01       		ldaA	00000001b
0584   7B6B 97 07       		staA	strobe
0585   7B6D             		
0586   7B6D             		;ldX 	#0
0587   7B6D             		
0588   7B6D 86 00       		ldaA	0
0589   7B6F 97 50       		staA	curCol
0590   7B71 97 51       		staA	curCol + 1
0591   7B73 97 10       		staA	curSwitchRowLsb
0592   7B75 97 28       		staA	solAStatus
0593   7B77 97 29       		staA	solBStatus
0594   7B79             		
0595   7B79 F6 01 6A    		ldaB	>displayCol	; reset display col only if it's > 7 
0596   7B7C CA F0       		oraB	11110000b
0597   7B7E C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0598   7B80             		ifgt
0598   7B80             
0598   7B80 23 FE       
0599   7B82 B7 01 6A    			staA	displayCol
0600   7B85             		endif
0600   7B85             
0600   7B85             
0600   7B85             
0600   7B85             
0600   7B85             
0600   7B85~            		endif
0600   7B85~            		endif
0600   7B85             
0600   7B85~            		endif
0600   7B85~            		endif
0600   7B85             
0600   7B81             
0600   7B81 03          
0600   7B82             
0600   7B82             
0600   7B82~            		endif
0600   7B82~            		endif
0600   7B82~            		endif
0600   7B82             
0600   7B85             
0600   7B85~            		endif
0600   7B85~            		endif
0600   7B85             
0601   7B85             	
0602   7B85 B6 01 6B    		ldaA	>state
0603   7B88 8A 04       		oraA	100b
0604   7B8A B7 01 6B    		staA	state
0605   7B8D             	else
0605   7B8D             
0605   7B8D             
0605   7B8D             
0605   7B8D             
0605   7B5E             
0605   7B5E             
0605   7B5E             
0605   7B5E~            	else
0605   7B5E~            	else
0605   7B5E~            	else
0605   7B5E~            	else
0605   7B5E             
0605   7B5E~            	else
0605   7B5E~            	else
0605   7B5E~            	else
0605   7B5E~            	else
0605   7B5E             
0605   7B5E             
0605   7B5E 30          
0605   7B8D             
0605   7B8D 20 FE       
0605   7B8F             
0605   7B8F             
0605   7B8F             
0605   7B8F~            	else
0605   7B8F~            	else
0605   7B8F~            	else
0605   7B8F~            	else
0605   7B8F~            	else
0605   7B8F             
0605   7B8F~            	else
0605   7B8F~            	else
0605   7B8F             
0605   7B8F~            	else
0605   7B8F~            	else
0605   7B8F             
0606   7B8F 7C 00 51    		inc	curCol + 1
0607   7B92             	endif
0607   7B92             
0607   7B92             
0607   7B92             
0607   7B92             
0607   7B92             
0607   7B92~            	endif
0607   7B92~            	endif
0607   7B92             
0607   7B92~            	endif
0607   7B92~            	endif
0607   7B92             
0607   7B8E             
0607   7B8E 03          
0607   7B8F             
0607   7B8F             
0607   7B8F~            	endif
0607   7B8F~            	endif
0607   7B8F~            	endif
0607   7B8F             
0607   7B92             
0607   7B92~            	endif
0607   7B92~            	endif
0607   7B92             
0608   7B92             	
0609   7B92 3B          	rti
0610   7B93             afterInterrupt:
0611   7B93             
0612   7FF8             pointers: 	.org $7FF8  	
0613   7FF8             	.msfirst
0614   7FF8 7A 07       	.dw interrupt			
0615   7FFA 7A 07       	.dw interrupt			
0616   7FFC 7A 07       	.dw interrupt			
0617   7FFE 78 00       	.dw main
0618   8000             	
0619   8000             	
0620   8000             	.endtasm: Number of errors = 0
