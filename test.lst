0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             curCol:			.equ RAM + $50 ; +
0041+  0000             tempX:			.equ RAM + $52 ; +
0042+  0000             queueHead:		.equ RAM + $54 ; +
0043+  0000             queueTail:		.equ RAM + $56 ; +
0044+  0000             tempQ:			.equ RAM + $58 ; +
0045+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0046+  0000             queueEnd:		.equ RAM + $67
0047+  0000             ;
0048+  0000             displayBcd1:	.equ RAM + $70
0049+  0000             displayBcd16:	.equ RAM + $7F
0050+  0000             ballCount:		.equ displayBcd1 + 7
0051+  0000             waitLeft: 		.equ RAM + $80
0052+  0000             waitLeftEnd:		.equ RAM + $87
0053+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0054+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0055+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0056+  0000             flashLampCol1:		.equ RAM + $A0
0057+  0000             flashLampCol8:		.equ RAM + $A7
0058+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0059+  0000             
0060+  0000             
0061+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0062+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0063+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0064+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0065+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0066+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0067+  0000             #DEFINE s(n) 		(0 + n)
0068+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0069+  0000             pA_10:			.equ pA_1m + 5
0070+  0000             pB_1m:			.equ pA_10 + 1
0071+  0000             pB_10:			.equ pB_1m + 5
0072+  0000             pC_1m:			.equ pB_10 + 1
0073+  0000             pC_10:			.equ pC_1m + 5
0074+  0000             pD_1m:			.equ pC_10 + 1
0075+  0000             pD_10:			.equ pD_1m + 5  
0076+  0000             displayCol:		.equ cRAM + $68
0077+  0000             state:			.equ cRAM + $69	; ? | strobe reset | don't validate | ?
0078+  0000             
0079+  0000             instant:		.equ 4
0080+  0000             debounce:		.equ 1
0081+  0000             slow:			.equ 2
0082+  0000             
0083+  0000             switchSettle:	.equ cRAM + $30
0084+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 74    		cpX	displayBcd1 + 4
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 74    			cpX	displayBcd1 + 4
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7C    		cpX	displayBcd1 + 8 + 4
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7C    			cpX	displayBcd1 + 8 + 4
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0E       	ldaB	>lc(7)
0101+  7C8C C5 02       	bitB	lr(2)
0102+  7C8E 26 1A       	bne	blankP2
0103+  7C90 C5 04       	bitB	lr(3)
0104+  7C92 26 22       	bne	blankP3
0105+  7C94 C5 08       	bitB	lr(4)
0106+  7C96 26 2A       	bne	blankP4
0107+  7C98 C5 10       	bitB	lr(5)
0108+  7C9A 26 32       	bne	blankDone
0109+  7C9C 20 00       	bra	blankP1
0110+  7C9E             blankP1:
0111+  7C9E 86 F0       	ldaA	$F0
0112+  7CA0 9A 74       	oraA	>displayBcd1 + 4
0113+  7CA2 97 74       	staA	displayBcd1 + 4
0114+  7CA4 86 F0       	ldaA	$F0
0115+  7CA6 9A 75       	oraA	>displayBcd1 + 5
0116+  7CA8 97 75       	staA	displayBcd1 + 5
0117+  7CAA             blankP2:
0118+  7CAA 86 F0       	ldaA	$F0
0119+  7CAC 9A 7C       	oraA	>displayBcd1 + 12
0120+  7CAE 97 7C       	staA	displayBcd1 + 12
0121+  7CB0 86 F0       	ldaA	$F0
0122+  7CB2 9A 7D       	oraA	>displayBcd1 + 13
0123+  7CB4 97 7D       	staA	displayBcd1 + 13
0124+  7CB6             blankP3:
0125+  7CB6 86 0F       	ldaA	$0F
0126+  7CB8 9A 74       	oraA	>displayBcd1 + 4
0127+  7CBA 97 74       	staA	displayBcd1 + 4
0128+  7CBC 86 0F       	ldaA	$0F
0129+  7CBE 9A 75       	oraA	>displayBcd1 + 5
0130+  7CC0 97 75       	staA	displayBcd1 + 5
0131+  7CC2             blankP4:
0132+  7CC2 86 0F       	ldaA	$0F
0133+  7CC4 9A 7C       	oraA	>displayBcd1 + 12
0134+  7CC6 97 7C       	staA	displayBcd1 + 12
0135+  7CC8 86 0F       	ldaA	$0F
0136+  7CCA 9A 7D       	oraA	>displayBcd1 + 13
0137+  7CCC 97 7D       	staA	displayBcd1 + 13
0138+  7CCE             blankDone:
0139+  7CCE 39          	rts
0140+  7CCF             	
0141+  7CCF             refreshPlayerScores:
0142+  7CCF BD 7C 00    	jsr copyScores13
0143+  7CD2 BD 7C 45    	jsr copyScores24
0144+  7CD5 BD 7C 8A    	jsr blankNonPlayerScores
0145+  7CD8 39          	rts
0146+  7CD9             	
0147+  7CD9             ; add score instantly
0148+  7CD9             ; X = place in p*_1* to add the score to
0149+  7CD9             ; A = amount to add (max 9)
0150+  7CD9             ; tail call
0151+  7CD9             _addScoreI:
0152+  7CD9 AB 00       	addA	0, X
0153+  7CDB             	ifcs ; overflowed, need to increment next number
0153+  7CDB             
0153+  7CDB 24 FE       
0154+  7CDD 8B 06       		addA	6	; adjust A back into BCD
0155+  7CDF A7 00       		staA	0, X
0156+  7CE1             addScore_carryOver:		; loop to propagate carry
0157+  7CE1 09          		deX	; go to next decimal place
0158+  7CE2 A6 00       		ldaA	0, X	
0159+  7CE4 81 F9       		cmpA	$F9
0160+  7CE6             		ifeq			; if it's already a 9, reset it and carry again
0160+  7CE6             
0160+  7CE6 26 FE       
0161+  7CE8 6F 00       			clr	0, X
0162+  7CEA 27 F5       			beq addScore_carryOver
0163+  7CEC             		else			; otherwise ++ it and done
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7             
0163+  7CE7 06          
0163+  7CEC             
0163+  7CEC 20 FE       
0163+  7CEE             
0163+  7CEE             
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0164+  7CEE 6C 00       			inc	0, X
0165+  7CF0             		endif	
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CED             
0165+  7CED 02          
0165+  7CEE             
0165+  7CEE             
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0166+  7CF0             	else
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC             
0166+  7CDC 15          
0166+  7CF0             
0166+  7CF0 20 FE       
0166+  7CF2             
0166+  7CF2             
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0167+  7CF2 81 F9       		cmpA	$F9
0168+  7CF4             		ifgt ; >9 -> need to adjust back into BCD
0168+  7CF4             
0168+  7CF4 23 FE       
0169+  7CF6 8B 06       			addA	6
0170+  7CF8 A7 00       			staA	0, X
0171+  7CFA             addScore_carryDa:
0172+  7CFA 09          			deX
0173+  7CFB A6 00       			ldaA	0, X
0174+  7CFD 81 F9       			cmpA	$F9
0175+  7CFF             			ifeq
0175+  7CFF             
0175+  7CFF 26 FE       
0176+  7D01 6F 00       				clr	0, X
0177+  7D03 27 F5       				beq 	addScore_carryDa
0178+  7D05             			else
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D00             
0178+  7D00             
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00             
0178+  7D00 06          
0178+  7D05             
0178+  7D05 20 FE       
0178+  7D07             
0178+  7D07             
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0179+  7D07 6C 00       				inc	0, X
0180+  7D09             			endif	
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D06             
0180+  7D06 02          
0180+  7D07             
0180+  7D07             
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0181+  7D09             		else
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5             
0181+  7CF5 15          
0181+  7D09             
0181+  7D09 20 FE       
0181+  7D0B             
0181+  7D0B             
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0182+  7D0B A7 00       			staA	0, X
0183+  7D0D             		endif
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0A             
0183+  7D0A 02          
0183+  7D0B             
0183+  7D0B             
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0184+  7D0D             	endif
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7CF1             
0184+  7CF1 1B          
0184+  7CF2             
0184+  7CF2             
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0185+  7D0D             
0186+  7D0D 7E 7C CF    	jmp refreshPlayerScores
0187+  7D10             	
0188+  7D10 39          	rts
0189+  7D11             	
0190+  7D11             ; t A,X
0191+  7D11             setXToCurPlayer10:
0192+  7D11 96 0F       	ldaA	>lc(8)
0193+  7D13 85 01       	bitA	0001b
0194+  7D15 27 04       	beq	_addScore10N_p2
0195+  7D17 CE 01 55    	ldX	pA_10
0196+  7D1A 39          	rts
0197+  7D1B             _addScore10N_p2:
0198+  7D1B 85 02       	bitA	0010b
0199+  7D1D 27 04       	beq	_addScore10N_p3
0200+  7D1F CE 01 5B    	ldX	pB_10
0201+  7D22 39          	rts
0202+  7D23             _addScore10N_p3:
0203+  7D23 85 04       	bitA	0100b
0204+  7D25 27 04       	beq	_addScore10N_p4
0205+  7D27 CE 01 61    	ldX	pC_10
0206+  7D2A 39          	rts
0207+  7D2B             _addScore10N_p4:
0208+  7D2B CE 01 67    	ldX	pD_10
0209+  7D2E 39          	rts
0210+  7D2F             
0211+  7D2F             ; suspends execution for A ms and returns to queue processor
0212+  7D2F             ; should only be called from switch callbacks
0213+  7D2F             ; trashes everything but B
0214+  7D2F             _delay:	
0215+  7D2F CE 00 7F    	ldX	waitLeft - 1
0216+  7D32             findEmptyLoop:
0217+  7D32 08          	inX
0218+  7D33 6D 00       	tst	0, X
0219+  7D35 26 FB       	bne 	findEmptyLoop 
0220+  7D37             	
0221+  7D37             	; X = first waitLeft that = 0
0222+  7D37 E7 18       	staB	waitReg - waitLeft, X
0223+  7D39 33          	pulB	; A = MSB of PC
0224+  7D3A E7 08       	staB	waitMsb - waitLeft, X
0225+  7D3C 33          	pulB	; A = LSB of PC
0226+  7D3D E7 10       	staB	waitLsb - waitLeft, X
0227+  7D3F A7 00       	staA	0, X
0228+  7D41             	; time and add stored
0229+  7D41 7E 79 9E    	jmp skipEvent
0230+  7D44             	
0231+  7D44             resetScores:
0232+  7D44 86 00       	ldaA	00
0233+  7D46 CE 01 55    	ldX	pA_10
0234+  7D49             _zeroScores:
0235+  7D49 A7 00       	staA	0, X
0236+  7D4B 08          	inX
0237+  7D4C 8C 01 63    	cpX	pD_1m + 1
0238+  7D4F 26 F8       	bne	_zeroScores
0239+  7D51             	
0240+  7D51 86 00       	ldaA	0
0241+  7D53 97 12       	staA	curPlayer
0242+  7D55 97 13       	staA	curPlayer + 1
0243+  7D57 86 FF       	ldaA	$FF
0244+  7D59 97 76       	staA	displayBcd1 + 6
0245+  7D5B 97 7E       	staA	displayBcd1 + 14
0246+  7D5D 97 7F       	staA	displayBcd1 + 15
0247+  7D5F             	
0248+  7D5F BD 7C CF    	jsr	refreshPlayerScores
0249+  7D62 39          	rts
0250+  7D63             
0251+  7D63             ; trash all
0252+  7D63             ; delay for ms (8-2000)
0253+  7D63             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0254+  7D63             	
0255+  7D63             ; trashes B (max 104ms)
0256+  7D63             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0257+  7D63             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0258+  7D63             
0259+  7D63             ; trashes AX
0260+  7D63             ; place: 1-5 = 10s thru 100ks
0261+  7D63             ; amount: 1-9
0262+  7D63             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0263+  7D63             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0264+  7D63             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0265+  7D63             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0266+  7D63             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0267+  7D63             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0268+  7D63             
0269+  7D63             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0270+  7D63             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0271+  7D63             
0272+  7D63             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0273+  7D63             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0006   7D63             
0007   7D63             #include "game.asm"
0001+  7D63             ; Laser Ball solenoids
0002+  7D63             ;#DEFINE KICKOUT 		01
0003+  7D63             ;#DEFINE LEFT_KICKER 	02
0004+  7D63             ;#DEFINE DROP_LA			03
0005+  7D63             ;#DEFINE DROP_SER		04
0006+  7D63             ;#DEFINE EJECT_HOLE		05
0007+  7D63             ;#DEFINE DROP_BA			06
0008+  7D63             ;#DEFINE DROP_LL			07
0009+  7D63             ;#DEFINE RIGHT_KICKER	08
0010+  7D63             ;#DEFINE SOUND1			09 ; thru 13
0011+  7D63             ;#DEFINE KNOCKER			14
0012+  7D63             ;#DEFINE	FLASHERS		15
0013+  7D63             ;#DEFINE COIN_LOCKOUT	16
0014+  7D63             
0015+  7D63             ; Hot Tip solenoids
0016+  7D63             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7D63             #DEFINE TOP_EJECT 	SOL(01, 32)
0018+  7D63             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7D63             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7D63             #DEFINE LEFT_EJECT	SOL(04, 32)
0021+  7D63             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7D63             #DEFINE CHIME_10	SOL(09, 16)
0023+  7D63             #DEFINE CHIME_100	SOL(10, 16)
0024+  7D63             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7D63             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7D63             #DEFINE CLICKER		SOL(13, 8)
0027+  7D63             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7D63             #DEFINE BUZZER		SOL(15, 100)
0029+  7D63             #DEFINE SHORT_PAUSE 	115
0030+  7D63             
0031+  7D63             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7D63             #DEFINE done(v)	\
0033+  7D63             #DEFCONT	#IF (v==0)
0034+  7D63             #DEFCONT		\ ldaA 10b
0035+  7D63             #DEFCONT		\ oraA >state
0036+  7D63             #DEFCONT		\ staA state
0037+  7D63             #DEFCONT	\#ENDIF
0038+  7D63             #DEFCONT	\ jmp afterQueueEvent
0039+  7D63             	
0040+  7D63             	
0041+  7D63             _addScore10N:
0042+  7D63 BD 7D 11    	jsr setXToCurPlayer10
0043+  7D66 86 01       	ldaA	1
0044+  7D68 BD 7C D9    	jsr _addScoreI
0045+  7D6B 86 02       	fireSolenoidA(CHIME_10)
0045+  7D6D B7 01 48    
0046+  7D70 39          	rts
0047+  7D71             _addScore100N:
0048+  7D71 BD 7D 11    	jsr setXToCurPlayer10
0049+  7D74 09          	deX
0050+  7D75 86 01       	ldaA	1
0051+  7D77 BD 7C D9    	jsr _addScoreI
0052+  7D7A 86 02       	fireSolenoidA(CHIME_100)	
0052+  7D7C B7 01 49    
0053+  7D7F 39          	rts
0054+  7D80             _addScore1000N:
0055+  7D80 BD 7D 11    	jsr setXToCurPlayer10
0056+  7D83 09          	deX
0057+  7D84 09          	deX
0058+  7D85 86 01       	ldaA	1
0059+  7D87 BD 7C D9    	jsr _addScoreI
0060+  7D8A 86 02       	fireSolenoidA(CHIME_1000)
0060+  7D8C B7 01 4A    
0061+  7D8F 39          	rts
0062+  7D90             #DEFINE score10() jsr _addScore10N
0063+  7D90             #DEFINE score100() jsr _addScore100N
0064+  7D90             #DEFINE score1000() jsr _addScore1000N
0065+  7D90             #DEFINE score500() \ jsr _addScore100N
0066+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7D90             #DEFCONT	\ jsr _addScore100N
0069+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7D90             #DEFCONT	\ jsr _addScore100N
0072+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7D90             #DEFCONT	\ jsr _addScore100N
0075+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7D90             #DEFCONT	\ jsr _addScore100N
0078+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7D90             
0081+  7D90             #DEFINE advBonus()
0082+  7D90             	
0083+  7D90             ; switch callbacks:
0084+  7D90             
0085+  60C0             none:	.org $6000 + 192 ; size of callback table
0086+  60C0             	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0             
0086+  60C0 7E 79 77    
0087+  60C3             	
0088+  60C3             	
0089+  60C3             startGame:
0090+  60C3             	
0091+  60C3 C6 02       	fireSolenoid(CHIME_10)
0091+  60C5 F7 01 48    
0092+  60C8 86 0E       	delay(SHORT_PAUSE)
0092+  60CA BD 7D 2F    
0093+  60CD C6 02       	fireSolenoid(CHIME_10)
0093+  60CF F7 01 48    
0094+  60D2 86 0E       	delay(SHORT_PAUSE)
0094+  60D4 BD 7D 2F    
0095+  60D7 C6 02       	fireSolenoid(CHIME_10)
0095+  60D9 F7 01 48    
0096+  60DC 86 19       	delay(200)
0096+  60DE BD 7D 2F    
0097+  60E1             	
0098+  60E1 C6 02       	fireSolenoid(CHIME_10)
0098+  60E3 F7 01 48    
0099+  60E6 86 0E       	delay(SHORT_PAUSE)
0099+  60E8 BD 7D 2F    
0100+  60EB C6 02       	fireSolenoid(CHIME_10)
0100+  60ED F7 01 48    
0101+  60F0 86 0E       	delay(SHORT_PAUSE)
0101+  60F2 BD 7D 2F    
0102+  60F5 C6 02       	fireSolenoid(CHIME_10)
0102+  60F7 F7 01 48    
0103+  60FA 86 19       	delay(200)
0103+  60FC BD 7D 2F    
0104+  60FF             	
0105+  60FF C6 02       	fireSolenoid(CHIME_10)
0105+  6101 F7 01 48    
0106+  6104 86 0E       	delay(SHORT_PAUSE)
0106+  6106 BD 7D 2F    
0107+  6109 C6 02       	fireSolenoid(CHIME_10)
0107+  610B F7 01 48    
0108+  610E 86 0E       	delay(SHORT_PAUSE)
0108+  6110 BD 7D 2F    
0109+  6113 C6 02       	fireSolenoid(CHIME_100)
0109+  6115 F7 01 49    
0110+  6118 86 19       	delay(200)
0110+  611A BD 7D 2F    
0111+  611D C6 02       	fireSolenoid(CHIME_1000)
0111+  611F F7 01 4A    
0112+  6122 86 19       	delay(200)
0112+  6124 BD 7D 2F    
0113+  6127 C6 02       	fireSolenoid(CHIME_10k)
0113+  6129 F7 01 4B    
0114+  612C 86 12       	delay(150)
0114+  612E BD 7D 2F    
0115+  6131             	
0116+  6131             	
0117+  6131 B6 22 03    	enablePf
0117+  6134 8A 38       
0117+  6136 B7 22 03    
0118+  6139             	
0119+  6139 C6 0C       	fireSolenoid(DROP_TIP)
0119+  613B F7 01 41    
0120+  613E 86 09       	delay(75)
0120+  6140 BD 7D 2F    
0121+  6143 C6 0C       	fireSolenoid(DROP_HOT)
0121+  6145 F7 01 42    
0122+  6148 86 0F       	delay(125)
0122+  614A BD 7D 2F    
0123+  614D             	
0124+  614D             	; clear lights
0125+  614D CE 00 08    	ldX	lampCol1
0126+  6150 86 00       	ldaA	0b
0127+  6152             lClearLights:
0128+  6152 A7 00       	staA	0, X
0129+  6154 A7 98       	staA	flashLampCol1 - lampCol1, X
0130+  6156 08          	inX
0131+  6157 8C 00 10    	cpX	lampCol8 + 1
0132+  615A 26 F6       	bne	lClearLights
0133+  615C             	;
0134+  615C             	
0135+  615C             	; reset scores
0136+  615C BD 7D 44    	jsr 	resetScores
0137+  615F             	
0138+  615F             	; reset ball count
0139+  615F 86 10       	ldaA	$10
0140+  6161 97 77       	staA	ballCount
0141+  6163             
0142+  6163 C6 00       	ldaB	0
0143+  6165 D7 13       	staB	curPlayer + 1
0144+  6167             	
0145+  6167             	; invalidate playfield
0146+  6167 86 01       	ldaA	lr(1)
0147+  6169 9A A7       	oraA	>flc(8)
0148+  616B 97 A7       	staA	flc(8)
0149+  616D 9A 0F       	oraA	>lc(8)
0150+  616F 97 0F       	staA	lc(8)
0151+  6171             	
0152+  6171 86 02       	lampOn(2,7) ; one player
0152+  6173 9A 0E       
0152+  6175 97 0E       
0153+  6177             	
0154+  6177 86 01       	ldaA	sr(1) ; check outhole
0155+  6179 95 21       	bitA	>sc(2)
0156+  617B             	ifne ; ball in hole
0156+  617B             
0156+  617B 27 FE       
0157+  617D C6 02       		fireSolenoid(OUTHOLE)
0157+  617F F7 01 44    
0158+  6182             	endif
0158+  6182             
0158+  6182             
0158+  6182             
0158+  6182             
0158+  6182             
0158+  6182~            	endif
0158+  6182~            	endif
0158+  6182             
0158+  6182~            	endif
0158+  6182~            	endif
0158+  6182             
0158+  617C             
0158+  617C 05          
0158+  617D             
0158+  617D             
0158+  617D~            	endif
0158+  617D~            	endif
0158+  617D~            	endif
0158+  617D             
0158+  6182             
0158+  6182~            	endif
0158+  6182~            	endif
0158+  6182             
0159+  6182             	
0160+  6182 86 DF       	lampOff(6,8) ; game over
0160+  6184 94 0F       
0160+  6186 97 0F       
0161+  6188             	
0162+  6188 39          	rts
0163+  6189             	
0164+  6189             
0165+  6189             	
0166+  6189             swTilt: 
0167+  6189 86 10       	lampOn(5,8) ; tilt
0167+  618B 9A 0F       
0167+  618D 97 0F       
0168+  618F B6 22 03    	disablePf
0168+  6192 84 F7       
0168+  6194 B7 22 03    
0169+  6197             	done(0)
0169+  6197             
0169+  6197 86 02       
0169+  6199 BA 01 69    
0169+  619C B7 01 69    
0169+  619F             
0169+  619F 7E 79 77    
0170+  61A2             	
0171+  61A2             swStart: 
0172+  61A2 96 0F       	ldaA >lc(8)
0173+  61A4 85 20       	bitA lr(6)
0174+  61A6             	ifne ; in game over
0174+  61A6             
0174+  61A6 27 FE       
0175+  61A8 BD 60 C3    		jsr startGame
0176+  61AB             	else 
0176+  61AB             
0176+  61AB             
0176+  61AB             
0176+  61AB             
0176+  61A7             
0176+  61A7             
0176+  61A7             
0176+  61A7~            	else 
0176+  61A7~            	else 
0176+  61A7~            	else 
0176+  61A7~            	else 
0176+  61A7             
0176+  61A7~            	else 
0176+  61A7~            	else 
0176+  61A7~            	else 
0176+  61A7~            	else 
0176+  61A7             
0176+  61A7             
0176+  61A7 05          
0176+  61AB             
0176+  61AB 20 FE       
0176+  61AD             
0176+  61AD             
0176+  61AD             
0176+  61AD~            	else 
0176+  61AD~            	else 
0176+  61AD~            	else 
0176+  61AD~            	else 
0176+  61AD~            	else 
0176+  61AD             
0176+  61AD~            	else 
0176+  61AD~            	else 
0176+  61AD             
0176+  61AD~            	else 
0176+  61AD~            	else 
0176+  61AD             
0177+  61AD 86 10       		ldaA	$10
0178+  61AF 91 77       		cmpA	>ballCount
0179+  61B1             		ifeq ; add player
0179+  61B1             
0179+  61B1 26 FE       
0180+  61B3 86 1E       			ldaA	00011110b
0181+  61B5 94 0E       			andA	>lc(7) ; player count lights
0182+  61B7 85 10       			bitA	lr(5)
0183+  61B9             			ifeq	; if not on P4 already, add player
0183+  61B9             
0183+  61B9 26 FE       
0184+  61BB 48          				aslA
0185+  61BC C6 E1       				ldaB	11100001b
0186+  61BE D4 0E       				andB	>lc(7)
0187+  61C0 D7 0E       				staB	lc(7)
0188+  61C2 9A 0E       				oraA	>lc(7)
0189+  61C4 97 0E       				staA	lc(7)
0190+  61C6             			endif
0190+  61C6             
0190+  61C6             
0190+  61C6             
0190+  61C6             
0190+  61C6             
0190+  61C6~            			endif
0190+  61C6~            			endif
0190+  61C6             
0190+  61C6~            			endif
0190+  61C6~            			endif
0190+  61C6             
0190+  61BA             
0190+  61BA 0B          
0190+  61BB             
0190+  61BB             
0190+  61BB~            			endif
0190+  61BB~            			endif
0190+  61BB~            			endif
0190+  61BB             
0190+  61C6             
0190+  61C6~            			endif
0190+  61C6~            			endif
0190+  61C6             
0191+  61C6             		else ; restart game
0191+  61C6             
0191+  61C6             
0191+  61C6             
0191+  61C6             
0191+  61B2             
0191+  61B2             
0191+  61B2             
0191+  61B2~            		else ; restart game
0191+  61B2~            		else ; restart game
0191+  61B2~            		else ; restart game
0191+  61B2~            		else ; restart game
0191+  61B2             
0191+  61B2~            		else ; restart game
0191+  61B2~            		else ; restart game
0191+  61B2~            		else ; restart game
0191+  61B2~            		else ; restart game
0191+  61B2             
0191+  61B2             
0191+  61B2 15          
0191+  61C6             
0191+  61C6 20 FE       
0191+  61C8             
0191+  61C8             
0191+  61C8             
0191+  61C8~            		else ; restart game
0191+  61C8~            		else ; restart game
0191+  61C8~            		else ; restart game
0191+  61C8~            		else ; restart game
0191+  61C8~            		else ; restart game
0191+  61C8             
0191+  61C8~            		else ; restart game
0191+  61C8~            		else ; restart game
0191+  61C8             
0191+  61C8~            		else ; restart game
0191+  61C8~            		else ; restart game
0191+  61C8             
0192+  61C8 BD 60 C3    			jsr startGame
0193+  61CB             		endif		
0193+  61CB             
0193+  61CB             
0193+  61CB             
0193+  61CB             
0193+  61CB             
0193+  61CB~            		endif		
0193+  61CB~            		endif		
0193+  61CB             
0193+  61CB~            		endif		
0193+  61CB~            		endif		
0193+  61CB             
0193+  61C7             
0193+  61C7 03          
0193+  61C8             
0193+  61C8             
0193+  61C8~            		endif		
0193+  61C8~            		endif		
0193+  61C8~            		endif		
0193+  61C8             
0193+  61CB             
0193+  61CB~            		endif		
0193+  61CB~            		endif		
0193+  61CB             
0194+  61CB             	endif
0194+  61CB             
0194+  61CB             
0194+  61CB             
0194+  61CB             
0194+  61CB             
0194+  61CB~            	endif
0194+  61CB~            	endif
0194+  61CB             
0194+  61CB~            	endif
0194+  61CB~            	endif
0194+  61CB             
0194+  61AC             
0194+  61AC 1E          
0194+  61AD             
0194+  61AD             
0194+  61AD~            	endif
0194+  61AD~            	endif
0194+  61AD~            	endif
0194+  61AD             
0194+  61CB             
0194+  61CB~            	endif
0194+  61CB~            	endif
0194+  61CB             
0195+  61CB             	
0196+  61CB BD 7C CF    	jsr refreshPlayerScores
0197+  61CE             	
0198+  61CE             	done(0)
0198+  61CE             
0198+  61CE 86 02       
0198+  61D0 BA 01 69    
0198+  61D3 B7 01 69    
0198+  61D6             
0198+  61D6 7E 79 77    
0199+  61D9             	
0200+  61D9             swOuthole: 
0201+  61D9 86 4B       	delay(600)
0201+  61DB BD 7D 2F    
0202+  61DE 96 0F       	ldaA	>lc(8) ; !game over
0203+  61E0 85 20       	bitA	lr(6)
0204+  61E2             	ifeq ; !game over
0204+  61E2             
0204+  61E2 26 FE       
0205+  61E4 86 0F       		ldaA	00001111b ; player up lights
0206+  61E6 95 A7       		bitA	>flc(8)	; check if any player is flashing
0207+  61E8             		ifne ; any flashing -> playfield invalid
0207+  61E8             
0207+  61E8 27 FE       
0208+  61EA 86 EF       			lampOff(5,8) ; tilt
0208+  61EC 94 0F       
0208+  61EE 97 0F       
0209+  61F0             			
0210+  61F0 B6 22 03    			enablePf
0210+  61F3 8A 38       
0210+  61F5 B7 22 03    
0211+  61F8 C6 02       			fireSolenoid(OUTHOLE)
0211+  61FA F7 01 44    
0212+  61FD             		else ; none flashing -> playfield valid -> end ball
0212+  61FD             
0212+  61FD             
0212+  61FD             
0212+  61FD             
0212+  61E9             
0212+  61E9             
0212+  61E9             
0212+  61E9~            		else ; none flashing -> playfield valid -> end ball
0212+  61E9~            		else ; none flashing -> playfield valid -> end ball
0212+  61E9~            		else ; none flashing -> playfield valid -> end ball
0212+  61E9~            		else ; none flashing -> playfield valid -> end ball
0212+  61E9             
0212+  61E9~            		else ; none flashing -> playfield valid -> end ball
0212+  61E9~            		else ; none flashing -> playfield valid -> end ball
0212+  61E9~            		else ; none flashing -> playfield valid -> end ball
0212+  61E9~            		else ; none flashing -> playfield valid -> end ball
0212+  61E9             
0212+  61E9             
0212+  61E9 15          
0212+  61FD             
0212+  61FD 20 FE       
0212+  61FF             
0212+  61FF             
0212+  61FF             
0212+  61FF~            		else ; none flashing -> playfield valid -> end ball
0212+  61FF~            		else ; none flashing -> playfield valid -> end ball
0212+  61FF~            		else ; none flashing -> playfield valid -> end ball
0212+  61FF~            		else ; none flashing -> playfield valid -> end ball
0212+  61FF~            		else ; none flashing -> playfield valid -> end ball
0212+  61FF             
0212+  61FF~            		else ; none flashing -> playfield valid -> end ball
0212+  61FF~            		else ; none flashing -> playfield valid -> end ball
0212+  61FF             
0212+  61FF~            		else ; none flashing -> playfield valid -> end ball
0212+  61FF~            		else ; none flashing -> playfield valid -> end ball
0212+  61FF             
0213+  61FF 94 0F       			andA	>lc(8)
0214+  6201 D6 0A       			ldaB	>lc(3)
0215+  6203 C5 01       			bitB	lr(1)
0216+  6205             			ifeq ; shoot again not lit
0216+  6205             
0216+  6205 26 FE       
0217+  6207             				; go to next player
0218+  6207 48          				aslA
0219+  6208 7C 00 13    				inc	curPlayer + 1
0220+  620B 95 0E       				bitA	>lc(7)	; is player count < player #
0221+  620D             				ifne ; last player
0221+  620D             
0221+  620D 27 FE       
0222+  620F 86 01       					ldaA	00000001b; ; back to player 1
0223+  6211 C6 00       					ldaB	0
0224+  6213 D7 13       					staB	curPlayer + 1
0225+  6215             					
0226+  6215             					; increase ball count
0227+  6215 D6 77       					ldaB	>ballCount
0228+  6217 CB 10       					addB	$10
0229+  6219 C1 40       					cmpB	$40
0230+  621B             					ifeq ; game over
0230+  621B             
0230+  621B 26 FE       
0231+  621D 86 20       						lampOn(6,8)
0231+  621F 9A 0F       
0231+  6221 97 0F       
0232+  6223 B6 22 03    						disablePf
0232+  6226 84 F7       
0232+  6228 B7 22 03    
0233+  622B             						done(1)
0233+  622B~            						done(1)
0233+  622B~            						done(1)
0233+  622B~            						done(1)
0233+  622B~            						done(1)
0233+  622B             
0233+  622B 7E 79 77    
0234+  622E             					else
0234+  622E             
0234+  622E             
0234+  622E             
0234+  622E             
0234+  621C             
0234+  621C             
0234+  621C             
0234+  621C~            					else
0234+  621C~            					else
0234+  621C~            					else
0234+  621C~            					else
0234+  621C             
0234+  621C~            					else
0234+  621C~            					else
0234+  621C~            					else
0234+  621C~            					else
0234+  621C             
0234+  621C             
0234+  621C 13          
0234+  622E             
0234+  622E 20 FE       
0234+  6230             
0234+  6230             
0234+  6230             
0234+  6230~            					else
0234+  6230~            					else
0234+  6230~            					else
0234+  6230~            					else
0234+  6230~            					else
0234+  6230             
0234+  6230~            					else
0234+  6230~            					else
0234+  6230             
0234+  6230~            					else
0234+  6230~            					else
0234+  6230             
0235+  6230 D7 77       						staB	ballCount
0236+  6232             					endif		
0236+  6232             
0236+  6232             
0236+  6232             
0236+  6232             
0236+  6232             
0236+  6232~            					endif		
0236+  6232~            					endif		
0236+  6232             
0236+  6232~            					endif		
0236+  6232~            					endif		
0236+  6232             
0236+  622F             
0236+  622F 02          
0236+  6230             
0236+  6230             
0236+  6230~            					endif		
0236+  6230~            					endif		
0236+  6230~            					endif		
0236+  6230             
0236+  6232             
0236+  6232~            					endif		
0236+  6232~            					endif		
0236+  6232             
0237+  6232             				endif
0237+  6232             
0237+  6232             
0237+  6232             
0237+  6232             
0237+  6232             
0237+  6232~            				endif
0237+  6232~            				endif
0237+  6232             
0237+  6232~            				endif
0237+  6232~            				endif
0237+  6232             
0237+  620E             
0237+  620E 23          
0237+  620F             
0237+  620F             
0237+  620F~            				endif
0237+  620F~            				endif
0237+  620F~            				endif
0237+  620F             
0237+  6232             
0237+  6232~            				endif
0237+  6232~            				endif
0237+  6232             
0238+  6232             				
0239+  6232 97 0F       				staA	lc(8)
0240+  6234             			endif
0240+  6234             
0240+  6234             
0240+  6234             
0240+  6234             
0240+  6234             
0240+  6234~            			endif
0240+  6234~            			endif
0240+  6234             
0240+  6234~            			endif
0240+  6234~            			endif
0240+  6234             
0240+  6206             
0240+  6206 2D          
0240+  6207             
0240+  6207             
0240+  6207~            			endif
0240+  6207~            			endif
0240+  6207~            			endif
0240+  6207             
0240+  6234             
0240+  6234~            			endif
0240+  6234~            			endif
0240+  6234             
0241+  6234             			
0242+  6234             			; flash player light
0243+  6234 86 0F       			ldaA	00001111b ; player up lights
0244+  6236 9A A7       			oraA	>flc(8)
0245+  6238 97 A7       			staA	flc(8)
0246+  623A             			
0247+  623A C6 0C       			fireSolenoid(DROP_TIP)
0247+  623C F7 01 41    
0248+  623F 86 09       			delay(75)
0248+  6241 BD 7D 2F    
0249+  6244 C6 0C       			fireSolenoid(DROP_HOT)
0249+  6246 F7 01 42    
0250+  6249 86 0F       			delay(125)
0250+  624B BD 7D 2F    
0251+  624E             			
0252+  624E             			
0253+  624E B6 22 03    			enablePf
0253+  6251 8A 38       
0253+  6253 B7 22 03    
0254+  6256             			
0255+  6256 C6 02       			fireSolenoid(OUTHOLE)
0255+  6258 F7 01 44    
0256+  625B             		endif
0256+  625B             
0256+  625B             
0256+  625B             
0256+  625B             
0256+  625B             
0256+  625B~            		endif
0256+  625B~            		endif
0256+  625B             
0256+  625B~            		endif
0256+  625B~            		endif
0256+  625B             
0256+  61FE             
0256+  61FE 5C          
0256+  61FF             
0256+  61FF             
0256+  61FF~            		endif
0256+  61FF~            		endif
0256+  61FF~            		endif
0256+  61FF             
0256+  625B             
0256+  625B~            		endif
0256+  625B~            		endif
0256+  625B             
0257+  625B             	endif		
0257+  625B             
0257+  625B             
0257+  625B             
0257+  625B             
0257+  625B             
0257+  625B~            	endif		
0257+  625B~            	endif		
0257+  625B             
0257+  625B~            	endif		
0257+  625B~            	endif		
0257+  625B             
0257+  61E3             
0257+  61E3 77          
0257+  61E4             
0257+  61E4             
0257+  61E4~            	endif		
0257+  61E4~            	endif		
0257+  61E4~            	endif		
0257+  61E4             
0257+  625B             
0257+  625B~            	endif		
0257+  625B~            	endif		
0257+  625B             
0258+  625B             	done(0)
0258+  625B             
0258+  625B 86 02       
0258+  625D BA 01 69    
0258+  6260 B7 01 69    
0258+  6263             
0258+  6263 7E 79 77    
0259+  6266             	
0260+  6266             swLeftEject:
0261+  6266 96 0F       	ldaA	>lc(8)
0262+  6268 85 20       	bitA	lr(6)
0263+  626A             	ifeq ; in game
0263+  626A             
0263+  626A 26 FE       
0264+  626C 86 01       		lampOn(1,3)
0264+  626E 9A 0A       
0264+  6270 97 0A       
0265+  6272 86 40       		lampOn(7,8)
0265+  6274 9A 0F       
0265+  6276 97 0F       
0266+  6278             	endif
0266+  6278             
0266+  6278             
0266+  6278             
0266+  6278             
0266+  6278             
0266+  6278~            	endif
0266+  6278~            	endif
0266+  6278             
0266+  6278~            	endif
0266+  6278~            	endif
0266+  6278             
0266+  626B             
0266+  626B 0C          
0266+  626C             
0266+  626C             
0266+  626C~            	endif
0266+  626C~            	endif
0266+  626C~            	endif
0266+  626C             
0266+  6278             
0266+  6278~            	endif
0266+  6278~            	endif
0266+  6278             
0267+  6278             	score500()
0267+  6278 BD 7D 71    
0267+  627B C6 02       
0267+  627D F7 01 49    
0267+  6280 86 0E       
0267+  6282 BD 7D 2F    
0267+  6285 BD 7D 71    
0267+  6288 C6 02       
0267+  628A F7 01 49    
0267+  628D 86 0E       
0267+  628F BD 7D 2F    
0267+  6292 BD 7D 71    
0267+  6295 C6 02       
0267+  6297 F7 01 49    
0267+  629A 86 0E       
0267+  629C BD 7D 2F    
0267+  629F BD 7D 71    
0267+  62A2 C6 02       
0267+  62A4 F7 01 49    
0267+  62A7 86 0E       
0267+  62A9 BD 7D 2F    
0267+  62AC BD 7D 71    
0267+  62AF C6 02       
0267+  62B1 F7 01 49    
0267+  62B4 86 0E       
0267+  62B6 BD 7D 2F    
0268+  62B9 C6 04       	fireSolenoid(LEFT_EJECT)
0268+  62BB F7 01 43    
0269+  62BE             	done(1)
0269+  62BE~            	done(1)
0269+  62BE~            	done(1)
0269+  62BE~            	done(1)
0269+  62BE~            	done(1)
0269+  62BE             
0269+  62BE 7E 79 77    
0270+  62C1             	
0271+  62C1             swTopEject:
0272+  62C1             	score500()
0272+  62C1 BD 7D 71    
0272+  62C4 C6 02       
0272+  62C6 F7 01 49    
0272+  62C9 86 0E       
0272+  62CB BD 7D 2F    
0272+  62CE BD 7D 71    
0272+  62D1 C6 02       
0272+  62D3 F7 01 49    
0272+  62D6 86 0E       
0272+  62D8 BD 7D 2F    
0272+  62DB BD 7D 71    
0272+  62DE C6 02       
0272+  62E0 F7 01 49    
0272+  62E3 86 0E       
0272+  62E5 BD 7D 2F    
0272+  62E8 BD 7D 71    
0272+  62EB C6 02       
0272+  62ED F7 01 49    
0272+  62F0 86 0E       
0272+  62F2 BD 7D 2F    
0272+  62F5 BD 7D 71    
0272+  62F8 C6 02       
0272+  62FA F7 01 49    
0272+  62FD 86 0E       
0272+  62FF BD 7D 2F    
0273+  6302 C6 04       	fireSolenoid(TOP_EJECT)
0273+  6304 F7 01 40    
0274+  6307             	done(1)
0274+  6307~            	done(1)
0274+  6307~            	done(1)
0274+  6307~            	done(1)
0274+  6307~            	done(1)
0274+  6307             
0274+  6307 7E 79 77    
0275+  630A             	
0276+  630A             swHotTip:
0277+  630A 86 09       	delay(75)
0277+  630C BD 7D 2F    
0278+  630F C6 0C       	fireSolenoid(DROP_HOT)
0278+  6311 F7 01 42    
0279+  6314 86 09       	delay(75)
0279+  6316 BD 7D 2F    
0280+  6319 C6 0C       	fireSolenoid(DROP_TIP)
0280+  631B F7 01 41    
0281+  631E             	done(1)
0281+  631E~            	done(1)
0281+  631E~            	done(1)
0281+  631E~            	done(1)
0281+  631E~            	done(1)
0281+  631E             
0281+  631E 7E 79 77    
0282+  6321             swLeftOutlane:
0283+  6321             swRightOutlane:
0284+  6321             swLeftInlane:
0285+  6321             swRightInlane:
0286+  6321 BD 7D 80    	score1000()
0287+  6324             	done(1)
0287+  6324~            	done(1)
0287+  6324~            	done(1)
0287+  6324~            	done(1)
0287+  6324~            	done(1)
0287+  6324             
0287+  6324 7E 79 77    
0288+  6327             sw10pt:
0289+  6327 BD 7D 63    	score10()
0290+  632A             	done(1)
0290+  632A~            	done(1)
0290+  632A~            	done(1)
0290+  632A~            	done(1)
0290+  632A~            	done(1)
0290+  632A             
0290+  632A 7E 79 77    
0291+  632D             sw100pt:
0292+  632D BD 7D 71    	score100()
0293+  6330             	done(1)
0293+  6330~            	done(1)
0293+  6330~            	done(1)
0293+  6330~            	done(1)
0293+  6330~            	done(1)
0293+  6330             
0293+  6330 7E 79 77    
0294+  6333             sw500pt:
0295+  6333             	score500();
0295+  6333 BD 7D 71    
0295+  6336 C6 02       
0295+  6338 F7 01 49    
0295+  633B 86 0E       
0295+  633D BD 7D 2F    
0295+  6340 BD 7D 71    
0295+  6343 C6 02       
0295+  6345 F7 01 49    
0295+  6348 86 0E       
0295+  634A BD 7D 2F    
0295+  634D BD 7D 71    
0295+  6350 C6 02       
0295+  6352 F7 01 49    
0295+  6355 86 0E       
0295+  6357 BD 7D 2F    
0295+  635A BD 7D 71    
0295+  635D C6 02       
0295+  635F F7 01 49    
0295+  6362 86 0E       
0295+  6364 BD 7D 2F    
0295+  6367 BD 7D 71    
0295+  636A C6 02       
0295+  636C F7 01 49    
0295+  636F 86 0E       
0295+  6371 BD 7D 2F    
0296+  6374             	done(1)
0296+  6374~            	done(1)
0296+  6374~            	done(1)
0296+  6374~            	done(1)
0296+  6374~            	done(1)
0296+  6374             
0296+  6374 7E 79 77    
0297+  6377             swDropTip:
0298+  6377 BD 7D 63    	score10()
0299+  637A             	done(1)
0299+  637A~            	done(1)
0299+  637A~            	done(1)
0299+  637A~            	done(1)
0299+  637A~            	done(1)
0299+  637A             
0299+  637A 7E 79 77    
0300+  637D             swDropHot:
0301+  637D BD 7D 63    	score10()
0302+  6380             	done(1)
0302+  6380~            	done(1)
0302+  6380~            	done(1)
0302+  6380~            	done(1)
0302+  6380~            	done(1)
0302+  6380             
0302+  6380 7E 79 77    
0303+  6383             swAdvBonus:
0304+  6383             	advBonus()
0305+  6383             	done(1)
0305+  6383~            	done(1)
0305+  6383~            	done(1)
0305+  6383~            	done(1)
0305+  6383~            	done(1)
0305+  6383             
0305+  6383 7E 79 77    
0306+  6386             swSpinner:
0307+  6386 96 23       	ldaA	>sc(4)
0308+  6388 85 20       	bitA	sr(6)
0309+  638A             	ifne
0309+  638A             
0309+  638A 27 FE       
0310+  638C BD 7D 71    		score100()
0311+  638F 86 0E       		ldaA	$E
0312+  6391             	else
0312+  6391             
0312+  6391             
0312+  6391             
0312+  6391             
0312+  638B             
0312+  638B             
0312+  638B             
0312+  638B~            	else
0312+  638B~            	else
0312+  638B~            	else
0312+  638B~            	else
0312+  638B             
0312+  638B~            	else
0312+  638B~            	else
0312+  638B~            	else
0312+  638B~            	else
0312+  638B             
0312+  638B             
0312+  638B 07          
0312+  6391             
0312+  6391 20 FE       
0312+  6393             
0312+  6393             
0312+  6393             
0312+  6393~            	else
0312+  6393~            	else
0312+  6393~            	else
0312+  6393~            	else
0312+  6393~            	else
0312+  6393             
0312+  6393~            	else
0312+  6393~            	else
0312+  6393             
0312+  6393~            	else
0312+  6393~            	else
0312+  6393             
0313+  6393 86 02       		noValidate
0313+  6395 BA 01 69    
0313+  6398 B7 01 69    
0314+  639B 86 00       		ldaA	0
0315+  639D             	endif
0315+  639D             
0315+  639D             
0315+  639D             
0315+  639D             
0315+  639D             
0315+  639D~            	endif
0315+  639D~            	endif
0315+  639D             
0315+  639D~            	endif
0315+  639D~            	endif
0315+  639D             
0315+  6392             
0315+  6392 0A          
0315+  6393             
0315+  6393             
0315+  6393~            	endif
0315+  6393~            	endif
0315+  6393~            	endif
0315+  6393             
0315+  639D             
0315+  639D~            	endif
0315+  639D~            	endif
0315+  639D             
0316+  639D B7 0E 47    	staA	solenoid1 + CLICKER - 1
0317+  63A0             	done(1)
0317+  63A0~            	done(1)
0317+  63A0~            	done(1)
0317+  63A0~            	done(1)
0317+  63A0~            	done(1)
0317+  63A0             
0317+  63A0 7E 79 77    
0318+  63A3             
0319+  63A3             	
0320+  63A3             	
0321+  63A3             ; end callbacks
0322+  63A3             	.msfirst
0323+  63A3             ; needs to be on $**00 address
0324+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0325+  6000 61 89       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0325+  6002 61 89       
0325+  6004 61 A2       
0325+  6006 60 C0       
0325+  6008 60 C0       
0325+  600A 60 C0       
0325+  600C 61 89       
0325+  600E 60 C0       
0326+  6010 61 D9       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw none\.dw none
0326+  6012 61 89       
0326+  6014 63 21       
0326+  6016 63 21       
0326+  6018 63 27       
0326+  601A 63 33       
0326+  601C 60 C0       
0326+  601E 60 C0       
0327+  6020 63 77       	.dw swDropTip	\.dw swDropTip\.dw swDropTip\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0327+  6022 63 77       
0327+  6024 63 77       
0327+  6026 63 83       
0327+  6028 63 27       
0327+  602A 62 C1       
0327+  602C 63 27       
0327+  602E 60 C0       
0328+  6030 63 7D       	.dw swDropHot	\.dw swDropHot\.dw swDropHot\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw sw100pt\.dw sw500pt
0328+  6032 63 7D       
0328+  6034 63 7D       
0328+  6036 63 27       
0328+  6038 62 66       
0328+  603A 63 86       
0328+  603C 63 2D       
0328+  603E 63 33       
0329+  6040 63 21       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0329+  6042 63 21       
0329+  6044 63 27       
0329+  6046 60 C0       
0329+  6048 63 0A       
0329+  604A 60 C0       
0329+  604C 60 C0       
0329+  604E 60 C0       
0330+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0330+  6052 60 C0       
0330+  6054 60 C0       
0330+  6056 60 C0       
0330+  6058 60 C0       
0330+  605A 60 C0       
0330+  605C 60 C0       
0330+  605E 60 C0       
0331+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0331+  6062 60 C0       
0331+  6064 60 C0       
0331+  6066 60 C0       
0331+  6068 60 C0       
0331+  606A 60 C0       
0331+  606C 60 C0       
0331+  606E 60 C0       
0332+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0332+  6072 60 C0       
0332+  6074 60 C0       
0332+  6076 60 C0       
0332+  6078 60 C0       
0332+  607A 60 C0       
0332+  607C 60 C0       
0332+  607E 60 C0       
0333+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0334+  6080             ; off = how many cycles it must be off for
0335+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0336+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0337+  6080             ; TRANSPOSED (?)
0338+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0339+  6080             settleTable: ; must be right after callbackTable
0340+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0340+  6081 87          
0340+  6082 C2          
0340+  6083 47          
0340+  6084 47          
0340+  6085 47          
0340+  6086 87          
0340+  6087 47          
0341+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0341+  6089 87          
0341+  608A 87          
0341+  608B 87          
0341+  608C 81          
0341+  608D 81          
0341+  608E 80          
0341+  608F 87          
0342+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0342+  6091 87          
0342+  6092 87          
0342+  6093 83          
0342+  6094 81          
0342+  6095 E1          
0342+  6096 81          
0342+  6097 80          
0343+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,0,0)\SW(0,0,1,0)\SW(0,1,1,0)
0343+  6099 87          
0343+  609A 87          
0343+  609B 81          
0343+  609C E1          
0343+  609D 00          
0343+  609E 80          
0343+  609F 81          
0344+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0344+  60A1 87          
0344+  60A2 81          
0344+  60A3 47          
0344+  60A4 80          
0344+  60A5 47          
0344+  60A6 47          
0344+  60A7 47          
0345+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0345+  60A9 47          
0345+  60AA 47          
0345+  60AB 47          
0345+  60AC 47          
0345+  60AD 47          
0345+  60AE 47          
0345+  60AF 47          
0346+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0346+  60B1 47          
0346+  60B2 47          
0346+  60B3 47          
0346+  60B4 47          
0346+  60B5 47          
0346+  60B6 47          
0346+  60B7 47          
0347+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0347+  60B9 47          
0347+  60BA 47          
0347+  60BB 47          
0347+  60BC 47          
0347+  60BD 47          
0347+  60BE 47          
0347+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 FF       	ldaA	$FF	
0102   78AF B7 28 00    	staA 	displayStrobe
0103   78B2             
0104   78B2 86 00       	ldaA	00
0105   78B4 97 07       	staA	strobe
0106   78B6 B7 01 68    	staA	displayCol
0107   78B9             	
0108   78B9 CE 00 00    	ldX 	0
0109   78BC DF 50       	stX		curCol
0110   78BE             	
0111   78BE 86 00       	ldaA	0
0112   78C0 97 10       	staA	curSwitchRowLsb
0113   78C2             	
0114   78C2             ; fill solenoid status with off
0115   78C2 86 0F       	ldaA	$F
0116   78C4 CE 01 40    	ldX	solenoid1
0117   78C7             lSolDefault:
0118   78C7 A7 00       	staA	0, X
0119   78C9 08          	inX
0120   78CA 8C 01 4F    	cpX	solenoid16
0121   78CD 26 F8       	bne	lSolDefault
0122   78CF             	
0123   78CF             ; clear 8 banks
0124   78CF 86 00       	ldaA 	0
0125   78D1 CE 00 00    	ldX	0
0126   78D4             lClear8:
0127   78D4 A7 08       	staA	lampCol1, X
0128   78D6 A7 A0       	staA	flashLampCol1, X
0129   78D8 A7 80       	staA	waitLeft, X
0130   78DA 08          	inX
0131   78DB 8C 00 08    	cpX	8
0132   78DE 26 F4       	bne 	lClear8
0133   78E0             	
0134   78E0             ; empty settle
0135   78E0 86 00       	ldaA	$00
0136   78E2 CE 01 00    	ldX	settleRow1
0137   78E5             lSettleDefault:
0138   78E5 A7 00       	staA	0, X
0139   78E7 08          	inX
0140   78E8 8C 01 3F    	cpX	settleRow8End
0141   78EB 26 F8       	bne	lSettleDefault
0142   78ED             	
0143   78ED             ; empty queue
0144   78ED 86 FF       	ldaA	$FF
0145   78EF CE 00 60    	ldX	queue
0146   78F2             lEmptyQueue:
0147   78F2 A7 00       	staA	0, X
0148   78F4 08          	inX
0149   78F5 8C 00 67    	cpX	queueEnd
0150   78F8 26 F8       	bne	lEmptyQueue
0151   78FA             	
0152   78FA 86 00       	ldaA	0
0153   78FC 97 54       	staA	queueHead + 0
0154   78FE 97 56       	staA	queueTail + 0
0155   7900 86 60       	ldaA	queue
0156   7902 97 55       	staA	queueHead + 1
0157   7904 97 57       	staA	queueTail + 1
0158   7906             	
0159   7906             ; test numbers
0160   7906 86 20       	lampOn(6,8) ; game over
0160   7908 9A 0F       
0160   790A 97 0F       
0161   790C             
0162   790C             	
0163   790C BD 7D 44    	jsr resetScores
0164   790F             	
0165   790F             ; setup complete
0166   790F 0E          	clI		; enable timer interrupt
0167   7910             	
0168   7910             	
0169   7910             end:
0170   7910 B6 01 69    	ldaA	>state
0171   7913 85 04       	bitA	100b
0172   7915             	ifne
0172   7915             
0172   7915 27 FE       
0173   7917             		; dec wait timers
0174   7917 CE 00 7F    		ldX	waitLeft - 1
0175   791A             decWaitTimers:
0176   791A 08          		inX
0177   791B A6 00       		ldaA	0, X
0178   791D             		ifne
0178   791D             
0178   791D 27 FE       
0179   791F 4A          			decA
0180   7920 A7 00       			staA	0, X
0181   7922             			ifeq
0181   7922             
0181   7922 26 FE       
0182   7924 A6 08       				ldaA	waitMsb - waitLeft, X
0183   7926 97 58       				staA	tempQ
0184   7928 A6 10       				ldaA	waitLsb - waitLeft, X
0185   792A 97 59       				staA	tempQ + 1
0186   792C E6 18       				ldaB	waitReg - waitLeft, X
0187   792E DE 58       				ldX	>tempQ
0188   7930 6E 00       				jmp	0, X
0189   7932             			endif
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7923             
0189   7923 0E          
0189   7924             
0189   7924             
0189   7924~            			endif
0189   7924~            			endif
0189   7924~            			endif
0189   7924             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0190   7932             		endif
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   791E             
0190   791E 13          
0190   791F             
0190   791F             
0190   791F~            		endif
0190   791F~            		endif
0190   791F~            		endif
0190   791F             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0191   7932 8C 00 87    		cpX	waitLeftEnd
0192   7935 26 E3       		bne	decWaitTimers
0193   7937             		
0194   7937 B6 01 69    		ldaA	>state		; clear strobe reset bit
0195   793A 84 FB       		andA	11111011b
0196   793C B7 01 69    		staA	state
0197   793F             	endif
0197   793F             
0197   793F             
0197   793F             
0197   793F             
0197   793F             
0197   793F~            	endif
0197   793F~            	endif
0197   793F             
0197   793F~            	endif
0197   793F~            	endif
0197   793F             
0197   7916             
0197   7916 28          
0197   7917             
0197   7917             
0197   7917~            	endif
0197   7917~            	endif
0197   7917~            	endif
0197   7917             
0197   793F             
0197   793F~            	endif
0197   793F~            	endif
0197   793F             
0198   793F             
0199   793F             		
0200   793F             ; pop queue
0201   793F D6 57       	ldaB	>queueTail + 1
0202   7941 D1 55       	cmpB	>queueHead + 1
0203   7943 27 6F       	beq 	skipQueue
0204   7945             	
0205   7945 DE 54       	ldX	>queueHead
0206   7947 A6 00       	ldaA	0, X	; A now contains the first queue item
0207   7949             	
0208   7949 16          	tAB
0209   794A C4 3F       	andB	00111111b ; B = callback index
0210   794C             	
0211   794C D7 59       	staB	tempQ + 1
0212   794E C6 60       	ldaB	callbackTable >> 8
0213   7950 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0214   7952 DE 58       	ldX	>tempQ
0215   7954             	
0216   7954 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0217   7956 C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0218   7958             	ifne ; if closure only
0218   7958             
0218   7958 27 FE       
0219   795A 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0220   795C 26 40       		bne	skipEvent
0221   795E             	endif
0221   795E             
0221   795E             
0221   795E             
0221   795E             
0221   795E             
0221   795E~            	endif
0221   795E~            	endif
0221   795E             
0221   795E~            	endif
0221   795E~            	endif
0221   795E             
0221   7959             
0221   7959 04          
0221   795A             
0221   795A             
0221   795A~            	endif
0221   795A~            	endif
0221   795A~            	endif
0221   795A             
0221   795E             
0221   795E~            	endif
0221   795E~            	endif
0221   795E             
0222   795E             	
0223   795E C5 40       	bitB	01000000b ; B.7 = active in game over
0224   7960             	ifeq 	 ; not active in game over
0224   7960             
0224   7960 26 FE       
0225   7962 D6 0F       		ldaB	>lc(8)	; gameover mask
0226   7964 C5 20       		bitB	lr(6)
0227   7966 26 36       		bne	skipEvent
0228   7968 D6 0F       		ldaB	>lc(8) ; tilt bit
0229   796A C5 10       		bitB	lr(5)
0230   796C 26 30       		bne	skipEvent
0231   796E             	endif
0231   796E             
0231   796E             
0231   796E             
0231   796E             
0231   796E             
0231   796E~            	endif
0231   796E~            	endif
0231   796E             
0231   796E~            	endif
0231   796E~            	endif
0231   796E             
0231   7961             
0231   7961 0C          
0231   7962             
0231   7962             
0231   7962~            	endif
0231   7962~            	endif
0231   7962~            	endif
0231   7962             
0231   796E             
0231   796E~            	endif
0231   796E~            	endif
0231   796E             
0232   796E             	
0233   796E             	; checked passed, do callback
0234   796E 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0235   7971 DE 58       	ldX	>tempQ
0236   7973 EE 00       	ldX	0, X
0237   7975 6E 00       	jmp	0, X
0238   7977             	; everything trashed
0239   7977             afterQueueEvent:
0240   7977 86 02       	ldaA	10b ; no validate bit
0241   7979 B5 01 69    	bitA	>state
0242   797C             	ifeq ; validate pf
0242   797C             
0242   797C 26 FE       
0243   797E             		; check if playfield invalid
0244   797E 86 0F       		ldaA	00001111b ; player up
0245   7980 95 A7       		bitA	>flc(8)
0246   7982             		ifne ; any flashing -> pf invalid
0246   7982             
0246   7982 27 FE       
0247   7984 43          			comA	; turn off flashing
0248   7985 94 A7       			andA	>flc(8)
0249   7987 97 A7       			staA	flc(8)
0250   7989 86 FE       			lampOff(1,3) ; shoot again
0250   798B 94 0A       
0250   798D 97 0A       
0251   798F 86 BF       			lampOff(7,8)
0251   7991 94 0F       
0251   7993 97 0F       
0252   7995             		endif
0252   7995             
0252   7995             
0252   7995             
0252   7995             
0252   7995             
0252   7995~            		endif
0252   7995~            		endif
0252   7995             
0252   7995~            		endif
0252   7995~            		endif
0252   7995             
0252   7983             
0252   7983 11          
0252   7984             
0252   7984             
0252   7984~            		endif
0252   7984~            		endif
0252   7984~            		endif
0252   7984             
0252   7995             
0252   7995~            		endif
0252   7995~            		endif
0252   7995             
0253   7995             	else
0253   7995             
0253   7995             
0253   7995             
0253   7995             
0253   797D             
0253   797D             
0253   797D             
0253   797D~            	else
0253   797D~            	else
0253   797D~            	else
0253   797D~            	else
0253   797D             
0253   797D~            	else
0253   797D~            	else
0253   797D~            	else
0253   797D~            	else
0253   797D             
0253   797D             
0253   797D 19          
0253   7995             
0253   7995 20 FE       
0253   7997             
0253   7997             
0253   7997             
0253   7997~            	else
0253   7997~            	else
0253   7997~            	else
0253   7997~            	else
0253   7997~            	else
0253   7997             
0253   7997~            	else
0253   7997~            	else
0253   7997             
0253   7997~            	else
0253   7997~            	else
0253   7997             
0254   7997             		; clear don't validate bit
0255   7997 43          		comA
0256   7998 B4 01 69    		andA	>state
0257   799B B7 01 69    		staA	>state
0258   799E             	endif
0258   799E             
0258   799E             
0258   799E             
0258   799E             
0258   799E             
0258   799E~            	endif
0258   799E~            	endif
0258   799E             
0258   799E~            	endif
0258   799E~            	endif
0258   799E             
0258   7996             
0258   7996 07          
0258   7997             
0258   7997             
0258   7997~            	endif
0258   7997~            	endif
0258   7997~            	endif
0258   7997             
0258   799E             
0258   799E~            	endif
0258   799E~            	endif
0258   799E             
0259   799E             	
0260   799E             skipEvent:
0261   799E B6 01 69    	ldaA	>state
0262   79A1 85 04       	bitA	100b
0263   79A3             	ifeq	; don't process queue if still finishing timers
0263   79A3             
0263   79A3 26 FE       
0264   79A5 C6 67       		ldaB	queueEnd
0265   79A7 D1 55       		cmpB	>queueHead + 1
0266   79A9             		ifeq
0266   79A9             
0266   79A9 26 FE       
0267   79AB C6 60       			ldaB	queue
0268   79AD D7 55       			staB	queueHead + 1
0269   79AF             		else
0269   79AF             
0269   79AF             
0269   79AF             
0269   79AF             
0269   79AA             
0269   79AA             
0269   79AA             
0269   79AA~            		else
0269   79AA~            		else
0269   79AA~            		else
0269   79AA~            		else
0269   79AA             
0269   79AA~            		else
0269   79AA~            		else
0269   79AA~            		else
0269   79AA~            		else
0269   79AA             
0269   79AA             
0269   79AA 06          
0269   79AF             
0269   79AF 20 FE       
0269   79B1             
0269   79B1             
0269   79B1             
0269   79B1~            		else
0269   79B1~            		else
0269   79B1~            		else
0269   79B1~            		else
0269   79B1~            		else
0269   79B1             
0269   79B1~            		else
0269   79B1~            		else
0269   79B1             
0269   79B1~            		else
0269   79B1~            		else
0269   79B1             
0270   79B1 7C 00 55    			inc	queueHead + 1
0271   79B4             		endif
0271   79B4             
0271   79B4             
0271   79B4             
0271   79B4             
0271   79B4             
0271   79B4~            		endif
0271   79B4~            		endif
0271   79B4             
0271   79B4~            		endif
0271   79B4~            		endif
0271   79B4             
0271   79B0             
0271   79B0 03          
0271   79B1             
0271   79B1             
0271   79B1~            		endif
0271   79B1~            		endif
0271   79B1~            		endif
0271   79B1             
0271   79B4             
0271   79B4~            		endif
0271   79B4~            		endif
0271   79B4             
0272   79B4             	endif
0272   79B4             
0272   79B4             
0272   79B4             
0272   79B4             
0272   79B4             
0272   79B4~            	endif
0272   79B4~            	endif
0272   79B4             
0272   79B4~            	endif
0272   79B4~            	endif
0272   79B4             
0272   79A4             
0272   79A4 0F          
0272   79A5             
0272   79A5             
0272   79A5~            	endif
0272   79A5~            	endif
0272   79A5~            	endif
0272   79A5             
0272   79B4             
0272   79B4~            	endif
0272   79B4~            	endif
0272   79B4             
0273   79B4             				
0274   79B4             skipQueue:
0275   79B4             				
0276   79B4             	
0277   79B4             				
0278   79B4 7E 79 10    	jmp		end
0279   79B7 00 00       	.dw 0
0280   79B9 00 00       	.dw 0
0281   79BB 00 00       	.dw 0
0282   79BD 00 00       	.dw 0
0283   79BF 00 00       	.dw 0
0284   79C1             		
0285   79C1             interrupt:	
0286   79C1 7C 00 02    	inc	counter
0287   79C4 86 00       	ldaA	0
0288   79C6 91 02       	cmpA	>counter
0289   79C8 26 21       	bne	counterHandled
0290   79CA 7C 00 03    	inc 	counter2
0291   79CD 86 04       	ldaA	4
0292   79CF 91 03       	cmpA	>counter2
0293   79D1 26 18       	bne	counterHandled
0294   79D3             	
0295   79D3 86 00       	ldaA	0
0296   79D5 97 03       	staA	counter2
0297   79D7 86 77       	ldaA	01110111b
0298   79D9 91 70       	cmpA	>displayBcd1
0299   79DB 27 08       	beq	on
0300   79DD             	
0301   79DD 86 F0       	ldaA	$F0
0302   79DF             	;staA	lampRow1
0303   79DF 86 77       	ldaA	01110111b
0304   79E1 97 70       	staA	displayBcd1	
0305   79E3 20 06       	bra	counterHandled
0306   79E5             on:
0307   79E5 86 0F       	ldaA	$0F
0308   79E7             	;staA	lampRow1
0309   79E7 86 33       	ldaA	00110011b
0310   79E9 97 70       	staA	displayBcd1	
0311   79EB             
0312   79EB             counterHandled:
0313   79EB             ; move switch column
0314   79EB 96 07       	ldaA	>strobe
0315   79ED B7 30 02    	staA	switchStrobe
0316   79F0             	
0317   79F0             ; update display 
0318   79F0             	
0319   79F0 DE 50       	ldX	>curCol
0320   79F2 B6 01 68    	ldaA	>displayCol
0321   79F5 C6 FF       	ldaB 	$FF
0322   79F7 F7 28 02    	staB	displayBcd
0323   79FA B7 28 00    	staA	displayStrobe
0324   79FD 85 08       	bitA	00001000b
0325   79FF             	ifeq
0325   79FF             
0325   79FF 26 FE       
0326   7A01 E6 70       		ldaB	displayBcd1, X
0327   7A03             	else
0327   7A03             
0327   7A03             
0327   7A03             
0327   7A03             
0327   7A00             
0327   7A00             
0327   7A00             
0327   7A00~            	else
0327   7A00~            	else
0327   7A00~            	else
0327   7A00~            	else
0327   7A00             
0327   7A00~            	else
0327   7A00~            	else
0327   7A00~            	else
0327   7A00~            	else
0327   7A00             
0327   7A00             
0327   7A00 04          
0327   7A03             
0327   7A03 20 FE       
0327   7A05             
0327   7A05             
0327   7A05             
0327   7A05~            	else
0327   7A05~            	else
0327   7A05~            	else
0327   7A05~            	else
0327   7A05~            	else
0327   7A05             
0327   7A05~            	else
0327   7A05~            	else
0327   7A05             
0327   7A05~            	else
0327   7A05~            	else
0327   7A05             
0328   7A05 E6 78       		ldaB	displayBcd1 + 8, X
0329   7A07             	endif
0329   7A07             
0329   7A07             
0329   7A07             
0329   7A07             
0329   7A07             
0329   7A07~            	endif
0329   7A07~            	endif
0329   7A07             
0329   7A07~            	endif
0329   7A07~            	endif
0329   7A07             
0329   7A04             
0329   7A04 02          
0329   7A05             
0329   7A05             
0329   7A05~            	endif
0329   7A05~            	endif
0329   7A05~            	endif
0329   7A05             
0329   7A07             
0329   7A07~            	endif
0329   7A07~            	endif
0329   7A07             
0330   7A07 F7 28 02    	staB	displayBcd
0331   7A0A             	
0332   7A0A             ; read switches
0333   7A0A             	;jmp updateLamps
0334   7A0A DE 50       	ldX	>curCol
0335   7A0C B6 30 00    	ldaA	>switchRow
0336   7A0F 16          	tab
0337   7A10 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0338   7A12             	
0339   7A12 D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0340   7A14 D7 01       	staB	temp + 1 			; temp = switch / 2
0341   7A16 D7 53       	staB	tempX + 1			; tempX = cRAM
0342   7A18 C6 60       	ldaB	callbackTable >> 8
0343   7A1A D7 00       	staB	temp
0344   7A1C C6 01       	ldaB	cRAM >> 8
0345   7A1E D7 52       	staB	tempX
0346   7A20             	
0347   7A20 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0348   7A22             	
0349   7A22             	; temp now contains the beginning of the row in the callbackTable
0350   7A22             swNext:
0351   7A22 85 01       	bitA	00000001b	 ; Z set if switch not different
0352   7A24             	ifne		; if bit set, switch different
0352   7A24             
0352   7A24 27 FE       
0353   7A26 36          		pshA ; store changed switches left
0354   7A27 DE 52       		ldX	>tempX
0355   7A29 86 18       		ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0356   7A2B             				; but checking 'multiple of 8' would miss 7/8 switch
0357   7A2B             				; columns completely since they're in sync
0358   7A2B             				; so instead the lowest bits are empty (so that it'll
0359   7A2B             				; get all switch cols) and instead it skips 7/8 groups 
0360   7A2B             				; of 8 IRQs
0361   7A2B 95 02       		bitA	>counter
0362   7A2D 27 08       		beq checkSettled ; counter not multiple of 8, skip settling (multiplies settle time by 8)
0363   7A2F             			; just check if this is the beginning of the settle
0364   7A2F             			;  (want to react right away when a switch closes)
0365   7A2F A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0366   7A31 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0367   7A33 27 33       			beq 	notSettled; A=0 -> was settled, so can begin
0368   7A35 20 4B       			bra settledEnd
0369   7A37             checkSettled:
0370   7A37 A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0371   7A39 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0372   7A3B 27 2B       		beq 	notSettled; A=0 -> settled
0373   7A3D             		; else A > 0 -> settling
0374   7A3D 4A          			decA
0375   7A3E A7 00       			staA	0, X	; sets Z if now A = 0
0376   7A40             			ifeq ; A=0 -> now settled, fire event
0376   7A40             
0376   7A40 26 FE       
0377   7A42             settled:		
0378   7A42 DE 50       				ldX	>curCol
0379   7A44 17          				tBA	; A now the bit in row
0380   7A45 A8 20       				eorA	switchRow1, X ; toggle bit in row
0381   7A47 A7 20       				staA	switchRow1, X ; A now state of row
0382   7A49             				
0383   7A49 F5 30 00    				bitB	>switchRow
0384   7A4C             				ifne ; switch now on
0384   7A4C             
0384   7A4C 27 FE       
0385   7A4E 86 40       					ldaA	01000000b
0386   7A50             				else
0386   7A50             
0386   7A50             
0386   7A50             
0386   7A50             
0386   7A4D             
0386   7A4D             
0386   7A4D             
0386   7A4D~            				else
0386   7A4D~            				else
0386   7A4D~            				else
0386   7A4D~            				else
0386   7A4D             
0386   7A4D~            				else
0386   7A4D~            				else
0386   7A4D~            				else
0386   7A4D~            				else
0386   7A4D             
0386   7A4D             
0386   7A4D 04          
0386   7A50             
0386   7A50 20 FE       
0386   7A52             
0386   7A52             
0386   7A52             
0386   7A52~            				else
0386   7A52~            				else
0386   7A52~            				else
0386   7A52~            				else
0386   7A52~            				else
0386   7A52             
0386   7A52~            				else
0386   7A52~            				else
0386   7A52             
0386   7A52~            				else
0386   7A52~            				else
0386   7A52             
0387   7A52 86 C0       					ldaA	11000000b
0388   7A54             				endif
0388   7A54             
0388   7A54             
0388   7A54             
0388   7A54             
0388   7A54             
0388   7A54~            				endif
0388   7A54~            				endif
0388   7A54             
0388   7A54~            				endif
0388   7A54~            				endif
0388   7A54             
0388   7A51             
0388   7A51 02          
0388   7A52             
0388   7A52             
0388   7A52~            				endif
0388   7A52~            				endif
0388   7A52~            				endif
0388   7A52             
0388   7A54             
0388   7A54~            				endif
0388   7A54~            				endif
0388   7A54             
0389   7A54 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0390   7A56             				
0391   7A56             				; store event
0392   7A56 DE 56       				ldX	>queueTail
0393   7A58 A7 00       				staA	0, X
0394   7A5A 7C 00 57    				inc	queueTail + 1
0395   7A5D             				
0396   7A5D             				; wrap queueTail if necessary
0397   7A5D 8C 00 67    				cpX	queueEnd 
0398   7A60             				ifeq
0398   7A60             
0398   7A60 26 FE       
0399   7A62 86 60       					ldaA	queue 
0400   7A64 97 57       					staA	queueTail + 1
0401   7A66             				endif
0401   7A66             
0401   7A66             
0401   7A66             
0401   7A66             
0401   7A66             
0401   7A66~            				endif
0401   7A66~            				endif
0401   7A66             
0401   7A66~            				endif
0401   7A66~            				endif
0401   7A66             
0401   7A61             
0401   7A61 04          
0401   7A62             
0401   7A62             
0401   7A62~            				endif
0401   7A62~            				endif
0401   7A62~            				endif
0401   7A62             
0401   7A66             
0401   7A66~            				endif
0401   7A66~            				endif
0401   7A66             
0402   7A66             			endif
0402   7A66             
0402   7A66             
0402   7A66             
0402   7A66             
0402   7A66             
0402   7A66~            			endif
0402   7A66~            			endif
0402   7A66             
0402   7A66~            			endif
0402   7A66~            			endif
0402   7A66             
0402   7A41             
0402   7A41 24          
0402   7A42             
0402   7A42             
0402   7A42~            			endif
0402   7A42~            			endif
0402   7A42~            			endif
0402   7A42             
0402   7A66             
0402   7A66~            			endif
0402   7A66~            			endif
0402   7A66             
0403   7A66 20 1A       		bra settledEnd
0404   7A68             notSettled: ; =0 -> was settled, so now it's not
0405   7A68             			; get the settle time
0406   7A68 96 53       			ldaA	>tempX + 1
0407   7A6A 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0408   7A6C DE 00       			ldX	>temp
0409   7A6E             			
0410   7A6E             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0411   7A6E A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0412   7A70             			
0413   7A70             			; need to get correct 3 bits from switch settings
0414   7A70 F5 30 00    			bitB	>switchRow
0415   7A73             			ifne ; switch just turned on
0415   7A73             
0415   7A73 27 FE       
0416   7A75 44          				lsrA
0417   7A76 44          				lsrA
0418   7A77             			else
0418   7A77             
0418   7A77             
0418   7A77             
0418   7A77             
0418   7A74             
0418   7A74             
0418   7A74             
0418   7A74~            			else
0418   7A74~            			else
0418   7A74~            			else
0418   7A74~            			else
0418   7A74             
0418   7A74~            			else
0418   7A74~            			else
0418   7A74~            			else
0418   7A74~            			else
0418   7A74             
0418   7A74             
0418   7A74 04          
0418   7A77             
0418   7A77 20 FE       
0418   7A79             
0418   7A79             
0418   7A79             
0418   7A79~            			else
0418   7A79~            			else
0418   7A79~            			else
0418   7A79~            			else
0418   7A79~            			else
0418   7A79             
0418   7A79~            			else
0418   7A79~            			else
0418   7A79             
0418   7A79~            			else
0418   7A79~            			else
0418   7A79             
0419   7A79 48          				aslA
0420   7A7A             			endif
0420   7A7A             
0420   7A7A             
0420   7A7A             
0420   7A7A             
0420   7A7A             
0420   7A7A~            			endif
0420   7A7A~            			endif
0420   7A7A             
0420   7A7A~            			endif
0420   7A7A~            			endif
0420   7A7A             
0420   7A78             
0420   7A78 01          
0420   7A79             
0420   7A79             
0420   7A79~            			endif
0420   7A79~            			endif
0420   7A79~            			endif
0420   7A79             
0420   7A7A             
0420   7A7A~            			endif
0420   7A7A~            			endif
0420   7A7A             
0421   7A7A 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0422   7A7C             						
0423   7A7C DE 52       			ldX	>tempX
0424   7A7E A7 00       			staA	0, X		; start settling	
0425   7A80 27 C0       			beq	settled		; quick out for 0 settle
0426   7A82             settledEnd:
0427   7A82             			
0428   7A82 32          		pulA
0429   7A83             	endif
0429   7A83             
0429   7A83             
0429   7A83             
0429   7A83             
0429   7A83             
0429   7A83~            	endif
0429   7A83~            	endif
0429   7A83             
0429   7A83~            	endif
0429   7A83~            	endif
0429   7A83             
0429   7A25             
0429   7A25 5D          
0429   7A26             
0429   7A26             
0429   7A26~            	endif
0429   7A26~            	endif
0429   7A26~            	endif
0429   7A26             
0429   7A83             
0429   7A83~            	endif
0429   7A83~            	endif
0429   7A83             
0430   7A83 7C 00 53    	inc tempX + 1
0431   7A86 58          	aslB
0432   7A87 44          	lsrA			; pop lowest bit off, set Z if A is empty
0433   7A88 26 98       	bne		swNext 	; more 'switched' bits, keep processing 
0434   7A8A             	
0435   7A8A             	
0436   7A8A             ; update lamps
0437   7A8A             updateLamps:
0438   7A8A             	;jmp updateStrobe
0439   7A8A             
0440   7A8A DE 50       	ldX	>curCol
0441   7A8C             	
0442   7A8C 86 FF       	ldaA	$FF	;lamp row is inverted
0443   7A8E B7 24 00    	staA	lampCol
0444   7A91 96 07       	ldaA	>strobe
0445   7A93 B7 24 02    	staA	lampStrobe
0446   7A96             	
0447   7A96 D6 03       	ldaB	>counter2
0448   7A98 A6 08       	ldaA	lampCol1, X
0449   7A9A C5 01       	bitB	1b 
0450   7A9C             	ifeq
0450   7A9C             
0450   7A9C 26 FE       
0451   7A9E A8 A0       		eorA	flashLampCol1, X
0452   7AA0 A4 08       		andA	lampCol1, X
0453   7AA2             	endif
0453   7AA2             
0453   7AA2             
0453   7AA2             
0453   7AA2             
0453   7AA2             
0453   7AA2~            	endif
0453   7AA2~            	endif
0453   7AA2             
0453   7AA2~            	endif
0453   7AA2~            	endif
0453   7AA2             
0453   7A9D             
0453   7A9D 04          
0453   7A9E             
0453   7A9E             
0453   7A9E~            	endif
0453   7A9E~            	endif
0453   7A9E~            	endif
0453   7A9E             
0453   7AA2             
0453   7AA2~            	endif
0453   7AA2~            	endif
0453   7AA2             
0454   7AA2 43          	comA	; inverted
0455   7AA3             	
0456   7AA3 B7 24 00    	staA	lampCol
0457   7AA6 86 00       	ldaA	00
0458   7AA8             
0459   7AA8             ; update solenoids
0460   7AA8             	; if a solenoid is set to <254, --
0461   7AA8             	; if =255, off, otherwise on
0462   7AA8             	; else leave it at 254
0463   7AA8             	
0464   7AA8 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0465   7AAB 86 FE       	ldaA	254
0466   7AAD DE 50       	ldX	>curCol
0467   7AAF             	; update solenoid in current 'column' (1-8) 
0468   7AAF A1 40       	cmpA	solenoid1 - cRAM, X
0469   7AB1             	ifge 	; solenoid <=254, turn on
0469   7AB1             
0469   7AB1 25 FE       
0470   7AB3             		ifgt	; solenoid < 254, decrement
0470   7AB3             
0470   7AB3 23 FE       
0471   7AB5 6A 40       			dec	solenoid1 - cRAM, X
0472   7AB7             		endif
0472   7AB7             
0472   7AB7             
0472   7AB7             
0472   7AB7             
0472   7AB7             
0472   7AB7~            		endif
0472   7AB7~            		endif
0472   7AB7             
0472   7AB7~            		endif
0472   7AB7~            		endif
0472   7AB7             
0472   7AB4             
0472   7AB4 02          
0472   7AB5             
0472   7AB5             
0472   7AB5~            		endif
0472   7AB5~            		endif
0472   7AB5~            		endif
0472   7AB5             
0472   7AB7             
0472   7AB7~            		endif
0472   7AB7~            		endif
0472   7AB7             
0473   7AB7 0D          		sec
0474   7AB8             	else
0474   7AB8             
0474   7AB8             
0474   7AB8             
0474   7AB8             
0474   7AB2             
0474   7AB2             
0474   7AB2             
0474   7AB2~            	else
0474   7AB2~            	else
0474   7AB2~            	else
0474   7AB2~            	else
0474   7AB2             
0474   7AB2~            	else
0474   7AB2~            	else
0474   7AB2~            	else
0474   7AB2~            	else
0474   7AB2             
0474   7AB2             
0474   7AB2 07          
0474   7AB8             
0474   7AB8 20 FE       
0474   7ABA             
0474   7ABA             
0474   7ABA             
0474   7ABA~            	else
0474   7ABA~            	else
0474   7ABA~            	else
0474   7ABA~            	else
0474   7ABA~            	else
0474   7ABA             
0474   7ABA~            	else
0474   7ABA~            	else
0474   7ABA             
0474   7ABA~            	else
0474   7ABA~            	else
0474   7ABA             
0475   7ABA 0C          		clc
0476   7ABB             	endif
0476   7ABB             
0476   7ABB             
0476   7ABB             
0476   7ABB             
0476   7ABB             
0476   7ABB~            	endif
0476   7ABB~            	endif
0476   7ABB             
0476   7ABB~            	endif
0476   7ABB~            	endif
0476   7ABB             
0476   7AB9             
0476   7AB9 01          
0476   7ABA             
0476   7ABA             
0476   7ABA~            	endif
0476   7ABA~            	endif
0476   7ABA~            	endif
0476   7ABA             
0476   7ABB             
0476   7ABB~            	endif
0476   7ABB~            	endif
0476   7ABB             
0477   7ABB 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0478   7ABE             	; repeat above for second bank
0479   7ABE A1 48       	cmpA	solenoid9 - cRAM, X
0480   7AC0             	ifge 	; solenoid <=254, turn on
0480   7AC0             
0480   7AC0 25 FE       
0481   7AC2             		ifgt	; solenoid < 254, decrement
0481   7AC2             
0481   7AC2 23 FE       
0482   7AC4 6A 48       			dec	solenoid9 - cRAM, X
0483   7AC6             		endif
0483   7AC6             
0483   7AC6             
0483   7AC6             
0483   7AC6             
0483   7AC6             
0483   7AC6~            		endif
0483   7AC6~            		endif
0483   7AC6             
0483   7AC6~            		endif
0483   7AC6~            		endif
0483   7AC6             
0483   7AC3             
0483   7AC3 02          
0483   7AC4             
0483   7AC4             
0483   7AC4~            		endif
0483   7AC4~            		endif
0483   7AC4~            		endif
0483   7AC4             
0483   7AC6             
0483   7AC6~            		endif
0483   7AC6~            		endif
0483   7AC6             
0484   7AC6 0D          		sec
0485   7AC7             	else
0485   7AC7             
0485   7AC7             
0485   7AC7             
0485   7AC7             
0485   7AC1             
0485   7AC1             
0485   7AC1             
0485   7AC1~            	else
0485   7AC1~            	else
0485   7AC1~            	else
0485   7AC1~            	else
0485   7AC1             
0485   7AC1~            	else
0485   7AC1~            	else
0485   7AC1~            	else
0485   7AC1~            	else
0485   7AC1             
0485   7AC1             
0485   7AC1 07          
0485   7AC7             
0485   7AC7 20 FE       
0485   7AC9             
0485   7AC9             
0485   7AC9             
0485   7AC9~            	else
0485   7AC9~            	else
0485   7AC9~            	else
0485   7AC9~            	else
0485   7AC9~            	else
0485   7AC9             
0485   7AC9~            	else
0485   7AC9~            	else
0485   7AC9             
0485   7AC9~            	else
0485   7AC9~            	else
0485   7AC9             
0486   7AC9 0C          		clc
0487   7ACA             	endif
0487   7ACA             
0487   7ACA             
0487   7ACA             
0487   7ACA             
0487   7ACA             
0487   7ACA~            	endif
0487   7ACA~            	endif
0487   7ACA             
0487   7ACA~            	endif
0487   7ACA~            	endif
0487   7ACA             
0487   7AC8             
0487   7AC8 01          
0487   7AC9             
0487   7AC9             
0487   7AC9~            	endif
0487   7AC9~            	endif
0487   7AC9~            	endif
0487   7AC9             
0487   7ACA             
0487   7ACA~            	endif
0487   7ACA~            	endif
0487   7ACA             
0488   7ACA 76 00 29    	ror		solBStatus	
0489   7ACD 7A 00 50    	dec		curCol ; undo inc
0490   7AD0             	
0491   7AD0             ; update strobe	
0492   7AD0             updateStrobe:
0493   7AD0             	;ldX		curCol
0494   7AD0             	;inX 	
0495   7AD0 86 08       	ldaA	8 	; pitch
0496   7AD2 9B 10       	addA	>curSwitchRowLsb
0497   7AD4 97 10       	staA	curSwitchRowLsb
0498   7AD6 78 00 07    	asl	strobe
0499   7AD9 7C 01 68    	inc	displayCol
0500   7ADC 86 00       	ldaA	0
0501   7ADE 91 07       	cmpA	>strobe ; strobe done?  reset
0502   7AE0             	ifeq		
0502   7AE0             
0502   7AE0 26 FE       
0503   7AE2 96 28       		ldaA	>solAStatus
0504   7AE4 B7 22 00    		staA	solenoidA
0505   7AE7 96 29       		ldaA	>solBStatus
0506   7AE9 B7 22 02    		staA	solenoidB
0507   7AEC             	
0508   7AEC 86 01       		ldaA	00000001b
0509   7AEE 97 07       		staA	strobe
0510   7AF0             		
0511   7AF0             		;ldX 	#0
0512   7AF0             		
0513   7AF0 86 00       		ldaA	0
0514   7AF2 97 50       		staA	curCol
0515   7AF4 97 51       		staA	curCol + 1
0516   7AF6 97 10       		staA	curSwitchRowLsb
0517   7AF8 97 28       		staA	solAStatus
0518   7AFA 97 29       		staA	solBStatus
0519   7AFC             		
0520   7AFC F6 01 68    		ldaB	>displayCol	; reset display col only if it's > 7 
0521   7AFF C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0522   7B01             		ifgt
0522   7B01             
0522   7B01 23 FE       
0523   7B03 B7 01 68    			staA	displayCol
0524   7B06             		endif
0524   7B06             
0524   7B06             
0524   7B06             
0524   7B06             
0524   7B06             
0524   7B06~            		endif
0524   7B06~            		endif
0524   7B06             
0524   7B06~            		endif
0524   7B06~            		endif
0524   7B06             
0524   7B02             
0524   7B02 03          
0524   7B03             
0524   7B03             
0524   7B03~            		endif
0524   7B03~            		endif
0524   7B03~            		endif
0524   7B03             
0524   7B06             
0524   7B06~            		endif
0524   7B06~            		endif
0524   7B06             
0525   7B06             	
0526   7B06 B6 01 69    		ldaA	>state
0527   7B09 8A 04       		oraA	100b
0528   7B0B B7 01 69    		staA	state
0529   7B0E             	else
0529   7B0E             
0529   7B0E             
0529   7B0E             
0529   7B0E             
0529   7AE1             
0529   7AE1             
0529   7AE1             
0529   7AE1~            	else
0529   7AE1~            	else
0529   7AE1~            	else
0529   7AE1~            	else
0529   7AE1             
0529   7AE1~            	else
0529   7AE1~            	else
0529   7AE1~            	else
0529   7AE1~            	else
0529   7AE1             
0529   7AE1             
0529   7AE1 2E          
0529   7B0E             
0529   7B0E 20 FE       
0529   7B10             
0529   7B10             
0529   7B10             
0529   7B10~            	else
0529   7B10~            	else
0529   7B10~            	else
0529   7B10~            	else
0529   7B10~            	else
0529   7B10             
0529   7B10~            	else
0529   7B10~            	else
0529   7B10             
0529   7B10~            	else
0529   7B10~            	else
0529   7B10             
0530   7B10 7C 00 51    		inc	curCol + 1
0531   7B13             	endif
0531   7B13             
0531   7B13             
0531   7B13             
0531   7B13             
0531   7B13             
0531   7B13~            	endif
0531   7B13~            	endif
0531   7B13             
0531   7B13~            	endif
0531   7B13~            	endif
0531   7B13             
0531   7B0F             
0531   7B0F 03          
0531   7B10             
0531   7B10             
0531   7B10~            	endif
0531   7B10~            	endif
0531   7B10~            	endif
0531   7B10             
0531   7B13             
0531   7B13~            	endif
0531   7B13~            	endif
0531   7B13             
0532   7B13             	
0533   7B13 3B          	rti
0534   7B14             afterInterrupt:
0535   7B14             
0536   7FF8             pointers: 	.org $7FF8  	
0537   7FF8             	.msfirst
0538   7FF8 79 C1       	.dw interrupt			
0539   7FFA 79 C1       	.dw interrupt			
0540   7FFC 79 C1       	.dw interrupt			
0541   7FFE 78 00       	.dw main
0542   8000             	
0543   8000             	
0544   8000             	.endtasm: Number of errors = 0
