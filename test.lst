0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             curCol:			.equ RAM + $50 ; +
0041+  0000             tempX:			.equ RAM + $52 ; +
0042+  0000             queueHead:		.equ RAM + $54 ; +
0043+  0000             queueTail:		.equ RAM + $56 ; +
0044+  0000             tempQ:			.equ RAM + $58 ; +
0045+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0046+  0000             queueEnd:		.equ RAM + $67
0047+  0000             ;
0048+  0000             displayBcd1:	.equ RAM + $70
0049+  0000             displayBcd16:	.equ RAM + $7F
0050+  0000             ballCount:		.equ displayBcd1 + 7
0051+  0000             waitLeft: 		.equ RAM + $80
0052+  0000             waitLeftEnd:		.equ RAM + $87
0053+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0054+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0055+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0056+  0000             flashLampCol1:		.equ RAM + $A0
0057+  0000             flashLampCol8:		.equ RAM + $A7
0058+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0059+  0000             
0060+  0000             
0061+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0062+  0000             settleRow8:		.equ settleRow1+  (8*8)-1
0063+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0064+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0065+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0066+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0067+  0000             #DEFINE s(n) 		(0 + n)
0068+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0069+  0000             pA_10:			.equ pA_1m + 5
0070+  0000             pB_1m:			.equ pA_10 + 1
0071+  0000             pB_10:			.equ pB_1m + 5
0072+  0000             pC_1m:			.equ pB_10 + 1
0073+  0000             pC_10:			.equ pC_1m + 5
0074+  0000             pD_1m:			.equ pC_10 + 1
0075+  0000             pD_10:			.equ pD_1m + 5  
0076+  0000             displayCol:		.equ cRAM + $68
0077+  0000             state:			.equ cRAM + $69	; ? | strobe reset | don't validate | ?
0078+  0000             
0079+  0000             instant:		.equ 4
0080+  0000             debounce:		.equ 1
0081+  0000             slow:			.equ 2
0082+  0000             
0083+  0000             switchSettle:	.equ cRAM + $30
0084+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7AFF             utils:	.org $7800 + $2FF
0002+  7AFF             
0003+  7AFF             ; copy players' scores to display 
0004+  7AFF             copyScores13:
0005+  7AFF CE 00 70    	ldX	displayBcd1
0006+  7B02 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7B04             copy13Loop:
0008+  7B04 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7B06 84 0F       	andA	$0F
0010+  7B08 81 00       	cmpA	$00 
0011+  7B0A             	\ .push  *, 0 \ BNE  * 		 ; if pA score = 0?
0011+  7B0A             
0011+  7B0A 26 FE       
0012+  7B0C 8C 00 74    		cpX	displayBcd1 + 4
0013+  7B0F             		\ .push  *, 0 \ BNE  * 		
0013+  7B0F             
0013+  7B0F 26 FE       
0014+  7B11 C4 0F       			andB	00001111b 
0015+  7B13 86 0F       			ldaA	$0F
0016+  7B15             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0016+  7B15             
0016+  7B15             
0016+  7B15             
0016+  7B15             
0016+  7B10             
0016+  7B10             
0016+  7B10             
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10             
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10~            		else
0016+  7B10             
0016+  7B10             
0016+  7B10 06          
0016+  7B15             
0016+  7B15 20 FE       
0016+  7B17             
0016+  7B17             
0016+  7B17             
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17             
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17             
0016+  7B17~            		else
0016+  7B17~            		else
0016+  7B17             
0017+  7B17 17          			tBA	; replace 0 with blank/0
0018+  7B18             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0018+  7B18             
0018+  7B18             
0018+  7B18             
0018+  7B18             
0018+  7B18             
0018+  7B18~            		endif
0018+  7B18~            		endif
0018+  7B18             
0018+  7B18~            		endif
0018+  7B18~            		endif
0018+  7B18             
0018+  7B16             
0018+  7B16 01          
0018+  7B17             
0018+  7B17             
0018+  7B17~            		endif
0018+  7B17~            		endif
0018+  7B17~            		endif
0018+  7B17             
0018+  7B18             
0018+  7B18~            		endif
0018+  7B18~            		endif
0018+  7B18             
0019+  7B18             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0019+  7B18             
0019+  7B18             
0019+  7B18             
0019+  7B18             
0019+  7B0B             
0019+  7B0B             
0019+  7B0B             
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B             
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B~            	else
0019+  7B0B             
0019+  7B0B             
0019+  7B0B 0E          
0019+  7B18             
0019+  7B18 20 FE       
0019+  7B1A             
0019+  7B1A             
0019+  7B1A             
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A             
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A             
0019+  7B1A~            	else
0019+  7B1A~            	else
0019+  7B1A             
0020+  7B1A 48          		aslA
0021+  7B1B 48          		aslA
0022+  7B1C 48          		aslA
0023+  7B1D 48          		aslA
0024+  7B1E C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7B20 8A 0F       		oraA	00001111b
0026+  7B22             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0026+  7B22             
0026+  7B22             
0026+  7B22             
0026+  7B22             
0026+  7B22             
0026+  7B22~            	endif
0026+  7B22~            	endif
0026+  7B22             
0026+  7B22~            	endif
0026+  7B22~            	endif
0026+  7B22             
0026+  7B19             
0026+  7B19 08          
0026+  7B1A             
0026+  7B1A             
0026+  7B1A~            	endif
0026+  7B1A~            	endif
0026+  7B1A~            	endif
0026+  7B1A             
0026+  7B22             
0026+  7B22~            	endif
0026+  7B22~            	endif
0026+  7B22             
0027+  7B22 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7B24             	
0029+  7B24             	;andA	$F0
0030+  7B24 85 0F       	bitA	00001111b
0031+  7B26             	\ .push  *, 0 \ BNE  * 		 ; pC is 0
0031+  7B26             
0031+  7B26 26 FE       
0032+  7B28 C5 0F       		bitB	1111b
0033+  7B2A             		\ .push  *, 0 \ BEQ  * 
0033+  7B2A             
0033+  7B2A 27 FE       
0034+  7B2C 8C 00 74    			cpX	displayBcd1 + 4
0035+  7B2F             			\ .push  *, 0 \ BNE  * 		
0035+  7B2F             
0035+  7B2F 26 FE       
0036+  7B31 C4 F0       				andB	11110000b
0037+  7B33             			\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0037+  7B33             
0037+  7B33             
0037+  7B33             
0037+  7B33             
0037+  7B30             
0037+  7B30             
0037+  7B30             
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30             
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30~            			else
0037+  7B30             
0037+  7B30             
0037+  7B30 04          
0037+  7B33             
0037+  7B33 20 FE       
0037+  7B35             
0037+  7B35             
0037+  7B35             
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35             
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35             
0037+  7B35~            			else
0037+  7B35~            			else
0037+  7B35             
0038+  7B35 8A 0F       				oraA	$F
0039+  7B37             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0039+  7B37             
0039+  7B37             
0039+  7B37             
0039+  7B37             
0039+  7B37             
0039+  7B37~            			endif
0039+  7B37~            			endif
0039+  7B37             
0039+  7B37~            			endif
0039+  7B37~            			endif
0039+  7B37             
0039+  7B34             
0039+  7B34 02          
0039+  7B35             
0039+  7B35             
0039+  7B35~            			endif
0039+  7B35~            			endif
0039+  7B35~            			endif
0039+  7B35             
0039+  7B37             
0039+  7B37~            			endif
0039+  7B37~            			endif
0039+  7B37             
0040+  7B37             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0040+  7B37             
0040+  7B37             
0040+  7B37             
0040+  7B37             
0040+  7B37             
0040+  7B37~            		endif
0040+  7B37~            		endif
0040+  7B37             
0040+  7B37~            		endif
0040+  7B37~            		endif
0040+  7B37             
0040+  7B2B             
0040+  7B2B 0B          
0040+  7B2C             
0040+  7B2C             
0040+  7B2C~            		endif
0040+  7B2C~            		endif
0040+  7B2C~            		endif
0040+  7B2C             
0040+  7B37             
0040+  7B37~            		endif
0040+  7B37~            		endif
0040+  7B37             
0041+  7B37             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0041+  7B37             
0041+  7B37             
0041+  7B37             
0041+  7B37             
0041+  7B27             
0041+  7B27             
0041+  7B27             
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27             
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27~            	else
0041+  7B27             
0041+  7B27             
0041+  7B27 11          
0041+  7B37             
0041+  7B37 20 FE       
0041+  7B39             
0041+  7B39             
0041+  7B39             
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39             
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39             
0041+  7B39~            	else
0041+  7B39~            	else
0041+  7B39             
0042+  7B39 C4 F0       		andB	11110000b
0043+  7B3B             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0043+  7B3B             
0043+  7B3B             
0043+  7B3B             
0043+  7B3B             
0043+  7B3B             
0043+  7B3B~            	endif
0043+  7B3B~            	endif
0043+  7B3B             
0043+  7B3B~            	endif
0043+  7B3B~            	endif
0043+  7B3B             
0043+  7B38             
0043+  7B38 02          
0043+  7B39             
0043+  7B39             
0043+  7B39~            	endif
0043+  7B39~            	endif
0043+  7B39~            	endif
0043+  7B39             
0043+  7B3B             
0043+  7B3B~            	endif
0043+  7B3B~            	endif
0043+  7B3B             
0044+  7B3B A7 00       	staA	0, X
0045+  7B3D             	
0046+  7B3D 08          	inX
0047+  7B3E 8C 00 76    	cpX	displayBcd1 + 6
0048+  7B41 26 C1       	bne 	copy13Loop
0049+  7B43             	
0050+  7B43 39          	rts
0051+  7B44             
0052+  7B44             copyScores24:
0053+  7B44 CE 00 78    	ldX	displayBcd1 + 8
0054+  7B47 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7B49             copy24Loop:
0056+  7B49 A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7B4B 84 0F       	andA	$0F
0058+  7B4D 81 00       	cmpA	$00 ; is pA score 0?
0059+  7B4F             	\ .push  *, 0 \ BNE  * 		 ; if pA score = 0?
0059+  7B4F             
0059+  7B4F 26 FE       
0060+  7B51 8C 00 7C    		cpX	displayBcd1 + 8 + 4
0061+  7B54             		\ .push  *, 0 \ BNE  * 		
0061+  7B54             
0061+  7B54 26 FE       
0062+  7B56 C4 0F       			andB	00001111b 
0063+  7B58 86 0F       			ldaA	$0F
0064+  7B5A             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0064+  7B5A             
0064+  7B5A             
0064+  7B5A             
0064+  7B5A             
0064+  7B55             
0064+  7B55             
0064+  7B55             
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55             
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55~            		else
0064+  7B55             
0064+  7B55             
0064+  7B55 06          
0064+  7B5A             
0064+  7B5A 20 FE       
0064+  7B5C             
0064+  7B5C             
0064+  7B5C             
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C             
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C             
0064+  7B5C~            		else
0064+  7B5C~            		else
0064+  7B5C             
0065+  7B5C 17          			tBA	; replace 0 with blank/0
0066+  7B5D             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0066+  7B5D             
0066+  7B5D             
0066+  7B5D             
0066+  7B5D             
0066+  7B5D             
0066+  7B5D~            		endif
0066+  7B5D~            		endif
0066+  7B5D             
0066+  7B5D~            		endif
0066+  7B5D~            		endif
0066+  7B5D             
0066+  7B5B             
0066+  7B5B 01          
0066+  7B5C             
0066+  7B5C             
0066+  7B5C~            		endif
0066+  7B5C~            		endif
0066+  7B5C~            		endif
0066+  7B5C             
0066+  7B5D             
0066+  7B5D~            		endif
0066+  7B5D~            		endif
0066+  7B5D             
0067+  7B5D             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0067+  7B5D             
0067+  7B5D             
0067+  7B5D             
0067+  7B5D             
0067+  7B50             
0067+  7B50             
0067+  7B50             
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50             
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50~            	else
0067+  7B50             
0067+  7B50             
0067+  7B50 0E          
0067+  7B5D             
0067+  7B5D 20 FE       
0067+  7B5F             
0067+  7B5F             
0067+  7B5F             
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F             
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F             
0067+  7B5F~            	else
0067+  7B5F~            	else
0067+  7B5F             
0068+  7B5F 48          		aslA
0069+  7B60 48          		aslA
0070+  7B61 48          		aslA
0071+  7B62 48          		aslA
0072+  7B63 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7B65 8A 0F       		oraA	00001111b
0074+  7B67             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0074+  7B67             
0074+  7B67             
0074+  7B67             
0074+  7B67             
0074+  7B67             
0074+  7B67~            	endif
0074+  7B67~            	endif
0074+  7B67             
0074+  7B67~            	endif
0074+  7B67~            	endif
0074+  7B67             
0074+  7B5E             
0074+  7B5E 08          
0074+  7B5F             
0074+  7B5F             
0074+  7B5F~            	endif
0074+  7B5F~            	endif
0074+  7B5F~            	endif
0074+  7B5F             
0074+  7B67             
0074+  7B67~            	endif
0074+  7B67~            	endif
0074+  7B67             
0075+  7B67 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7B69             	;andA	$F0
0077+  7B69 85 0F       	bitA	00001111b
0078+  7B6B             	\ .push  *, 0 \ BNE  * 		 ; pC is 0
0078+  7B6B             
0078+  7B6B 26 FE       
0079+  7B6D C5 0F       		bitB	1111b
0080+  7B6F             		\ .push  *, 0 \ BEQ  * 
0080+  7B6F             
0080+  7B6F 27 FE       
0081+  7B71 8C 00 7C    			cpX	displayBcd1 + 8 + 4
0082+  7B74             			\ .push  *, 0 \ BNE  * 		
0082+  7B74             
0082+  7B74 26 FE       
0083+  7B76 C4 F0       				andB	11110000b
0084+  7B78             			\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0084+  7B78             
0084+  7B78             
0084+  7B78             
0084+  7B78             
0084+  7B75             
0084+  7B75             
0084+  7B75             
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75             
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75~            			else
0084+  7B75             
0084+  7B75             
0084+  7B75 04          
0084+  7B78             
0084+  7B78 20 FE       
0084+  7B7A             
0084+  7B7A             
0084+  7B7A             
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A             
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A             
0084+  7B7A~            			else
0084+  7B7A~            			else
0084+  7B7A             
0085+  7B7A 8A 0F       				oraA	$F
0086+  7B7C             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0086+  7B7C             
0086+  7B7C             
0086+  7B7C             
0086+  7B7C             
0086+  7B7C             
0086+  7B7C~            			endif
0086+  7B7C~            			endif
0086+  7B7C             
0086+  7B7C~            			endif
0086+  7B7C~            			endif
0086+  7B7C             
0086+  7B79             
0086+  7B79 02          
0086+  7B7A             
0086+  7B7A             
0086+  7B7A~            			endif
0086+  7B7A~            			endif
0086+  7B7A~            			endif
0086+  7B7A             
0086+  7B7C             
0086+  7B7C~            			endif
0086+  7B7C~            			endif
0086+  7B7C             
0087+  7B7C             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0087+  7B7C             
0087+  7B7C             
0087+  7B7C             
0087+  7B7C             
0087+  7B7C             
0087+  7B7C~            		endif
0087+  7B7C~            		endif
0087+  7B7C             
0087+  7B7C~            		endif
0087+  7B7C~            		endif
0087+  7B7C             
0087+  7B70             
0087+  7B70 0B          
0087+  7B71             
0087+  7B71             
0087+  7B71~            		endif
0087+  7B71~            		endif
0087+  7B71~            		endif
0087+  7B71             
0087+  7B7C             
0087+  7B7C~            		endif
0087+  7B7C~            		endif
0087+  7B7C             
0088+  7B7C             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0088+  7B7C             
0088+  7B7C             
0088+  7B7C             
0088+  7B7C             
0088+  7B6C             
0088+  7B6C             
0088+  7B6C             
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C             
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C~            	else
0088+  7B6C             
0088+  7B6C             
0088+  7B6C 11          
0088+  7B7C             
0088+  7B7C 20 FE       
0088+  7B7E             
0088+  7B7E             
0088+  7B7E             
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E             
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E             
0088+  7B7E~            	else
0088+  7B7E~            	else
0088+  7B7E             
0089+  7B7E C4 F0       		andB	11110000b
0090+  7B80             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0090+  7B80             
0090+  7B80             
0090+  7B80             
0090+  7B80             
0090+  7B80             
0090+  7B80~            	endif
0090+  7B80~            	endif
0090+  7B80             
0090+  7B80~            	endif
0090+  7B80~            	endif
0090+  7B80             
0090+  7B7D             
0090+  7B7D 02          
0090+  7B7E             
0090+  7B7E             
0090+  7B7E~            	endif
0090+  7B7E~            	endif
0090+  7B7E~            	endif
0090+  7B7E             
0090+  7B80             
0090+  7B80~            	endif
0090+  7B80~            	endif
0090+  7B80             
0091+  7B80 A7 00       	staA  0, X 
0092+  7B82             	
0093+  7B82 08          	inX
0094+  7B83 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7B86 26 C1       	bne copy24Loop	
0096+  7B88             	
0097+  7B88 39          	rts
0098+  7B89             	
0099+  7B89             blankNonPlayerScores:
0100+  7B89 D6 0E       	ldaB	>lampCol1 + (7-1)
0101+  7B8B C5 02       	bitB	((1 << (2-1))
0102+  7B8D 26 1A       	bne	blankP2
0103+  7B8F C5 04       	bitB	((1 << (3-1))
0104+  7B91 26 22       	bne	blankP3
0105+  7B93 C5 08       	bitB	((1 << (4-1))
0106+  7B95 26 2A       	bne	blankP4
0107+  7B97 C5 10       	bitB	((1 << (5-1))
0108+  7B99 26 32       	bne	blankDone
0109+  7B9B 20 00       	bra	blankP1
0110+  7B9D             blankP1:
0111+  7B9D 86 F0       	ldaA	$F0
0112+  7B9F 9A 74       	oraA	>displayBcd1 + 4
0113+  7BA1 97 74       	staA	displayBcd1 + 4
0114+  7BA3 86 F0       	ldaA	$F0
0115+  7BA5 9A 75       	oraA	>displayBcd1 + 5
0116+  7BA7 97 75       	staA	displayBcd1 + 5
0117+  7BA9             blankP2:
0118+  7BA9 86 F0       	ldaA	$F0
0119+  7BAB 9A 7C       	oraA	>displayBcd1 + 12
0120+  7BAD 97 7C       	staA	displayBcd1 + 12
0121+  7BAF 86 F0       	ldaA	$F0
0122+  7BB1 9A 7D       	oraA	>displayBcd1 + 13
0123+  7BB3 97 7D       	staA	displayBcd1 + 13
0124+  7BB5             blankP3:
0125+  7BB5 86 0F       	ldaA	$0F
0126+  7BB7 9A 74       	oraA	>displayBcd1 + 4
0127+  7BB9 97 74       	staA	displayBcd1 + 4
0128+  7BBB 86 0F       	ldaA	$0F
0129+  7BBD 9A 75       	oraA	>displayBcd1 + 5
0130+  7BBF 97 75       	staA	displayBcd1 + 5
0131+  7BC1             blankP4:
0132+  7BC1 86 0F       	ldaA	$0F
0133+  7BC3 9A 7C       	oraA	>displayBcd1 + 12
0134+  7BC5 97 7C       	staA	displayBcd1 + 12
0135+  7BC7 86 0F       	ldaA	$0F
0136+  7BC9 9A 7D       	oraA	>displayBcd1 + 13
0137+  7BCB 97 7D       	staA	displayBcd1 + 13
0138+  7BCD             blankDone:
0139+  7BCD 39          	rts
0140+  7BCE             	
0141+  7BCE             refreshPlayerScores:
0142+  7BCE BD 7A FF    	jsr copyScores13
0143+  7BD1 BD 7B 44    	jsr copyScores24
0144+  7BD4 BD 7B 89    	jsr blankNonPlayerScores
0145+  7BD7 39          	rts
0146+  7BD8             	
0147+  7BD8             ; add score instantly
0148+  7BD8             ; X = place in p*_1* to add the score to
0149+  7BD8             ; A = amount to add (max 9)
0150+  7BD8             ; tail call
0151+  7BD8             _addScoreI:
0152+  7BD8 AB 00       	addA	0, X
0153+  7BDA             	\ .push  *, 0 \ BCC  *  ; overflowed, need to increment next number
0153+  7BDA             
0153+  7BDA 24 FE       
0154+  7BDC 8B 06       		addA	6	; adjust A back into BCD
0155+  7BDE A7 00       		staA	0, X
0156+  7BE0             addScore_carryOver:		; loop to propagate carry
0157+  7BE0 09          		deX	; go to next decimal place
0158+  7BE1 A6 00       		ldaA	0, X	
0159+  7BE3 81 F9       		cmpA	$F9
0160+  7BE5             		\ .push  *, 0 \ BNE  * 					; if it's already a 9, reset it and carry again
0160+  7BE5             
0160+  7BE5 26 FE       
0161+  7BE7 6F 00       			clr	0, X
0162+  7BE9 27 F5       			beq addScore_carryOver
0163+  7BEB             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif			; otherwise ++ it and done
0163+  7BEB             
0163+  7BEB             
0163+  7BEB             
0163+  7BEB             
0163+  7BE6             
0163+  7BE6             
0163+  7BE6             
0163+  7BE6~            		else			; otherwise ++ it and done
0163+  7BE6~            		else			; otherwise ++ it and done
0163+  7BE6~            		else			; otherwise ++ it and done
0163+  7BE6~            		else			; otherwise ++ it and done
0163+  7BE6             
0163+  7BE6~            		else			; otherwise ++ it and done
0163+  7BE6~            		else			; otherwise ++ it and done
0163+  7BE6~            		else			; otherwise ++ it and done
0163+  7BE6~            		else			; otherwise ++ it and done
0163+  7BE6             
0163+  7BE6             
0163+  7BE6 06          
0163+  7BEB             
0163+  7BEB 20 FE       
0163+  7BED             
0163+  7BED             
0163+  7BED             
0163+  7BED~            		else			; otherwise ++ it and done
0163+  7BED~            		else			; otherwise ++ it and done
0163+  7BED~            		else			; otherwise ++ it and done
0163+  7BED~            		else			; otherwise ++ it and done
0163+  7BED~            		else			; otherwise ++ it and done
0163+  7BED             
0163+  7BED~            		else			; otherwise ++ it and done
0163+  7BED~            		else			; otherwise ++ it and done
0163+  7BED             
0163+  7BED~            		else			; otherwise ++ it and done
0163+  7BED~            		else			; otherwise ++ it and done
0163+  7BED             
0164+  7BED 6C 00       			inc	0, X
0165+  7BEF             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif	
0165+  7BEF             
0165+  7BEF             
0165+  7BEF             
0165+  7BEF             
0165+  7BEF             
0165+  7BEF~            		endif	
0165+  7BEF~            		endif	
0165+  7BEF             
0165+  7BEF~            		endif	
0165+  7BEF~            		endif	
0165+  7BEF             
0165+  7BEC             
0165+  7BEC 02          
0165+  7BED             
0165+  7BED             
0165+  7BED~            		endif	
0165+  7BED~            		endif	
0165+  7BED~            		endif	
0165+  7BED             
0165+  7BEF             
0165+  7BEF~            		endif	
0165+  7BEF~            		endif	
0165+  7BEF             
0166+  7BEF             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0166+  7BEF             
0166+  7BEF             
0166+  7BEF             
0166+  7BEF             
0166+  7BDB             
0166+  7BDB             
0166+  7BDB             
0166+  7BDB~            	else
0166+  7BDB~            	else
0166+  7BDB~            	else
0166+  7BDB~            	else
0166+  7BDB             
0166+  7BDB~            	else
0166+  7BDB~            	else
0166+  7BDB~            	else
0166+  7BDB~            	else
0166+  7BDB             
0166+  7BDB             
0166+  7BDB 15          
0166+  7BEF             
0166+  7BEF 20 FE       
0166+  7BF1             
0166+  7BF1             
0166+  7BF1             
0166+  7BF1~            	else
0166+  7BF1~            	else
0166+  7BF1~            	else
0166+  7BF1~            	else
0166+  7BF1~            	else
0166+  7BF1             
0166+  7BF1~            	else
0166+  7BF1~            	else
0166+  7BF1             
0166+  7BF1~            	else
0166+  7BF1~            	else
0166+  7BF1             
0167+  7BF1 81 F9       		cmpA	$F9
0168+  7BF3             		\ .push  *, 0 \ BLS  *  ; >9 -> need to adjust back into BCD
0168+  7BF3             
0168+  7BF3 23 FE       
0169+  7BF5 8B 06       			addA	6
0170+  7BF7 A7 00       			staA	0, X
0171+  7BF9             addScore_carryDa:
0172+  7BF9 09          			deX
0173+  7BFA A6 00       			ldaA	0, X
0174+  7BFC 81 F9       			cmpA	$F9
0175+  7BFE             			\ .push  *, 0 \ BNE  * 		
0175+  7BFE             
0175+  7BFE 26 FE       
0176+  7C00 6F 00       				clr	0, X
0177+  7C02 27 F5       				beq 	addScore_carryDa
0178+  7C04             			\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0178+  7C04             
0178+  7C04             
0178+  7C04             
0178+  7C04             
0178+  7BFF             
0178+  7BFF             
0178+  7BFF             
0178+  7BFF~            			else
0178+  7BFF~            			else
0178+  7BFF~            			else
0178+  7BFF~            			else
0178+  7BFF             
0178+  7BFF~            			else
0178+  7BFF~            			else
0178+  7BFF~            			else
0178+  7BFF~            			else
0178+  7BFF             
0178+  7BFF             
0178+  7BFF 06          
0178+  7C04             
0178+  7C04 20 FE       
0178+  7C06             
0178+  7C06             
0178+  7C06             
0178+  7C06~            			else
0178+  7C06~            			else
0178+  7C06~            			else
0178+  7C06~            			else
0178+  7C06~            			else
0178+  7C06             
0178+  7C06~            			else
0178+  7C06~            			else
0178+  7C06             
0178+  7C06~            			else
0178+  7C06~            			else
0178+  7C06             
0179+  7C06 6C 00       				inc	0, X
0180+  7C08             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif	
0180+  7C08             
0180+  7C08             
0180+  7C08             
0180+  7C08             
0180+  7C08             
0180+  7C08~            			endif	
0180+  7C08~            			endif	
0180+  7C08             
0180+  7C08~            			endif	
0180+  7C08~            			endif	
0180+  7C08             
0180+  7C05             
0180+  7C05 02          
0180+  7C06             
0180+  7C06             
0180+  7C06~            			endif	
0180+  7C06~            			endif	
0180+  7C06~            			endif	
0180+  7C06             
0180+  7C08             
0180+  7C08~            			endif	
0180+  7C08~            			endif	
0180+  7C08             
0181+  7C08             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0181+  7C08             
0181+  7C08             
0181+  7C08             
0181+  7C08             
0181+  7BF4             
0181+  7BF4             
0181+  7BF4             
0181+  7BF4~            		else
0181+  7BF4~            		else
0181+  7BF4~            		else
0181+  7BF4~            		else
0181+  7BF4             
0181+  7BF4~            		else
0181+  7BF4~            		else
0181+  7BF4~            		else
0181+  7BF4~            		else
0181+  7BF4             
0181+  7BF4             
0181+  7BF4 15          
0181+  7C08             
0181+  7C08 20 FE       
0181+  7C0A             
0181+  7C0A             
0181+  7C0A             
0181+  7C0A~            		else
0181+  7C0A~            		else
0181+  7C0A~            		else
0181+  7C0A~            		else
0181+  7C0A~            		else
0181+  7C0A             
0181+  7C0A~            		else
0181+  7C0A~            		else
0181+  7C0A             
0181+  7C0A~            		else
0181+  7C0A~            		else
0181+  7C0A             
0182+  7C0A A7 00       			staA	0, X
0183+  7C0C             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0183+  7C0C             
0183+  7C0C             
0183+  7C0C             
0183+  7C0C             
0183+  7C0C             
0183+  7C0C~            		endif
0183+  7C0C~            		endif
0183+  7C0C             
0183+  7C0C~            		endif
0183+  7C0C~            		endif
0183+  7C0C             
0183+  7C09             
0183+  7C09 02          
0183+  7C0A             
0183+  7C0A             
0183+  7C0A~            		endif
0183+  7C0A~            		endif
0183+  7C0A~            		endif
0183+  7C0A             
0183+  7C0C             
0183+  7C0C~            		endif
0183+  7C0C~            		endif
0183+  7C0C             
0184+  7C0C             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0184+  7C0C             
0184+  7C0C             
0184+  7C0C             
0184+  7C0C             
0184+  7C0C             
0184+  7C0C~            	endif
0184+  7C0C~            	endif
0184+  7C0C             
0184+  7C0C~            	endif
0184+  7C0C~            	endif
0184+  7C0C             
0184+  7BF0             
0184+  7BF0 1B          
0184+  7BF1             
0184+  7BF1             
0184+  7BF1~            	endif
0184+  7BF1~            	endif
0184+  7BF1~            	endif
0184+  7BF1             
0184+  7C0C             
0184+  7C0C~            	endif
0184+  7C0C~            	endif
0184+  7C0C             
0185+  7C0C             
0186+  7C0C 7E 7B CE    	jmp refreshPlayerScores
0187+  7C0F             	
0188+  7C0F 39          	rts
0189+  7C10             	
0190+  7C10             ; t A,X
0191+  7C10             setXToCurPlayer10:
0192+  7C10 96 0F       	ldaA	>lampCol1 + (8-1)
0193+  7C12 85 01       	bitA	0001b
0194+  7C14 27 04       	beq	_addScore10N_p2
0195+  7C16 CE 01 55    	ldX	pA_10
0196+  7C19 39          	rts
0197+  7C1A             _addScore10N_p2:
0198+  7C1A 85 02       	bitA	0010b
0199+  7C1C 27 04       	beq	_addScore10N_p3
0200+  7C1E CE 01 5B    	ldX	pB_10
0201+  7C21 39          	rts
0202+  7C22             _addScore10N_p3:
0203+  7C22 85 04       	bitA	0100b
0204+  7C24 27 04       	beq	_addScore10N_p4
0205+  7C26 CE 01 61    	ldX	pC_10
0206+  7C29 39          	rts
0207+  7C2A             _addScore10N_p4:
0208+  7C2A CE 01 67    	ldX	pD_10
0209+  7C2D 39          	rts
0210+  7C2E             
0211+  7C2E             ; suspends execution for A ms and returns to queue processor
0212+  7C2E             ; should only be called from switch callbacks
0213+  7C2E             ; trashes everything but B
0214+  7C2E             _delay:	
0215+  7C2E CE 00 7F    	ldX	waitLeft - 1
0216+  7C31             findEmptyLoop:
0217+  7C31 08          	inX
0218+  7C32 6D 00       	tst	0, X
0219+  7C34 26 FB       	bne 	findEmptyLoop 
0220+  7C36             	
0221+  7C36             	; X = first waitLeft that = 0
0222+  7C36 E7 18       	staB	waitReg - waitLeft, X
0223+  7C38 33          	pulB	; A = MSB of PC
0224+  7C39 E7 08       	staB	waitMsb - waitLeft, X
0225+  7C3B 33          	pulB	; A = LSB of PC
0226+  7C3C E7 10       	staB	waitLsb - waitLeft, X
0227+  7C3E A7 00       	staA	0, X
0228+  7C40             	; time and add stored
0229+  7C40 7E 79 86    	jmp skipEvent
0230+  7C43             	
0231+  7C43             resetScores:
0232+  7C43 86 00       	ldaA	00
0233+  7C45 CE 01 55    	ldX	pA_10
0234+  7C48             _zeroScores:
0235+  7C48 A7 00       	staA	0, X
0236+  7C4A 08          	inX
0237+  7C4B 8C 01 63    	cpX	pD_1m + 1
0238+  7C4E 26 F8       	bne	_zeroScores
0239+  7C50             	
0240+  7C50 86 00       	ldaA	0
0241+  7C52 97 12       	staA	curPlayer
0242+  7C54 97 13       	staA	curPlayer + 1
0243+  7C56 86 FF       	ldaA	$FF
0244+  7C58 97 76       	staA	displayBcd1 + 6
0245+  7C5A 97 7E       	staA	displayBcd1 + 14
0246+  7C5C 97 7F       	staA	displayBcd1 + 15
0247+  7C5E             	
0248+  7C5E BD 7B CE    	jsr	refreshPlayerScores
0249+  7C61 39          	rts
0250+  7C62             
0251+  7C62             ; trash all
0252+  7C62             ; delay for ms (16-4000)
0253+  7C62             #DEFINE delay(ms) ldaA ms/16\ jsr _delay
0254+  7C62             	
0255+  7C62             ; trashes B (max 104ms)
0256+  7C62             #DEFINE fireSolenoidFor(n,ms)	ldaB ms/8\ staB solenoid1+n-1 
0257+  7C62             #DEFINE fireSolenoid(n)			fireSolenoidFor(n, 32)
0258+  7C62             
0259+  7C62             ; trashes AX
0260+  7C62             ; place: 1-5 = 10s thru 100ks
0261+  7C62             ; amount: 1-9
0262+  7C62             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0263+  7C62             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0264+  7C62             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0265+  7C62             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0266+  7C62             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0267+  7C62             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0268+  7C62             
0269+  7C62             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0270+  7C62             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0271+  7C62             
0272+  7C62             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0273+  7C62             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0006   7C62             
0007   7C62             #include "game.asm"
0001+  7C62             ; Laser Ball solenoids
0002+  7C62             ;#DEFINE KICKOUT 		01
0003+  7C62             ;#DEFINE LEFT_KICKER 	02
0004+  7C62             ;#DEFINE DROP_LA			03
0005+  7C62             ;#DEFINE DROP_SER		04
0006+  7C62             ;#DEFINE EJECT_HOLE		05
0007+  7C62             ;#DEFINE DROP_BA			06
0008+  7C62             ;#DEFINE DROP_LL			07
0009+  7C62             ;#DEFINE RIGHT_KICKER	08
0010+  7C62             ;#DEFINE SOUND1			09 ; thru 13
0011+  7C62             ;#DEFINE KNOCKER			14
0012+  7C62             ;#DEFINE	FLASHERS		15
0013+  7C62             ;#DEFINE COIN_LOCKOUT	16
0014+  7C62             
0015+  7C62             ; Hot Tip solenoids
0016+  7C62             #DEFINE TOP_EJECT 	01
0017+  7C62             #DEFINE DROP_TIP	02
0018+  7C62             #DEFINE DROP_HOT	03
0019+  7C62             #DEFINE LEFT_EJECT	04
0020+  7C62             #DEFINE OUTHOLE		05
0021+  7C62             #DEFINE CHIME_10	09
0022+  7C62             #DEFINE CHIME_100	10
0023+  7C62             #DEFINE CHIME_1000	11
0024+  7C62             #DEFINE CHIME_10k	12
0025+  7C62             #DEFINE CLICKER		13
0026+  7C62             #DEFINE	KNOCKER		14
0027+  7C62             #DEFINE BUZZER		15
0028+  7C62             
0029+  7C62             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0030+  7C62             #DEFINE done(v)	\
0031+  7C62             #DEFCONT	#IF (v==0)
0032+  7C62             #DEFCONT		\ ldaA 10b
0033+  7C62             #DEFCONT		\ oraA >state
0034+  7C62             #DEFCONT		\ staA state
0035+  7C62             #DEFCONT	\#ENDIF
0036+  7C62             #DEFCONT	\ jmp afterQueueEvent
0037+  7C62             	
0038+  7C62             	
0039+  7C62             	
0040+  7C62             ; adds B x 100 one at a time, then returns
0041+  7C62             ; tail call
0042+  7C62             _addScore100xN:
0043+  7C62 BD 7C 10    	jsr setXToCurPlayer10
0044+  7C65 09          	deX
0045+  7C66             _l_addScore100N:
0046+  7C66 86 01       	ldaA	1
0047+  7C68 BD 7B D8    	jsr _addScoreI
0048+  7C6B 5A          	decB
0049+  7C6C 86 02       	ldaA	2
0050+  7C6E B7 01 49    	staA	solenoid1 + 10 - 1	
0051+  7C71 86 07       	ldaA 115/16\ jsr _delay
0051+  7C73 BD 7C 2E    
0052+  7C76 26 EE       	bne	_l_addScore100N
0053+  7C78 39          	rts
0054+  7C79             _addScore1000xN:
0055+  7C79 BD 7C 10    	jsr setXToCurPlayer10
0056+  7C7C 09          	deX
0057+  7C7D 09          	deX
0058+  7C7E             _l_addScore1000N:
0059+  7C7E 86 01       	ldaA	1
0060+  7C80 BD 7B D8    	jsr _addScoreI
0061+  7C83 5A          	decB
0062+  7C84 86 02       	ldaA	2
0063+  7C86 B7 01 4A    	staA	solenoid1 + 11 - 1	
0064+  7C89 86 07       	ldaA 115/16\ jsr _delay
0064+  7C8B BD 7C 2E    
0065+  7C8E 26 EE       	bne	_l_addScore1000N
0066+  7C90 39          	rts
0067+  7C91             	
0068+  7C91             _addScore10N:
0069+  7C91 BD 7C 10    	jsr setXToCurPlayer10
0070+  7C94 86 01       	ldaA	1
0071+  7C96 BD 7B D8    	jsr _addScoreI
0072+  7C99 86 02       	ldaA	2
0073+  7C9B B7 01 48    	staA	solenoid1 + 09 - 1	
0074+  7C9E 39          	rts
0075+  7C9F             _addScore100N:
0076+  7C9F BD 7C 10    	jsr setXToCurPlayer10
0077+  7CA2 09          	deX
0078+  7CA3 86 01       	ldaA	1
0079+  7CA5 BD 7B D8    	jsr _addScoreI
0080+  7CA8 86 02       	ldaA	2
0081+  7CAA B7 01 49    	staA	solenoid1 + 10 - 1	
0082+  7CAD 39          	rts
0083+  7CAE             _addScore1000N:
0084+  7CAE BD 7C 10    	jsr setXToCurPlayer10
0085+  7CB1 09          	deX
0086+  7CB2 09          	deX
0087+  7CB3 86 01       	ldaA	1
0088+  7CB5 BD 7B D8    	jsr _addScoreI
0089+  7CB8 86 02       	ldaA	2
0090+  7CBA B7 01 4A    	staA	solenoid1 + 11 - 1	
0091+  7CBD 39          	rts
0092+  7CBE             #DEFINE score10() jsr _addScore10N
0093+  7CBE             #DEFINE score100() jsr _addScore100N
0094+  7CBE             #DEFINE score1000() jsr _addScore1000N
0095+  7CBE             #DEFINE advBonus()
0096+  7CBE             	
0097+  7CBE             ; switch callbacks:
0098+  7CBE             
0099+  7DC0             none:	.org $7800 + $500 + 192 ; size of callback table
0100+  7DC0             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0100+  7DC0~            	done(1)
0100+  7DC0~            	done(1)
0100+  7DC0~            	done(1)
0100+  7DC0~            	done(1)
0100+  7DC0             
0100+  7DC0 7E 79 5F    
0101+  7DC3             	
0102+  7DC3             	
0103+  7DC3             startGame:
0104+  7DC3 86 DF       	ldaA ~((1 << (6-1))\ andA >lampCol1 + (8-1)\ staA lampCol1 + (8-1) ; game over
0104+  7DC5 94 0F       
0104+  7DC7 97 0F       
0105+  7DC9             	
0106+  7DC9 C6 04       	ldaB  32/8\ staB solenoid1+12-1 
0106+  7DCB F7 01 4B    
0107+  7DCE 86 07       	ldaA 115/16\ jsr _delay
0107+  7DD0 BD 7C 2E    
0108+  7DD3 C6 04       	ldaB  32/8\ staB solenoid1+12-1 
0108+  7DD5 F7 01 4B    
0109+  7DD8 86 07       	ldaA 115/16\ jsr _delay
0109+  7DDA BD 7C 2E    
0110+  7DDD C6 04       	ldaB  32/8\ staB solenoid1+12-1 
0110+  7DDF F7 01 4B    
0111+  7DE2 86 0E       	ldaA 230/16\ jsr _delay
0111+  7DE4 BD 7C 2E    
0112+  7DE7             	
0113+  7DE7 C6 04       	ldaB  32/8\ staB solenoid1+12-1 
0113+  7DE9 F7 01 4B    
0114+  7DEC 86 07       	ldaA 115/16\ jsr _delay
0114+  7DEE BD 7C 2E    
0115+  7DF1 C6 04       	ldaB  32/8\ staB solenoid1+12-1 
0115+  7DF3 F7 01 4B    
0116+  7DF6 86 07       	ldaA 115/16\ jsr _delay
0116+  7DF8 BD 7C 2E    
0117+  7DFB C6 04       	ldaB  32/8\ staB solenoid1+12-1 
0117+  7DFD F7 01 4B    
0118+  7E00 86 0E       	ldaA 230/16\ jsr _delay
0118+  7E02 BD 7C 2E    
0119+  7E05             	
0120+  7E05 C6 04       	ldaB  32/8\ staB solenoid1+12-1 
0120+  7E07 F7 01 4B    
0121+  7E0A 86 07       	ldaA 115/16\ jsr _delay
0121+  7E0C BD 7C 2E    
0122+  7E0F C6 04       	ldaB  32/8\ staB solenoid1+12-1 
0122+  7E11 F7 01 4B    
0123+  7E14 86 07       	ldaA 115/16\ jsr _delay
0123+  7E16 BD 7C 2E    
0124+  7E19 C6 04       	ldaB  32/8\ staB solenoid1+11-1 
0124+  7E1B F7 01 4A    
0125+  7E1E 86 07       	ldaA 115/16\ jsr _delay
0125+  7E20 BD 7C 2E    
0126+  7E23 C6 04       	ldaB  32/8\ staB solenoid1+10-1 
0126+  7E25 F7 01 49    
0127+  7E28 86 07       	ldaA 115/16\ jsr _delay
0127+  7E2A BD 7C 2E    
0128+  7E2D C6 04       	ldaB  32/8\ staB solenoid1+09-1 
0128+  7E2F F7 01 48    
0129+  7E32 86 07       	ldaA 115/16\ jsr _delay
0129+  7E34 BD 7C 2E    
0130+  7E37             	
0131+  7E37             	
0132+  7E37 B6 22 03    	ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0132+  7E3A 8A 38       
0132+  7E3C B7 22 03    
0133+  7E3F             	
0134+  7E3F C6 04       	ldaB  32/8\ staB solenoid1+2-1 
0134+  7E41 F7 01 41    
0135+  7E44 C6 04       	ldaB  32/8\ staB solenoid1+3-1 
0135+  7E46 F7 01 42    
0136+  7E49             	
0137+  7E49             	; clear lights
0138+  7E49 CE 00 08    	ldX	lampCol1
0139+  7E4C 86 00       	ldaA	0b
0140+  7E4E             lClearLights:
0141+  7E4E A7 00       	staA	0, X
0142+  7E50 A7 98       	staA	flashLampCol1 - lampCol1, X
0143+  7E52 08          	inX
0144+  7E53 8C 00 10    	cpX	lampCol8 + 1
0145+  7E56 26 F6       	bne	lClearLights
0146+  7E58             	;
0147+  7E58             	
0148+  7E58             	; reset scores
0149+  7E58 BD 7C 43    	jsr 	resetScores
0150+  7E5B             	
0151+  7E5B             	; reset ball count
0152+  7E5B 86 10       	ldaA	$10
0153+  7E5D 97 77       	staA	ballCount
0154+  7E5F             
0155+  7E5F C6 00       	ldaB	0
0156+  7E61 D7 13       	staB	curPlayer + 1
0157+  7E63             	
0158+  7E63             	; invalidate playfield
0159+  7E63 86 01       	ldaA	((1 << (1-1))
0160+  7E65 9A A7       	oraA	>flashLampCol1 + (8 - 1)
0161+  7E67 97 A7       	staA	flashLampCol1 + (8 - 1)
0162+  7E69 9A 0F       	oraA	>lampCol1 + (8-1)
0163+  7E6B 97 0F       	staA	lampCol1 + (8-1)
0164+  7E6D             	
0165+  7E6D 86 02       	ldaA ((1 << (2-1))\ oraA >lampCol1 + (7-1)\ staA lampCol1 + (7-1) ; one player
0165+  7E6F 9A 0E       
0165+  7E71 97 0E       
0166+  7E73             	
0167+  7E73 86 01       	ldaA	(1 << (1-1)) ; check outhole
0168+  7E75 95 21       	bitA	>switchRow1 + 2 - 1
0169+  7E77             	\ .push  *, 0 \ BEQ  *  ; ball in hole
0169+  7E77             
0169+  7E77 27 FE       
0170+  7E79 C6 04       		ldaB  32/8\ staB solenoid1+5-1 
0170+  7E7B F7 01 44    
0171+  7E7E             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0171+  7E7E             
0171+  7E7E             
0171+  7E7E             
0171+  7E7E             
0171+  7E7E             
0171+  7E7E~            	endif
0171+  7E7E~            	endif
0171+  7E7E             
0171+  7E7E~            	endif
0171+  7E7E~            	endif
0171+  7E7E             
0171+  7E78             
0171+  7E78 05          
0171+  7E79             
0171+  7E79             
0171+  7E79~            	endif
0171+  7E79~            	endif
0171+  7E79~            	endif
0171+  7E79             
0171+  7E7E             
0171+  7E7E~            	endif
0171+  7E7E~            	endif
0171+  7E7E             
0172+  7E7E             	
0173+  7E7E 39          	rts
0174+  7E7F             	
0175+  7E7F             
0176+  7E7F             	
0177+  7E7F             swTilt: 
0178+  7E7F 86 10       	ldaA ((1 << (5-1))\ oraA >lampCol1 + (8-1)\ staA lampCol1 + (8-1) ; tilt
0178+  7E81 9A 0F       
0178+  7E83 97 0F       
0179+  7E85 B6 22 03    	ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0179+  7E88 84 F7       
0179+  7E8A B7 22 03    
0180+  7E8D             	\#IF (0==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0180+  7E8D             
0180+  7E8D 86 02       
0180+  7E8F BA 01 69    
0180+  7E92 B7 01 69    
0180+  7E95             
0180+  7E95 7E 79 5F    
0181+  7E98             	
0182+  7E98             swStart: 
0183+  7E98 96 0F       	ldaA >lampCol1 + (8-1)
0184+  7E9A 85 20       	bitA ((1 << (6-1))
0185+  7E9C             	\ .push  *, 0 \ BEQ  *  ; in game over
0185+  7E9C             
0185+  7E9C 27 FE       
0186+  7E9E BD 7D C3    		jsr startGame
0187+  7EA1             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif 
0187+  7EA1             
0187+  7EA1             
0187+  7EA1             
0187+  7EA1             
0187+  7E9D             
0187+  7E9D             
0187+  7E9D             
0187+  7E9D~            	else 
0187+  7E9D~            	else 
0187+  7E9D~            	else 
0187+  7E9D~            	else 
0187+  7E9D             
0187+  7E9D~            	else 
0187+  7E9D~            	else 
0187+  7E9D~            	else 
0187+  7E9D~            	else 
0187+  7E9D             
0187+  7E9D             
0187+  7E9D 05          
0187+  7EA1             
0187+  7EA1 20 FE       
0187+  7EA3             
0187+  7EA3             
0187+  7EA3             
0187+  7EA3~            	else 
0187+  7EA3~            	else 
0187+  7EA3~            	else 
0187+  7EA3~            	else 
0187+  7EA3~            	else 
0187+  7EA3             
0187+  7EA3~            	else 
0187+  7EA3~            	else 
0187+  7EA3             
0187+  7EA3~            	else 
0187+  7EA3~            	else 
0187+  7EA3             
0188+  7EA3 86 10       		ldaA	$10
0189+  7EA5 91 77       		cmpA	>ballCount
0190+  7EA7             		\ .push  *, 0 \ BNE  * 		 ; add player
0190+  7EA7             
0190+  7EA7 26 FE       
0191+  7EA9 86 1E       			ldaA	00011110b
0192+  7EAB 94 0E       			andA	>lampCol1 + (7-1) ; player count lights
0193+  7EAD 85 10       			bitA	((1 << (5-1))
0194+  7EAF             			\ .push  *, 0 \ BNE  * 			; if not on P4 already, add player
0194+  7EAF             
0194+  7EAF 26 FE       
0195+  7EB1 48          				aslA
0196+  7EB2 C6 E1       				ldaB	11100001b
0197+  7EB4 D4 0E       				andB	>lampCol1 + (7-1)
0198+  7EB6 D7 0E       				staB	lampCol1 + (7-1)
0199+  7EB8 9A 0E       				oraA	>lampCol1 + (7-1)
0200+  7EBA 97 0E       				staA	lampCol1 + (7-1)
0201+  7EBC             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0201+  7EBC             
0201+  7EBC             
0201+  7EBC             
0201+  7EBC             
0201+  7EBC             
0201+  7EBC~            			endif
0201+  7EBC~            			endif
0201+  7EBC             
0201+  7EBC~            			endif
0201+  7EBC~            			endif
0201+  7EBC             
0201+  7EB0             
0201+  7EB0 0B          
0201+  7EB1             
0201+  7EB1             
0201+  7EB1~            			endif
0201+  7EB1~            			endif
0201+  7EB1~            			endif
0201+  7EB1             
0201+  7EBC             
0201+  7EBC~            			endif
0201+  7EBC~            			endif
0201+  7EBC             
0202+  7EBC             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif ; restart game
0202+  7EBC             
0202+  7EBC             
0202+  7EBC             
0202+  7EBC             
0202+  7EA8             
0202+  7EA8             
0202+  7EA8             
0202+  7EA8~            		else ; restart game
0202+  7EA8~            		else ; restart game
0202+  7EA8~            		else ; restart game
0202+  7EA8~            		else ; restart game
0202+  7EA8             
0202+  7EA8~            		else ; restart game
0202+  7EA8~            		else ; restart game
0202+  7EA8~            		else ; restart game
0202+  7EA8~            		else ; restart game
0202+  7EA8             
0202+  7EA8             
0202+  7EA8 15          
0202+  7EBC             
0202+  7EBC 20 FE       
0202+  7EBE             
0202+  7EBE             
0202+  7EBE             
0202+  7EBE~            		else ; restart game
0202+  7EBE~            		else ; restart game
0202+  7EBE~            		else ; restart game
0202+  7EBE~            		else ; restart game
0202+  7EBE~            		else ; restart game
0202+  7EBE             
0202+  7EBE~            		else ; restart game
0202+  7EBE~            		else ; restart game
0202+  7EBE             
0202+  7EBE~            		else ; restart game
0202+  7EBE~            		else ; restart game
0202+  7EBE             
0203+  7EBE BD 7D C3    			jsr startGame
0204+  7EC1             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif		
0204+  7EC1             
0204+  7EC1             
0204+  7EC1             
0204+  7EC1             
0204+  7EC1             
0204+  7EC1~            		endif		
0204+  7EC1~            		endif		
0204+  7EC1             
0204+  7EC1~            		endif		
0204+  7EC1~            		endif		
0204+  7EC1             
0204+  7EBD             
0204+  7EBD 03          
0204+  7EBE             
0204+  7EBE             
0204+  7EBE~            		endif		
0204+  7EBE~            		endif		
0204+  7EBE~            		endif		
0204+  7EBE             
0204+  7EC1             
0204+  7EC1~            		endif		
0204+  7EC1~            		endif		
0204+  7EC1             
0205+  7EC1             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0205+  7EC1             
0205+  7EC1             
0205+  7EC1             
0205+  7EC1             
0205+  7EC1             
0205+  7EC1~            	endif
0205+  7EC1~            	endif
0205+  7EC1             
0205+  7EC1~            	endif
0205+  7EC1~            	endif
0205+  7EC1             
0205+  7EA2             
0205+  7EA2 1E          
0205+  7EA3             
0205+  7EA3             
0205+  7EA3~            	endif
0205+  7EA3~            	endif
0205+  7EA3~            	endif
0205+  7EA3             
0205+  7EC1             
0205+  7EC1~            	endif
0205+  7EC1~            	endif
0205+  7EC1             
0206+  7EC1             	
0207+  7EC1 BD 7B CE    	jsr refreshPlayerScores
0208+  7EC4             	
0209+  7EC4             	\#IF (0==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0209+  7EC4             
0209+  7EC4 86 02       
0209+  7EC6 BA 01 69    
0209+  7EC9 B7 01 69    
0209+  7ECC             
0209+  7ECC 7E 79 5F    
0210+  7ECF             	
0211+  7ECF             swOuthole: 
0212+  7ECF 96 0F       	ldaA	>lampCol1 + (8-1) ; !game over
0213+  7ED1 85 20       	bitA	((1 << (6-1))
0214+  7ED3             	\ .push  *, 0 \ BNE  * 		 ; !game over
0214+  7ED3             
0214+  7ED3 26 FE       
0215+  7ED5 86 0F       		ldaA	00001111b ; player up lights
0216+  7ED7 95 A7       		bitA	>flashLampCol1 + (8 - 1)	; check if any player is flashing
0217+  7ED9             		\ .push  *, 0 \ BEQ  *  ; any flashing -> playfield invalid
0217+  7ED9             
0217+  7ED9 27 FE       
0218+  7EDB 86 EF       			ldaA ~((1 << (5-1))\ andA >lampCol1 + (8-1)\ staA lampCol1 + (8-1) ; tilt
0218+  7EDD 94 0F       
0218+  7EDF 97 0F       
0219+  7EE1             			
0220+  7EE1 B6 22 03    			ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0220+  7EE4 8A 38       
0220+  7EE6 B7 22 03    
0221+  7EE9 C6 04       			ldaB  32/8\ staB solenoid1+05-1 
0221+  7EEB F7 01 44    
0222+  7EEE             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif ; none flashing -> playfield valid -> end ball
0222+  7EEE             
0222+  7EEE             
0222+  7EEE             
0222+  7EEE             
0222+  7EDA             
0222+  7EDA             
0222+  7EDA             
0222+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0222+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0222+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0222+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0222+  7EDA             
0222+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0222+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0222+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0222+  7EDA~            		else ; none flashing -> playfield valid -> end ball
0222+  7EDA             
0222+  7EDA             
0222+  7EDA 15          
0222+  7EEE             
0222+  7EEE 20 FE       
0222+  7EF0             
0222+  7EF0             
0222+  7EF0             
0222+  7EF0~            		else ; none flashing -> playfield valid -> end ball
0222+  7EF0~            		else ; none flashing -> playfield valid -> end ball
0222+  7EF0~            		else ; none flashing -> playfield valid -> end ball
0222+  7EF0~            		else ; none flashing -> playfield valid -> end ball
0222+  7EF0~            		else ; none flashing -> playfield valid -> end ball
0222+  7EF0             
0222+  7EF0~            		else ; none flashing -> playfield valid -> end ball
0222+  7EF0~            		else ; none flashing -> playfield valid -> end ball
0222+  7EF0             
0222+  7EF0~            		else ; none flashing -> playfield valid -> end ball
0222+  7EF0~            		else ; none flashing -> playfield valid -> end ball
0222+  7EF0             
0223+  7EF0 94 0F       			andA	>lampCol1 + (8-1)
0224+  7EF2 D6 0A       			ldaB	>lampCol1 + (3-1)
0225+  7EF4 C5 01       			bitB	((1 << (1-1))
0226+  7EF6             			\ .push  *, 0 \ BNE  * 		 ; shoot again not lit
0226+  7EF6             
0226+  7EF6 26 FE       
0227+  7EF8             				; go to next player
0228+  7EF8 48          				aslA
0229+  7EF9 7C 00 13    				inc	curPlayer + 1
0230+  7EFC 95 0E       				bitA	>lampCol1 + (7-1)	; is player count < player #
0231+  7EFE             				\ .push  *, 0 \ BEQ  *  ; last player
0231+  7EFE             
0231+  7EFE 27 FE       
0232+  7F00 86 01       					ldaA	00000001b; ; back to player 1
0233+  7F02 C6 00       					ldaB	0
0234+  7F04 D7 13       					staB	curPlayer + 1
0235+  7F06             					
0236+  7F06             					; increase ball count
0237+  7F06 D6 77       					ldaB	>ballCount
0238+  7F08 CB 10       					addB	$10
0239+  7F0A C1 40       					cmpB	$40
0240+  7F0C             					\ .push  *, 0 \ BNE  * 		 ; game over
0240+  7F0C             
0240+  7F0C 26 FE       
0241+  7F0E 86 20       						ldaA ((1 << (6-1))\ oraA >lampCol1 + (8-1)\ staA lampCol1 + (8-1)
0241+  7F10 9A 0F       
0241+  7F12 97 0F       
0242+  7F14 B6 22 03    						ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0242+  7F17 84 F7       
0242+  7F19 B7 22 03    
0243+  7F1C             						\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0243+  7F1C~            						done(1)
0243+  7F1C~            						done(1)
0243+  7F1C~            						done(1)
0243+  7F1C~            						done(1)
0243+  7F1C             
0243+  7F1C 7E 79 5F    
0244+  7F1F             					\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0244+  7F1F             
0244+  7F1F             
0244+  7F1F             
0244+  7F1F             
0244+  7F0D             
0244+  7F0D             
0244+  7F0D             
0244+  7F0D~            					else
0244+  7F0D~            					else
0244+  7F0D~            					else
0244+  7F0D~            					else
0244+  7F0D             
0244+  7F0D~            					else
0244+  7F0D~            					else
0244+  7F0D~            					else
0244+  7F0D~            					else
0244+  7F0D             
0244+  7F0D             
0244+  7F0D 13          
0244+  7F1F             
0244+  7F1F 20 FE       
0244+  7F21             
0244+  7F21             
0244+  7F21             
0244+  7F21~            					else
0244+  7F21~            					else
0244+  7F21~            					else
0244+  7F21~            					else
0244+  7F21~            					else
0244+  7F21             
0244+  7F21~            					else
0244+  7F21~            					else
0244+  7F21             
0244+  7F21~            					else
0244+  7F21~            					else
0244+  7F21             
0245+  7F21 D7 77       						staB	ballCount
0246+  7F23             					\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif		
0246+  7F23             
0246+  7F23             
0246+  7F23             
0246+  7F23             
0246+  7F23             
0246+  7F23~            					endif		
0246+  7F23~            					endif		
0246+  7F23             
0246+  7F23~            					endif		
0246+  7F23~            					endif		
0246+  7F23             
0246+  7F20             
0246+  7F20 02          
0246+  7F21             
0246+  7F21             
0246+  7F21~            					endif		
0246+  7F21~            					endif		
0246+  7F21~            					endif		
0246+  7F21             
0246+  7F23             
0246+  7F23~            					endif		
0246+  7F23~            					endif		
0246+  7F23             
0247+  7F23             				\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0247+  7F23             
0247+  7F23             
0247+  7F23             
0247+  7F23             
0247+  7F23             
0247+  7F23~            				endif
0247+  7F23~            				endif
0247+  7F23             
0247+  7F23~            				endif
0247+  7F23~            				endif
0247+  7F23             
0247+  7EFF             
0247+  7EFF 23          
0247+  7F00             
0247+  7F00             
0247+  7F00~            				endif
0247+  7F00~            				endif
0247+  7F00~            				endif
0247+  7F00             
0247+  7F23             
0247+  7F23~            				endif
0247+  7F23~            				endif
0247+  7F23             
0248+  7F23             				
0249+  7F23 97 0F       				staA	lampCol1 + (8-1)
0250+  7F25             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0250+  7F25             
0250+  7F25             
0250+  7F25             
0250+  7F25             
0250+  7F25             
0250+  7F25~            			endif
0250+  7F25~            			endif
0250+  7F25             
0250+  7F25~            			endif
0250+  7F25~            			endif
0250+  7F25             
0250+  7EF7             
0250+  7EF7 2D          
0250+  7EF8             
0250+  7EF8             
0250+  7EF8~            			endif
0250+  7EF8~            			endif
0250+  7EF8~            			endif
0250+  7EF8             
0250+  7F25             
0250+  7F25~            			endif
0250+  7F25~            			endif
0250+  7F25             
0251+  7F25             			
0252+  7F25             			; flash player light
0253+  7F25 86 0F       			ldaA	00001111b ; player up lights
0254+  7F27 9A A7       			oraA	>flashLampCol1 + (8 - 1)
0255+  7F29 97 A7       			staA	flashLampCol1 + (8 - 1)
0256+  7F2B             			
0257+  7F2B             			
0258+  7F2B B6 22 03    			ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0258+  7F2E 8A 38       
0258+  7F30 B7 22 03    
0259+  7F33             			
0260+  7F33 C6 04       			ldaB  32/8\ staB solenoid1+05-1 
0260+  7F35 F7 01 44    
0261+  7F38             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0261+  7F38             
0261+  7F38             
0261+  7F38             
0261+  7F38             
0261+  7F38             
0261+  7F38~            		endif
0261+  7F38~            		endif
0261+  7F38             
0261+  7F38~            		endif
0261+  7F38~            		endif
0261+  7F38             
0261+  7EEF             
0261+  7EEF 48          
0261+  7EF0             
0261+  7EF0             
0261+  7EF0~            		endif
0261+  7EF0~            		endif
0261+  7EF0~            		endif
0261+  7EF0             
0261+  7F38             
0261+  7F38~            		endif
0261+  7F38~            		endif
0261+  7F38             
0262+  7F38             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif		
0262+  7F38             
0262+  7F38             
0262+  7F38             
0262+  7F38             
0262+  7F38             
0262+  7F38~            	endif		
0262+  7F38~            	endif		
0262+  7F38             
0262+  7F38~            	endif		
0262+  7F38~            	endif		
0262+  7F38             
0262+  7ED4             
0262+  7ED4 63          
0262+  7ED5             
0262+  7ED5             
0262+  7ED5~            	endif		
0262+  7ED5~            	endif		
0262+  7ED5~            	endif		
0262+  7ED5             
0262+  7F38             
0262+  7F38~            	endif		
0262+  7F38~            	endif		
0262+  7F38             
0263+  7F38             	\#IF (0==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0263+  7F38             
0263+  7F38 86 02       
0263+  7F3A BA 01 69    
0263+  7F3D B7 01 69    
0263+  7F40             
0263+  7F40 7E 79 5F    
0264+  7F43             	
0265+  7F43             swLeftEject:
0266+  7F43 96 0F       	ldaA	>lampCol1 + (8-1)
0267+  7F45 85 20       	bitA	((1 << (6-1))
0268+  7F47             	\ .push  *, 0 \ BNE  * 		 ; in game
0268+  7F47             
0268+  7F47 26 FE       
0269+  7F49 86 01       		ldaA ((1 << (1-1))\ oraA >lampCol1 + (3-1)\ staA lampCol1 + (3-1)
0269+  7F4B 9A 0A       
0269+  7F4D 97 0A       
0270+  7F4F 86 40       		ldaA ((1 << (7-1))\ oraA >lampCol1 + (8-1)\ staA lampCol1 + (8-1)
0270+  7F51 9A 0F       
0270+  7F53 97 0F       
0271+  7F55             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0271+  7F55             
0271+  7F55             
0271+  7F55             
0271+  7F55             
0271+  7F55             
0271+  7F55~            	endif
0271+  7F55~            	endif
0271+  7F55             
0271+  7F55~            	endif
0271+  7F55~            	endif
0271+  7F55             
0271+  7F48             
0271+  7F48 0C          
0271+  7F49             
0271+  7F49             
0271+  7F49~            	endif
0271+  7F49~            	endif
0271+  7F49~            	endif
0271+  7F49             
0271+  7F55             
0271+  7F55~            	endif
0271+  7F55~            	endif
0271+  7F55             
0272+  7F55 C6 05       	ldaB	5
0273+  7F57 BD 7C 62    	jsr _addScore100xN
0274+  7F5A C6 04       	ldaB  32/8\ staB solenoid1+04-1 
0274+  7F5C F7 01 43    
0275+  7F5F             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0275+  7F5F~            	done(1)
0275+  7F5F~            	done(1)
0275+  7F5F~            	done(1)
0275+  7F5F~            	done(1)
0275+  7F5F             
0275+  7F5F 7E 79 5F    
0276+  7F62             	
0277+  7F62             swTopEject:
0278+  7F62 C6 05       	ldaB	5
0279+  7F64 BD 7C 62    	jsr _addScore100xN
0280+  7F67 C6 04       	ldaB  32/8\ staB solenoid1+01-1 
0280+  7F69 F7 01 40    
0281+  7F6C             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0281+  7F6C~            	done(1)
0281+  7F6C~            	done(1)
0281+  7F6C~            	done(1)
0281+  7F6C~            	done(1)
0281+  7F6C             
0281+  7F6C 7E 79 5F    
0282+  7F6F             	
0283+  7F6F             swHotTip:
0284+  7F6F 86 19       	ldaA 400/16\ jsr _delay
0284+  7F71 BD 7C 2E    
0285+  7F74 C6 04       	ldaB  32/8\ staB solenoid1+03-1 
0285+  7F76 F7 01 42    
0286+  7F79 C6 04       	ldaB  32/8\ staB solenoid1+02-1 
0286+  7F7B F7 01 41    
0287+  7F7E             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0287+  7F7E~            	done(1)
0287+  7F7E~            	done(1)
0287+  7F7E~            	done(1)
0287+  7F7E~            	done(1)
0287+  7F7E             
0287+  7F7E 7E 79 5F    
0288+  7F81             swLeftOutlane:
0289+  7F81             swRightOutlane:
0290+  7F81             swLeftInlane:
0291+  7F81             swRightInlane:
0292+  7F81 BD 7C AE    	jsr _addScore1000N
0293+  7F84             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0293+  7F84~            	done(1)
0293+  7F84~            	done(1)
0293+  7F84~            	done(1)
0293+  7F84~            	done(1)
0293+  7F84             
0293+  7F84 7E 79 5F    
0294+  7F87             sw10pt:
0295+  7F87 BD 7C 91    	jsr _addScore10N
0296+  7F8A             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0296+  7F8A~            	done(1)
0296+  7F8A~            	done(1)
0296+  7F8A~            	done(1)
0296+  7F8A~            	done(1)
0296+  7F8A             
0296+  7F8A 7E 79 5F    
0297+  7F8D             sw100pt:
0298+  7F8D BD 7C 9F    	jsr _addScore100N
0299+  7F90             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0299+  7F90~            	done(1)
0299+  7F90~            	done(1)
0299+  7F90~            	done(1)
0299+  7F90~            	done(1)
0299+  7F90             
0299+  7F90 7E 79 5F    
0300+  7F93             sw500pt:
0301+  7F93 BD 7C 9F    	jsr _addScore100N
0302+  7F96 C6 04       	ldaB  32/8\ staB solenoid1+10-1 	
0302+  7F98 F7 01 49    
0303+  7F9B 86 07       	ldaA 115/16\ jsr _delay
0303+  7F9D BD 7C 2E    
0304+  7FA0 BD 7C 9F    	jsr _addScore100N
0305+  7FA3 C6 04       	ldaB  32/8\ staB solenoid1+10-1 	
0305+  7FA5 F7 01 49    
0306+  7FA8 86 07       	ldaA 115/16\ jsr _delay
0306+  7FAA BD 7C 2E    
0307+  7FAD BD 7C 9F    	jsr _addScore100N
0308+  7FB0 C6 04       	ldaB  32/8\ staB solenoid1+10-1 	
0308+  7FB2 F7 01 49    
0309+  7FB5 86 07       	ldaA 115/16\ jsr _delay
0309+  7FB7 BD 7C 2E    
0310+  7FBA BD 7C 9F    	jsr _addScore100N
0311+  7FBD C6 04       	ldaB  32/8\ staB solenoid1+10-1 	
0311+  7FBF F7 01 49    
0312+  7FC2 86 07       	ldaA 115/16\ jsr _delay
0312+  7FC4 BD 7C 2E    
0313+  7FC7 BD 7C 9F    	jsr _addScore100N
0314+  7FCA C6 04       	ldaB  32/8\ staB solenoid1+10-1 	
0314+  7FCC F7 01 49    
0315+  7FCF 86 07       	ldaA 115/16\ jsr _delay
0315+  7FD1 BD 7C 2E    
0316+  7FD4             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0316+  7FD4~            	done(1)
0316+  7FD4~            	done(1)
0316+  7FD4~            	done(1)
0316+  7FD4~            	done(1)
0316+  7FD4             
0316+  7FD4 7E 79 5F    
0317+  7FD7             swDropTip:
0318+  7FD7 BD 7C 91    	jsr _addScore10N
0319+  7FDA             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0319+  7FDA~            	done(1)
0319+  7FDA~            	done(1)
0319+  7FDA~            	done(1)
0319+  7FDA~            	done(1)
0319+  7FDA             
0319+  7FDA 7E 79 5F    
0320+  7FDD             swDropHot:
0321+  7FDD BD 7C 91    	jsr _addScore10N
0322+  7FE0             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0322+  7FE0~            	done(1)
0322+  7FE0~            	done(1)
0322+  7FE0~            	done(1)
0322+  7FE0~            	done(1)
0322+  7FE0             
0322+  7FE0 7E 79 5F    
0323+  7FE3             swAdvBonus:
0324+  7FE3             	
0325+  7FE3             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0325+  7FE3~            	done(1)
0325+  7FE3~            	done(1)
0325+  7FE3~            	done(1)
0325+  7FE3~            	done(1)
0325+  7FE3             
0325+  7FE3 7E 79 5F    
0326+  7FE6             swSpinner:
0327+  7FE6 86 23       	ldaA	switchRow1 + 4 - 1
0328+  7FE8 85 20       	bitA	(1 << (6-1))
0329+  7FEA             	\ .push  *, 0 \ BEQ  * 
0329+  7FEA             
0329+  7FEA 27 FE       
0330+  7FEC BD 7C 9F    		jsr _addScore100N
0331+  7FEF 86 0E       		ldaA	$E
0332+  7FF1             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0332+  7FF1             
0332+  7FF1             
0332+  7FF1             
0332+  7FF1             
0332+  7FEB             
0332+  7FEB             
0332+  7FEB             
0332+  7FEB~            	else
0332+  7FEB~            	else
0332+  7FEB~            	else
0332+  7FEB~            	else
0332+  7FEB             
0332+  7FEB~            	else
0332+  7FEB~            	else
0332+  7FEB~            	else
0332+  7FEB~            	else
0332+  7FEB             
0332+  7FEB             
0332+  7FEB 07          
0332+  7FF1             
0332+  7FF1 20 FE       
0332+  7FF3             
0332+  7FF3             
0332+  7FF3             
0332+  7FF3~            	else
0332+  7FF3~            	else
0332+  7FF3~            	else
0332+  7FF3~            	else
0332+  7FF3~            	else
0332+  7FF3             
0332+  7FF3~            	else
0332+  7FF3~            	else
0332+  7FF3             
0332+  7FF3~            	else
0332+  7FF3~            	else
0332+  7FF3             
0333+  7FF3 86 02       		ldaA 10b\ oraA >state\ staA state
0333+  7FF5 BA 01 69    
0333+  7FF8 B7 01 69    
0334+  7FFB 86 00       		ldaA	0
0335+  7FFD             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0335+  7FFD             
0335+  7FFD             
0335+  7FFD             
0335+  7FFD             
0335+  7FFD             
0335+  7FFD~            	endif
0335+  7FFD~            	endif
0335+  7FFD             
0335+  7FFD~            	endif
0335+  7FFD~            	endif
0335+  7FFD             
0335+  7FF2             
0335+  7FF2 0A          
0335+  7FF3             
0335+  7FF3             
0335+  7FF3~            	endif
0335+  7FF3~            	endif
0335+  7FF3~            	endif
0335+  7FF3             
0335+  7FFD             
0335+  7FFD~            	endif
0335+  7FFD~            	endif
0335+  7FFD             
0336+  7FFD B7 01 4C    	staA	solenoid1 + 13 - 1
0337+  8000             	\#IF (1==0)\ ldaA 10b\ oraA >state\ staA state\#ENDIF\ jmp afterQueueEvent
0337+  8000~            	done(1)
0337+  8000~            	done(1)
0337+  8000~            	done(1)
0337+  8000~            	done(1)
0337+  8000             
0337+  8000 7E 79 5F    
0338+  8003             
0339+  8003             	
0340+  8003             	
0341+  8003             ; end callbacks
0342+  8003             	.msfirst
0343+  8003             ; needs to be on $**00 address
0344+  7D00             callbackTable: 	.org $7800 + $500 ; note: TRANSPOSED
0345+  7D00 7E 7F       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0345+  7D02 7E 7F       
0345+  7D04 7E 98       
0345+  7D06 7D C0       
0345+  7D08 7D C0       
0345+  7D0A 7D C0       
0345+  7D0C 7E 7F       
0345+  7D0E 7D C0       
0346+  7D10 7E CF       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw none\.dw none
0346+  7D12 7E 7F       
0346+  7D14 7F 81       
0346+  7D16 7F 81       
0346+  7D18 7F 87       
0346+  7D1A 7F 93       
0346+  7D1C 7D C0       
0346+  7D1E 7D C0       
0347+  7D20 7F D7       	.dw swDropTip	\.dw swDropTip\.dw swDropTip\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0347+  7D22 7F D7       
0347+  7D24 7F D7       
0347+  7D26 7F E3       
0347+  7D28 7F 87       
0347+  7D2A 7F 62       
0347+  7D2C 7F 87       
0347+  7D2E 7D C0       
0348+  7D30 7F DD       	.dw swDropHot	\.dw swDropHot\.dw swDropHot\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw sw100pt\.dw sw500pt
0348+  7D32 7F DD       
0348+  7D34 7F DD       
0348+  7D36 7F 87       
0348+  7D38 7F 43       
0348+  7D3A 7F E6       
0348+  7D3C 7F 8D       
0348+  7D3E 7F 93       
0349+  7D40 7F 81       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0349+  7D42 7F 81       
0349+  7D44 7F 87       
0349+  7D46 7D C0       
0349+  7D48 7F 6F       
0349+  7D4A 7D C0       
0349+  7D4C 7D C0       
0349+  7D4E 7D C0       
0350+  7D50 7D C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0350+  7D52 7D C0       
0350+  7D54 7D C0       
0350+  7D56 7D C0       
0350+  7D58 7D C0       
0350+  7D5A 7D C0       
0350+  7D5C 7D C0       
0350+  7D5E 7D C0       
0351+  7D60 7D C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0351+  7D62 7D C0       
0351+  7D64 7D C0       
0351+  7D66 7D C0       
0351+  7D68 7D C0       
0351+  7D6A 7D C0       
0351+  7D6C 7D C0       
0351+  7D6E 7D C0       
0352+  7D70 7D C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0352+  7D72 7D C0       
0352+  7D74 7D C0       
0352+  7D76 7D C0       
0352+  7D78 7D C0       
0352+  7D7A 7D C0       
0352+  7D7C 7D C0       
0352+  7D7E 7D C0       
0353+  7D80             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0354+  7D80             ; off = how many cycles it must be off for
0355+  7D80             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0356+  7D80             ; gameover = whether the switch is active in gameover or tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0357+  7D80             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0358+  7D80             settleTable: ; must be right after callbackTable
0359+  7D80 87          	.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (1<<7)|(1<<6)|(1<<3)|(2) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 
0359+  7D81 87          
0359+  7D82 CA          
0359+  7D83 47          
0359+  7D84 47          
0359+  7D85 47          
0359+  7D86 87          
0359+  7D87 47          
0360+  7D88 FF          	.db (1<<7)|(1<<6)|(7<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(1) \.db (1<<7)|(0<<6)|(0<<3)|(1) \.db (1<<7)|(0<<6)|(0<<3)|(0) \.db (1<<7)|(0<<6)|(0<<3)|(7) 
0360+  7D89 87          
0360+  7D8A 87          
0360+  7D8B 87          
0360+  7D8C 81          
0360+  7D8D 81          
0360+  7D8E 80          
0360+  7D8F 87          
0361+  7D90 80          	.db (1<<7)|(0<<6)|(0<<3)|(0) \.db (1<<7)|(0<<6)|(0<<3)|(0) \.db (1<<7)|(0<<6)|(0<<3)|(0) \.db (1<<7)|(0<<6)|(0<<3)|(3) \.db (1<<7)|(0<<6)|(0<<3)|(1) \.db (1<<7)|(1<<6)|(7<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(1) \.db (1<<7)|(0<<6)|(0<<3)|(0) 
0361+  7D91 80          
0361+  7D92 80          
0361+  7D93 83          
0361+  7D94 81          
0361+  7D95 FF          
0361+  7D96 81          
0361+  7D97 80          
0362+  7D98 80          	.db (1<<7)|(0<<6)|(0<<3)|(0) \.db (1<<7)|(0<<6)|(0<<3)|(0) \.db (1<<7)|(0<<6)|(0<<3)|(0) \.db (1<<7)|(0<<6)|(0<<3)|(1) \.db (1<<7)|(1<<6)|(7<<3)|(7) \.db (0<<7)|(0<<6)|(0<<3)|(0) \.db (1<<7)|(0<<6)|(0<<3)|(0) \.db (1<<7)|(0<<6)|(0<<3)|(1) 
0362+  7D99 80          
0362+  7D9A 80          
0362+  7D9B 81          
0362+  7D9C FF          
0362+  7D9D 00          
0362+  7D9E 80          
0362+  7D9F 81          
0363+  7DA0 87          	.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(7) \.db (1<<7)|(0<<6)|(0<<3)|(1) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (1<<7)|(0<<6)|(7<<3)|(0) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 
0363+  7DA1 87          
0363+  7DA2 81          
0363+  7DA3 47          
0363+  7DA4 B8          
0363+  7DA5 47          
0363+  7DA6 47          
0363+  7DA7 47          
0364+  7DA8 FF          	.db (1<<7)|(1<<6)|(7<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 
0364+  7DA9 47          
0364+  7DAA 47          
0364+  7DAB 47          
0364+  7DAC 47          
0364+  7DAD 47          
0364+  7DAE 47          
0364+  7DAF 47          
0365+  7DB0 47          	.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 
0365+  7DB1 47          
0365+  7DB2 47          
0365+  7DB3 47          
0365+  7DB4 47          
0365+  7DB5 47          
0365+  7DB6 47          
0365+  7DB7 47          
0366+  7DB8 47          	.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) \.db (0<<7)|(1<<6)|(0<<3)|(7) 0366+  7DB9 47          
0366+  7DBA 47          
0366+  7DBB 47          
0366+  7DBC 47          
0366+  7DBD 47          
0366+  7DBE 47          
0366+  7DBF 47          
0008   7DC0             
0009   6000             .org	$6000
0010   6000 01          	nop
0011   6001             	
0012   7800             main:		.org $7800
0013   7800             resetRam:
0014   7800 CE 00 00    	ldX	RAM
0015   7803 86 00       	ldaA	0
0016   7805             resetRamLoop:
0017   7805 A7 00       	staA	0, X
0018   7807 08          	inX
0019   7808 8C 02 00    	cpX	RAMEnd + 1
0020   780B 26 F8       	bne	resetRamLoop
0021   780D             	
0022   780D             	
0023   780D 86 00       	ldaA 	0
0024   780F 97 00       	staA	temp
0025   7811 86 FF       	ldaA	$FF
0026   7813 97 01       	staA	temp + 1
0027   7815 9E 00       	ldS	>temp
0028   7817             
0029   7817             test:
0030   7817             	
0031   7817             piaSetup:
0032   7817 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   7819 B7 28 01    	staA 	displayStrobeC
0034   781C 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0035   781E B7 28 00    	staA 	displayStrobe
0036   7821 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7823 B7 28 01    	staA 	displayStrobeC
0038   7826             	
0039   7826 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0040   7828 B7 28 03    	staA 	displayBcdC
0041   782B 86 FF       	ldaA 	11111111b	;set display BCD to output
0042   782D B7 28 02    	staA 	displayBcd
0043   7830 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0044   7832 B7 28 03    	staA 	displayBcdC
0045   7835             	
0046   7835 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0047   7837 B7 24 01    	staA 	lampColC
0048   783A 86 FF       	ldaA 	11111111b	;set to output
0049   783C B7 24 00    	staA 	lampCol
0050   783F 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0051   7841 B7 24 01    	staA 	lampColC
0052   7844             	
0053   7844 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0054   7846 B7 24 03    	staA 	lampStrobeC
0055   7849 86 FF       	ldaA 	11111111b	;set to output
0056   784B B7 24 02    	staA 	lampStrobe
0057   784E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0058   7850 B7 24 03    	staA 	lampStrobeC
0059   7853             	
0060   7853 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0061   7855 B7 30 03    	staA 	switchStrobeC
0062   7858 86 FF       	ldaA 	11111111b	;set to output
0063   785A B7 30 02    	staA 	switchStrobe
0064   785D 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0065   785F B7 30 03    	staA 	switchStrobeC
0066   7862             	
0067   7862 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0068   7864 B7 30 01    	staA 	switchRowC
0069   7867 86 00       	ldaA 	00000000b	;set to input
0070   7869 B7 30 00    	staA 	switchRow
0071   786C 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0072   786E B7 30 01    	staA 	switchRowC
0073   7871             	
0074   7871 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0075   7873 B7 22 01    	staA 	solenoidAC
0076   7876 B7 22 03    	staA	solenoidBC
0077   7879 86 FF       	ldaA 	11111111b	;set to output
0078   787B B7 22 00    	staA 	solenoidA
0079   787E B7 22 02    	staA 	solenoidB
0080   7881 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0081   7883 B7 22 01    	staA 	solenoidAC
0082   7886 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0083   7888 B7 22 03    	staA 	solenoidBC
0084   788B             	
0085   788B             ;
0086   788B             
0087   788B 86 00       	ldaA	00
0088   788D D7 70       	staB	displayBcd1
0089   788F             	
0090   788F 86 FF       	ldaA	$FF	
0091   7891 B7 28 00    	staA 	displayStrobe
0092   7894             
0093   7894 86 00       	ldaA	00
0094   7896 97 07       	staA	strobe
0095   7898 B7 01 68    	staA	displayCol
0096   789B             	
0097   789B CE 00 00    	ldX 	0
0098   789E DF 50       	stX		curCol
0099   78A0             	
0100   78A0 86 00       	ldaA	0
0101   78A2 97 10       	staA	curSwitchRowLsb
0102   78A4             	
0103   78A4             ; fill solenoid status with off
0104   78A4 86 00       	ldaA	0
0105   78A6 CE 01 40    	ldX	solenoid1
0106   78A9             lSolDefault:
0107   78A9 A7 00       	staA	0, X
0108   78AB A7 40       	staA	waitLeft - solenoid1, X
0109   78AD 08          	inX
0110   78AE 8C 01 4F    	cpX	solenoid16
0111   78B1 26 F6       	bne	lSolDefault
0112   78B3             	
0113   78B3             ; clear 8 banks
0114   78B3 86 00       	ldaA 	0
0115   78B5 CE 00 00    	ldX	0
0116   78B8             lClear8:
0117   78B8 A7 08       	staA	lampCol1, X
0118   78BA A7 A0       	staA	flashLampCol1, X
0119   78BC A7 80       	staA	waitLeft, X
0120   78BE 08          	inX
0121   78BF 8C 00 08    	cpX	8
0122   78C2 26 F4       	bne 	lClear8
0123   78C4             	
0124   78C4             ; empty settle
0125   78C4 86 00       	ldaA	$00
0126   78C6 CE 01 00    	ldX	settleRow1
0127   78C9             lSettleDefault:
0128   78C9 A7 00       	staA	0, X
0129   78CB 08          	inX
0130   78CC 8C 01 46    	cpX	settleRow8 + 7
0131   78CF 26 F8       	bne	lSettleDefault
0132   78D1             	
0133   78D1             ; empty queue
0134   78D1 86 FF       	ldaA	$FF
0135   78D3 CE 00 60    	ldX	queue
0136   78D6             lEmptyQueue:
0137   78D6 A7 00       	staA	0, X
0138   78D8 08          	inX
0139   78D9 8C 00 67    	cpX	queueEnd
0140   78DC 26 F8       	bne	lEmptyQueue
0141   78DE             	
0142   78DE 86 00       	ldaA	0
0143   78E0 97 54       	staA	queueHead + 0
0144   78E2 97 56       	staA	queueTail + 0
0145   78E4 86 60       	ldaA	queue
0146   78E6 97 55       	staA	queueHead + 1
0147   78E8 97 57       	staA	queueTail + 1
0148   78EA             	
0149   78EA             ; test numbers
0150   78EA 86 20       	ldaA ((1 << (6-1))\ oraA >lampCol1 + (8-1)\ staA lampCol1 + (8-1) ; game over
0150   78EC 9A 0F       
0150   78EE 97 0F       
0151   78F0             
0152   78F0             	
0153   78F0 BD 7C 43    	jsr resetScores
0154   78F3             	
0155   78F3             ; setup complete
0156   78F3 0E          	clI		; enable timer interrupt
0157   78F4             	
0158   78F4             	
0159   78F4             end:
0160   78F4 B6 01 69    	ldaA	>state
0161   78F7 85 04       	bitA	100b
0162   78F9             	\ .push  *, 0 \ BEQ  * 
0162   78F9             
0162   78F9 27 FE       
0163   78FB             		; dec wait timers
0164   78FB CE 00 7F    		ldX	waitLeft - 1
0165   78FE             decWaitTimers:
0166   78FE 08          		inX
0167   78FF A6 00       		ldaA	0, X
0168   7901             		\ .push  *, 0 \ BEQ  * 
0168   7901             
0168   7901 27 FE       
0169   7903 4A          			decA
0170   7904 A7 00       			staA	0, X
0171   7906             			\ .push  *, 0 \ BNE  * 		
0171   7906             
0171   7906 26 FE       
0172   7908 A6 08       				ldaA	waitMsb - waitLeft, X
0173   790A 97 58       				staA	tempQ
0174   790C A6 10       				ldaA	waitLsb - waitLeft, X
0175   790E 97 59       				staA	tempQ + 1
0176   7910 E6 18       				ldaB	waitReg - waitLeft, X
0177   7912 DE 58       				ldX	>tempQ
0178   7914 6E 00       				jmp	0, X
0179   7916             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0179   7916             
0179   7916             
0179   7916             
0179   7916             
0179   7916             
0179   7916~            			endif
0179   7916~            			endif
0179   7916             
0179   7916~            			endif
0179   7916~            			endif
0179   7916             
0179   7907             
0179   7907 0E          
0179   7908             
0179   7908             
0179   7908~            			endif
0179   7908~            			endif
0179   7908~            			endif
0179   7908             
0179   7916             
0179   7916~            			endif
0179   7916~            			endif
0179   7916             
0180   7916             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0180   7916             
0180   7916             
0180   7916             
0180   7916             
0180   7916             
0180   7916~            		endif
0180   7916~            		endif
0180   7916             
0180   7916~            		endif
0180   7916~            		endif
0180   7916             
0180   7902             
0180   7902 13          
0180   7903             
0180   7903             
0180   7903~            		endif
0180   7903~            		endif
0180   7903~            		endif
0180   7903             
0180   7916             
0180   7916~            		endif
0180   7916~            		endif
0180   7916             
0181   7916 8C 00 87    		cpX	waitLeftEnd
0182   7919 26 E3       		bne	decWaitTimers
0183   791B             		
0184   791B B6 01 69    		ldaA	>state		; clear strobe reset bit
0185   791E 84 FB       		andA	11111011b
0186   7920 B7 01 69    		staA	state
0187   7923             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0187   7923             
0187   7923             
0187   7923             
0187   7923             
0187   7923             
0187   7923~            	endif
0187   7923~            	endif
0187   7923             
0187   7923~            	endif
0187   7923~            	endif
0187   7923             
0187   78FA             
0187   78FA 28          
0187   78FB             
0187   78FB             
0187   78FB~            	endif
0187   78FB~            	endif
0187   78FB~            	endif
0187   78FB             
0187   7923             
0187   7923~            	endif
0187   7923~            	endif
0187   7923             
0188   7923             
0189   7923             		
0190   7923             ; pop queue
0191   7923 D6 57       	ldaB	>queueTail + 1
0192   7925 D1 55       	cmpB	>queueHead + 1
0193   7927 27 73       	beq 	skipQueue
0194   7929             	
0195   7929 DE 54       	ldX	>queueHead
0196   792B A6 00       	ldaA	0, X	; A now contains the first queue item
0197   792D             	
0198   792D 16          	tAB
0199   792E C4 3F       	andB	00111111b ; B = callback index
0200   7930             	
0201   7930 D7 59       	staB	tempQ + 1
0202   7932 C6 7D       	ldaB	callbackTable >> 8
0203   7934 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0204   7936 DE 58       	ldX	>tempQ
0205   7938             	
0206   7938 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0207   793A C4 80       	andB 	10000000b ; B set if switch limited to closures
0208   793C             	\ .push  *, 0 \ BEQ  * 
0208   793C             
0208   793C 27 FE       
0209   793E DE 54       		ldX	>queueHead
0210   7940 E4 00       		andB	0, X	; B set if switch limited to closures and event was not a closure
0211   7942 26 42       		bne	skipEvent
0212   7944             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0212   7944             
0212   7944             
0212   7944             
0212   7944             
0212   7944             
0212   7944~            	endif
0212   7944~            	endif
0212   7944             
0212   7944~            	endif
0212   7944~            	endif
0212   7944             
0212   793D             
0212   793D 06          
0212   793E             
0212   793E             
0212   793E~            	endif
0212   793E~            	endif
0212   793E~            	endif
0212   793E             
0212   7944             
0212   7944~            	endif
0212   7944~            	endif
0212   7944             
0213   7944             	
0214   7944 D6 0F       	ldaB	>lampCol1 + (8-1)	; gameover mask
0215   7946 C5 20       	bitB	((1 << (6-1))
0216   7948 26 08       	bne	inGameover
0217   794A D6 0F       	ldaB	>lampCol1 + (8-1) ; tilt bit
0218   794C C5 10       	bitB	((1 << (5-1))
0219   794E 26 02       	bne	inGameover
0220   7950 20 04       	bra gameoverPassed
0221   7952             inGameover:
0222   7952 85 40       	bitA 	01000000b
0223   7954 27 30       	beq	skipEvent	; skip if callback not active in game over
0224   7956             gameoverPassed:
0225   7956             	
0226   7956             	; checked passed, do callback
0227   7956 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0228   7959 DE 58       	ldX	>tempQ
0229   795B EE 00       	ldX	0, X
0230   795D 6E 00       	jmp	0, X
0231   795F             	; everything trashed
0232   795F             afterQueueEvent:
0233   795F 86 02       	ldaA	10b ; no validate bit
0234   7961 B5 01 69    	bitA	>state
0235   7964             	\ .push  *, 0 \ BNE  * 		 ; validate pf
0235   7964             
0235   7964 26 FE       
0236   7966             		; check if playfield invalid
0237   7966 86 0F       		ldaA	00001111b ; player up
0238   7968 95 A7       		bitA	>flashLampCol1 + (8 - 1)
0239   796A             		\ .push  *, 0 \ BEQ  *  ; any flashing -> pf invalid
0239   796A             
0239   796A 27 FE       
0240   796C 43          			comA	; turn off flashing
0241   796D 94 A7       			andA	>flashLampCol1 + (8 - 1)
0242   796F 97 A7       			staA	flashLampCol1 + (8 - 1)
0243   7971 86 FE       			ldaA ~((1 << (1-1))\ andA >lampCol1 + (3-1)\ staA lampCol1 + (3-1) ; shoot again
0243   7973 94 0A       
0243   7975 97 0A       
0244   7977 86 BF       			ldaA ~((1 << (7-1))\ andA >lampCol1 + (8-1)\ staA lampCol1 + (8-1)
0244   7979 94 0F       
0244   797B 97 0F       
0245   797D             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0245   797D             
0245   797D             
0245   797D             
0245   797D             
0245   797D             
0245   797D~            		endif
0245   797D~            		endif
0245   797D             
0245   797D~            		endif
0245   797D~            		endif
0245   797D             
0245   796B             
0245   796B 11          
0245   796C             
0245   796C             
0245   796C~            		endif
0245   796C~            		endif
0245   796C~            		endif
0245   796C             
0245   797D             
0245   797D~            		endif
0245   797D~            		endif
0245   797D             
0246   797D             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0246   797D             
0246   797D             
0246   797D             
0246   797D             
0246   7965             
0246   7965             
0246   7965             
0246   7965~            	else
0246   7965~            	else
0246   7965~            	else
0246   7965~            	else
0246   7965             
0246   7965~            	else
0246   7965~            	else
0246   7965~            	else
0246   7965~            	else
0246   7965             
0246   7965             
0246   7965 19          
0246   797D             
0246   797D 20 FE       
0246   797F             
0246   797F             
0246   797F             
0246   797F~            	else
0246   797F~            	else
0246   797F~            	else
0246   797F~            	else
0246   797F~            	else
0246   797F             
0246   797F~            	else
0246   797F~            	else
0246   797F             
0246   797F~            	else
0246   797F~            	else
0246   797F             
0247   797F             		; clear don't validate bit
0248   797F 43          		comA
0249   7980 B4 01 69    		andA	>state
0250   7983 B7 01 69    		staA	>state
0251   7986             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0251   7986             
0251   7986             
0251   7986             
0251   7986             
0251   7986             
0251   7986~            	endif
0251   7986~            	endif
0251   7986             
0251   7986~            	endif
0251   7986~            	endif
0251   7986             
0251   797E             
0251   797E 07          
0251   797F             
0251   797F             
0251   797F~            	endif
0251   797F~            	endif
0251   797F~            	endif
0251   797F             
0251   7986             
0251   7986~            	endif
0251   7986~            	endif
0251   7986             
0252   7986             	
0253   7986             skipEvent:
0254   7986 B6 01 69    	ldaA	>state
0255   7989 85 04       	bitA	100b
0256   798B             	\ .push  *, 0 \ BNE  * 			; don't process queue if still finishing timers
0256   798B             
0256   798B 26 FE       
0257   798D C6 67       		ldaB	queueEnd
0258   798F D1 55       		cmpB	>queueHead + 1
0259   7991             		\ .push  *, 0 \ BNE  * 		
0259   7991             
0259   7991 26 FE       
0260   7993 C6 60       			ldaB	queue
0261   7995 D7 55       			staB	queueHead + 1
0262   7997             		\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0262   7997             
0262   7997             
0262   7997             
0262   7997             
0262   7992             
0262   7992             
0262   7992             
0262   7992~            		else
0262   7992~            		else
0262   7992~            		else
0262   7992~            		else
0262   7992             
0262   7992~            		else
0262   7992~            		else
0262   7992~            		else
0262   7992~            		else
0262   7992             
0262   7992             
0262   7992 06          
0262   7997             
0262   7997 20 FE       
0262   7999             
0262   7999             
0262   7999             
0262   7999~            		else
0262   7999~            		else
0262   7999~            		else
0262   7999~            		else
0262   7999~            		else
0262   7999             
0262   7999~            		else
0262   7999~            		else
0262   7999             
0262   7999~            		else
0262   7999~            		else
0262   7999             
0263   7999 7C 00 55    			inc	queueHead + 1
0264   799C             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0264   799C             
0264   799C             
0264   799C             
0264   799C             
0264   799C             
0264   799C~            		endif
0264   799C~            		endif
0264   799C             
0264   799C~            		endif
0264   799C~            		endif
0264   799C             
0264   7998             
0264   7998 03          
0264   7999             
0264   7999             
0264   7999~            		endif
0264   7999~            		endif
0264   7999~            		endif
0264   7999             
0264   799C             
0264   799C~            		endif
0264   799C~            		endif
0264   799C             
0265   799C             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0265   799C             
0265   799C             
0265   799C             
0265   799C             
0265   799C             
0265   799C~            	endif
0265   799C~            	endif
0265   799C             
0265   799C~            	endif
0265   799C~            	endif
0265   799C             
0265   798C             
0265   798C 0F          
0265   798D             
0265   798D             
0265   798D~            	endif
0265   798D~            	endif
0265   798D~            	endif
0265   798D             
0265   799C             
0265   799C~            	endif
0265   799C~            	endif
0265   799C             
0266   799C             				
0267   799C             skipQueue:
0268   799C             				
0269   799C             	
0270   799C             				
0271   799C 7E 78 F4    	jmp		end
0272   799F 00 00       	.dw 0
0273   79A1 00 00       	.dw 0
0274   79A3 00 00       	.dw 0
0275   79A5 00 00       	.dw 0
0276   79A7 00 00       	.dw 0
0277   79A9             		
0278   79A9             interrupt:	
0279   79A9 7C 00 02    	inc	counter
0280   79AC 86 00       	ldaA	0
0281   79AE 91 02       	cmpA	>counter
0282   79B0 26 21       	bne	counterHandled
0283   79B2 7C 00 03    	inc 	counter2
0284   79B5 86 04       	ldaA	4
0285   79B7 91 03       	cmpA	>counter2
0286   79B9 26 18       	bne	counterHandled
0287   79BB             	
0288   79BB 86 00       	ldaA	0
0289   79BD 97 03       	staA	counter2
0290   79BF 86 77       	ldaA	01110111b
0291   79C1 91 70       	cmpA	>displayBcd1
0292   79C3 27 08       	beq	on
0293   79C5             	
0294   79C5 86 F0       	ldaA	$F0
0295   79C7             	;staA	lampRow1
0296   79C7 86 77       	ldaA	01110111b
0297   79C9 97 70       	staA	displayBcd1	
0298   79CB 20 06       	bra	counterHandled
0299   79CD             on:
0300   79CD 86 0F       	ldaA	$0F
0301   79CF             	;staA	lampRow1
0302   79CF 86 33       	ldaA	00110011b
0303   79D1 97 70       	staA	displayBcd1	
0304   79D3             
0305   79D3             counterHandled:
0306   79D3             ; move switch column
0307   79D3 96 07       	ldaA	>strobe
0308   79D5 B7 30 02    	staA	switchStrobe
0309   79D8             	
0310   79D8             ; update display 
0311   79D8             	
0312   79D8 DE 50       	ldX	>curCol
0313   79DA B6 01 68    	ldaA	>displayCol
0314   79DD C6 FF       	ldaB 	$FF
0315   79DF F7 28 02    	staB	displayBcd
0316   79E2 B7 28 00    	staA	displayStrobe
0317   79E5 85 08       	bitA	00001000b
0318   79E7             	\ .push  *, 0 \ BNE  * 		
0318   79E7             
0318   79E7 26 FE       
0319   79E9 E6 70       		ldaB	displayBcd1, X
0320   79EB             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0320   79EB             
0320   79EB             
0320   79EB             
0320   79EB             
0320   79E8             
0320   79E8             
0320   79E8             
0320   79E8~            	else
0320   79E8~            	else
0320   79E8~            	else
0320   79E8~            	else
0320   79E8             
0320   79E8~            	else
0320   79E8~            	else
0320   79E8~            	else
0320   79E8~            	else
0320   79E8             
0320   79E8             
0320   79E8 04          
0320   79EB             
0320   79EB 20 FE       
0320   79ED             
0320   79ED             
0320   79ED             
0320   79ED~            	else
0320   79ED~            	else
0320   79ED~            	else
0320   79ED~            	else
0320   79ED~            	else
0320   79ED             
0320   79ED~            	else
0320   79ED~            	else
0320   79ED             
0320   79ED~            	else
0320   79ED~            	else
0320   79ED             
0321   79ED E6 78       		ldaB	displayBcd1 + 8, X
0322   79EF             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0322   79EF             
0322   79EF             
0322   79EF             
0322   79EF             
0322   79EF             
0322   79EF~            	endif
0322   79EF~            	endif
0322   79EF             
0322   79EF~            	endif
0322   79EF~            	endif
0322   79EF             
0322   79EC             
0322   79EC 02          
0322   79ED             
0322   79ED             
0322   79ED~            	endif
0322   79ED~            	endif
0322   79ED~            	endif
0322   79ED             
0322   79EF             
0322   79EF~            	endif
0322   79EF~            	endif
0322   79EF             
0323   79EF F7 28 02    	staB	displayBcd
0324   79F2             	
0325   79F2             ; read switches
0326   79F2             	;jmp updateLamps
0327   79F2 DE 50       	ldX	>curCol
0328   79F4 B6 30 00    	ldaA	>switchRow
0329   79F7 16          	tab
0330   79F8 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0331   79FA             	
0332   79FA D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0333   79FC D7 01       	staB	temp + 1 			; temp = switch / 2
0334   79FE D7 53       	staB	tempX + 1			; tempX = cRAM
0335   7A00 C6 7D       	ldaB	callbackTable >> 8
0336   7A02 D7 00       	staB	temp
0337   7A04 C6 01       	ldaB	cRAM >> 8
0338   7A06 D7 52       	staB	tempX
0339   7A08             	
0340   7A08 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0341   7A0A             	
0342   7A0A             	; temp now contains the beginning of the row in the callbackTable
0343   7A0A             swNext:
0344   7A0A 85 01       	bitA	00000001b	 ; Z set if switch not different
0345   7A0C             	\ .push  *, 0 \ BEQ  * 		; if bit set, switch different
0345   7A0C             
0345   7A0C 27 FE       
0346   7A0E 36          		pshA ; store changed switches left
0347   7A0F DE 52       		ldX	>tempX
0348   7A11 86 18       		ldaA	11000b
0349   7A13 95 02       		bitA	>counter
0350   7A15 27 08       		beq checkSettled ;  skip settling (multiplies settle time by 8)
0351   7A17             			; just check if it's currently settled
0352   7A17 A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0353   7A19 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0354   7A1B 27 33       			beq 	notSettled; A=0 -> settled
0355   7A1D 20 4C       			bra settledEnd
0356   7A1F             checkSettled:
0357   7A1F A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0358   7A21 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0359   7A23 27 2B       		beq 	notSettled; A=0 -> settled
0360   7A25             		; else A > 0 -> settling
0361   7A25 4A          			decA
0362   7A26 A7 00       			staA	0, X	; sets Z if now A = 0
0363   7A28             			\ .push  *, 0 \ BNE  * 		 ; A=0 -> now settled, fire event
0363   7A28             
0363   7A28 26 FE       
0364   7A2A             settled:		
0365   7A2A DE 50       				ldX	>curCol
0366   7A2C 17          				tBA	; A now the bit in row
0367   7A2D A8 20       				eorA	switchRow1, X ; toggle bit in row
0368   7A2F A7 20       				staA	switchRow1, X ; A now state of row
0369   7A31             				
0370   7A31 F5 30 00    				bitB	>switchRow
0371   7A34             				\ .push  *, 0 \ BEQ  *  ; switch now on
0371   7A34             
0371   7A34 27 FE       
0372   7A36 86 40       					ldaA	01000000b
0373   7A38             				\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0373   7A38             
0373   7A38             
0373   7A38             
0373   7A38             
0373   7A35             
0373   7A35             
0373   7A35             
0373   7A35~            				else
0373   7A35~            				else
0373   7A35~            				else
0373   7A35~            				else
0373   7A35             
0373   7A35~            				else
0373   7A35~            				else
0373   7A35~            				else
0373   7A35~            				else
0373   7A35             
0373   7A35             
0373   7A35 04          
0373   7A38             
0373   7A38 20 FE       
0373   7A3A             
0373   7A3A             
0373   7A3A             
0373   7A3A~            				else
0373   7A3A~            				else
0373   7A3A~            				else
0373   7A3A~            				else
0373   7A3A~            				else
0373   7A3A             
0373   7A3A~            				else
0373   7A3A~            				else
0373   7A3A             
0373   7A3A~            				else
0373   7A3A~            				else
0373   7A3A             
0374   7A3A 86 C0       					ldaA	11000000b
0375   7A3C             				\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0375   7A3C             
0375   7A3C             
0375   7A3C             
0375   7A3C             
0375   7A3C             
0375   7A3C~            				endif
0375   7A3C~            				endif
0375   7A3C             
0375   7A3C~            				endif
0375   7A3C~            				endif
0375   7A3C             
0375   7A39             
0375   7A39 02          
0375   7A3A             
0375   7A3A             
0375   7A3A~            				endif
0375   7A3A~            				endif
0375   7A3A~            				endif
0375   7A3A             
0375   7A3C             
0375   7A3C~            				endif
0375   7A3C~            				endif
0375   7A3C             
0376   7A3C 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0377   7A3E             				
0378   7A3E             				; store event
0379   7A3E DE 56       				ldX	>queueTail
0380   7A40 A7 00       				staA	0, X
0381   7A42 7C 00 57    				inc	queueTail + 1
0382   7A45             				
0383   7A45             				; wrap queueTail if necessary
0384   7A45 8C 00 67    				cpX	queueEnd 
0385   7A48             				\ .push  *, 0 \ BNE  * 		
0385   7A48             
0385   7A48 26 FE       
0386   7A4A 86 60       					ldaA	queue 
0387   7A4C 97 57       					staA	queueTail + 1
0388   7A4E             				\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0388   7A4E             
0388   7A4E             
0388   7A4E             
0388   7A4E             
0388   7A4E             
0388   7A4E~            				endif
0388   7A4E~            				endif
0388   7A4E             
0388   7A4E~            				endif
0388   7A4E~            				endif
0388   7A4E             
0388   7A49             
0388   7A49 04          
0388   7A4A             
0388   7A4A             
0388   7A4A~            				endif
0388   7A4A~            				endif
0388   7A4A~            				endif
0388   7A4A             
0388   7A4E             
0388   7A4E~            				endif
0388   7A4E~            				endif
0388   7A4E             
0389   7A4E             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0389   7A4E             
0389   7A4E             
0389   7A4E             
0389   7A4E             
0389   7A4E             
0389   7A4E~            			endif
0389   7A4E~            			endif
0389   7A4E             
0389   7A4E~            			endif
0389   7A4E~            			endif
0389   7A4E             
0389   7A29             
0389   7A29 24          
0389   7A2A             
0389   7A2A             
0389   7A2A~            			endif
0389   7A2A~            			endif
0389   7A2A~            			endif
0389   7A2A             
0389   7A4E             
0389   7A4E~            			endif
0389   7A4E~            			endif
0389   7A4E             
0390   7A4E 20 1B       		bra settledEnd
0391   7A50             notSettled: ; =0 -> was settled, so now it's not
0392   7A50             			; get the settle time
0393   7A50 96 53       			ldaA	>tempX + 1
0394   7A52 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0395   7A54 CE 00 00    			ldX	temp
0396   7A57             			
0397   7A57             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0398   7A57 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0399   7A59             			
0400   7A59             			; need to get correct 3 bits from switch settings
0401   7A59 F5 30 00    			bitB	>switchRow
0402   7A5C             			\ .push  *, 0 \ BEQ  *  ; switch just turned on
0402   7A5C             
0402   7A5C 27 FE       
0403   7A5E 44          				lsrA
0404   7A5F 44          				lsrA
0405   7A60             			\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0405   7A60             
0405   7A60             
0405   7A60             
0405   7A60             
0405   7A5D             
0405   7A5D             
0405   7A5D             
0405   7A5D~            			else
0405   7A5D~            			else
0405   7A5D~            			else
0405   7A5D~            			else
0405   7A5D             
0405   7A5D~            			else
0405   7A5D~            			else
0405   7A5D~            			else
0405   7A5D~            			else
0405   7A5D             
0405   7A5D             
0405   7A5D 04          
0405   7A60             
0405   7A60 20 FE       
0405   7A62             
0405   7A62             
0405   7A62             
0405   7A62~            			else
0405   7A62~            			else
0405   7A62~            			else
0405   7A62~            			else
0405   7A62~            			else
0405   7A62             
0405   7A62~            			else
0405   7A62~            			else
0405   7A62             
0405   7A62~            			else
0405   7A62~            			else
0405   7A62             
0406   7A62 48          				aslA
0407   7A63             			\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0407   7A63             
0407   7A63             
0407   7A63             
0407   7A63             
0407   7A63             
0407   7A63~            			endif
0407   7A63~            			endif
0407   7A63             
0407   7A63~            			endif
0407   7A63~            			endif
0407   7A63             
0407   7A61             
0407   7A61 01          
0407   7A62             
0407   7A62             
0407   7A62~            			endif
0407   7A62~            			endif
0407   7A62~            			endif
0407   7A62             
0407   7A63             
0407   7A63~            			endif
0407   7A63~            			endif
0407   7A63             
0408   7A63 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0409   7A65             						
0410   7A65 DE 52       			ldX	>tempX
0411   7A67 A7 00       			staA	0, X		; start settling	
0412   7A69 27 BF       			beq	settled		; quick out for 0 settle
0413   7A6B             settledEnd:
0414   7A6B             			
0415   7A6B 32          		pulA
0416   7A6C             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0416   7A6C             
0416   7A6C             
0416   7A6C             
0416   7A6C             
0416   7A6C             
0416   7A6C~            	endif
0416   7A6C~            	endif
0416   7A6C             
0416   7A6C~            	endif
0416   7A6C~            	endif
0416   7A6C             
0416   7A0D             
0416   7A0D 5E          
0416   7A0E             
0416   7A0E             
0416   7A0E~            	endif
0416   7A0E~            	endif
0416   7A0E~            	endif
0416   7A0E             
0416   7A6C             
0416   7A6C~            	endif
0416   7A6C~            	endif
0416   7A6C             
0417   7A6C 7C 00 53    	inc tempX + 1
0418   7A6F 58          	aslB
0419   7A70 44          	lsrA			; pop lowest bit off, set Z if A is empty
0420   7A71 26 97       	bne		swNext 	; more 'switched' bits, keep processing 
0421   7A73             	
0422   7A73             	
0423   7A73             ; update lamps
0424   7A73             updateLamps:
0425   7A73             	;jmp updateStrobe
0426   7A73             
0427   7A73 DE 50       	ldX	>curCol
0428   7A75             	
0429   7A75 86 FF       	ldaA	$FF	;lamp row is inverted
0430   7A77 B7 24 00    	staA	lampCol
0431   7A7A 96 07       	ldaA	>strobe
0432   7A7C B7 24 02    	staA	lampStrobe
0433   7A7F             	
0434   7A7F D6 03       	ldaB	>counter2
0435   7A81 A6 08       	ldaA	lampCol1, X
0436   7A83 C5 01       	bitB	1b 
0437   7A85             	\ .push  *, 0 \ BNE  * 		
0437   7A85             
0437   7A85 26 FE       
0438   7A87 A8 A0       		eorA	flashLampCol1, X
0439   7A89 A4 08       		andA	lampCol1, X
0440   7A8B             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0440   7A8B             
0440   7A8B             
0440   7A8B             
0440   7A8B             
0440   7A8B             
0440   7A8B~            	endif
0440   7A8B~            	endif
0440   7A8B             
0440   7A8B~            	endif
0440   7A8B~            	endif
0440   7A8B             
0440   7A86             
0440   7A86 04          
0440   7A87             
0440   7A87             
0440   7A87~            	endif
0440   7A87~            	endif
0440   7A87~            	endif
0440   7A87             
0440   7A8B             
0440   7A8B~            	endif
0440   7A8B~            	endif
0440   7A8B             
0441   7A8B 43          	comA	; inverted
0442   7A8C             	
0443   7A8C B7 24 00    	staA	lampCol
0444   7A8F 86 00       	ldaA	00
0445   7A91             
0446   7A91             ; update solenoids
0447   7A91             	; if a solenoid is set to <254, --
0448   7A91             	; if =255, off, otherwise on
0449   7A91             	; else leave it at 254
0450   7A91             	
0451   7A91 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0452   7A94 86 FE       	ldaA	254
0453   7A96 DE 50       	ldX	>curCol
0454   7A98 E6 40       	ldaB	solenoid1 - cRAM, X
0455   7A9A             	; update solenoid in current 'column' (1-8) 
0456   7A9A A1 40       	cmpA	solenoid1 - cRAM, X
0457   7A9C             	\ .push  *, 0 \ BLO  *  	; solenoid <=254, turn on
0457   7A9C             
0457   7A9C 25 FE       
0458   7A9E             		\ .push  *, 0 \ BLS  * 	; solenoid < 254, decrement
0458   7A9E             
0458   7A9E 23 FE       
0459   7AA0 6A 40       			dec	solenoid1 - cRAM, X
0460   7AA2             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0460   7AA2             
0460   7AA2             
0460   7AA2             
0460   7AA2             
0460   7AA2             
0460   7AA2~            		endif
0460   7AA2~            		endif
0460   7AA2             
0460   7AA2~            		endif
0460   7AA2~            		endif
0460   7AA2             
0460   7A9F             
0460   7A9F 02          
0460   7AA0             
0460   7AA0             
0460   7AA0~            		endif
0460   7AA0~            		endif
0460   7AA0~            		endif
0460   7AA0             
0460   7AA2             
0460   7AA2~            		endif
0460   7AA2~            		endif
0460   7AA2             
0461   7AA2 0D          		sec
0462   7AA3             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0462   7AA3             
0462   7AA3             
0462   7AA3             
0462   7AA3             
0462   7A9D             
0462   7A9D             
0462   7A9D             
0462   7A9D~            	else
0462   7A9D~            	else
0462   7A9D~            	else
0462   7A9D~            	else
0462   7A9D             
0462   7A9D~            	else
0462   7A9D~            	else
0462   7A9D~            	else
0462   7A9D~            	else
0462   7A9D             
0462   7A9D             
0462   7A9D 07          
0462   7AA3             
0462   7AA3 20 FE       
0462   7AA5             
0462   7AA5             
0462   7AA5             
0462   7AA5~            	else
0462   7AA5~            	else
0462   7AA5~            	else
0462   7AA5~            	else
0462   7AA5~            	else
0462   7AA5             
0462   7AA5~            	else
0462   7AA5~            	else
0462   7AA5             
0462   7AA5~            	else
0462   7AA5~            	else
0462   7AA5             
0463   7AA5 0C          		clc
0464   7AA6             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0464   7AA6             
0464   7AA6             
0464   7AA6             
0464   7AA6             
0464   7AA6             
0464   7AA6~            	endif
0464   7AA6~            	endif
0464   7AA6             
0464   7AA6~            	endif
0464   7AA6~            	endif
0464   7AA6             
0464   7AA4             
0464   7AA4 01          
0464   7AA5             
0464   7AA5             
0464   7AA5~            	endif
0464   7AA5~            	endif
0464   7AA5~            	endif
0464   7AA5             
0464   7AA6             
0464   7AA6~            	endif
0464   7AA6~            	endif
0464   7AA6             
0465   7AA6 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0466   7AA9             	; repeat above for second bank
0467   7AA9 A1 48       	cmpA	solenoid9 - cRAM, X
0468   7AAB             	\ .push  *, 0 \ BLO  *  	; solenoid <=254, turn on
0468   7AAB             
0468   7AAB 25 FE       
0469   7AAD             		\ .push  *, 0 \ BLS  * 	; solenoid < 254, decrement
0469   7AAD             
0469   7AAD 23 FE       
0470   7AAF 6A 48       			dec	solenoid9 - cRAM, X
0471   7AB1             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0471   7AB1             
0471   7AB1             
0471   7AB1             
0471   7AB1             
0471   7AB1             
0471   7AB1~            		endif
0471   7AB1~            		endif
0471   7AB1             
0471   7AB1~            		endif
0471   7AB1~            		endif
0471   7AB1             
0471   7AAE             
0471   7AAE 02          
0471   7AAF             
0471   7AAF             
0471   7AAF~            		endif
0471   7AAF~            		endif
0471   7AAF~            		endif
0471   7AAF             
0471   7AB1             
0471   7AB1~            		endif
0471   7AB1~            		endif
0471   7AB1             
0472   7AB1 0D          		sec
0473   7AB2             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0473   7AB2             
0473   7AB2             
0473   7AB2             
0473   7AB2             
0473   7AAC             
0473   7AAC             
0473   7AAC             
0473   7AAC~            	else
0473   7AAC~            	else
0473   7AAC~            	else
0473   7AAC~            	else
0473   7AAC             
0473   7AAC~            	else
0473   7AAC~            	else
0473   7AAC~            	else
0473   7AAC~            	else
0473   7AAC             
0473   7AAC             
0473   7AAC 07          
0473   7AB2             
0473   7AB2 20 FE       
0473   7AB4             
0473   7AB4             
0473   7AB4             
0473   7AB4~            	else
0473   7AB4~            	else
0473   7AB4~            	else
0473   7AB4~            	else
0473   7AB4~            	else
0473   7AB4             
0473   7AB4~            	else
0473   7AB4~            	else
0473   7AB4             
0473   7AB4~            	else
0473   7AB4~            	else
0473   7AB4             
0474   7AB4 0C          		clc
0475   7AB5             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0475   7AB5             
0475   7AB5             
0475   7AB5             
0475   7AB5             
0475   7AB5             
0475   7AB5~            	endif
0475   7AB5~            	endif
0475   7AB5             
0475   7AB5~            	endif
0475   7AB5~            	endif
0475   7AB5             
0475   7AB3             
0475   7AB3 01          
0475   7AB4             
0475   7AB4             
0475   7AB4~            	endif
0475   7AB4~            	endif
0475   7AB4~            	endif
0475   7AB4             
0475   7AB5             
0475   7AB5~            	endif
0475   7AB5~            	endif
0475   7AB5             
0476   7AB5 76 00 29    	ror		solBStatus	
0477   7AB8 7A 00 50    	dec		curCol ; undo inc
0478   7ABB             	
0479   7ABB             ; update strobe	
0480   7ABB             updateStrobe:
0481   7ABB             	;ldX		curCol
0482   7ABB             	;inX 	
0483   7ABB 86 08       	ldaA	8 	; pitch
0484   7ABD 9B 10       	addA	>curSwitchRowLsb
0485   7ABF 97 10       	staA	curSwitchRowLsb
0486   7AC1 78 00 07    	asl	strobe
0487   7AC4 7C 01 68    	inc	displayCol
0488   7AC7 86 00       	ldaA	0
0489   7AC9 91 07       	cmpA	>strobe ; strobe done?  reset
0490   7ACB             	\ .push  *, 0 \ BNE  * 				
0490   7ACB             
0490   7ACB 26 FE       
0491   7ACD 96 28       		ldaA	>solAStatus
0492   7ACF B7 22 00    		staA	solenoidA
0493   7AD2 96 29       		ldaA	>solBStatus
0494   7AD4 B7 22 02    		staA	solenoidB
0495   7AD7             	
0496   7AD7 86 01       		ldaA	00000001b
0497   7AD9 97 07       		staA	strobe
0498   7ADB             		
0499   7ADB             		;ldX 	#0
0500   7ADB             		
0501   7ADB 86 00       		ldaA	0
0502   7ADD 97 50       		staA	curCol
0503   7ADF 97 51       		staA	curCol + 1
0504   7AE1 97 10       		staA	curSwitchRowLsb
0505   7AE3 97 28       		staA	solAStatus
0506   7AE5 97 29       		staA	solBStatus
0507   7AE7             		
0508   7AE7 F6 01 68    		ldaB	>displayCol	; reset display col only if it's > 7 
0509   7AEA C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0510   7AEC             		\ .push  *, 0 \ BLS  * 
0510   7AEC             
0510   7AEC 23 FE       
0511   7AEE B7 01 68    			staA	displayCol
0512   7AF1             		\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0512   7AF1             
0512   7AF1             
0512   7AF1             
0512   7AF1             
0512   7AF1             
0512   7AF1~            		endif
0512   7AF1~            		endif
0512   7AF1             
0512   7AF1~            		endif
0512   7AF1~            		endif
0512   7AF1             
0512   7AED             
0512   7AED 03          
0512   7AEE             
0512   7AEE             
0512   7AEE~            		endif
0512   7AEE~            		endif
0512   7AEE~            		endif
0512   7AEE             
0512   7AF1             
0512   7AF1~            		endif
0512   7AF1~            		endif
0512   7AF1             
0513   7AF1             	
0514   7AF1 B6 01 69    		ldaA	>state
0515   7AF4 8A 04       		oraA	100b
0516   7AF6 B7 01 69    		staA	state
0517   7AF9             	\var1_ .set $\ .pop var3_, var4_\#if (var3_ & 2)==0\#if (var3_ & 1)==0\ .org var4_+1\#if 0==0\var2_ .set var1_-var4_-2+2\#if var2_+127 < 0\ .org var1_\.push $+3, 1\ jmp $\#else\#if var2_-128>0\ .org var1_\.push $+3, 1\ jmp $\#else\.push var1_, 0\ .byte var2_\ .org var1_\ BRA $\ .org var1_+2\#endif\#endif\#else\ .byte var1_-var4_-2+2\ .org var1_\.push $, 0\ 0 $		\#endif\#else\.error "Duplicate ELSE Statement"\#endif\#else\ .error "Misplaced Else"\#endif
0517   7AF9             
0517   7AF9             
0517   7AF9             
0517   7AF9             
0517   7ACC             
0517   7ACC             
0517   7ACC             
0517   7ACC~            	else
0517   7ACC~            	else
0517   7ACC~            	else
0517   7ACC~            	else
0517   7ACC             
0517   7ACC~            	else
0517   7ACC~            	else
0517   7ACC~            	else
0517   7ACC~            	else
0517   7ACC             
0517   7ACC             
0517   7ACC 2E          
0517   7AF9             
0517   7AF9 20 FE       
0517   7AFB             
0517   7AFB             
0517   7AFB             
0517   7AFB~            	else
0517   7AFB~            	else
0517   7AFB~            	else
0517   7AFB~            	else
0517   7AFB~            	else
0517   7AFB             
0517   7AFB~            	else
0517   7AFB~            	else
0517   7AFB             
0517   7AFB~            	else
0517   7AFB~            	else
0517   7AFB             
0518   7AFB 7C 00 51    		inc	curCol + 1
0519   7AFE             	\var1_ .set *\ .pop var3_, var4_\#if (var3_ & 2)==0 \#if (var3_ & 1)==0	\var2_ .set var1_-var4_-2\#if var2_+127 < 0\ .error "Branch Range < -127"\#else\#if var2_-128 > 0\ .error "Branch Range > 128"\#else\ .org var4_+1\ .byte var2_\#endif\#endif\#else	\ .org  var4_-2	\ .word var1_\#endif\ .org	var1_\#else\.error "Wrong Endtype for IF block"\#endif
0519   7AFE             
0519   7AFE             
0519   7AFE             
0519   7AFE             
0519   7AFE             
0519   7AFE~            	endif
0519   7AFE~            	endif
0519   7AFE             
0519   7AFE~            	endif
0519   7AFE~            	endif
0519   7AFE             
0519   7AFA             
0519   7AFA 03          
0519   7AFB             
0519   7AFB             
0519   7AFB~            	endif
0519   7AFB~            	endif
0519   7AFB~            	endif
0519   7AFB             
0519   7AFE             
0519   7AFE~            	endif
0519   7AFE~            	endif
0519   7AFE             
0520   7AFE             	
0521   7AFE 3B          	rti
0522   7AFF             afterInterrupt:
0523   7AFF             
0524   7FF8             pointers: 	.org $7FF8  	
0525   7FF8             	.msfirst
0526   7FF8 79 A9       	.dw interrupt			
0527   7FFA 79 A9       	.dw interrupt			
0528   7FFC 79 A9       	.dw interrupt			
0529   7FFE 78 00       	.dw main
0530   8000             	
0531   8000             	
0532   8000             	.endtasm: Number of errors = 0
