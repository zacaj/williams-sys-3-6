0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             curCol:			.equ RAM + $50 ; +
0041+  0000             tempX:			.equ RAM + $52 ; +
0042+  0000             queueHead:		.equ RAM + $54 ; +
0043+  0000             queueTail:		.equ RAM + $56 ; +
0044+  0000             tempQ:			.equ RAM + $58 ; +
0045+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0046+  0000             queueEnd:		.equ RAM + $67
0047+  0000             ;
0048+  0000             displayBcd1:	.equ RAM + $70
0049+  0000             displayBcd16:	.equ RAM + $7F
0050+  0000             ballCount:		.equ displayBcd1 + 7
0051+  0000             waitLeft: 		.equ RAM + $80
0052+  0000             waitLeftEnd:		.equ RAM + $87
0053+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0054+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0055+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0056+  0000             flashLampCol1:		.equ RAM + $A0
0057+  0000             flashLampCol8:		.equ RAM + $A7
0058+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0059+  0000             
0060+  0000             p_Bonus:		.equ RAM + $B0
0061+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0062+  0000             
0063+  0000             
0064+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0065+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0066+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0067+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0068+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0069+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0070+  0000             #DEFINE s(n) 		(0 + n)
0071+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0072+  0000             pA_10:			.equ pA_1m + 5
0073+  0000             pB_1m:			.equ pA_10 + 1
0074+  0000             pB_10:			.equ pB_1m + 5
0075+  0000             pC_1m:			.equ pB_10 + 1
0076+  0000             pC_10:			.equ pC_1m + 5
0077+  0000             pD_1m:			.equ pC_10 + 1
0078+  0000             pD_10:			.equ pD_1m + 5  
0079+  0000             displayCol:		.equ cRAM + $68
0080+  0000             state:			.equ cRAM + $69	; ? | strobe reset | don't validate | ?
0081+  0000             
0082+  0000             instant:		.equ 4
0083+  0000             debounce:		.equ 1
0084+  0000             slow:			.equ 2
0085+  0000             
0086+  0000             switchSettle:	.equ cRAM + $30
0087+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 74    		cpX	displayBcd1 + 4
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 74    			cpX	displayBcd1 + 4
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7C    		cpX	displayBcd1 + 8 + 4
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7C    			cpX	displayBcd1 + 8 + 4
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0E       	ldaB	>lc(7)
0101+  7C8C C5 02       	bitB	lr(2)
0102+  7C8E 26 1A       	bne	blankP2
0103+  7C90 C5 04       	bitB	lr(3)
0104+  7C92 26 22       	bne	blankP3
0105+  7C94 C5 08       	bitB	lr(4)
0106+  7C96 26 2A       	bne	blankP4
0107+  7C98 C5 10       	bitB	lr(5)
0108+  7C9A 26 32       	bne	blankDone
0109+  7C9C 20 00       	bra	blankP1
0110+  7C9E             blankP1:
0111+  7C9E 86 F0       	ldaA	$F0
0112+  7CA0 9A 74       	oraA	>displayBcd1 + 4
0113+  7CA2 97 74       	staA	displayBcd1 + 4
0114+  7CA4 86 F0       	ldaA	$F0
0115+  7CA6 9A 75       	oraA	>displayBcd1 + 5
0116+  7CA8 97 75       	staA	displayBcd1 + 5
0117+  7CAA             blankP2:
0118+  7CAA 86 F0       	ldaA	$F0
0119+  7CAC 9A 7C       	oraA	>displayBcd1 + 12
0120+  7CAE 97 7C       	staA	displayBcd1 + 12
0121+  7CB0 86 F0       	ldaA	$F0
0122+  7CB2 9A 7D       	oraA	>displayBcd1 + 13
0123+  7CB4 97 7D       	staA	displayBcd1 + 13
0124+  7CB6             blankP3:
0125+  7CB6 86 0F       	ldaA	$0F
0126+  7CB8 9A 74       	oraA	>displayBcd1 + 4
0127+  7CBA 97 74       	staA	displayBcd1 + 4
0128+  7CBC 86 0F       	ldaA	$0F
0129+  7CBE 9A 75       	oraA	>displayBcd1 + 5
0130+  7CC0 97 75       	staA	displayBcd1 + 5
0131+  7CC2             blankP4:
0132+  7CC2 86 0F       	ldaA	$0F
0133+  7CC4 9A 7C       	oraA	>displayBcd1 + 12
0134+  7CC6 97 7C       	staA	displayBcd1 + 12
0135+  7CC8 86 0F       	ldaA	$0F
0136+  7CCA 9A 7D       	oraA	>displayBcd1 + 13
0137+  7CCC 97 7D       	staA	displayBcd1 + 13
0138+  7CCE             blankDone:
0139+  7CCE 39          	rts
0140+  7CCF             	
0141+  7CCF             refreshPlayerScores:
0142+  7CCF BD 7C 00    	jsr copyScores13
0143+  7CD2 BD 7C 45    	jsr copyScores24
0144+  7CD5 BD 7C 8A    	jsr blankNonPlayerScores
0145+  7CD8 39          	rts
0146+  7CD9             	
0147+  7CD9             ; add score instantly
0148+  7CD9             ; X = place in p*_1* to add the score to
0149+  7CD9             ; A = amount to add (max 9)
0150+  7CD9             ; tail call
0151+  7CD9             _addScoreI:
0152+  7CD9 AB 00       	addA	0, X
0153+  7CDB             	ifcs ; overflowed, need to increment next number
0153+  7CDB             
0153+  7CDB 24 FE       
0154+  7CDD 8B 06       		addA	6	; adjust A back into BCD
0155+  7CDF A7 00       		staA	0, X
0156+  7CE1             addScore_carryOver:		; loop to propagate carry
0157+  7CE1 09          		deX	; go to next decimal place
0158+  7CE2 A6 00       		ldaA	0, X	
0159+  7CE4 81 F9       		cmpA	$F9
0160+  7CE6             		ifeq			; if it's already a 9, reset it and carry again
0160+  7CE6             
0160+  7CE6 26 FE       
0161+  7CE8 6F 00       			clr	0, X
0162+  7CEA 27 F5       			beq addScore_carryOver
0163+  7CEC             		else			; otherwise ++ it and done
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7             
0163+  7CE7 06          
0163+  7CEC             
0163+  7CEC 20 FE       
0163+  7CEE             
0163+  7CEE             
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0164+  7CEE 6C 00       			inc	0, X
0165+  7CF0             		endif	
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CED             
0165+  7CED 02          
0165+  7CEE             
0165+  7CEE             
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0166+  7CF0             	else
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC             
0166+  7CDC 15          
0166+  7CF0             
0166+  7CF0 20 FE       
0166+  7CF2             
0166+  7CF2             
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0167+  7CF2 81 F9       		cmpA	$F9
0168+  7CF4             		ifgt ; >9 -> need to adjust back into BCD
0168+  7CF4             
0168+  7CF4 23 FE       
0169+  7CF6 8B 06       			addA	6
0170+  7CF8 A7 00       			staA	0, X
0171+  7CFA             addScore_carryDa:
0172+  7CFA 09          			deX
0173+  7CFB A6 00       			ldaA	0, X
0174+  7CFD 81 F9       			cmpA	$F9
0175+  7CFF             			ifeq
0175+  7CFF             
0175+  7CFF 26 FE       
0176+  7D01 6F 00       				clr	0, X
0177+  7D03 27 F5       				beq 	addScore_carryDa
0178+  7D05             			else
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D00             
0178+  7D00             
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00             
0178+  7D00 06          
0178+  7D05             
0178+  7D05 20 FE       
0178+  7D07             
0178+  7D07             
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0179+  7D07 6C 00       				inc	0, X
0180+  7D09             			endif	
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D06             
0180+  7D06 02          
0180+  7D07             
0180+  7D07             
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0181+  7D09             		else
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5             
0181+  7CF5 15          
0181+  7D09             
0181+  7D09 20 FE       
0181+  7D0B             
0181+  7D0B             
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0182+  7D0B A7 00       			staA	0, X
0183+  7D0D             		endif
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0A             
0183+  7D0A 02          
0183+  7D0B             
0183+  7D0B             
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0184+  7D0D             	endif
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7CF1             
0184+  7CF1 1B          
0184+  7CF2             
0184+  7CF2             
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0185+  7D0D             
0186+  7D0D 7E 7C CF    	jmp refreshPlayerScores
0187+  7D10             	
0188+  7D10 39          	rts
0189+  7D11             	
0190+  7D11             ; t A,X
0191+  7D11             setXToCurPlayer10:
0192+  7D11 96 0F       	ldaA	>lc(8)
0193+  7D13 85 01       	bitA	0001b
0194+  7D15 27 04       	beq	_addScore10N_p2
0195+  7D17 CE 01 55    	ldX	pA_10
0196+  7D1A 39          	rts
0197+  7D1B             _addScore10N_p2:
0198+  7D1B 85 02       	bitA	0010b
0199+  7D1D 27 04       	beq	_addScore10N_p3
0200+  7D1F CE 01 5B    	ldX	pB_10
0201+  7D22 39          	rts
0202+  7D23             _addScore10N_p3:
0203+  7D23 85 04       	bitA	0100b
0204+  7D25 27 04       	beq	_addScore10N_p4
0205+  7D27 CE 01 61    	ldX	pC_10
0206+  7D2A 39          	rts
0207+  7D2B             _addScore10N_p4:
0208+  7D2B CE 01 67    	ldX	pD_10
0209+  7D2E 39          	rts
0210+  7D2F             
0211+  7D2F             ; suspends execution for A ms and returns to queue processor
0212+  7D2F             ; should only be called from switch callbacks
0213+  7D2F             ; trashes everything but B
0214+  7D2F             _delay:	
0215+  7D2F CE 00 7F    	ldX	waitLeft - 1
0216+  7D32             findEmptyLoop:
0217+  7D32 08          	inX
0218+  7D33 6D 00       	tst	0, X
0219+  7D35 26 FB       	bne 	findEmptyLoop 
0220+  7D37             	
0221+  7D37             	; X = first waitLeft that = 0
0222+  7D37 E7 18       	staB	waitReg - waitLeft, X
0223+  7D39 33          	pulB	; A = MSB of PC
0224+  7D3A E7 08       	staB	waitMsb - waitLeft, X
0225+  7D3C 33          	pulB	; A = LSB of PC
0226+  7D3D E7 10       	staB	waitLsb - waitLeft, X
0227+  7D3F A7 00       	staA	0, X
0228+  7D41             	; time and add stored
0229+  7D41 7E 79 A1    	jmp skipEvent
0230+  7D44             	
0231+  7D44             resetScores:
0232+  7D44 86 00       	ldaA	00
0233+  7D46 CE 01 55    	ldX	pA_10
0234+  7D49             _zeroScores:
0235+  7D49 A7 00       	staA	0, X
0236+  7D4B 08          	inX
0237+  7D4C 8C 01 63    	cpX	pD_1m + 1
0238+  7D4F 26 F8       	bne	_zeroScores
0239+  7D51             	
0240+  7D51 86 00       	ldaA	0
0241+  7D53 97 12       	staA	curPlayer
0242+  7D55 97 13       	staA	curPlayer + 1
0243+  7D57 86 FF       	ldaA	$FF
0244+  7D59 97 76       	staA	displayBcd1 + 6
0245+  7D5B 97 7E       	staA	displayBcd1 + 14
0246+  7D5D 97 7F       	staA	displayBcd1 + 15
0247+  7D5F             	
0248+  7D5F BD 7C CF    	jsr	refreshPlayerScores
0249+  7D62 39          	rts
0250+  7D63             
0251+  7D63             ; trash ~B
0252+  7D63             ; delay for ms (8-2000)
0253+  7D63             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0254+  7D63             	
0255+  7D63             ; trashes B (max 104ms)
0256+  7D63             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0257+  7D63             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0258+  7D63             
0259+  7D63             ; trashes AX
0260+  7D63             ; place: 1-5 = 10s thru 100ks
0261+  7D63             ; amount: 1-9
0262+  7D63             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0263+  7D63             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0264+  7D63             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0265+  7D63             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0266+  7D63             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0267+  7D63             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0268+  7D63             
0269+  7D63             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0270+  7D63             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0271+  7D63             
0272+  7D63             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0273+  7D63             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0006   7D63             
0007   7D63             #include "game.asm"
0001+  7D63             ; Laser Ball solenoids
0002+  7D63             ;#DEFINE KICKOUT 		01
0003+  7D63             ;#DEFINE LEFT_KICKER 	02
0004+  7D63             ;#DEFINE DROP_LA			03
0005+  7D63             ;#DEFINE DROP_SER		04
0006+  7D63             ;#DEFINE EJECT_HOLE		05
0007+  7D63             ;#DEFINE DROP_BA			06
0008+  7D63             ;#DEFINE DROP_LL			07
0009+  7D63             ;#DEFINE RIGHT_KICKER	08
0010+  7D63             ;#DEFINE SOUND1			09 ; thru 13
0011+  7D63             ;#DEFINE KNOCKER			14
0012+  7D63             ;#DEFINE	FLASHERS		15
0013+  7D63             ;#DEFINE COIN_LOCKOUT	16
0014+  7D63             
0015+  7D63             ; Hot Tip solenoids
0016+  7D63             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7D63             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7D63             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7D63             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7D63             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7D63             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7D63             #DEFINE CHIME_10	SOL(09, 16)
0023+  7D63             #DEFINE CHIME_100	SOL(10, 16)
0024+  7D63             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7D63             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7D63             #DEFINE CLICKER		SOL(13, 8)
0027+  7D63             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7D63             #DEFINE BUZZER		SOL(15, 100)
0029+  7D63             #DEFINE SHORT_PAUSE 	115
0030+  7D63             
0031+  7D63             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7D63             #DEFINE done(v)	\
0033+  7D63             #DEFCONT	#IF (v==0)
0034+  7D63             #DEFCONT		\ ldaA 10b
0035+  7D63             #DEFCONT		\ oraA >state
0036+  7D63             #DEFCONT		\ staA state
0037+  7D63             #DEFCONT	\#ENDIF
0038+  7D63             #DEFCONT	\ jmp afterQueueEvent
0039+  7D63             	
0040+  7D63             	
0041+  7D63             _addScore10N:
0042+  7D63 BD 7D 11    	jsr setXToCurPlayer10
0043+  7D66 86 01       	ldaA	1
0044+  7D68 BD 7C D9    	jsr _addScoreI
0045+  7D6B 86 02       	fireSolenoidA(CHIME_10)
0045+  7D6D B7 01 48    
0046+  7D70 39          	rts
0047+  7D71             _addScore100N:
0048+  7D71 BD 7D 11    	jsr setXToCurPlayer10
0049+  7D74 09          	deX
0050+  7D75 86 01       	ldaA	1
0051+  7D77 BD 7C D9    	jsr _addScoreI
0052+  7D7A 86 02       	fireSolenoidA(CHIME_100)	
0052+  7D7C B7 01 49    
0053+  7D7F 39          	rts
0054+  7D80             _addScore1000N:
0055+  7D80 BD 7D 11    	jsr setXToCurPlayer10
0056+  7D83 09          	deX
0057+  7D84 09          	deX
0058+  7D85 86 01       	ldaA	1
0059+  7D87 BD 7C D9    	jsr _addScoreI
0060+  7D8A 86 02       	fireSolenoidA(CHIME_1000)
0060+  7D8C B7 01 4A    
0061+  7D8F 39          	rts
0062+  7D90             #DEFINE score10() jsr _addScore10N
0063+  7D90             #DEFINE score100() jsr _addScore100N
0064+  7D90             #DEFINE score1000() jsr _addScore1000N
0065+  7D90             #DEFINE score500() \ jsr _addScore100N
0066+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7D90             #DEFCONT	\ jsr _addScore100N
0069+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7D90             #DEFCONT	\ jsr _addScore100N
0072+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7D90             #DEFCONT	\ jsr _addScore100N
0075+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7D90             #DEFCONT	\ jsr _addScore100N
0078+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7D90             
0081+  7D90             #DEFINE advBonus()	inc p_Bonus
0082+  7D90             	
0083+  7D90             ; switch callbacks:
0084+  7D90             
0085+  60C0             none:	.org $6000 + 192 ; size of callback table
0086+  60C0             	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0             
0086+  60C0 7E 79 77    
0087+  60C3             	
0088+  60C3             bonusLights:
0089+  60C3 86 00       	ldaA	0
0090+  60C5 97 0C       	staA	lc(5)
0091+  60C7 97 0D       	staA	lc(6)
0092+  60C9 7D 00 B0    	tst	p_Bonus
0093+  60CC 27 11       	beq	bonusLights_done
0094+  60CE             	
0095+  60CE 86 80       	lampOn(8,5) ; 1k
0095+  60D0 9A 0C       
0095+  60D2 97 0C       
0096+  60D4             	
0097+  60D4 96 B0       	ldaA	>p_Bonus
0098+  60D6             bonusLights_loop:
0099+  60D6 4A          	decA
0100+  60D7 27 06       	beq 	bonusLights_done
0101+  60D9 0D          	seC
0102+  60DA 79 00 0D    	rol	lc(6)
0103+  60DD 20 F7       	bra	bonusLights_loop
0104+  60DF             	
0105+  60DF             bonusLights_done
0106+  60DF             
0107+  60DF 86 09       	ldaA	9
0108+  60E1 91 B0       	cmpA	>p_Bonus
0109+  60E3             	ifge	
0109+  60E3             
0109+  60E3 25 FE       
0110+  60E5             	else	; bonus >= 10?
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E4             
0110+  60E4             
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4             
0110+  60E4 02          
0110+  60E5             
0110+  60E5 20 FE       
0110+  60E7             
0110+  60E7             
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0111+  60E7 86 0A       		ldaA	10
0112+  60E9 97 B0       		staA	p_Bonus
0113+  60EB 86 40       		lampOn(7,5) ; 10k light
0113+  60ED 9A 0C       
0113+  60EF 97 0C       
0114+  60F1             	endif
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60E6             
0114+  60E6 0A          
0114+  60E7             
0114+  60E7             
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0115+  60F1             	
0116+  60F1 39          	rts
0117+  60F2             	
0118+  60F2             	
0119+  60F2             startBall:
0120+  60F2 86 01       	ldaA	1
0121+  60F4 97 B0       	staA	p_Bonus
0122+  60F6 B6 22 03    	enablePf
0122+  60F9 8A 38       
0122+  60FB B7 22 03    
0123+  60FE             	
0124+  60FE C6 0C       	fireSolenoid(DROP_TIP)
0124+  6100 F7 01 41    
0125+  6103 86 09       	delay(75)
0125+  6105 BD 7D 2F    
0126+  6108 C6 0C       	fireSolenoid(DROP_HOT)
0126+  610A F7 01 42    
0127+  610D 86 0F       	delay(125)
0127+  610F BD 7D 2F    
0128+  6112             	
0129+  6112             	; clear lights
0130+  6112 CE 00 08    	ldX	lampCol1
0131+  6115 86 00       	ldaA	0b
0132+  6117             lClearLights:
0133+  6117 A7 00       	staA	0, X
0134+  6119 A7 98       	staA	flashLampCol1 - lampCol1, X
0135+  611B 08          	inX
0136+  611C 8C 00 0E    	cpX	lc(6) + 1
0137+  611F 26 F6       	bne	lClearLights
0138+  6121             	;
0139+  6121             	
0140+  6121             	; init lights for player data
0141+  6121 DE 12       	ldX	>curPlayer
0142+  6123 A6 B1       	ldaA	p_Ejects, X
0143+  6125 97 0B       	staA	lc(4)
0144+  6127             	
0145+  6127             	; flash player light
0146+  6127 86 0F       	ldaA	00001111b ; player up lights
0147+  6129 9A A7       	oraA	>flc(8)
0148+  612B 97 A7       	staA	flc(8)
0149+  612D             	
0150+  612D 86 01       	ldaA	sr(1) ; check outhole
0151+  612F 95 21       	bitA	>sc(2)
0152+  6131             	ifne ; ball in hole
0152+  6131             
0152+  6131 27 FE       
0153+  6133 C6 02       		fireSolenoid(OUTHOLE)
0153+  6135 F7 01 44    
0154+  6138             	endif
0154+  6138             
0154+  6138             
0154+  6138             
0154+  6138             
0154+  6138             
0154+  6138~            	endif
0154+  6138~            	endif
0154+  6138             
0154+  6138~            	endif
0154+  6138~            	endif
0154+  6138             
0154+  6132             
0154+  6132 05          
0154+  6133             
0154+  6133             
0154+  6133~            	endif
0154+  6133~            	endif
0154+  6133~            	endif
0154+  6133             
0154+  6138             
0154+  6138~            	endif
0154+  6138~            	endif
0154+  6138             
0155+  6138             	
0156+  6138 39          	rts
0157+  6139             	
0158+  6139             	
0159+  6139             startGame:
0160+  6139             	
0161+  6139 C6 02       	fireSolenoid(CHIME_10)
0161+  613B F7 01 48    
0162+  613E 86 0E       	delay(SHORT_PAUSE)
0162+  6140 BD 7D 2F    
0163+  6143 C6 02       	fireSolenoid(CHIME_10)
0163+  6145 F7 01 48    
0164+  6148 86 0E       	delay(SHORT_PAUSE)
0164+  614A BD 7D 2F    
0165+  614D C6 02       	fireSolenoid(CHIME_10)
0165+  614F F7 01 48    
0166+  6152 86 19       	delay(200)
0166+  6154 BD 7D 2F    
0167+  6157             	
0168+  6157 C6 02       	fireSolenoid(CHIME_10)
0168+  6159 F7 01 48    
0169+  615C 86 0E       	delay(SHORT_PAUSE)
0169+  615E BD 7D 2F    
0170+  6161 C6 02       	fireSolenoid(CHIME_10)
0170+  6163 F7 01 48    
0171+  6166 86 0E       	delay(SHORT_PAUSE)
0171+  6168 BD 7D 2F    
0172+  616B C6 02       	fireSolenoid(CHIME_10)
0172+  616D F7 01 48    
0173+  6170 86 19       	delay(200)
0173+  6172 BD 7D 2F    
0174+  6175             	
0175+  6175 C6 02       	fireSolenoid(CHIME_10)
0175+  6177 F7 01 48    
0176+  617A 86 0E       	delay(SHORT_PAUSE)
0176+  617C BD 7D 2F    
0177+  617F C6 02       	fireSolenoid(CHIME_10)
0177+  6181 F7 01 48    
0178+  6184 86 0E       	delay(SHORT_PAUSE)
0178+  6186 BD 7D 2F    
0179+  6189 C6 02       	fireSolenoid(CHIME_100)
0179+  618B F7 01 49    
0180+  618E 86 19       	delay(200)
0180+  6190 BD 7D 2F    
0181+  6193 C6 02       	fireSolenoid(CHIME_1000)
0181+  6195 F7 01 4A    
0182+  6198 86 19       	delay(200)
0182+  619A BD 7D 2F    
0183+  619D C6 02       	fireSolenoid(CHIME_10k)
0183+  619F F7 01 4B    
0184+  61A2 86 12       	delay(150)
0184+  61A4 BD 7D 2F    
0185+  61A7             	
0186+  61A7             	; reset scores
0187+  61A7 BD 7D 44    	jsr 	resetScores
0188+  61AA             	
0189+  61AA             	; reset ball count
0190+  61AA 86 10       	ldaA	$10
0191+  61AC 97 77       	staA	ballCount
0192+  61AE             
0193+  61AE C6 00       	ldaB	0
0194+  61B0 D7 13       	staB	curPlayer + 1
0195+  61B2             	
0196+  61B2 D7 0E       	staB	lc(7)
0197+  61B4 D7 0F       	staB	lc(8)
0198+  61B6 D7 A6       	staB	flc(7)
0199+  61B8 D7 A7       	staB	flc(8)
0200+  61BA             	
0201+  61BA CE 00 00    	ldX	0
0202+  61BD             lInitPlayers:
0203+  61BD C6 01       	ldaB	lr(1)
0204+  61BF E7 B1       	staB	p_Ejects, X
0205+  61C1 08          	inX
0206+  61C2 8C 00 04    	cpX	4
0207+  61C5 26 F6       	bne	lInitPlayers
0208+  61C7             	
0209+  61C7 BD 60 F2    	jsr	startBall
0210+  61CA             	
0211+  61CA             	; invalidate playfield
0212+  61CA 86 01       	ldaA	lr(1)
0213+  61CC 9A 0F       	oraA	>lc(8)
0214+  61CE 97 0F       	staA	lc(8)
0215+  61D0             	
0216+  61D0 86 02       	lampOn(2,7) ; one player
0216+  61D2 9A 0E       
0216+  61D4 97 0E       
0217+  61D6             	
0218+  61D6 86 DF       	lampOff(6,8) ; game over
0218+  61D8 94 0F       
0218+  61DA 97 0F       
0219+  61DC             	
0220+  61DC 39          	rts
0221+  61DD             	
0222+  61DD             
0223+  61DD             	
0224+  61DD             swTilt: 
0225+  61DD 86 10       	lampOn(5,8) ; tilt
0225+  61DF 9A 0F       
0225+  61E1 97 0F       
0226+  61E3 B6 22 03    	disablePf
0226+  61E6 84 F7       
0226+  61E8 B7 22 03    
0227+  61EB             	done(0)
0227+  61EB             
0227+  61EB 86 02       
0227+  61ED BA 01 69    
0227+  61F0 B7 01 69    
0227+  61F3             
0227+  61F3 7E 79 77    
0228+  61F6             	
0229+  61F6             swStart: 
0230+  61F6 96 0F       	ldaA >lc(8)
0231+  61F8 85 20       	bitA lr(6)
0232+  61FA             	ifne ; in game over
0232+  61FA             
0232+  61FA 27 FE       
0233+  61FC BD 61 39    		jsr startGame
0234+  61FF             	else 
0234+  61FF             
0234+  61FF             
0234+  61FF             
0234+  61FF             
0234+  61FB             
0234+  61FB             
0234+  61FB             
0234+  61FB~            	else 
0234+  61FB~            	else 
0234+  61FB~            	else 
0234+  61FB~            	else 
0234+  61FB             
0234+  61FB~            	else 
0234+  61FB~            	else 
0234+  61FB~            	else 
0234+  61FB~            	else 
0234+  61FB             
0234+  61FB             
0234+  61FB 05          
0234+  61FF             
0234+  61FF 20 FE       
0234+  6201             
0234+  6201             
0234+  6201             
0234+  6201~            	else 
0234+  6201~            	else 
0234+  6201~            	else 
0234+  6201~            	else 
0234+  6201~            	else 
0234+  6201             
0234+  6201~            	else 
0234+  6201~            	else 
0234+  6201             
0234+  6201~            	else 
0234+  6201~            	else 
0234+  6201             
0235+  6201 86 10       		ldaA	$10
0236+  6203 91 77       		cmpA	>ballCount
0237+  6205             		ifeq ; add player
0237+  6205             
0237+  6205 26 FE       
0238+  6207 86 1E       			ldaA	00011110b
0239+  6209 94 0E       			andA	>lc(7) ; player count lights
0240+  620B 85 10       			bitA	lr(5)
0241+  620D             			ifeq	; if not on P4 already, add player
0241+  620D             
0241+  620D 26 FE       
0242+  620F 48          				aslA
0243+  6210 C6 E1       				ldaB	11100001b
0244+  6212 D4 0E       				andB	>lc(7)
0245+  6214 D7 0E       				staB	lc(7)
0246+  6216 9A 0E       				oraA	>lc(7)
0247+  6218 97 0E       				staA	lc(7)
0248+  621A             			endif
0248+  621A             
0248+  621A             
0248+  621A             
0248+  621A             
0248+  621A             
0248+  621A~            			endif
0248+  621A~            			endif
0248+  621A             
0248+  621A~            			endif
0248+  621A~            			endif
0248+  621A             
0248+  620E             
0248+  620E 0B          
0248+  620F             
0248+  620F             
0248+  620F~            			endif
0248+  620F~            			endif
0248+  620F~            			endif
0248+  620F             
0248+  621A             
0248+  621A~            			endif
0248+  621A~            			endif
0248+  621A             
0249+  621A             		else ; restart game
0249+  621A             
0249+  621A             
0249+  621A             
0249+  621A             
0249+  6206             
0249+  6206             
0249+  6206             
0249+  6206~            		else ; restart game
0249+  6206~            		else ; restart game
0249+  6206~            		else ; restart game
0249+  6206~            		else ; restart game
0249+  6206             
0249+  6206~            		else ; restart game
0249+  6206~            		else ; restart game
0249+  6206~            		else ; restart game
0249+  6206~            		else ; restart game
0249+  6206             
0249+  6206             
0249+  6206 15          
0249+  621A             
0249+  621A 20 FE       
0249+  621C             
0249+  621C             
0249+  621C             
0249+  621C~            		else ; restart game
0249+  621C~            		else ; restart game
0249+  621C~            		else ; restart game
0249+  621C~            		else ; restart game
0249+  621C~            		else ; restart game
0249+  621C             
0249+  621C~            		else ; restart game
0249+  621C~            		else ; restart game
0249+  621C             
0249+  621C~            		else ; restart game
0249+  621C~            		else ; restart game
0249+  621C             
0250+  621C BD 61 39    			jsr startGame
0251+  621F             		endif		
0251+  621F             
0251+  621F             
0251+  621F             
0251+  621F             
0251+  621F             
0251+  621F~            		endif		
0251+  621F~            		endif		
0251+  621F             
0251+  621F~            		endif		
0251+  621F~            		endif		
0251+  621F             
0251+  621B             
0251+  621B 03          
0251+  621C             
0251+  621C             
0251+  621C~            		endif		
0251+  621C~            		endif		
0251+  621C~            		endif		
0251+  621C             
0251+  621F             
0251+  621F~            		endif		
0251+  621F~            		endif		
0251+  621F             
0252+  621F             	endif
0252+  621F             
0252+  621F             
0252+  621F             
0252+  621F             
0252+  621F             
0252+  621F~            	endif
0252+  621F~            	endif
0252+  621F             
0252+  621F~            	endif
0252+  621F~            	endif
0252+  621F             
0252+  6200             
0252+  6200 1E          
0252+  6201             
0252+  6201             
0252+  6201~            	endif
0252+  6201~            	endif
0252+  6201~            	endif
0252+  6201             
0252+  621F             
0252+  621F~            	endif
0252+  621F~            	endif
0252+  621F             
0253+  621F             	
0254+  621F BD 7C CF    	jsr refreshPlayerScores
0255+  6222             	
0256+  6222             	done(0)
0256+  6222             
0256+  6222 86 02       
0256+  6224 BA 01 69    
0256+  6227 B7 01 69    
0256+  622A             
0256+  622A 7E 79 77    
0257+  622D             	
0258+  622D             swOuthole: 
0259+  622D 86 4B       	delay(600)
0259+  622F BD 7D 2F    
0260+  6232 96 0F       	ldaA	>lc(8) ; !game over
0261+  6234 85 20       	bitA	lr(6)
0262+  6236             	ifeq ; !game over
0262+  6236             
0262+  6236 26 FE       
0263+  6238 86 0F       		ldaA	00001111b ; player up lights
0264+  623A 95 A7       		bitA	>flc(8)	; check if any player is flashing
0265+  623C             		ifne ; any flashing -> playfield invalid
0265+  623C             
0265+  623C 27 FE       
0266+  623E 86 EF       			lampOff(5,8) ; tilt
0266+  6240 94 0F       
0266+  6242 97 0F       
0267+  6244             			
0268+  6244 B6 22 03    			enablePf
0268+  6247 8A 38       
0268+  6249 B7 22 03    
0269+  624C C6 02       			fireSolenoid(OUTHOLE)
0269+  624E F7 01 44    
0270+  6251             		else ; none flashing -> playfield valid -> end ball			
0270+  6251             
0270+  6251             
0270+  6251             
0270+  6251             
0270+  623D             
0270+  623D             
0270+  623D             
0270+  623D~            		else ; none flashing -> playfield valid -> end ball			
0270+  623D~            		else ; none flashing -> playfield valid -> end ball			
0270+  623D~            		else ; none flashing -> playfield valid -> end ball			
0270+  623D~            		else ; none flashing -> playfield valid -> end ball			
0270+  623D             
0270+  623D~            		else ; none flashing -> playfield valid -> end ball			
0270+  623D~            		else ; none flashing -> playfield valid -> end ball			
0270+  623D~            		else ; none flashing -> playfield valid -> end ball			
0270+  623D~            		else ; none flashing -> playfield valid -> end ball			
0270+  623D             
0270+  623D             
0270+  623D 15          
0270+  6251             
0270+  6251 20 FE       
0270+  6253             
0270+  6253             
0270+  6253             
0270+  6253~            		else ; none flashing -> playfield valid -> end ball			
0270+  6253~            		else ; none flashing -> playfield valid -> end ball			
0270+  6253~            		else ; none flashing -> playfield valid -> end ball			
0270+  6253~            		else ; none flashing -> playfield valid -> end ball			
0270+  6253~            		else ; none flashing -> playfield valid -> end ball			
0270+  6253             
0270+  6253~            		else ; none flashing -> playfield valid -> end ball			
0270+  6253~            		else ; none flashing -> playfield valid -> end ball			
0270+  6253             
0270+  6253~            		else ; none flashing -> playfield valid -> end ball			
0270+  6253~            		else ; none flashing -> playfield valid -> end ball			
0270+  6253             
0271+  6253             swOuthole_bonusLoop:
0272+  6253 BD 7D 80    			score1000()
0273+  6256 96 09       			ldaA	>lc(2) ; double bonus
0274+  6258 85 04       			bitA	lr(3)
0275+  625A             			ifne 
0275+  625A             
0275+  625A 27 FE       
0276+  625C 86 0C       				delay(100)
0276+  625E BD 7D 2F    
0277+  6261 BD 7D 80    				score1000()
0278+  6264             			endif
0278+  6264             
0278+  6264             
0278+  6264             
0278+  6264             
0278+  6264             
0278+  6264~            			endif
0278+  6264~            			endif
0278+  6264             
0278+  6264~            			endif
0278+  6264~            			endif
0278+  6264             
0278+  625B             
0278+  625B 08          
0278+  625C             
0278+  625C             
0278+  625C~            			endif
0278+  625C~            			endif
0278+  625C~            			endif
0278+  625C             
0278+  6264             
0278+  6264~            			endif
0278+  6264~            			endif
0278+  6264             
0279+  6264 7A 00 B0    			dec	p_Bonus
0280+  6267             			;jsr	bonusLights
0281+  6267 86 19       			delay(200)
0281+  6269 BD 7D 2F    
0282+  626C 7D 00 B0    			tst	p_Bonus
0283+  626F 26 E2       			bne	swOuthole_bonusLoop
0284+  6271             		
0285+  6271 86 0F       			ldaA	00001111b ; player up lights
0286+  6273 94 0F       			andA	>lc(8) ; remove non-player up lights from col 8 for processing
0287+  6275 D6 0A       			ldaB	>lc(3) ; check shoot again light
0288+  6277 C5 01       			bitB	lr(1)
0289+  6279             			ifeq ; shoot again not lit
0289+  6279             
0289+  6279 26 FE       
0290+  627B             				; store player's data
0291+  627B DE 12       				ldX	>curPlayer
0292+  627D D6 0B       				ldaB	>lc(4)
0293+  627F E7 B1       				staB	p_Ejects, X
0294+  6281             			
0295+  6281             				; go to next player
0296+  6281 48          				aslA
0297+  6282 7C 00 13    				inc	curPlayer + 1
0298+  6285 95 0E       				bitA	>lc(7)	; is player count < player #
0299+  6287             				ifne ; last player
0299+  6287             
0299+  6287 27 FE       
0300+  6289 86 01       					ldaA	00000001b; ; back to player 1
0301+  628B C6 00       					ldaB	0
0302+  628D D7 13       					staB	curPlayer + 1
0303+  628F             					
0304+  628F             					; increase ball count
0305+  628F D6 77       					ldaB	>ballCount
0306+  6291 CB 10       					addB	$10
0307+  6293 C1 40       					cmpB	$40
0308+  6295             					ifeq ; game over
0308+  6295             
0308+  6295 26 FE       
0309+  6297 86 20       						lampOn(6,8)
0309+  6299 9A 0F       
0309+  629B 97 0F       
0310+  629D B6 22 03    						disablePf
0310+  62A0 84 F7       
0310+  62A2 B7 22 03    
0311+  62A5             						done(1)
0311+  62A5~            						done(1)
0311+  62A5~            						done(1)
0311+  62A5~            						done(1)
0311+  62A5~            						done(1)
0311+  62A5             
0311+  62A5 7E 79 77    
0312+  62A8             					else
0312+  62A8             
0312+  62A8             
0312+  62A8             
0312+  62A8             
0312+  6296             
0312+  6296             
0312+  6296             
0312+  6296~            					else
0312+  6296~            					else
0312+  6296~            					else
0312+  6296~            					else
0312+  6296             
0312+  6296~            					else
0312+  6296~            					else
0312+  6296~            					else
0312+  6296~            					else
0312+  6296             
0312+  6296             
0312+  6296 13          
0312+  62A8             
0312+  62A8 20 FE       
0312+  62AA             
0312+  62AA             
0312+  62AA             
0312+  62AA~            					else
0312+  62AA~            					else
0312+  62AA~            					else
0312+  62AA~            					else
0312+  62AA~            					else
0312+  62AA             
0312+  62AA~            					else
0312+  62AA~            					else
0312+  62AA             
0312+  62AA~            					else
0312+  62AA~            					else
0312+  62AA             
0313+  62AA D7 77       						staB	ballCount
0314+  62AC             					endif		
0314+  62AC             
0314+  62AC             
0314+  62AC             
0314+  62AC             
0314+  62AC             
0314+  62AC~            					endif		
0314+  62AC~            					endif		
0314+  62AC             
0314+  62AC~            					endif		
0314+  62AC~            					endif		
0314+  62AC             
0314+  62A9             
0314+  62A9 02          
0314+  62AA             
0314+  62AA             
0314+  62AA~            					endif		
0314+  62AA~            					endif		
0314+  62AA~            					endif		
0314+  62AA             
0314+  62AC             
0314+  62AC~            					endif		
0314+  62AC~            					endif		
0314+  62AC             
0315+  62AC             				endif
0315+  62AC             
0315+  62AC             
0315+  62AC             
0315+  62AC             
0315+  62AC             
0315+  62AC~            				endif
0315+  62AC~            				endif
0315+  62AC             
0315+  62AC~            				endif
0315+  62AC~            				endif
0315+  62AC             
0315+  6288             
0315+  6288 23          
0315+  6289             
0315+  6289             
0315+  6289~            				endif
0315+  6289~            				endif
0315+  6289~            				endif
0315+  6289             
0315+  62AC             
0315+  62AC~            				endif
0315+  62AC~            				endif
0315+  62AC             
0316+  62AC             				
0317+  62AC 97 0F       				staA	lc(8)
0318+  62AE             			endif
0318+  62AE             
0318+  62AE             
0318+  62AE             
0318+  62AE             
0318+  62AE             
0318+  62AE~            			endif
0318+  62AE~            			endif
0318+  62AE             
0318+  62AE~            			endif
0318+  62AE~            			endif
0318+  62AE             
0318+  627A             
0318+  627A 33          
0318+  627B             
0318+  627B             
0318+  627B~            			endif
0318+  627B~            			endif
0318+  627B~            			endif
0318+  627B             
0318+  62AE             
0318+  62AE~            			endif
0318+  62AE~            			endif
0318+  62AE             
0319+  62AE             			
0320+  62AE BD 60 F2    			jsr	startBall
0321+  62B1             		endif
0321+  62B1             
0321+  62B1             
0321+  62B1             
0321+  62B1             
0321+  62B1             
0321+  62B1~            		endif
0321+  62B1~            		endif
0321+  62B1             
0321+  62B1~            		endif
0321+  62B1~            		endif
0321+  62B1             
0321+  6252             
0321+  6252 5E          
0321+  6253             
0321+  6253             
0321+  6253~            		endif
0321+  6253~            		endif
0321+  6253~            		endif
0321+  6253             
0321+  62B1             
0321+  62B1~            		endif
0321+  62B1~            		endif
0321+  62B1             
0322+  62B1             	endif		
0322+  62B1             
0322+  62B1             
0322+  62B1             
0322+  62B1             
0322+  62B1             
0322+  62B1~            	endif		
0322+  62B1~            	endif		
0322+  62B1             
0322+  62B1~            	endif		
0322+  62B1~            	endif		
0322+  62B1             
0322+  6237             
0322+  6237 79          
0322+  6238             
0322+  6238             
0322+  6238~            	endif		
0322+  6238~            	endif		
0322+  6238~            	endif		
0322+  6238             
0322+  62B1             
0322+  62B1~            	endif		
0322+  62B1~            	endif		
0322+  62B1             
0323+  62B1             	done(0)
0323+  62B1             
0323+  62B1 86 02       
0323+  62B3 BA 01 69    
0323+  62B6 B7 01 69    
0323+  62B9             
0323+  62B9 7E 79 77    
0324+  62BC             	
0325+  62BC             swLeftEject:
0326+  62BC 7C 00 B0    	advBonus()
0327+  62BF C6 06       	fireSolenoid(KNOCKER)
0327+  62C1 F7 01 4D    
0328+  62C4 96 0F       	ldaA	>lc(8)
0329+  62C6 85 20       	bitA	lr(6)
0330+  62C8             	ifeq ; in game
0330+  62C8             
0330+  62C8 26 FE       
0331+  62CA 86 01       		lampOn(1,3)
0331+  62CC 9A 0A       
0331+  62CE 97 0A       
0332+  62D0 86 40       		lampOn(7,8)
0332+  62D2 9A 0F       
0332+  62D4 97 0F       
0333+  62D6             	endif
0333+  62D6             
0333+  62D6             
0333+  62D6             
0333+  62D6             
0333+  62D6             
0333+  62D6~            	endif
0333+  62D6~            	endif
0333+  62D6             
0333+  62D6~            	endif
0333+  62D6~            	endif
0333+  62D6             
0333+  62C9             
0333+  62C9 0C          
0333+  62CA             
0333+  62CA             
0333+  62CA~            	endif
0333+  62CA~            	endif
0333+  62CA~            	endif
0333+  62CA             
0333+  62D6             
0333+  62D6~            	endif
0333+  62D6~            	endif
0333+  62D6             
0334+  62D6             	score500()
0334+  62D6 BD 7D 71    
0334+  62D9 C6 02       
0334+  62DB F7 01 49    
0334+  62DE 86 0E       
0334+  62E0 BD 7D 2F    
0334+  62E3 BD 7D 71    
0334+  62E6 C6 02       
0334+  62E8 F7 01 49    
0334+  62EB 86 0E       
0334+  62ED BD 7D 2F    
0334+  62F0 BD 7D 71    
0334+  62F3 C6 02       
0334+  62F5 F7 01 49    
0334+  62F8 86 0E       
0334+  62FA BD 7D 2F    
0334+  62FD BD 7D 71    
0334+  6300 C6 02       
0334+  6302 F7 01 49    
0334+  6305 86 0E       
0334+  6307 BD 7D 2F    
0334+  630A BD 7D 71    
0334+  630D C6 02       
0334+  630F F7 01 49    
0334+  6312 86 0E       
0334+  6314 BD 7D 2F    
0335+  6317 C6 03       	fireSolenoid(LEFT_EJECT)
0335+  6319 F7 01 43    
0336+  631C             	done(1)
0336+  631C~            	done(1)
0336+  631C~            	done(1)
0336+  631C~            	done(1)
0336+  631C~            	done(1)
0336+  631C             
0336+  631C 7E 79 77    
0337+  631F             	
0338+  631F             swTopEject:
0339+  631F 7C 00 B0    	advBonus()
0340+  6322 D6 0B       	ldaB	>lc(4)
0341+  6324 57          	asrB
0342+  6325             	ifeq ; 1k
0342+  6325             
0342+  6325 26 FE       
0343+  6327 BD 7D 80    		score1000()
0344+  632A 7E 63 E7    		jmp	swTopEject_scored
0345+  632D             	endif
0345+  632D             
0345+  632D             
0345+  632D             
0345+  632D             
0345+  632D             
0345+  632D~            	endif
0345+  632D~            	endif
0345+  632D             
0345+  632D~            	endif
0345+  632D~            	endif
0345+  632D             
0345+  6326             
0345+  6326 06          
0345+  6327             
0345+  6327             
0345+  6327~            	endif
0345+  6327~            	endif
0345+  6327~            	endif
0345+  6327             
0345+  632D             
0345+  632D~            	endif
0345+  632D~            	endif
0345+  632D             
0346+  632D 57          	asrB
0347+  632E             	ifeq  ; captive
0347+  632E             
0347+  632E 26 FE       
0348+  6330 86 40       		ldaA	lr(7)
0349+  6332 95 09       		bitA	>lc(2) ; captive ball
0350+  6334             		ifeq	; not lit
0350+  6334             
0350+  6334 26 FE       
0351+  6336 86 40       			lampOn(7,2)
0351+  6338 9A 09       
0351+  633A 97 09       
0352+  633C             		else
0352+  633C             
0352+  633C             
0352+  633C             
0352+  633C             
0352+  6335             
0352+  6335             
0352+  6335             
0352+  6335~            		else
0352+  6335~            		else
0352+  6335~            		else
0352+  6335~            		else
0352+  6335             
0352+  6335~            		else
0352+  6335~            		else
0352+  6335~            		else
0352+  6335~            		else
0352+  6335             
0352+  6335             
0352+  6335 08          
0352+  633C             
0352+  633C 20 FE       
0352+  633E             
0352+  633E             
0352+  633E             
0352+  633E~            		else
0352+  633E~            		else
0352+  633E~            		else
0352+  633E~            		else
0352+  633E~            		else
0352+  633E             
0352+  633E~            		else
0352+  633E~            		else
0352+  633E             
0352+  633E~            		else
0352+  633E~            		else
0352+  633E             
0353+  633E 86 BF       			lampOff(7,2)
0353+  6340 94 09       
0353+  6342 97 09       
0354+  6344             		endif
0354+  6344             
0354+  6344             
0354+  6344             
0354+  6344             
0354+  6344             
0354+  6344~            		endif
0354+  6344~            		endif
0354+  6344             
0354+  6344~            		endif
0354+  6344~            		endif
0354+  6344             
0354+  633D             
0354+  633D 06          
0354+  633E             
0354+  633E             
0354+  633E~            		endif
0354+  633E~            		endif
0354+  633E~            		endif
0354+  633E             
0354+  6344             
0354+  6344~            		endif
0354+  6344~            		endif
0354+  6344             
0355+  6344 7E 63 E7    		jmp	swTopEject_scored
0356+  6347             	endif
0356+  6347             
0356+  6347             
0356+  6347             
0356+  6347             
0356+  6347             
0356+  6347~            	endif
0356+  6347~            	endif
0356+  6347             
0356+  6347~            	endif
0356+  6347~            	endif
0356+  6347             
0356+  632F             
0356+  632F 17          
0356+  6330             
0356+  6330             
0356+  6330~            	endif
0356+  6330~            	endif
0356+  6330~            	endif
0356+  6330             
0356+  6347             
0356+  6347~            	endif
0356+  6347~            	endif
0356+  6347             
0357+  6347 57          	asrB
0358+  6348             	ifeq
0358+  6348             
0358+  6348 26 FE       
0359+  634A             		score500()
0359+  634A BD 7D 71    
0359+  634D C6 02       
0359+  634F F7 01 49    
0359+  6352 86 0E       
0359+  6354 BD 7D 2F    
0359+  6357 BD 7D 71    
0359+  635A C6 02       
0359+  635C F7 01 49    
0359+  635F 86 0E       
0359+  6361 BD 7D 2F    
0359+  6364 BD 7D 71    
0359+  6367 C6 02       
0359+  6369 F7 01 49    
0359+  636C 86 0E       
0359+  636E BD 7D 2F    
0359+  6371 BD 7D 71    
0359+  6374 C6 02       
0359+  6376 F7 01 49    
0359+  6379 86 0E       
0359+  637B BD 7D 2F    
0359+  637E BD 7D 71    
0359+  6381 C6 02       
0359+  6383 F7 01 49    
0359+  6386 86 0E       
0359+  6388 BD 7D 2F    
0360+  638B 20 5A       		bra	swTopEject_scored
0361+  638D             	endif
0361+  638D             
0361+  638D             
0361+  638D             
0361+  638D             
0361+  638D             
0361+  638D~            	endif
0361+  638D~            	endif
0361+  638D             
0361+  638D~            	endif
0361+  638D~            	endif
0361+  638D             
0361+  6349             
0361+  6349 43          
0361+  634A             
0361+  634A             
0361+  634A~            	endif
0361+  634A~            	endif
0361+  634A~            	endif
0361+  634A             
0361+  638D             
0361+  638D~            	endif
0361+  638D~            	endif
0361+  638D             
0362+  638D 57          	asrB
0363+  638E             	ifeq ; double
0363+  638E             
0363+  638E 26 FE       
0364+  6390 86 04       		ldaA	lr(3)
0365+  6392 95 09       		bitA	>lc(2) ; double bonus
0366+  6394             		ifeq	; not lit
0366+  6394             
0366+  6394 26 FE       
0367+  6396 86 04       			lampOn(3,2)
0367+  6398 9A 09       
0367+  639A 97 09       
0368+  639C             		else
0368+  639C             
0368+  639C             
0368+  639C             
0368+  639C             
0368+  6395             
0368+  6395             
0368+  6395             
0368+  6395~            		else
0368+  6395~            		else
0368+  6395~            		else
0368+  6395~            		else
0368+  6395             
0368+  6395~            		else
0368+  6395~            		else
0368+  6395~            		else
0368+  6395~            		else
0368+  6395             
0368+  6395             
0368+  6395 08          
0368+  639C             
0368+  639C 20 FE       
0368+  639E             
0368+  639E             
0368+  639E             
0368+  639E~            		else
0368+  639E~            		else
0368+  639E~            		else
0368+  639E~            		else
0368+  639E~            		else
0368+  639E             
0368+  639E~            		else
0368+  639E~            		else
0368+  639E             
0368+  639E~            		else
0368+  639E~            		else
0368+  639E             
0369+  639E 86 FB       			lampOff(3,2)
0369+  63A0 94 09       
0369+  63A2 97 09       
0370+  63A4             		endif
0370+  63A4             
0370+  63A4             
0370+  63A4             
0370+  63A4             
0370+  63A4             
0370+  63A4~            		endif
0370+  63A4~            		endif
0370+  63A4             
0370+  63A4~            		endif
0370+  63A4~            		endif
0370+  63A4             
0370+  639D             
0370+  639D 06          
0370+  639E             
0370+  639E             
0370+  639E~            		endif
0370+  639E~            		endif
0370+  639E~            		endif
0370+  639E             
0370+  63A4             
0370+  63A4~            		endif
0370+  63A4~            		endif
0370+  63A4             
0371+  63A4             	else
0371+  63A4             
0371+  63A4             
0371+  63A4             
0371+  63A4             
0371+  638F             
0371+  638F             
0371+  638F             
0371+  638F~            	else
0371+  638F~            	else
0371+  638F~            	else
0371+  638F~            	else
0371+  638F             
0371+  638F~            	else
0371+  638F~            	else
0371+  638F~            	else
0371+  638F~            	else
0371+  638F             
0371+  638F             
0371+  638F 16          
0371+  63A4             
0371+  63A4 20 FE       
0371+  63A6             
0371+  63A6             
0371+  63A6             
0371+  63A6~            	else
0371+  63A6~            	else
0371+  63A6~            	else
0371+  63A6~            	else
0371+  63A6~            	else
0371+  63A6             
0371+  63A6~            	else
0371+  63A6~            	else
0371+  63A6             
0371+  63A6~            	else
0371+  63A6~            	else
0371+  63A6             
0372+  63A6             		score500()
0372+  63A6 BD 7D 71    
0372+  63A9 C6 02       
0372+  63AB F7 01 49    
0372+  63AE 86 0E       
0372+  63B0 BD 7D 2F    
0372+  63B3 BD 7D 71    
0372+  63B6 C6 02       
0372+  63B8 F7 01 49    
0372+  63BB 86 0E       
0372+  63BD BD 7D 2F    
0372+  63C0 BD 7D 71    
0372+  63C3 C6 02       
0372+  63C5 F7 01 49    
0372+  63C8 86 0E       
0372+  63CA BD 7D 2F    
0372+  63CD BD 7D 71    
0372+  63D0 C6 02       
0372+  63D2 F7 01 49    
0372+  63D5 86 0E       
0372+  63D7 BD 7D 2F    
0372+  63DA BD 7D 71    
0372+  63DD C6 02       
0372+  63DF F7 01 49    
0372+  63E2 86 0E       
0372+  63E4 BD 7D 2F    
0373+  63E7             	endif
0373+  63E7             
0373+  63E7             
0373+  63E7             
0373+  63E7             
0373+  63E7             
0373+  63E7~            	endif
0373+  63E7~            	endif
0373+  63E7             
0373+  63E7~            	endif
0373+  63E7~            	endif
0373+  63E7             
0373+  63A5             
0373+  63A5 41          
0373+  63A6             
0373+  63A6             
0373+  63A6~            	endif
0373+  63A6~            	endif
0373+  63A6~            	endif
0373+  63A6             
0373+  63E7             
0373+  63E7~            	endif
0373+  63E7~            	endif
0373+  63E7             
0374+  63E7             swTopEject_scored:
0375+  63E7             		
0376+  63E7 C6 03       	fireSolenoid(TOP_EJECT)
0376+  63E9 F7 01 40    
0377+  63EC             	done(1)
0377+  63EC~            	done(1)
0377+  63EC~            	done(1)
0377+  63EC~            	done(1)
0377+  63EC~            	done(1)
0377+  63EC             
0377+  63EC 7E 79 77    
0378+  63EF             	
0379+  63EF             swHotTip:
0380+  63EF 86 09       	delay(75)
0380+  63F1 BD 7D 2F    
0381+  63F4 C6 0C       	fireSolenoid(DROP_HOT)
0381+  63F6 F7 01 42    
0382+  63F9 86 09       	delay(75)
0382+  63FB BD 7D 2F    
0383+  63FE C6 0C       	fireSolenoid(DROP_TIP)
0383+  6400 F7 01 41    
0384+  6403             	done(1)
0384+  6403~            	done(1)
0384+  6403~            	done(1)
0384+  6403~            	done(1)
0384+  6403~            	done(1)
0384+  6403             
0384+  6403 7E 79 77    
0385+  6406             swLeftOutlane:
0386+  6406             swRightOutlane:
0387+  6406             swLeftInlane:
0388+  6406             swRightInlane:
0389+  6406 7C 00 B0    	advBonus()
0390+  6409 BD 7D 80    	score1000()
0391+  640C             	done(1)
0391+  640C~            	done(1)
0391+  640C~            	done(1)
0391+  640C~            	done(1)
0391+  640C~            	done(1)
0391+  640C             
0391+  640C 7E 79 77    
0392+  640F             sw10pt:
0393+  640F BD 7D 63    	score10()
0394+  6412 77 00 0B    	asr	lc(4)
0395+  6415             	ifeq ; shifted off the edge
0395+  6415             
0395+  6415 26 FE       
0396+  6417 86 10       		ldaA	00010000b
0397+  6419 97 0B       		staA	lc(4)
0398+  641B             	endif
0398+  641B             
0398+  641B             
0398+  641B             
0398+  641B             
0398+  641B             
0398+  641B~            	endif
0398+  641B~            	endif
0398+  641B             
0398+  641B~            	endif
0398+  641B~            	endif
0398+  641B             
0398+  6416             
0398+  6416 04          
0398+  6417             
0398+  6417             
0398+  6417~            	endif
0398+  6417~            	endif
0398+  6417~            	endif
0398+  6417             
0398+  641B             
0398+  641B~            	endif
0398+  641B~            	endif
0398+  641B             
0399+  641B             	done(1)
0399+  641B~            	done(1)
0399+  641B~            	done(1)
0399+  641B~            	done(1)
0399+  641B~            	done(1)
0399+  641B             
0399+  641B 7E 79 77    
0400+  641E             sw100pt:
0401+  641E BD 7D 71    	score100()
0402+  6421             	done(1)
0402+  6421~            	done(1)
0402+  6421~            	done(1)
0402+  6421~            	done(1)
0402+  6421~            	done(1)
0402+  6421             
0402+  6421 7E 79 77    
0403+  6424             sw500pt:
0404+  6424             	score500();
0404+  6424 BD 7D 71    
0404+  6427 C6 02       
0404+  6429 F7 01 49    
0404+  642C 86 0E       
0404+  642E BD 7D 2F    
0404+  6431 BD 7D 71    
0404+  6434 C6 02       
0404+  6436 F7 01 49    
0404+  6439 86 0E       
0404+  643B BD 7D 2F    
0404+  643E BD 7D 71    
0404+  6441 C6 02       
0404+  6443 F7 01 49    
0404+  6446 86 0E       
0404+  6448 BD 7D 2F    
0404+  644B BD 7D 71    
0404+  644E C6 02       
0404+  6450 F7 01 49    
0404+  6453 86 0E       
0404+  6455 BD 7D 2F    
0404+  6458 BD 7D 71    
0404+  645B C6 02       
0404+  645D F7 01 49    
0404+  6460 86 0E       
0404+  6462 BD 7D 2F    
0405+  6465             	done(1)
0405+  6465~            	done(1)
0405+  6465~            	done(1)
0405+  6465~            	done(1)
0405+  6465~            	done(1)
0405+  6465             
0405+  6465 7E 79 77    
0406+  6468             swDropTip:
0407+  6468 BD 7D 63    	score10()
0408+  646B             	done(1)
0408+  646B~            	done(1)
0408+  646B~            	done(1)
0408+  646B~            	done(1)
0408+  646B~            	done(1)
0408+  646B             
0408+  646B 7E 79 77    
0409+  646E             swDropHot:
0410+  646E BD 7D 63    	score10()
0411+  6471             	done(1)
0411+  6471~            	done(1)
0411+  6471~            	done(1)
0411+  6471~            	done(1)
0411+  6471~            	done(1)
0411+  6471             
0411+  6471 7E 79 77    
0412+  6474             swAdvBonus:
0413+  6474 7C 00 B0    	advBonus()
0414+  6477             	done(1)
0414+  6477~            	done(1)
0414+  6477~            	done(1)
0414+  6477~            	done(1)
0414+  6477~            	done(1)
0414+  6477             
0414+  6477 7E 79 77    
0415+  647A             swSpinner:
0416+  647A 96 23       	ldaA	>sc(4)
0417+  647C 85 20       	bitA	sr(6)
0418+  647E             	ifne
0418+  647E             
0418+  647E 27 FE       
0419+  6480 BD 7D 71    		score100()
0420+  6483 86 0E       		ldaA	$E
0421+  6485             	else
0421+  6485             
0421+  6485             
0421+  6485             
0421+  6485             
0421+  647F             
0421+  647F             
0421+  647F             
0421+  647F~            	else
0421+  647F~            	else
0421+  647F~            	else
0421+  647F~            	else
0421+  647F             
0421+  647F~            	else
0421+  647F~            	else
0421+  647F~            	else
0421+  647F~            	else
0421+  647F             
0421+  647F             
0421+  647F 07          
0421+  6485             
0421+  6485 20 FE       
0421+  6487             
0421+  6487             
0421+  6487             
0421+  6487~            	else
0421+  6487~            	else
0421+  6487~            	else
0421+  6487~            	else
0421+  6487~            	else
0421+  6487             
0421+  6487~            	else
0421+  6487~            	else
0421+  6487             
0421+  6487~            	else
0421+  6487~            	else
0421+  6487             
0422+  6487 86 02       		noValidate
0422+  6489 BA 01 69    
0422+  648C B7 01 69    
0423+  648F 86 00       		ldaA	0
0424+  6491             	endif
0424+  6491             
0424+  6491             
0424+  6491             
0424+  6491             
0424+  6491             
0424+  6491~            	endif
0424+  6491~            	endif
0424+  6491             
0424+  6491~            	endif
0424+  6491~            	endif
0424+  6491             
0424+  6486             
0424+  6486 0A          
0424+  6487             
0424+  6487             
0424+  6487~            	endif
0424+  6487~            	endif
0424+  6487~            	endif
0424+  6487             
0424+  6491             
0424+  6491~            	endif
0424+  6491~            	endif
0424+  6491             
0425+  6491 B7 0E 47    	staA	solenoid1 + CLICKER - 1
0426+  6494             	done(1)
0426+  6494~            	done(1)
0426+  6494~            	done(1)
0426+  6494~            	done(1)
0426+  6494~            	done(1)
0426+  6494             
0426+  6494 7E 79 77    
0427+  6497             
0428+  6497             swCaptiveRollover:
0429+  6497 96 09       	ldaA	>lc(2)
0430+  6499 85 40       	bitA	lr(7)
0431+  649B             	ifeq ; light off
0431+  649B             
0431+  649B 26 FE       
0432+  649D BD 7D 63    		score10()
0433+  64A0             	else
0433+  64A0             
0433+  64A0             
0433+  64A0             
0433+  64A0             
0433+  649C             
0433+  649C             
0433+  649C             
0433+  649C~            	else
0433+  649C~            	else
0433+  649C~            	else
0433+  649C~            	else
0433+  649C             
0433+  649C~            	else
0433+  649C~            	else
0433+  649C~            	else
0433+  649C~            	else
0433+  649C             
0433+  649C             
0433+  649C 05          
0433+  64A0             
0433+  64A0 20 FE       
0433+  64A2             
0433+  64A2             
0433+  64A2             
0433+  64A2~            	else
0433+  64A2~            	else
0433+  64A2~            	else
0433+  64A2~            	else
0433+  64A2~            	else
0433+  64A2             
0433+  64A2~            	else
0433+  64A2~            	else
0433+  64A2             
0433+  64A2~            	else
0433+  64A2~            	else
0433+  64A2             
0434+  64A2 BD 7D 80    		score1000()
0435+  64A5             	endif
0435+  64A5             
0435+  64A5             
0435+  64A5             
0435+  64A5             
0435+  64A5             
0435+  64A5~            	endif
0435+  64A5~            	endif
0435+  64A5             
0435+  64A5~            	endif
0435+  64A5~            	endif
0435+  64A5             
0435+  64A1             
0435+  64A1 03          
0435+  64A2             
0435+  64A2             
0435+  64A2~            	endif
0435+  64A2~            	endif
0435+  64A2~            	endif
0435+  64A2             
0435+  64A5             
0435+  64A5~            	endif
0435+  64A5~            	endif
0435+  64A5             
0436+  64A5             	done(1)
0436+  64A5~            	done(1)
0436+  64A5~            	done(1)
0436+  64A5~            	done(1)
0436+  64A5~            	done(1)
0436+  64A5             
0436+  64A5 7E 79 77    
0437+  64A8             
0438+  64A8             swCaptiveTarget:
0439+  64A8 7C 00 B0    	advBonus()
0440+  64AB 96 09       	ldaA	>lc(2)
0441+  64AD 85 40       	bitA	lr(7)
0442+  64AF             	ifeq ; light off
0442+  64AF             
0442+  64AF 26 FE       
0443+  64B1 BD 7D 63    		score10()
0444+  64B4             	else
0444+  64B4             
0444+  64B4             
0444+  64B4             
0444+  64B4             
0444+  64B0             
0444+  64B0             
0444+  64B0             
0444+  64B0~            	else
0444+  64B0~            	else
0444+  64B0~            	else
0444+  64B0~            	else
0444+  64B0             
0444+  64B0~            	else
0444+  64B0~            	else
0444+  64B0~            	else
0444+  64B0~            	else
0444+  64B0             
0444+  64B0             
0444+  64B0 05          
0444+  64B4             
0444+  64B4 20 FE       
0444+  64B6             
0444+  64B6             
0444+  64B6             
0444+  64B6~            	else
0444+  64B6~            	else
0444+  64B6~            	else
0444+  64B6~            	else
0444+  64B6~            	else
0444+  64B6             
0444+  64B6~            	else
0444+  64B6~            	else
0444+  64B6             
0444+  64B6~            	else
0444+  64B6~            	else
0444+  64B6             
0445+  64B6 BD 7D 80    		score1000()
0446+  64B9             	endif
0446+  64B9             
0446+  64B9             
0446+  64B9             
0446+  64B9             
0446+  64B9             
0446+  64B9~            	endif
0446+  64B9~            	endif
0446+  64B9             
0446+  64B9~            	endif
0446+  64B9~            	endif
0446+  64B9             
0446+  64B5             
0446+  64B5 03          
0446+  64B6             
0446+  64B6             
0446+  64B6~            	endif
0446+  64B6~            	endif
0446+  64B6~            	endif
0446+  64B6             
0446+  64B9             
0446+  64B9~            	endif
0446+  64B9~            	endif
0446+  64B9             
0447+  64B9             	done(1)
0447+  64B9~            	done(1)
0447+  64B9~            	done(1)
0447+  64B9~            	done(1)
0447+  64B9~            	done(1)
0447+  64B9             
0447+  64B9 7E 79 77    
0448+  64BC             	
0449+  64BC             	
0450+  64BC             ; end callbacks
0451+  64BC             	.msfirst
0452+  64BC             ; needs to be on $**00 address
0453+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0454+  6000 61 DD       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0454+  6002 61 DD       
0454+  6004 61 F6       
0454+  6006 60 C0       
0454+  6008 60 C0       
0454+  600A 60 C0       
0454+  600C 61 DD       
0454+  600E 60 C0       
0455+  6010 62 2D       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0455+  6012 61 DD       
0455+  6014 64 06       
0455+  6016 64 06       
0455+  6018 64 0F       
0455+  601A 64 24       
0455+  601C 64 97       
0455+  601E 64 A8       
0456+  6020 64 68       	.dw swDropTip	\.dw swDropTip\.dw swDropTip\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0456+  6022 64 68       
0456+  6024 64 68       
0456+  6026 64 74       
0456+  6028 64 0F       
0456+  602A 63 1F       
0456+  602C 64 0F       
0456+  602E 60 C0       
0457+  6030 64 6E       	.dw swDropHot	\.dw swDropHot\.dw swDropHot\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw sw100pt\.dw sw500pt
0457+  6032 64 6E       
0457+  6034 64 6E       
0457+  6036 64 0F       
0457+  6038 62 BC       
0457+  603A 64 7A       
0457+  603C 64 1E       
0457+  603E 64 24       
0458+  6040 64 06       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0458+  6042 64 06       
0458+  6044 64 0F       
0458+  6046 60 C0       
0458+  6048 63 EF       
0458+  604A 60 C0       
0458+  604C 60 C0       
0458+  604E 60 C0       
0459+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0459+  6052 60 C0       
0459+  6054 60 C0       
0459+  6056 60 C0       
0459+  6058 60 C0       
0459+  605A 60 C0       
0459+  605C 60 C0       
0459+  605E 60 C0       
0460+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0460+  6062 60 C0       
0460+  6064 60 C0       
0460+  6066 60 C0       
0460+  6068 60 C0       
0460+  606A 60 C0       
0460+  606C 60 C0       
0460+  606E 60 C0       
0461+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0461+  6072 60 C0       
0461+  6074 60 C0       
0461+  6076 60 C0       
0461+  6078 60 C0       
0461+  607A 60 C0       
0461+  607C 60 C0       
0461+  607E 60 C0       
0462+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0463+  6080             ; off = how many cycles it must be off for
0464+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0465+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0466+  6080             ; TRANSPOSED (?)
0467+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0468+  6080             settleTable: ; must be right after callbackTable
0469+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0469+  6081 87          
0469+  6082 C2          
0469+  6083 47          
0469+  6084 47          
0469+  6085 47          
0469+  6086 87          
0469+  6087 47          
0470+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0470+  6089 87          
0470+  608A 87          
0470+  608B 87          
0470+  608C 81          
0470+  608D 81          
0470+  608E 80          
0470+  608F 87          
0471+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0471+  6091 87          
0471+  6092 87          
0471+  6093 83          
0471+  6094 81          
0471+  6095 E1          
0471+  6096 81          
0471+  6097 80          
0472+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,0,0)\SW(0,0,1,0)\SW(0,1,1,0)
0472+  6099 87          
0472+  609A 87          
0472+  609B 81          
0472+  609C E1          
0472+  609D 00          
0472+  609E 80          
0472+  609F 81          
0473+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0473+  60A1 87          
0473+  60A2 81          
0473+  60A3 47          
0473+  60A4 80          
0473+  60A5 47          
0473+  60A6 47          
0473+  60A7 47          
0474+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0474+  60A9 47          
0474+  60AA 47          
0474+  60AB 47          
0474+  60AC 47          
0474+  60AD 47          
0474+  60AE 47          
0474+  60AF 47          
0475+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0475+  60B1 47          
0475+  60B2 47          
0475+  60B3 47          
0475+  60B4 47          
0475+  60B5 47          
0475+  60B6 47          
0475+  60B7 47          
0476+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0476+  60B9 47          
0476+  60BA 47          
0476+  60BB 47          
0476+  60BC 47          
0476+  60BD 47          
0476+  60BE 47          
0476+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 FF       	ldaA	$FF	
0102   78AF B7 28 00    	staA 	displayStrobe
0103   78B2             
0104   78B2 86 00       	ldaA	00
0105   78B4 97 07       	staA	strobe
0106   78B6 B7 01 68    	staA	displayCol
0107   78B9             	
0108   78B9 CE 00 00    	ldX 	0
0109   78BC DF 50       	stX		curCol
0110   78BE             	
0111   78BE 86 00       	ldaA	0
0112   78C0 97 10       	staA	curSwitchRowLsb
0113   78C2             	
0114   78C2             ; fill solenoid status with off
0115   78C2 86 0F       	ldaA	$F
0116   78C4 CE 01 40    	ldX	solenoid1
0117   78C7             lSolDefault:
0118   78C7 A7 00       	staA	0, X
0119   78C9 08          	inX
0120   78CA 8C 01 4F    	cpX	solenoid16
0121   78CD 26 F8       	bne	lSolDefault
0122   78CF             	
0123   78CF             ; clear 8 banks
0124   78CF 86 00       	ldaA 	0
0125   78D1 CE 00 00    	ldX	0
0126   78D4             lClear8:
0127   78D4 A7 08       	staA	lampCol1, X
0128   78D6 A7 A0       	staA	flashLampCol1, X
0129   78D8 A7 80       	staA	waitLeft, X
0130   78DA 08          	inX
0131   78DB 8C 00 08    	cpX	8
0132   78DE 26 F4       	bne 	lClear8
0133   78E0             	
0134   78E0             ; empty settle
0135   78E0 86 00       	ldaA	$00
0136   78E2 CE 01 00    	ldX	settleRow1
0137   78E5             lSettleDefault:
0138   78E5 A7 00       	staA	0, X
0139   78E7 08          	inX
0140   78E8 8C 01 3F    	cpX	settleRow8End
0141   78EB 26 F8       	bne	lSettleDefault
0142   78ED             	
0143   78ED             ; empty queue
0144   78ED 86 FF       	ldaA	$FF
0145   78EF CE 00 60    	ldX	queue
0146   78F2             lEmptyQueue:
0147   78F2 A7 00       	staA	0, X
0148   78F4 08          	inX
0149   78F5 8C 00 67    	cpX	queueEnd
0150   78F8 26 F8       	bne	lEmptyQueue
0151   78FA             	
0152   78FA 86 00       	ldaA	0
0153   78FC 97 54       	staA	queueHead + 0
0154   78FE 97 56       	staA	queueTail + 0
0155   7900 86 60       	ldaA	queue
0156   7902 97 55       	staA	queueHead + 1
0157   7904 97 57       	staA	queueTail + 1
0158   7906             	
0159   7906             ; test numbers
0160   7906 86 20       	lampOn(6,8) ; game over
0160   7908 9A 0F       
0160   790A 97 0F       
0161   790C             
0162   790C             	
0163   790C BD 7D 44    	jsr resetScores
0164   790F             	
0165   790F             ; setup complete
0166   790F 0E          	clI		; enable timer interrupt
0167   7910             	
0168   7910             	
0169   7910             end:
0170   7910 B6 01 69    	ldaA	>state
0171   7913 85 04       	bitA	100b
0172   7915             	ifne
0172   7915             
0172   7915 27 FE       
0173   7917             		; dec wait timers
0174   7917 CE 00 7F    		ldX	waitLeft - 1
0175   791A             decWaitTimers:
0176   791A 08          		inX
0177   791B A6 00       		ldaA	0, X
0178   791D             		ifne
0178   791D             
0178   791D 27 FE       
0179   791F 4A          			decA
0180   7920 A7 00       			staA	0, X
0181   7922             			ifeq
0181   7922             
0181   7922 26 FE       
0182   7924 A6 08       				ldaA	waitMsb - waitLeft, X
0183   7926 97 58       				staA	tempQ
0184   7928 A6 10       				ldaA	waitLsb - waitLeft, X
0185   792A 97 59       				staA	tempQ + 1
0186   792C E6 18       				ldaB	waitReg - waitLeft, X
0187   792E DE 58       				ldX	>tempQ
0188   7930 6E 00       				jmp	0, X
0189   7932             			endif
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7923             
0189   7923 0E          
0189   7924             
0189   7924             
0189   7924~            			endif
0189   7924~            			endif
0189   7924~            			endif
0189   7924             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0190   7932             		endif
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   791E             
0190   791E 13          
0190   791F             
0190   791F             
0190   791F~            		endif
0190   791F~            		endif
0190   791F~            		endif
0190   791F             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0191   7932 8C 00 87    		cpX	waitLeftEnd
0192   7935 26 E3       		bne	decWaitTimers
0193   7937             		
0194   7937 B6 01 69    		ldaA	>state		; clear strobe reset bit
0195   793A 84 FB       		andA	11111011b
0196   793C B7 01 69    		staA	state
0197   793F             	endif
0197   793F             
0197   793F             
0197   793F             
0197   793F             
0197   793F             
0197   793F~            	endif
0197   793F~            	endif
0197   793F             
0197   793F~            	endif
0197   793F~            	endif
0197   793F             
0197   7916             
0197   7916 28          
0197   7917             
0197   7917             
0197   7917~            	endif
0197   7917~            	endif
0197   7917~            	endif
0197   7917             
0197   793F             
0197   793F~            	endif
0197   793F~            	endif
0197   793F             
0198   793F             
0199   793F             		
0200   793F             ; pop queue
0201   793F D6 57       	ldaB	>queueTail + 1
0202   7941 D1 55       	cmpB	>queueHead + 1
0203   7943 27 72       	beq 	skipQueue
0204   7945             	
0205   7945 DE 54       	ldX	>queueHead
0206   7947 A6 00       	ldaA	0, X	; A now contains the first queue item
0207   7949             	
0208   7949 16          	tAB
0209   794A C4 3F       	andB	00111111b ; B = callback index
0210   794C             	
0211   794C D7 59       	staB	tempQ + 1
0212   794E C6 60       	ldaB	callbackTable >> 8
0213   7950 D7 58       	staB	tempQ + 0	; callback address LSB / 2
0214   7952 DE 58       	ldX	>tempQ
0215   7954             	
0216   7954 E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0217   7956 C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0218   7958             	ifne ; if closure only
0218   7958             
0218   7958 27 FE       
0219   795A 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0220   795C 26 43       		bne	skipEvent
0221   795E             	endif
0221   795E             
0221   795E             
0221   795E             
0221   795E             
0221   795E             
0221   795E~            	endif
0221   795E~            	endif
0221   795E             
0221   795E~            	endif
0221   795E~            	endif
0221   795E             
0221   7959             
0221   7959 04          
0221   795A             
0221   795A             
0221   795A~            	endif
0221   795A~            	endif
0221   795A~            	endif
0221   795A             
0221   795E             
0221   795E~            	endif
0221   795E~            	endif
0221   795E             
0222   795E             	
0223   795E C5 40       	bitB	01000000b ; B.7 = active in game over
0224   7960             	ifeq 	 ; not active in game over
0224   7960             
0224   7960 26 FE       
0225   7962 D6 0F       		ldaB	>lc(8)	; gameover mask
0226   7964 C5 20       		bitB	lr(6)
0227   7966 26 39       		bne	skipEvent
0228   7968 D6 0F       		ldaB	>lc(8) ; tilt bit
0229   796A C5 10       		bitB	lr(5)
0230   796C 26 33       		bne	skipEvent
0231   796E             	endif
0231   796E             
0231   796E             
0231   796E             
0231   796E             
0231   796E             
0231   796E~            	endif
0231   796E~            	endif
0231   796E             
0231   796E~            	endif
0231   796E~            	endif
0231   796E             
0231   7961             
0231   7961 0C          
0231   7962             
0231   7962             
0231   7962~            	endif
0231   7962~            	endif
0231   7962~            	endif
0231   7962             
0231   796E             
0231   796E~            	endif
0231   796E~            	endif
0231   796E             
0232   796E             	
0233   796E             	; checked passed, do callback
0234   796E 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0235   7971 DE 58       	ldX	>tempQ
0236   7973 EE 00       	ldX	0, X
0237   7975 6E 00       	jmp	0, X
0238   7977             	; everything trashed
0239   7977             afterQueueEvent:
0240   7977 BD 60 C3    	jsr 	bonusLights
0241   797A             
0242   797A 86 02       	ldaA	10b ; no validate bit
0243   797C B5 01 69    	bitA	>state
0244   797F             	ifeq ; validate pf
0244   797F             
0244   797F 26 FE       
0245   7981             		; check if playfield invalid
0246   7981 86 0F       		ldaA	00001111b ; player up
0247   7983 95 A7       		bitA	>flc(8)
0248   7985             		ifne ; any flashing -> pf invalid
0248   7985             
0248   7985 27 FE       
0249   7987 43          			comA	; turn off flashing
0250   7988 94 A7       			andA	>flc(8)
0251   798A 97 A7       			staA	flc(8)
0252   798C 86 FE       			lampOff(1,3) ; shoot again
0252   798E 94 0A       
0252   7990 97 0A       
0253   7992 86 BF       			lampOff(7,8)
0253   7994 94 0F       
0253   7996 97 0F       
0254   7998             		endif
0254   7998             
0254   7998             
0254   7998             
0254   7998             
0254   7998             
0254   7998~            		endif
0254   7998~            		endif
0254   7998             
0254   7998~            		endif
0254   7998~            		endif
0254   7998             
0254   7986             
0254   7986 11          
0254   7987             
0254   7987             
0254   7987~            		endif
0254   7987~            		endif
0254   7987~            		endif
0254   7987             
0254   7998             
0254   7998~            		endif
0254   7998~            		endif
0254   7998             
0255   7998             	else
0255   7998             
0255   7998             
0255   7998             
0255   7998             
0255   7980             
0255   7980             
0255   7980             
0255   7980~            	else
0255   7980~            	else
0255   7980~            	else
0255   7980~            	else
0255   7980             
0255   7980~            	else
0255   7980~            	else
0255   7980~            	else
0255   7980~            	else
0255   7980             
0255   7980             
0255   7980 19          
0255   7998             
0255   7998 20 FE       
0255   799A             
0255   799A             
0255   799A             
0255   799A~            	else
0255   799A~            	else
0255   799A~            	else
0255   799A~            	else
0255   799A~            	else
0255   799A             
0255   799A~            	else
0255   799A~            	else
0255   799A             
0255   799A~            	else
0255   799A~            	else
0255   799A             
0256   799A             		; clear don't validate bit
0257   799A 43          		comA
0258   799B B4 01 69    		andA	>state
0259   799E B7 01 69    		staA	>state
0260   79A1             	endif
0260   79A1             
0260   79A1             
0260   79A1             
0260   79A1             
0260   79A1             
0260   79A1~            	endif
0260   79A1~            	endif
0260   79A1             
0260   79A1~            	endif
0260   79A1~            	endif
0260   79A1             
0260   7999             
0260   7999 07          
0260   799A             
0260   799A             
0260   799A~            	endif
0260   799A~            	endif
0260   799A~            	endif
0260   799A             
0260   79A1             
0260   79A1~            	endif
0260   79A1~            	endif
0260   79A1             
0261   79A1             	
0262   79A1             skipEvent:
0263   79A1 B6 01 69    	ldaA	>state
0264   79A4 85 04       	bitA	100b
0265   79A6             	ifeq	; don't process queue if still finishing timers
0265   79A6             
0265   79A6 26 FE       
0266   79A8 C6 67       		ldaB	queueEnd
0267   79AA D1 55       		cmpB	>queueHead + 1
0268   79AC             		ifeq
0268   79AC             
0268   79AC 26 FE       
0269   79AE C6 60       			ldaB	queue
0270   79B0 D7 55       			staB	queueHead + 1
0271   79B2             		else
0271   79B2             
0271   79B2             
0271   79B2             
0271   79B2             
0271   79AD             
0271   79AD             
0271   79AD             
0271   79AD~            		else
0271   79AD~            		else
0271   79AD~            		else
0271   79AD~            		else
0271   79AD             
0271   79AD~            		else
0271   79AD~            		else
0271   79AD~            		else
0271   79AD~            		else
0271   79AD             
0271   79AD             
0271   79AD 06          
0271   79B2             
0271   79B2 20 FE       
0271   79B4             
0271   79B4             
0271   79B4             
0271   79B4~            		else
0271   79B4~            		else
0271   79B4~            		else
0271   79B4~            		else
0271   79B4~            		else
0271   79B4             
0271   79B4~            		else
0271   79B4~            		else
0271   79B4             
0271   79B4~            		else
0271   79B4~            		else
0271   79B4             
0272   79B4 7C 00 55    			inc	queueHead + 1
0273   79B7             		endif
0273   79B7             
0273   79B7             
0273   79B7             
0273   79B7             
0273   79B7             
0273   79B7~            		endif
0273   79B7~            		endif
0273   79B7             
0273   79B7~            		endif
0273   79B7~            		endif
0273   79B7             
0273   79B3             
0273   79B3 03          
0273   79B4             
0273   79B4             
0273   79B4~            		endif
0273   79B4~            		endif
0273   79B4~            		endif
0273   79B4             
0273   79B7             
0273   79B7~            		endif
0273   79B7~            		endif
0273   79B7             
0274   79B7             	endif
0274   79B7             
0274   79B7             
0274   79B7             
0274   79B7             
0274   79B7             
0274   79B7~            	endif
0274   79B7~            	endif
0274   79B7             
0274   79B7~            	endif
0274   79B7~            	endif
0274   79B7             
0274   79A7             
0274   79A7 0F          
0274   79A8             
0274   79A8             
0274   79A8~            	endif
0274   79A8~            	endif
0274   79A8~            	endif
0274   79A8             
0274   79B7             
0274   79B7~            	endif
0274   79B7~            	endif
0274   79B7             
0275   79B7             				
0276   79B7             skipQueue:
0277   79B7             				
0278   79B7             	
0279   79B7             				
0280   79B7 7E 79 10    	jmp		end
0281   79BA 00 00       	.dw 0
0282   79BC 00 00       	.dw 0
0283   79BE 00 00       	.dw 0
0284   79C0 00 00       	.dw 0
0285   79C2 00 00       	.dw 0
0286   79C4             		
0287   79C4             interrupt:	
0288   79C4 7C 00 02    	inc	counter
0289   79C7 86 00       	ldaA	0
0290   79C9 91 02       	cmpA	>counter
0291   79CB 26 21       	bne	counterHandled
0292   79CD 7C 00 03    	inc 	counter2
0293   79D0 86 04       	ldaA	4
0294   79D2 91 03       	cmpA	>counter2
0295   79D4 26 18       	bne	counterHandled
0296   79D6             	
0297   79D6 86 00       	ldaA	0
0298   79D8 97 03       	staA	counter2
0299   79DA 86 77       	ldaA	01110111b
0300   79DC 91 70       	cmpA	>displayBcd1
0301   79DE 27 08       	beq	on
0302   79E0             	
0303   79E0 86 F0       	ldaA	$F0
0304   79E2             	;staA	lampRow1
0305   79E2 86 77       	ldaA	01110111b
0306   79E4 97 70       	staA	displayBcd1	
0307   79E6 20 06       	bra	counterHandled
0308   79E8             on:
0309   79E8 86 0F       	ldaA	$0F
0310   79EA             	;staA	lampRow1
0311   79EA 86 33       	ldaA	00110011b
0312   79EC 97 70       	staA	displayBcd1	
0313   79EE             
0314   79EE             counterHandled:
0315   79EE             ; move switch column
0316   79EE 96 07       	ldaA	>strobe
0317   79F0 B7 30 02    	staA	switchStrobe
0318   79F3             	
0319   79F3             ; update display 
0320   79F3             	
0321   79F3 DE 50       	ldX	>curCol
0322   79F5 B6 01 68    	ldaA	>displayCol
0323   79F8 C6 FF       	ldaB 	$FF
0324   79FA F7 28 02    	staB	displayBcd
0325   79FD B7 28 00    	staA	displayStrobe
0326   7A00 85 08       	bitA	00001000b
0327   7A02             	ifeq
0327   7A02             
0327   7A02 26 FE       
0328   7A04 E6 70       		ldaB	displayBcd1, X
0329   7A06             	else
0329   7A06             
0329   7A06             
0329   7A06             
0329   7A06             
0329   7A03             
0329   7A03             
0329   7A03             
0329   7A03~            	else
0329   7A03~            	else
0329   7A03~            	else
0329   7A03~            	else
0329   7A03             
0329   7A03~            	else
0329   7A03~            	else
0329   7A03~            	else
0329   7A03~            	else
0329   7A03             
0329   7A03             
0329   7A03 04          
0329   7A06             
0329   7A06 20 FE       
0329   7A08             
0329   7A08             
0329   7A08             
0329   7A08~            	else
0329   7A08~            	else
0329   7A08~            	else
0329   7A08~            	else
0329   7A08~            	else
0329   7A08             
0329   7A08~            	else
0329   7A08~            	else
0329   7A08             
0329   7A08~            	else
0329   7A08~            	else
0329   7A08             
0330   7A08 E6 78       		ldaB	displayBcd1 + 8, X
0331   7A0A             	endif
0331   7A0A             
0331   7A0A             
0331   7A0A             
0331   7A0A             
0331   7A0A             
0331   7A0A~            	endif
0331   7A0A~            	endif
0331   7A0A             
0331   7A0A~            	endif
0331   7A0A~            	endif
0331   7A0A             
0331   7A07             
0331   7A07 02          
0331   7A08             
0331   7A08             
0331   7A08~            	endif
0331   7A08~            	endif
0331   7A08~            	endif
0331   7A08             
0331   7A0A             
0331   7A0A~            	endif
0331   7A0A~            	endif
0331   7A0A             
0332   7A0A F7 28 02    	staB	displayBcd
0333   7A0D             	
0334   7A0D             ; read switches
0335   7A0D             	;jmp updateLamps
0336   7A0D DE 50       	ldX	>curCol
0337   7A0F B6 30 00    	ldaA	>switchRow
0338   7A12 16          	tab
0339   7A13 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0340   7A15             	
0341   7A15 D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0342   7A17 D7 01       	staB	temp + 1 			; temp = switch / 2
0343   7A19 D7 53       	staB	tempX + 1			; tempX = cRAM
0344   7A1B C6 60       	ldaB	callbackTable >> 8
0345   7A1D D7 00       	staB	temp
0346   7A1F C6 01       	ldaB	cRAM >> 8
0347   7A21 D7 52       	staB	tempX
0348   7A23             	
0349   7A23 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0350   7A25             	
0351   7A25             	; temp now contains the beginning of the row in the callbackTable
0352   7A25             swNext:
0353   7A25 85 01       	bitA	00000001b	 ; Z set if switch not different
0354   7A27             	ifne		; if bit set, switch different
0354   7A27             
0354   7A27 27 FE       
0355   7A29 36          		pshA ; store changed switches left
0356   7A2A DE 52       		ldX	>tempX
0357   7A2C 86 18       		ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0358   7A2E             				; but checking 'multiple of 8' would miss 7/8 switch
0359   7A2E             				; columns completely since they're in sync
0360   7A2E             				; so instead the lowest bits are empty (so that it'll
0361   7A2E             				; get all switch cols) and instead it skips 7/8 groups 
0362   7A2E             				; of 8 IRQs
0363   7A2E 95 02       		bitA	>counter
0364   7A30 27 08       		beq checkSettled ; counter not multiple of 8, skip settling (multiplies settle time by 8)
0365   7A32             			; just check if this is the beginning of the settle
0366   7A32             			;  (want to react right away when a switch closes)
0367   7A32 A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0368   7A34 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0369   7A36 27 33       			beq 	notSettled; A=0 -> was settled, so can begin
0370   7A38 20 4B       			bra settledEnd
0371   7A3A             checkSettled:
0372   7A3A A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0373   7A3C 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0374   7A3E 27 2B       		beq 	notSettled; A=0 -> settled
0375   7A40             		; else A > 0 -> settling
0376   7A40 4A          			decA
0377   7A41 A7 00       			staA	0, X	; sets Z if now A = 0
0378   7A43             			ifeq ; A=0 -> now settled, fire event
0378   7A43             
0378   7A43 26 FE       
0379   7A45             settled:		
0380   7A45 DE 50       				ldX	>curCol
0381   7A47 17          				tBA	; A now the bit in row
0382   7A48 A8 20       				eorA	switchRow1, X ; toggle bit in row
0383   7A4A A7 20       				staA	switchRow1, X ; A now state of row
0384   7A4C             				
0385   7A4C F5 30 00    				bitB	>switchRow
0386   7A4F             				ifne ; switch now on
0386   7A4F             
0386   7A4F 27 FE       
0387   7A51 86 40       					ldaA	01000000b
0388   7A53             				else
0388   7A53             
0388   7A53             
0388   7A53             
0388   7A53             
0388   7A50             
0388   7A50             
0388   7A50             
0388   7A50~            				else
0388   7A50~            				else
0388   7A50~            				else
0388   7A50~            				else
0388   7A50             
0388   7A50~            				else
0388   7A50~            				else
0388   7A50~            				else
0388   7A50~            				else
0388   7A50             
0388   7A50             
0388   7A50 04          
0388   7A53             
0388   7A53 20 FE       
0388   7A55             
0388   7A55             
0388   7A55             
0388   7A55~            				else
0388   7A55~            				else
0388   7A55~            				else
0388   7A55~            				else
0388   7A55~            				else
0388   7A55             
0388   7A55~            				else
0388   7A55~            				else
0388   7A55             
0388   7A55~            				else
0388   7A55~            				else
0388   7A55             
0389   7A55 86 C0       					ldaA	11000000b
0390   7A57             				endif
0390   7A57             
0390   7A57             
0390   7A57             
0390   7A57             
0390   7A57             
0390   7A57~            				endif
0390   7A57~            				endif
0390   7A57             
0390   7A57~            				endif
0390   7A57~            				endif
0390   7A57             
0390   7A54             
0390   7A54 02          
0390   7A55             
0390   7A55             
0390   7A55~            				endif
0390   7A55~            				endif
0390   7A55~            				endif
0390   7A55             
0390   7A57             
0390   7A57~            				endif
0390   7A57~            				endif
0390   7A57             
0391   7A57 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0392   7A59             				
0393   7A59             				; store event
0394   7A59 DE 56       				ldX	>queueTail
0395   7A5B A7 00       				staA	0, X
0396   7A5D 7C 00 57    				inc	queueTail + 1
0397   7A60             				
0398   7A60             				; wrap queueTail if necessary
0399   7A60 8C 00 67    				cpX	queueEnd 
0400   7A63             				ifeq
0400   7A63             
0400   7A63 26 FE       
0401   7A65 86 60       					ldaA	queue 
0402   7A67 97 57       					staA	queueTail + 1
0403   7A69             				endif
0403   7A69             
0403   7A69             
0403   7A69             
0403   7A69             
0403   7A69             
0403   7A69~            				endif
0403   7A69~            				endif
0403   7A69             
0403   7A69~            				endif
0403   7A69~            				endif
0403   7A69             
0403   7A64             
0403   7A64 04          
0403   7A65             
0403   7A65             
0403   7A65~            				endif
0403   7A65~            				endif
0403   7A65~            				endif
0403   7A65             
0403   7A69             
0403   7A69~            				endif
0403   7A69~            				endif
0403   7A69             
0404   7A69             			endif
0404   7A69             
0404   7A69             
0404   7A69             
0404   7A69             
0404   7A69             
0404   7A69~            			endif
0404   7A69~            			endif
0404   7A69             
0404   7A69~            			endif
0404   7A69~            			endif
0404   7A69             
0404   7A44             
0404   7A44 24          
0404   7A45             
0404   7A45             
0404   7A45~            			endif
0404   7A45~            			endif
0404   7A45~            			endif
0404   7A45             
0404   7A69             
0404   7A69~            			endif
0404   7A69~            			endif
0404   7A69             
0405   7A69 20 1A       		bra settledEnd
0406   7A6B             notSettled: ; =0 -> was settled, so now it's not
0407   7A6B             			; get the settle time
0408   7A6B 96 53       			ldaA	>tempX + 1
0409   7A6D 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0410   7A6F DE 00       			ldX	>temp
0411   7A71             			
0412   7A71             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0413   7A71 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0414   7A73             			
0415   7A73             			; need to get correct 3 bits from switch settings
0416   7A73 F5 30 00    			bitB	>switchRow
0417   7A76             			ifne ; switch just turned on
0417   7A76             
0417   7A76 27 FE       
0418   7A78 44          				lsrA
0419   7A79 44          				lsrA
0420   7A7A             			else
0420   7A7A             
0420   7A7A             
0420   7A7A             
0420   7A7A             
0420   7A77             
0420   7A77             
0420   7A77             
0420   7A77~            			else
0420   7A77~            			else
0420   7A77~            			else
0420   7A77~            			else
0420   7A77             
0420   7A77~            			else
0420   7A77~            			else
0420   7A77~            			else
0420   7A77~            			else
0420   7A77             
0420   7A77             
0420   7A77 04          
0420   7A7A             
0420   7A7A 20 FE       
0420   7A7C             
0420   7A7C             
0420   7A7C             
0420   7A7C~            			else
0420   7A7C~            			else
0420   7A7C~            			else
0420   7A7C~            			else
0420   7A7C~            			else
0420   7A7C             
0420   7A7C~            			else
0420   7A7C~            			else
0420   7A7C             
0420   7A7C~            			else
0420   7A7C~            			else
0420   7A7C             
0421   7A7C 48          				aslA
0422   7A7D             			endif
0422   7A7D             
0422   7A7D             
0422   7A7D             
0422   7A7D             
0422   7A7D             
0422   7A7D~            			endif
0422   7A7D~            			endif
0422   7A7D             
0422   7A7D~            			endif
0422   7A7D~            			endif
0422   7A7D             
0422   7A7B             
0422   7A7B 01          
0422   7A7C             
0422   7A7C             
0422   7A7C~            			endif
0422   7A7C~            			endif
0422   7A7C~            			endif
0422   7A7C             
0422   7A7D             
0422   7A7D~            			endif
0422   7A7D~            			endif
0422   7A7D             
0423   7A7D 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0424   7A7F             						
0425   7A7F DE 52       			ldX	>tempX
0426   7A81 A7 00       			staA	0, X		; start settling	
0427   7A83 27 C0       			beq	settled		; quick out for 0 settle
0428   7A85             settledEnd:
0429   7A85             			
0430   7A85 32          		pulA
0431   7A86             	endif
0431   7A86             
0431   7A86             
0431   7A86             
0431   7A86             
0431   7A86             
0431   7A86~            	endif
0431   7A86~            	endif
0431   7A86             
0431   7A86~            	endif
0431   7A86~            	endif
0431   7A86             
0431   7A28             
0431   7A28 5D          
0431   7A29             
0431   7A29             
0431   7A29~            	endif
0431   7A29~            	endif
0431   7A29~            	endif
0431   7A29             
0431   7A86             
0431   7A86~            	endif
0431   7A86~            	endif
0431   7A86             
0432   7A86 7C 00 53    	inc tempX + 1
0433   7A89 58          	aslB
0434   7A8A 44          	lsrA			; pop lowest bit off, set Z if A is empty
0435   7A8B 26 98       	bne		swNext 	; more 'switched' bits, keep processing 
0436   7A8D             	
0437   7A8D             	
0438   7A8D             ; update lamps
0439   7A8D             updateLamps:
0440   7A8D             	;jmp updateStrobe
0441   7A8D             
0442   7A8D DE 50       	ldX	>curCol
0443   7A8F             	
0444   7A8F 86 FF       	ldaA	$FF	;lamp row is inverted
0445   7A91 B7 24 00    	staA	lampCol
0446   7A94 96 07       	ldaA	>strobe
0447   7A96 B7 24 02    	staA	lampStrobe
0448   7A99             	
0449   7A99 D6 03       	ldaB	>counter2
0450   7A9B A6 08       	ldaA	lampCol1, X
0451   7A9D C5 01       	bitB	1b 
0452   7A9F             	ifeq
0452   7A9F             
0452   7A9F 26 FE       
0453   7AA1 A8 A0       		eorA	flashLampCol1, X
0454   7AA3 A4 08       		andA	lampCol1, X
0455   7AA5             	endif
0455   7AA5             
0455   7AA5             
0455   7AA5             
0455   7AA5             
0455   7AA5             
0455   7AA5~            	endif
0455   7AA5~            	endif
0455   7AA5             
0455   7AA5~            	endif
0455   7AA5~            	endif
0455   7AA5             
0455   7AA0             
0455   7AA0 04          
0455   7AA1             
0455   7AA1             
0455   7AA1~            	endif
0455   7AA1~            	endif
0455   7AA1~            	endif
0455   7AA1             
0455   7AA5             
0455   7AA5~            	endif
0455   7AA5~            	endif
0455   7AA5             
0456   7AA5 43          	comA	; inverted
0457   7AA6             	
0458   7AA6 B7 24 00    	staA	lampCol
0459   7AA9 86 00       	ldaA	00
0460   7AAB             
0461   7AAB             ; update solenoids
0462   7AAB             	; if a solenoid is set to <254, --
0463   7AAB             	; if =255, off, otherwise on
0464   7AAB             	; else leave it at 254
0465   7AAB             	
0466   7AAB 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0467   7AAE 86 FE       	ldaA	254
0468   7AB0 DE 50       	ldX	>curCol
0469   7AB2             	; update solenoid in current 'column' (1-8) 
0470   7AB2 A1 40       	cmpA	solenoid1 - cRAM, X
0471   7AB4             	ifge 	; solenoid <=254, turn on
0471   7AB4             
0471   7AB4 25 FE       
0472   7AB6             		ifgt	; solenoid < 254, decrement
0472   7AB6             
0472   7AB6 23 FE       
0473   7AB8 6A 40       			dec	solenoid1 - cRAM, X
0474   7ABA             		endif
0474   7ABA             
0474   7ABA             
0474   7ABA             
0474   7ABA             
0474   7ABA             
0474   7ABA~            		endif
0474   7ABA~            		endif
0474   7ABA             
0474   7ABA~            		endif
0474   7ABA~            		endif
0474   7ABA             
0474   7AB7             
0474   7AB7 02          
0474   7AB8             
0474   7AB8             
0474   7AB8~            		endif
0474   7AB8~            		endif
0474   7AB8~            		endif
0474   7AB8             
0474   7ABA             
0474   7ABA~            		endif
0474   7ABA~            		endif
0474   7ABA             
0475   7ABA 0D          		sec
0476   7ABB             	else
0476   7ABB             
0476   7ABB             
0476   7ABB             
0476   7ABB             
0476   7AB5             
0476   7AB5             
0476   7AB5             
0476   7AB5~            	else
0476   7AB5~            	else
0476   7AB5~            	else
0476   7AB5~            	else
0476   7AB5             
0476   7AB5~            	else
0476   7AB5~            	else
0476   7AB5~            	else
0476   7AB5~            	else
0476   7AB5             
0476   7AB5             
0476   7AB5 07          
0476   7ABB             
0476   7ABB 20 FE       
0476   7ABD             
0476   7ABD             
0476   7ABD             
0476   7ABD~            	else
0476   7ABD~            	else
0476   7ABD~            	else
0476   7ABD~            	else
0476   7ABD~            	else
0476   7ABD             
0476   7ABD~            	else
0476   7ABD~            	else
0476   7ABD             
0476   7ABD~            	else
0476   7ABD~            	else
0476   7ABD             
0477   7ABD 0C          		clc
0478   7ABE             	endif
0478   7ABE             
0478   7ABE             
0478   7ABE             
0478   7ABE             
0478   7ABE             
0478   7ABE~            	endif
0478   7ABE~            	endif
0478   7ABE             
0478   7ABE~            	endif
0478   7ABE~            	endif
0478   7ABE             
0478   7ABC             
0478   7ABC 01          
0478   7ABD             
0478   7ABD             
0478   7ABD~            	endif
0478   7ABD~            	endif
0478   7ABD~            	endif
0478   7ABD             
0478   7ABE             
0478   7ABE~            	endif
0478   7ABE~            	endif
0478   7ABE             
0479   7ABE 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0480   7AC1             	; repeat above for second bank
0481   7AC1 A1 48       	cmpA	solenoid9 - cRAM, X
0482   7AC3             	ifge 	; solenoid <=254, turn on
0482   7AC3             
0482   7AC3 25 FE       
0483   7AC5             		ifgt	; solenoid < 254, decrement
0483   7AC5             
0483   7AC5 23 FE       
0484   7AC7 6A 48       			dec	solenoid9 - cRAM, X
0485   7AC9             		endif
0485   7AC9             
0485   7AC9             
0485   7AC9             
0485   7AC9             
0485   7AC9             
0485   7AC9~            		endif
0485   7AC9~            		endif
0485   7AC9             
0485   7AC9~            		endif
0485   7AC9~            		endif
0485   7AC9             
0485   7AC6             
0485   7AC6 02          
0485   7AC7             
0485   7AC7             
0485   7AC7~            		endif
0485   7AC7~            		endif
0485   7AC7~            		endif
0485   7AC7             
0485   7AC9             
0485   7AC9~            		endif
0485   7AC9~            		endif
0485   7AC9             
0486   7AC9 0D          		sec
0487   7ACA             	else
0487   7ACA             
0487   7ACA             
0487   7ACA             
0487   7ACA             
0487   7AC4             
0487   7AC4             
0487   7AC4             
0487   7AC4~            	else
0487   7AC4~            	else
0487   7AC4~            	else
0487   7AC4~            	else
0487   7AC4             
0487   7AC4~            	else
0487   7AC4~            	else
0487   7AC4~            	else
0487   7AC4~            	else
0487   7AC4             
0487   7AC4             
0487   7AC4 07          
0487   7ACA             
0487   7ACA 20 FE       
0487   7ACC             
0487   7ACC             
0487   7ACC             
0487   7ACC~            	else
0487   7ACC~            	else
0487   7ACC~            	else
0487   7ACC~            	else
0487   7ACC~            	else
0487   7ACC             
0487   7ACC~            	else
0487   7ACC~            	else
0487   7ACC             
0487   7ACC~            	else
0487   7ACC~            	else
0487   7ACC             
0488   7ACC 0C          		clc
0489   7ACD             	endif
0489   7ACD             
0489   7ACD             
0489   7ACD             
0489   7ACD             
0489   7ACD             
0489   7ACD~            	endif
0489   7ACD~            	endif
0489   7ACD             
0489   7ACD~            	endif
0489   7ACD~            	endif
0489   7ACD             
0489   7ACB             
0489   7ACB 01          
0489   7ACC             
0489   7ACC             
0489   7ACC~            	endif
0489   7ACC~            	endif
0489   7ACC~            	endif
0489   7ACC             
0489   7ACD             
0489   7ACD~            	endif
0489   7ACD~            	endif
0489   7ACD             
0490   7ACD 76 00 29    	ror		solBStatus	
0491   7AD0 7A 00 50    	dec		curCol ; undo inc
0492   7AD3             	
0493   7AD3             ; update strobe	
0494   7AD3             updateStrobe:
0495   7AD3             	;ldX		curCol
0496   7AD3             	;inX 	
0497   7AD3 86 08       	ldaA	8 	; pitch
0498   7AD5 9B 10       	addA	>curSwitchRowLsb
0499   7AD7 97 10       	staA	curSwitchRowLsb
0500   7AD9 78 00 07    	asl	strobe
0501   7ADC 7C 01 68    	inc	displayCol
0502   7ADF 86 00       	ldaA	0
0503   7AE1 91 07       	cmpA	>strobe ; strobe done?  reset
0504   7AE3             	ifeq		
0504   7AE3             
0504   7AE3 26 FE       
0505   7AE5 96 28       		ldaA	>solAStatus
0506   7AE7 B7 22 00    		staA	solenoidA
0507   7AEA 96 29       		ldaA	>solBStatus
0508   7AEC B7 22 02    		staA	solenoidB
0509   7AEF             	
0510   7AEF 86 01       		ldaA	00000001b
0511   7AF1 97 07       		staA	strobe
0512   7AF3             		
0513   7AF3             		;ldX 	#0
0514   7AF3             		
0515   7AF3 86 00       		ldaA	0
0516   7AF5 97 50       		staA	curCol
0517   7AF7 97 51       		staA	curCol + 1
0518   7AF9 97 10       		staA	curSwitchRowLsb
0519   7AFB 97 28       		staA	solAStatus
0520   7AFD 97 29       		staA	solBStatus
0521   7AFF             		
0522   7AFF F6 01 68    		ldaB	>displayCol	; reset display col only if it's > 7 
0523   7B02 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0524   7B04             		ifgt
0524   7B04             
0524   7B04 23 FE       
0525   7B06 B7 01 68    			staA	displayCol
0526   7B09             		endif
0526   7B09             
0526   7B09             
0526   7B09             
0526   7B09             
0526   7B09             
0526   7B09~            		endif
0526   7B09~            		endif
0526   7B09             
0526   7B09~            		endif
0526   7B09~            		endif
0526   7B09             
0526   7B05             
0526   7B05 03          
0526   7B06             
0526   7B06             
0526   7B06~            		endif
0526   7B06~            		endif
0526   7B06~            		endif
0526   7B06             
0526   7B09             
0526   7B09~            		endif
0526   7B09~            		endif
0526   7B09             
0527   7B09             	
0528   7B09 B6 01 69    		ldaA	>state
0529   7B0C 8A 04       		oraA	100b
0530   7B0E B7 01 69    		staA	state
0531   7B11             	else
0531   7B11             
0531   7B11             
0531   7B11             
0531   7B11             
0531   7AE4             
0531   7AE4             
0531   7AE4             
0531   7AE4~            	else
0531   7AE4~            	else
0531   7AE4~            	else
0531   7AE4~            	else
0531   7AE4             
0531   7AE4~            	else
0531   7AE4~            	else
0531   7AE4~            	else
0531   7AE4~            	else
0531   7AE4             
0531   7AE4             
0531   7AE4 2E          
0531   7B11             
0531   7B11 20 FE       
0531   7B13             
0531   7B13             
0531   7B13             
0531   7B13~            	else
0531   7B13~            	else
0531   7B13~            	else
0531   7B13~            	else
0531   7B13~            	else
0531   7B13             
0531   7B13~            	else
0531   7B13~            	else
0531   7B13             
0531   7B13~            	else
0531   7B13~            	else
0531   7B13             
0532   7B13 7C 00 51    		inc	curCol + 1
0533   7B16             	endif
0533   7B16             
0533   7B16             
0533   7B16             
0533   7B16             
0533   7B16             
0533   7B16~            	endif
0533   7B16~            	endif
0533   7B16             
0533   7B16~            	endif
0533   7B16~            	endif
0533   7B16             
0533   7B12             
0533   7B12 03          
0533   7B13             
0533   7B13             
0533   7B13~            	endif
0533   7B13~            	endif
0533   7B13~            	endif
0533   7B13             
0533   7B16             
0533   7B16~            	endif
0533   7B16~            	endif
0533   7B16             
0534   7B16             	
0535   7B16 3B          	rti
0536   7B17             afterInterrupt:
0537   7B17             
0538   7FF8             pointers: 	.org $7FF8  	
0539   7FF8             	.msfirst
0540   7FF8 79 C4       	.dw interrupt			
0541   7FFA 79 C4       	.dw interrupt			
0542   7FFC 79 C4       	.dw interrupt			
0543   7FFE 78 00       	.dw main
0544   8000             	
0545   8000             	
0546   8000             	.endtasm: Number of errors = 0
