0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             curCol:			.equ RAM + $50 ; +
0041+  0000             tempX:			.equ RAM + $52 ; +
0042+  0000             queueHead:		.equ RAM + $54 ; +
0043+  0000             queueTail:		.equ RAM + $56 ; +
0044+  0000             tempQ:			.equ RAM + $58 ; +
0045+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0046+  0000             queueEnd:		.equ RAM + $6D
0047+  0000             ;
0048+  0000             displayBcd1:	.equ RAM + $70
0049+  0000             displayBcd16:	.equ RAM + $7F
0050+  0000             ballCount:		.equ displayBcd1 + 7
0051+  0000             waitLeft: 		.equ RAM + $80 ; dec every 8ms
0052+  0000             waitLeftEnd:		.equ RAM + $87
0053+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0054+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0055+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0056+  0000             flashLampCol1:		.equ RAM + $A0
0057+  0000             flashLampCol8:		.equ RAM + $A7
0058+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0059+  0000             lastSwitch:		.equ RAM + $A8
0060+  0000             dropResetTimer:		.equ RAM + $A9 ; max 127
0061+  0000             dropsDown		.equ RAM + $AA
0062+  0000             p_Bonus:		.equ RAM + $B0
0063+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0064+  0000             p_DropsDown:		.equ RAM + $B5
0065+  0000             p_LampCol2:		.equ RAM + $B6 ; -> B9
0066+  0000             p_EachDropDown:		.equ RAM + $BA ; -> BD
0067+  0000             p_BonusLeft:		.equ RAM + $BE
0068+  0000             
0069+  0000             
0070+  0000             
0071+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0072+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0073+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0074+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0075+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0076+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0077+  0000             #DEFINE s(n) 		(0 + n)
0078+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0079+  0000             pA_10:			.equ pA_1m + 5
0080+  0000             pB_1m:			.equ pA_10 + 1
0081+  0000             pB_10:			.equ pB_1m + 5
0082+  0000             pC_1m:			.equ pB_10 + 1
0083+  0000             pC_10:			.equ pC_1m + 5
0084+  0000             pD_1m:			.equ pC_10 + 1
0085+  0000             pD_10:			.equ pD_1m + 5 
0086+  0000             ; 
0087+  0000             displayCol:		.equ cRAM + $6A
0088+  0000             state:			.equ cRAM + $6B	; ? | strobe reset | don't validate | ?
0089+  0000             
0090+  0000             instant:		.equ 4
0091+  0000             debounce:		.equ 1
0092+  0000             slow:			.equ 2
0093+  0000             
0094+  0000             switchSettle:	.equ cRAM + $30
0095+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 75    		cpX	displayBcd1 + 5
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 75    			cpX	displayBcd1 + 5
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7D    		cpX	displayBcd1 + 8 + 5
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7D    			cpX	displayBcd1 + 8 + 5
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0F       	ldaB	>lc(8) ; gameover
0101+  7C8C C5 20       	bitB	lr(6)
0102+  7C8E             	ifne
0102+  7C8E             
0102+  7C8E 27 FE       
0103+  7C90 39          		rts
0104+  7C91             	endif
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0104+  7C8F             
0104+  7C8F 01          
0104+  7C90             
0104+  7C90             
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90~            	endif
0104+  7C90             
0104+  7C91             
0104+  7C91~            	endif
0104+  7C91~            	endif
0104+  7C91             
0105+  7C91             	
0106+  7C91 D6 0E       	ldaB	>lc(7)
0107+  7C93 C5 02       	bitB	lr(2)
0108+  7C95 26 1A       	bne	blankP2
0109+  7C97 C5 04       	bitB	lr(3)
0110+  7C99 26 22       	bne	blankP3
0111+  7C9B C5 08       	bitB	lr(4)
0112+  7C9D 26 2A       	bne	blankP4
0113+  7C9F C5 10       	bitB	lr(5)
0114+  7CA1 26 32       	bne	blankDone
0115+  7CA3 20 00       	bra	blankP1
0116+  7CA5             blankP1:
0117+  7CA5 86 F0       	ldaA	$F0
0118+  7CA7 9A 74       	oraA	>displayBcd1 + 4
0119+  7CA9 97 74       	staA	displayBcd1 + 4
0120+  7CAB 86 F0       	ldaA	$F0
0121+  7CAD 9A 75       	oraA	>displayBcd1 + 5
0122+  7CAF 97 75       	staA	displayBcd1 + 5
0123+  7CB1             blankP2:
0124+  7CB1 86 F0       	ldaA	$F0
0125+  7CB3 9A 7C       	oraA	>displayBcd1 + 12
0126+  7CB5 97 7C       	staA	displayBcd1 + 12
0127+  7CB7 86 F0       	ldaA	$F0
0128+  7CB9 9A 7D       	oraA	>displayBcd1 + 13
0129+  7CBB 97 7D       	staA	displayBcd1 + 13
0130+  7CBD             blankP3:
0131+  7CBD 86 0F       	ldaA	$0F
0132+  7CBF 9A 74       	oraA	>displayBcd1 + 4
0133+  7CC1 97 74       	staA	displayBcd1 + 4
0134+  7CC3 86 0F       	ldaA	$0F
0135+  7CC5 9A 75       	oraA	>displayBcd1 + 5
0136+  7CC7 97 75       	staA	displayBcd1 + 5
0137+  7CC9             blankP4:
0138+  7CC9 86 0F       	ldaA	$0F
0139+  7CCB 9A 7C       	oraA	>displayBcd1 + 12
0140+  7CCD 97 7C       	staA	displayBcd1 + 12
0141+  7CCF 86 0F       	ldaA	$0F
0142+  7CD1 9A 7D       	oraA	>displayBcd1 + 13
0143+  7CD3 97 7D       	staA	displayBcd1 + 13
0144+  7CD5             blankDone:
0145+  7CD5 39          	rts
0146+  7CD6             	
0147+  7CD6             refreshPlayerScores:
0148+  7CD6 BD 7C 00    	jsr copyScores13
0149+  7CD9 BD 7C 45    	jsr copyScores24
0150+  7CDC             	
0151+  7CDC 86 F0       	ldaA	$F0
0152+  7CDE B1 01 50    	cmpA	>pA_1m
0153+  7CE1 26 29       	bne	refresh_1m
0154+  7CE3 B1 01 56    	cmpA	>pB_1m
0155+  7CE6 26 24       	bne	refresh_1m	
0156+  7CE8 B1 01 5C    	cmpA	>pC_1m
0157+  7CEB 26 1F       	bne	refresh_1m
0158+  7CED B1 01 62    	cmpA	>pD_1m
0159+  7CF0 26 1A       	bne	refresh_1m
0160+  7CF2             	
0161+  7CF2 CE 00 70    	ldX	displayBcd1
0162+  7CF5             refresh_10xloop:
0163+  7CF5 A6 01       	ldaA	1, X
0164+  7CF7 A7 00       	staA	0,X
0165+  7CF9 A6 09       	ldaA	8 + 1, X
0166+  7CFB A7 08       	staA	8, X
0167+  7CFD 08          	inX
0168+  7CFE 8C 00 75    	cpX	displayBcd1+5
0169+  7D01 26 F2       	bne	refresh_10xloop
0170+  7D03 86 00       	ldaA	0
0171+  7D05 97 75       	staA	displayBcd1 + 5
0172+  7D07 97 7D       	staA	displayBcd1 + 5 + 8
0173+  7D09 7E 7C 8A    	jmp blankNonPlayerScores
0174+  7D0C             refresh_1m:
0175+  7D0C 7E 7C 8A    	jmp blankNonPlayerScores
0176+  7D0F             	
0177+  7D0F             	
0178+  7D0F             ; add score instantly
0179+  7D0F             ; X = place in p*_1* to add the score to
0180+  7D0F             ; A = amount to add (max 9)
0181+  7D0F             ; tail call
0182+  7D0F             _addScoreI:
0183+  7D0F AB 00       	addA	0, X
0184+  7D11 8A F0       	oraA	11110000b
0185+  7D13             	ifcs ; overflowed, need to increment next number
0185+  7D13             
0185+  7D13 24 FE       
0186+  7D15 8B 06       		addA	6	; adjust A back into BCD
0187+  7D17 A7 00       		staA	0, X
0188+  7D19             addScore_carryOver:		; loop to propagate carry
0189+  7D19 09          		deX	; go to next decimal place
0190+  7D1A A6 00       		ldaA	0, X	
0191+  7D1C 8A F0       		oraA	11110000b
0192+  7D1E 81 F9       		cmpA	$F9
0193+  7D20             		ifeq			; if it's already a 9, reset it and carry again
0193+  7D20             
0193+  7D20 26 FE       
0194+  7D22 6F 00       			clr	0, X
0195+  7D24 27 F3       			beq addScore_carryOver
0196+  7D26             		else			; otherwise ++ it and done
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D26             
0196+  7D21             
0196+  7D21             
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21~            		else			; otherwise ++ it and done
0196+  7D21             
0196+  7D21             
0196+  7D21 06          
0196+  7D26             
0196+  7D26 20 FE       
0196+  7D28             
0196+  7D28             
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28~            		else			; otherwise ++ it and done
0196+  7D28             
0197+  7D28 6C 00       			inc	0, X
0198+  7D2A             		endif	
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0198+  7D27             
0198+  7D27 02          
0198+  7D28             
0198+  7D28             
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28~            		endif	
0198+  7D28             
0198+  7D2A             
0198+  7D2A~            		endif	
0198+  7D2A~            		endif	
0198+  7D2A             
0199+  7D2A             	else
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D2A             
0199+  7D14             
0199+  7D14             
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14~            	else
0199+  7D14             
0199+  7D14             
0199+  7D14 17          
0199+  7D2A             
0199+  7D2A 20 FE       
0199+  7D2C             
0199+  7D2C             
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0199+  7D2C~            	else
0199+  7D2C~            	else
0199+  7D2C             
0200+  7D2C 81 F9       		cmpA	$F9
0201+  7D2E             		ifgt ; >9 -> need to adjust back into BCD
0201+  7D2E             
0201+  7D2E 23 FE       
0202+  7D30 8B 06       			addA	6
0203+  7D32 A7 00       			staA	0, X
0204+  7D34             addScore_carryDa:
0205+  7D34 09          			deX
0206+  7D35 A6 00       			ldaA	0, X
0207+  7D37 8A F0       			oraA	11110000b
0208+  7D39 81 F9       			cmpA	$F9
0209+  7D3B             			ifeq
0209+  7D3B             
0209+  7D3B 26 FE       
0210+  7D3D 6F 00       				clr	0, X
0211+  7D3F 27 F3       				beq 	addScore_carryDa
0212+  7D41             			else
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D41             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C~            			else
0212+  7D3C             
0212+  7D3C             
0212+  7D3C 06          
0212+  7D41             
0212+  7D41 20 FE       
0212+  7D43             
0212+  7D43             
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0212+  7D43~            			else
0212+  7D43~            			else
0212+  7D43             
0213+  7D43 6C 00       				inc	0, X
0214+  7D45             			endif	
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0214+  7D42             
0214+  7D42 02          
0214+  7D43             
0214+  7D43             
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43~            			endif	
0214+  7D43             
0214+  7D45             
0214+  7D45~            			endif	
0214+  7D45~            			endif	
0214+  7D45             
0215+  7D45             		else
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D45             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F~            		else
0215+  7D2F             
0215+  7D2F             
0215+  7D2F 17          
0215+  7D45             
0215+  7D45 20 FE       
0215+  7D47             
0215+  7D47             
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0215+  7D47~            		else
0215+  7D47~            		else
0215+  7D47             
0216+  7D47 A7 00       			staA	0, X
0217+  7D49             		endif
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0217+  7D46             
0217+  7D46 02          
0217+  7D47             
0217+  7D47             
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47~            		endif
0217+  7D47             
0217+  7D49             
0217+  7D49~            		endif
0217+  7D49~            		endif
0217+  7D49             
0218+  7D49             	endif
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0218+  7D2B             
0218+  7D2B 1D          
0218+  7D2C             
0218+  7D2C             
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C~            	endif
0218+  7D2C             
0218+  7D49             
0218+  7D49~            	endif
0218+  7D49~            	endif
0218+  7D49             
0219+  7D49             
0220+  7D49 7E 7C D6    	jmp refreshPlayerScores
0221+  7D4C             	
0222+  7D4C 39          	rts
0223+  7D4D             	
0224+  7D4D             ; t A,X
0225+  7D4D             setXToCurPlayer10:
0226+  7D4D 96 0F       	ldaA	>lc(8)
0227+  7D4F 85 01       	bitA	0001b
0228+  7D51 27 04       	beq	_addScore10N_p2
0229+  7D53 CE 01 55    	ldX	pA_10
0230+  7D56 39          	rts
0231+  7D57             _addScore10N_p2:
0232+  7D57 85 02       	bitA	0010b
0233+  7D59 27 04       	beq	_addScore10N_p3
0234+  7D5B CE 01 5B    	ldX	pB_10
0235+  7D5E 39          	rts
0236+  7D5F             _addScore10N_p3:
0237+  7D5F 85 04       	bitA	0100b
0238+  7D61 27 04       	beq	_addScore10N_p4
0239+  7D63 CE 01 61    	ldX	pC_10
0240+  7D66 39          	rts
0241+  7D67             _addScore10N_p4:
0242+  7D67 CE 01 67    	ldX	pD_10
0243+  7D6A 39          	rts
0244+  7D6B             
0245+  7D6B             ; suspends execution for A ms and returns to queue processor
0246+  7D6B             ; should only be called from switch callbacks
0247+  7D6B             ; trashes everything but B
0248+  7D6B             _delay:	
0249+  7D6B CE 00 7F    	ldX	waitLeft - 1
0250+  7D6E             findEmptyLoop:
0251+  7D6E 08          	inX
0252+  7D6F 6D 00       	tst	0, X
0253+  7D71 26 FB       	bne 	findEmptyLoop 
0254+  7D73             	
0255+  7D73             	; X = first waitLeft that = 0
0256+  7D73 E7 18       	staB	waitReg - waitLeft, X
0257+  7D75 33          	pulB	; A = MSB of PC
0258+  7D76 E7 08       	staB	waitMsb - waitLeft, X
0259+  7D78 33          	pulB	; A = LSB of PC
0260+  7D79 E7 10       	staB	waitLsb - waitLeft, X
0261+  7D7B A7 00       	staA	0, X
0262+  7D7D             	; time and add stored
0263+  7D7D 7E 79 CB    	jmp skipEvent
0264+  7D80             	
0265+  7D80             resetScores:
0266+  7D80 86 00       	ldaA	00
0267+  7D82 CE 01 50    	ldX	pA_1m
0268+  7D85             _zeroScores:
0269+  7D85 A7 00       	staA	0, X
0270+  7D87 08          	inX
0271+  7D88 8C 01 68    	cpX	pD_10 + 1
0272+  7D8B 26 F8       	bne	_zeroScores
0273+  7D8D             	
0274+  7D8D 86 00       	ldaA	0
0275+  7D8F 97 12       	staA	curPlayer
0276+  7D91 97 13       	staA	curPlayer + 1
0277+  7D93 86 FF       	ldaA	$FF
0278+  7D95 97 76       	staA	displayBcd1 + 6
0279+  7D97 97 7E       	staA	displayBcd1 + 14
0280+  7D99 97 7F       	staA	displayBcd1 + 15
0281+  7D9B             	
0282+  7D9B BD 7C D6    	jsr	refreshPlayerScores
0283+  7D9E 39          	rts
0284+  7D9F             
0285+  7D9F             ; trash ~B
0286+  7D9F             ; delay for ms (8-2000)
0287+  7D9F             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0288+  7D9F             	
0289+  7D9F             ; trashes B (max 104ms)
0290+  7D9F             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0291+  7D9F             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0292+  7D9F             
0293+  7D9F             ; trashes AX
0294+  7D9F             ; place: 1-5 = 10s thru 100ks
0295+  7D9F             ; amount: 1-9
0296+  7D9F             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0297+  7D9F             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0298+  7D9F             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0299+  7D9F             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0300+  7D9F             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0301+  7D9F             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0302+  7D9F             
0303+  7D9F             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0304+  7D9F             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0305+  7D9F             
0306+  7D9F             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0307+  7D9F             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0308+  7D9F             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0309+  7D9F             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0006   7D9F             
0007   7D9F             #include "game.asm"
0001+  7D9F             ; Laser Ball solenoids
0002+  7D9F             ;#DEFINE KICKOUT 		01
0003+  7D9F             ;#DEFINE LEFT_KICKER 	02
0004+  7D9F             ;#DEFINE DROP_LA			03
0005+  7D9F             ;#DEFINE DROP_SER		04
0006+  7D9F             ;#DEFINE EJECT_HOLE		05
0007+  7D9F             ;#DEFINE DROP_BA			06
0008+  7D9F             ;#DEFINE DROP_LL			07
0009+  7D9F             ;#DEFINE RIGHT_KICKER	08
0010+  7D9F             ;#DEFINE SOUND1			09 ; thru 13
0011+  7D9F             ;#DEFINE KNOCKER			14
0012+  7D9F             ;#DEFINE	FLASHERS		15
0013+  7D9F             ;#DEFINE COIN_LOCKOUT	16
0014+  7D9F             
0015+  7D9F             ; Hot Tip solenoids
0016+  7D9F             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7D9F             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7D9F             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7D9F             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7D9F             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7D9F             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7D9F             #DEFINE CHIME_10	SOL(09, 16)
0023+  7D9F             #DEFINE CHIME_100	SOL(10, 16)
0024+  7D9F             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7D9F             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7D9F             #DEFINE CLICKER		SOL(13, 8)
0027+  7D9F             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7D9F             #DEFINE BUZZER		SOL(15, 100)
0029+  7D9F             #DEFINE SHORT_PAUSE 	115
0030+  7D9F             
0031+  7D9F             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7D9F             #DEFINE done(v)	\
0033+  7D9F             #DEFCONT	#IF (v==0)
0034+  7D9F             #DEFCONT		\ ldaA 10b
0035+  7D9F             #DEFCONT		\ oraA >state
0036+  7D9F             #DEFCONT		\ staA state
0037+  7D9F             #DEFCONT	\#ENDIF
0038+  7D9F             #DEFCONT	\ jmp afterQueueEvent
0039+  7D9F             	
0040+  7D9F             	
0041+  7D9F             _addScore10N:
0042+  7D9F BD 7D 4D    	jsr setXToCurPlayer10
0043+  7DA2 86 01       	ldaA	1
0044+  7DA4 BD 7D 0F    	jsr _addScoreI
0045+  7DA7 86 02       	fireSolenoidA(CHIME_10)
0045+  7DA9 B7 01 48    
0046+  7DAC 39          	rts
0047+  7DAD             _addScore100N:
0048+  7DAD BD 7D 4D    	jsr setXToCurPlayer10
0049+  7DB0 09          	deX
0050+  7DB1 86 01       	ldaA	1
0051+  7DB3 BD 7D 0F    	jsr _addScoreI
0052+  7DB6 86 02       	fireSolenoidA(CHIME_100)	
0052+  7DB8 B7 01 49    
0053+  7DBB 39          	rts
0054+  7DBC             _addScore1000N:
0055+  7DBC BD 7D 4D    	jsr setXToCurPlayer10
0056+  7DBF 09          	deX
0057+  7DC0 09          	deX
0058+  7DC1 86 01       	ldaA	1
0059+  7DC3 BD 7D 0F    	jsr _addScoreI
0060+  7DC6 86 02       	fireSolenoidA(CHIME_1000)
0060+  7DC8 B7 01 4A    
0061+  7DCB 39          	rts
0062+  7DCC             #DEFINE score10() jsr _addScore10N
0063+  7DCC             #DEFINE score100() jsr _addScore100N
0064+  7DCC             #DEFINE score1000() jsr _addScore1000N
0065+  7DCC             #DEFINE score500() \ jsr _addScore100N
0066+  7DCC             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7DCC             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7DCC             #DEFCONT	\ jsr _addScore100N
0069+  7DCC             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7DCC             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7DCC             #DEFCONT	\ jsr _addScore100N
0072+  7DCC             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7DCC             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7DCC             #DEFCONT	\ jsr _addScore100N
0075+  7DCC             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7DCC             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7DCC             #DEFCONT	\ jsr _addScore100N
0078+  7DCC             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7DCC             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7DCC             
0081+  7DCC             #DEFINE advBonus()	inc p_Bonus
0082+  7DCC             	
0083+  7DCC             ; switch callbacks:
0084+  7DCC             
0085+  60C0             none:	.org $6000 + 192 ; size of callback table
0086+  60C0             	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0             
0086+  60C0 7E 79 82    
0087+  60C3             	
0088+  60C3             bonusLights:
0089+  60C3 86 00       	ldaA	0
0090+  60C5 97 0C       	staA	lc(5)
0091+  60C7 97 0D       	staA	lc(6)
0092+  60C9 7D 00 B0    	tst	p_Bonus
0093+  60CC 27 11       	beq	bonusLights_done
0094+  60CE             	
0095+  60CE 86 80       	lampOn(8,5) ; 1k
0095+  60D0 9A 0C       
0095+  60D2 97 0C       
0096+  60D4             	
0097+  60D4 96 B0       	ldaA	>p_Bonus
0098+  60D6             bonusLights_loop:
0099+  60D6 4A          	decA
0100+  60D7 27 06       	beq 	bonusLights_done
0101+  60D9 0D          	seC
0102+  60DA 79 00 0D    	rol	lc(6)
0103+  60DD 20 F7       	bra	bonusLights_loop
0104+  60DF             	
0105+  60DF             bonusLights_done
0106+  60DF             
0107+  60DF 86 09       	ldaA	9
0108+  60E1 91 B0       	cmpA	>p_Bonus
0109+  60E3             	ifge	
0109+  60E3             
0109+  60E3 25 FE       
0110+  60E5             	else	; bonus >= 10?
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E4             
0110+  60E4             
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4             
0110+  60E4 02          
0110+  60E5             
0110+  60E5 20 FE       
0110+  60E7             
0110+  60E7             
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0111+  60E7 86 0A       		ldaA	10
0112+  60E9 97 B0       		staA	p_Bonus
0113+  60EB 86 40       		lampOn(7,5) ; 10k light
0113+  60ED 9A 0C       
0113+  60EF 97 0C       
0114+  60F1             	endif
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60E6             
0114+  60E6 0A          
0114+  60E7             
0114+  60E7             
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0115+  60F1             	
0116+  60F1 39          	rts
0117+  60F2             	
0118+  60F2             	
0119+  60F2             startBall:
0120+  60F2 DE 12       	ldX	>curPlayer
0121+  60F4 86 01       	ldaA	1
0122+  60F6 97 B0       	staA	p_Bonus
0123+  60F8 B6 22 03    	enablePf
0123+  60FB 8A 38       
0123+  60FD B7 22 03    
0124+  6100             	
0125+  6100 86 00       	ldaA	0
0126+  6102 97 B5       	staA	p_DropsDown
0127+  6104 86 41       	ldaA	65
0128+  6106 97 A9       	staA	dropResetTimer
0129+  6108             	
0130+  6108 A6 BA       	ldaA	p_EachDropDown, X
0131+  610A 97 AA       	staA	dropsDown
0132+  610C 43          	comA
0133+  610D 85 07       	bitA	000111b
0134+  610F             	ifne
0134+  610F             
0134+  610F 27 FE       
0135+  6111 C6 0C       		fireSolenoid(DROP_HOT)
0135+  6113 F7 01 42    
0136+  6116 86 12       		delay(150)
0136+  6118 BD 7D 6B    
0137+  611B             	endif
0137+  611B             
0137+  611B             
0137+  611B             
0137+  611B             
0137+  611B             
0137+  611B~            	endif
0137+  611B~            	endif
0137+  611B             
0137+  611B~            	endif
0137+  611B~            	endif
0137+  611B             
0137+  6110             
0137+  6110 0A          
0137+  6111             
0137+  6111             
0137+  6111~            	endif
0137+  6111~            	endif
0137+  6111~            	endif
0137+  6111             
0137+  611B             
0137+  611B~            	endif
0137+  611B~            	endif
0137+  611B             
0138+  611B 96 AA       	ldaA	>dropsDown
0139+  611D 43          	comA
0140+  611E 85 38       	bitA	111000b
0141+  6120             	ifne
0141+  6120             
0141+  6120 27 FE       
0142+  6122 C6 0C       		fireSolenoid(DROP_TIP)
0142+  6124 F7 01 41    
0143+  6127 86 12       		delay(150)
0143+  6129 BD 7D 6B    
0144+  612C             	endif
0144+  612C             
0144+  612C             
0144+  612C             
0144+  612C             
0144+  612C             
0144+  612C~            	endif
0144+  612C~            	endif
0144+  612C             
0144+  612C~            	endif
0144+  612C~            	endif
0144+  612C             
0144+  6121             
0144+  6121 0A          
0144+  6122             
0144+  6122             
0144+  6122~            	endif
0144+  6122~            	endif
0144+  6122~            	endif
0144+  6122             
0144+  612C             
0144+  612C~            	endif
0144+  612C~            	endif
0144+  612C             
0145+  612C             	
0146+  612C 86 FF       	ldaA	$FF
0147+  612E 97 A8       	staA	lastSwitch
0148+  6130             	
0149+  6130             	; clear lights
0150+  6130 CE 00 08    	ldX	lampCol1
0151+  6133 86 00       	ldaA	0b
0152+  6135             lClearLights:
0153+  6135 A7 00       	staA	0, X
0154+  6137 A7 98       	staA	flashLampCol1 - lampCol1, X
0155+  6139 08          	inX
0156+  613A 8C 00 0E    	cpX	lc(6) + 1
0157+  613D 26 F6       	bne	lClearLights
0158+  613F             	;
0159+  613F             	
0160+  613F             	; init lights for player data
0161+  613F DE 12       	ldX	>curPlayer
0162+  6141 A6 B1       	ldaA	p_Ejects, X
0163+  6143 97 0B       	staA	lc(4)
0164+  6145 E6 B6       	ldaB	p_LampCol2, X
0165+  6147 C5 02       	bitB	lr(2)
0166+  6149             	ifne 
0166+  6149             
0166+  6149 27 FE       
0167+  614B 86 02       		lampOn(2,3)
0167+  614D 9A 0A       
0167+  614F 97 0A       
0168+  6151 C4 FD       		andB	11111101b
0169+  6153             	endif
0169+  6153             
0169+  6153             
0169+  6153             
0169+  6153             
0169+  6153             
0169+  6153~            	endif
0169+  6153~            	endif
0169+  6153             
0169+  6153~            	endif
0169+  6153~            	endif
0169+  6153             
0169+  614A             
0169+  614A 08          
0169+  614B             
0169+  614B             
0169+  614B~            	endif
0169+  614B~            	endif
0169+  614B~            	endif
0169+  614B             
0169+  6153             
0169+  6153~            	endif
0169+  6153~            	endif
0169+  6153             
0170+  6153 D7 09       	staB	lc(2)
0171+  6155             	
0172+  6155 86 40       	ldaA	lr(7) ; shoot again
0173+  6157 95 0F       	bitA	>lc(8)
0174+  6159             	ifne
0174+  6159             
0174+  6159 27 FE       
0175+  615B 86 01       		lampOn(1,3) ; shoot again
0175+  615D 9A 0A       
0175+  615F 97 0A       
0176+  6161             	endif
0176+  6161             
0176+  6161             
0176+  6161             
0176+  6161             
0176+  6161             
0176+  6161~            	endif
0176+  6161~            	endif
0176+  6161             
0176+  6161~            	endif
0176+  6161~            	endif
0176+  6161             
0176+  615A             
0176+  615A 06          
0176+  615B             
0176+  615B             
0176+  615B~            	endif
0176+  615B~            	endif
0176+  615B~            	endif
0176+  615B             
0176+  6161             
0176+  6161~            	endif
0176+  6161~            	endif
0176+  6161             
0177+  6161             	
0178+  6161             	; flash player light
0179+  6161 86 0F       	ldaA	00001111b ; player up lights
0180+  6163 9A A7       	oraA	>flc(8)
0181+  6165 97 A7       	staA	flc(8)
0182+  6167             	
0183+  6167 86 01       	ldaA	sr(1) ; check outhole
0184+  6169 95 21       	bitA	>sc(2)
0185+  616B             	ifne ; ball in hole
0185+  616B             
0185+  616B 27 FE       
0186+  616D C6 02       		fireSolenoid(OUTHOLE)
0186+  616F F7 01 44    
0187+  6172             	endif
0187+  6172             
0187+  6172             
0187+  6172             
0187+  6172             
0187+  6172             
0187+  6172~            	endif
0187+  6172~            	endif
0187+  6172             
0187+  6172~            	endif
0187+  6172~            	endif
0187+  6172             
0187+  616C             
0187+  616C 05          
0187+  616D             
0187+  616D             
0187+  616D~            	endif
0187+  616D~            	endif
0187+  616D~            	endif
0187+  616D             
0187+  6172             
0187+  6172~            	endif
0187+  6172~            	endif
0187+  6172             
0188+  6172             	
0189+  6172 39          	rts
0190+  6173             	
0191+  6173             	
0192+  6173             startGame:
0193+  6173 86 02       	lampOn(2,7) ; one player
0193+  6175 9A 0E       
0193+  6177 97 0E       
0194+  6179             	
0195+  6179 86 DF       	lampOff(6,8) ; game over
0195+  617B 94 0F       
0195+  617D 97 0F       
0196+  617F             	
0197+  617F C6 02       	fireSolenoid(CHIME_10)
0197+  6181 F7 01 48    
0198+  6184 86 0E       	delay(SHORT_PAUSE)
0198+  6186 BD 7D 6B    
0199+  6189 C6 02       	fireSolenoid(CHIME_10)
0199+  618B F7 01 48    
0200+  618E 86 0E       	delay(SHORT_PAUSE)
0200+  6190 BD 7D 6B    
0201+  6193 C6 02       	fireSolenoid(CHIME_10)
0201+  6195 F7 01 48    
0202+  6198 86 19       	delay(200)
0202+  619A BD 7D 6B    
0203+  619D             	
0204+  619D C6 02       	fireSolenoid(CHIME_10)
0204+  619F F7 01 48    
0205+  61A2 86 0E       	delay(SHORT_PAUSE)
0205+  61A4 BD 7D 6B    
0206+  61A7 C6 02       	fireSolenoid(CHIME_10)
0206+  61A9 F7 01 48    
0207+  61AC 86 0E       	delay(SHORT_PAUSE)
0207+  61AE BD 7D 6B    
0208+  61B1 C6 02       	fireSolenoid(CHIME_10)
0208+  61B3 F7 01 48    
0209+  61B6 86 19       	delay(200)
0209+  61B8 BD 7D 6B    
0210+  61BB             	
0211+  61BB C6 02       	fireSolenoid(CHIME_10)
0211+  61BD F7 01 48    
0212+  61C0 86 0E       	delay(SHORT_PAUSE)
0212+  61C2 BD 7D 6B    
0213+  61C5 C6 02       	fireSolenoid(CHIME_10)
0213+  61C7 F7 01 48    
0214+  61CA 86 0E       	delay(SHORT_PAUSE)
0214+  61CC BD 7D 6B    
0215+  61CF C6 02       	fireSolenoid(CHIME_100)
0215+  61D1 F7 01 49    
0216+  61D4 86 19       	delay(200)
0216+  61D6 BD 7D 6B    
0217+  61D9 C6 02       	fireSolenoid(CHIME_1000)
0217+  61DB F7 01 4A    
0218+  61DE 86 19       	delay(200)
0218+  61E0 BD 7D 6B    
0219+  61E3 C6 02       	fireSolenoid(CHIME_10k)
0219+  61E5 F7 01 4B    
0220+  61E8 86 12       	delay(150)
0220+  61EA BD 7D 6B    
0221+  61ED             	
0222+  61ED             	; reset scores
0223+  61ED BD 7D 80    	jsr 	resetScores
0224+  61F0             	
0225+  61F0             	; reset ball count
0226+  61F0 86 10       	ldaA	$10
0227+  61F2 97 77       	staA	ballCount	
0228+  61F4             
0229+  61F4 C6 00       	ldaB	0
0230+  61F6 D7 13       	staB	curPlayer + 1
0231+  61F8             	
0232+  61F8 D7 0E       	staB	lc(7)
0233+  61FA D7 0F       	staB	lc(8)
0234+  61FC D7 A6       	staB	flc(7)
0235+  61FE D7 A7       	staB	flc(8)
0236+  6200             	
0237+  6200 CE 00 00    	ldX	0
0238+  6203             lInitPlayers:
0239+  6203 C6 01       	ldaB	lr(1)
0240+  6205 E7 B1       	staB	p_Ejects, X
0241+  6207 C6 00       	ldaB	0
0242+  6209 E7 B6       	staB	p_LampCol2, X
0243+  620B E7 BA       	staB	p_EachDropDown, X
0244+  620D 08          	inX
0245+  620E 8C 00 04    	cpX	4
0246+  6211 26 F0       	bne	lInitPlayers
0247+  6213             	
0248+  6213 BD 60 F2    	jsr	startBall
0249+  6216             	
0250+  6216             	; invalidate playfield
0251+  6216 86 01       	ldaA	lr(1)
0252+  6218 9A 0F       	oraA	>lc(8)
0253+  621A 97 0F       	staA	lc(8)
0254+  621C             	
0255+  621C 86 02       	lampOn(2,7) ; one player
0255+  621E 9A 0E       
0255+  6220 97 0E       
0256+  6222             	
0257+  6222 86 DF       	lampOff(6,8) ; game over
0257+  6224 94 0F       
0257+  6226 97 0F       
0258+  6228             	
0259+  6228 39          	rts
0260+  6229             	
0261+  6229             
0262+  6229             	
0263+  6229             swTilt: 
0264+  6229 86 10       	lampOn(5,8) ; tilt
0264+  622B 9A 0F       
0264+  622D 97 0F       
0265+  622F B6 22 03    	disablePf
0265+  6232 84 F7       
0265+  6234 B7 22 03    
0266+  6237             	done(0)
0266+  6237             
0266+  6237 86 02       
0266+  6239 BA 01 6B    
0266+  623C B7 01 6B    
0266+  623F             
0266+  623F 7E 79 82    
0267+  6242             	
0268+  6242             swStart: 
0269+  6242 96 0F       	ldaA >lc(8)
0270+  6244 85 20       	bitA lr(6)
0271+  6246             	ifne ; in game over
0271+  6246             
0271+  6246 27 FE       
0272+  6248 BD 61 73    		jsr startGame
0273+  624B             	else 
0273+  624B             
0273+  624B             
0273+  624B             
0273+  624B             
0273+  6247             
0273+  6247             
0273+  6247             
0273+  6247~            	else 
0273+  6247~            	else 
0273+  6247~            	else 
0273+  6247~            	else 
0273+  6247             
0273+  6247~            	else 
0273+  6247~            	else 
0273+  6247~            	else 
0273+  6247~            	else 
0273+  6247             
0273+  6247             
0273+  6247 05          
0273+  624B             
0273+  624B 20 FE       
0273+  624D             
0273+  624D             
0273+  624D             
0273+  624D~            	else 
0273+  624D~            	else 
0273+  624D~            	else 
0273+  624D~            	else 
0273+  624D~            	else 
0273+  624D             
0273+  624D~            	else 
0273+  624D~            	else 
0273+  624D             
0273+  624D~            	else 
0273+  624D~            	else 
0273+  624D             
0274+  624D 86 10       		ldaA	$10
0275+  624F 91 77       		cmpA	>ballCount
0276+  6251             		ifeq ; add player
0276+  6251             
0276+  6251 26 FE       
0277+  6253 86 1E       			ldaA	00011110b
0278+  6255 94 0E       			andA	>lc(7) ; player count lights
0279+  6257 85 10       			bitA	lr(5)
0280+  6259             			ifeq	; if not on P4 already, add player
0280+  6259             
0280+  6259 26 FE       
0281+  625B 48          				aslA
0282+  625C C6 E1       				ldaB	11100001b
0283+  625E D4 0E       				andB	>lc(7)
0284+  6260 D7 0E       				staB	lc(7)
0285+  6262 9A 0E       				oraA	>lc(7)
0286+  6264 97 0E       				staA	lc(7)
0287+  6266             			endif
0287+  6266             
0287+  6266             
0287+  6266             
0287+  6266             
0287+  6266             
0287+  6266~            			endif
0287+  6266~            			endif
0287+  6266             
0287+  6266~            			endif
0287+  6266~            			endif
0287+  6266             
0287+  625A             
0287+  625A 0B          
0287+  625B             
0287+  625B             
0287+  625B~            			endif
0287+  625B~            			endif
0287+  625B~            			endif
0287+  625B             
0287+  6266             
0287+  6266~            			endif
0287+  6266~            			endif
0287+  6266             
0288+  6266             		else ; restart game
0288+  6266             
0288+  6266             
0288+  6266             
0288+  6266             
0288+  6252             
0288+  6252             
0288+  6252             
0288+  6252~            		else ; restart game
0288+  6252~            		else ; restart game
0288+  6252~            		else ; restart game
0288+  6252~            		else ; restart game
0288+  6252             
0288+  6252~            		else ; restart game
0288+  6252~            		else ; restart game
0288+  6252~            		else ; restart game
0288+  6252~            		else ; restart game
0288+  6252             
0288+  6252             
0288+  6252 15          
0288+  6266             
0288+  6266 20 FE       
0288+  6268             
0288+  6268             
0288+  6268             
0288+  6268~            		else ; restart game
0288+  6268~            		else ; restart game
0288+  6268~            		else ; restart game
0288+  6268~            		else ; restart game
0288+  6268~            		else ; restart game
0288+  6268             
0288+  6268~            		else ; restart game
0288+  6268~            		else ; restart game
0288+  6268             
0288+  6268~            		else ; restart game
0288+  6268~            		else ; restart game
0288+  6268             
0289+  6268 BD 61 73    			jsr startGame
0290+  626B             		endif		
0290+  626B             
0290+  626B             
0290+  626B             
0290+  626B             
0290+  626B             
0290+  626B~            		endif		
0290+  626B~            		endif		
0290+  626B             
0290+  626B~            		endif		
0290+  626B~            		endif		
0290+  626B             
0290+  6267             
0290+  6267 03          
0290+  6268             
0290+  6268             
0290+  6268~            		endif		
0290+  6268~            		endif		
0290+  6268~            		endif		
0290+  6268             
0290+  626B             
0290+  626B~            		endif		
0290+  626B~            		endif		
0290+  626B             
0291+  626B             	endif
0291+  626B             
0291+  626B             
0291+  626B             
0291+  626B             
0291+  626B             
0291+  626B~            	endif
0291+  626B~            	endif
0291+  626B             
0291+  626B~            	endif
0291+  626B~            	endif
0291+  626B             
0291+  624C             
0291+  624C 1E          
0291+  624D             
0291+  624D             
0291+  624D~            	endif
0291+  624D~            	endif
0291+  624D~            	endif
0291+  624D             
0291+  626B             
0291+  626B~            	endif
0291+  626B~            	endif
0291+  626B             
0292+  626B             	
0293+  626B BD 7C D6    	jsr refreshPlayerScores
0294+  626E             	
0295+  626E             	done(0)
0295+  626E             
0295+  626E 86 02       
0295+  6270 BA 01 6B    
0295+  6273 B7 01 6B    
0295+  6276             
0295+  6276 7E 79 82    
0296+  6279             	
0297+  6279             swOuthole: 
0298+  6279 86 4B       	delay(600)
0298+  627B BD 7D 6B    
0299+  627E 96 0F       	ldaA	>lc(8) ; !game over
0300+  6280 85 20       	bitA	lr(6)
0301+  6282             	ifne ; game over
0301+  6282             
0301+  6282 27 FE       
0302+  6284             		done(0)
0302+  6284             
0302+  6284 86 02       
0302+  6286 BA 01 6B    
0302+  6289 B7 01 6B    
0302+  628C             
0302+  628C 7E 79 82    
0303+  628F             	endif
0303+  628F             
0303+  628F             
0303+  628F             
0303+  628F             
0303+  628F             
0303+  628F~            	endif
0303+  628F~            	endif
0303+  628F             
0303+  628F~            	endif
0303+  628F~            	endif
0303+  628F             
0303+  6283             
0303+  6283 0B          
0303+  6284             
0303+  6284             
0303+  6284~            	endif
0303+  6284~            	endif
0303+  6284~            	endif
0303+  6284             
0303+  628F             
0303+  628F~            	endif
0303+  628F~            	endif
0303+  628F             
0304+  628F             	
0305+  628F             	; check ballsave
0306+  628F 86 01       	ldaA	lr(1)
0307+  6291 95 0A       	bitA	>lc(3)
0308+  6293             	ifne	; shoot again on
0308+  6293             
0308+  6293 27 FE       
0309+  6295 95 A2       		bitA	>flc(3)
0310+  6297             		ifne ; shoot again flashing
0310+  6297             
0310+  6297 27 FE       
0311+  6299             			; turn off used special
0312+  6299 86 80       			ldaA	lr(8) ; right special
0313+  629B 95 09       			bitA	>lc(2)
0314+  629D             			ifne
0314+  629D             
0314+  629D 27 FE       
0315+  629F 86 7F       				lampOff(8,2)
0315+  62A1 94 09       
0315+  62A3 97 09       
0316+  62A5 86 7F       				flashOff(8,2)
0316+  62A7 94 A1       
0316+  62A9 97 A1       
0317+  62AB             			endif
0317+  62AB             
0317+  62AB             
0317+  62AB             
0317+  62AB             
0317+  62AB             
0317+  62AB~            			endif
0317+  62AB~            			endif
0317+  62AB             
0317+  62AB~            			endif
0317+  62AB~            			endif
0317+  62AB             
0317+  629E             
0317+  629E 0C          
0317+  629F             
0317+  629F             
0317+  629F~            			endif
0317+  629F~            			endif
0317+  629F~            			endif
0317+  629F             
0317+  62AB             
0317+  62AB~            			endif
0317+  62AB~            			endif
0317+  62AB             
0318+  62AB 86 02       			ldaA	lr(2) ; right special
0319+  62AD 95 0A       			bitA	>lc(3)
0320+  62AF             			ifne
0320+  62AF             
0320+  62AF 27 FE       
0321+  62B1 86 FD       				lampOff(2,3)
0321+  62B3 94 0A       
0321+  62B5 97 0A       
0322+  62B7 86 FD       				flashOff(2,3)
0322+  62B9 94 A2       
0322+  62BB 97 A2       
0323+  62BD             			endif
0323+  62BD             
0323+  62BD             
0323+  62BD             
0323+  62BD             
0323+  62BD             
0323+  62BD~            			endif
0323+  62BD~            			endif
0323+  62BD             
0323+  62BD~            			endif
0323+  62BD~            			endif
0323+  62BD             
0323+  62B0             
0323+  62B0 0C          
0323+  62B1             
0323+  62B1             
0323+  62B1~            			endif
0323+  62B1~            			endif
0323+  62B1~            			endif
0323+  62B1             
0323+  62BD             
0323+  62BD~            			endif
0323+  62BD~            			endif
0323+  62BD             
0324+  62BD             			
0325+  62BD             			; flash player light
0326+  62BD 86 0F       			ldaA	00001111b ; player up lights
0327+  62BF 9A A7       			oraA	>flc(8)
0328+  62C1 97 A7       			staA	flc(8)
0329+  62C3             		endif
0329+  62C3             
0329+  62C3             
0329+  62C3             
0329+  62C3             
0329+  62C3             
0329+  62C3~            		endif
0329+  62C3~            		endif
0329+  62C3             
0329+  62C3~            		endif
0329+  62C3~            		endif
0329+  62C3             
0329+  6298             
0329+  6298 2A          
0329+  6299             
0329+  6299             
0329+  6299~            		endif
0329+  6299~            		endif
0329+  6299~            		endif
0329+  6299             
0329+  62C3             
0329+  62C3~            		endif
0329+  62C3~            		endif
0329+  62C3             
0330+  62C3             	endif
0330+  62C3             
0330+  62C3             
0330+  62C3             
0330+  62C3             
0330+  62C3             
0330+  62C3~            	endif
0330+  62C3~            	endif
0330+  62C3             
0330+  62C3~            	endif
0330+  62C3~            	endif
0330+  62C3             
0330+  6294             
0330+  6294 2E          
0330+  6295             
0330+  6295             
0330+  6295~            	endif
0330+  6295~            	endif
0330+  6295~            	endif
0330+  6295             
0330+  62C3             
0330+  62C3~            	endif
0330+  62C3~            	endif
0330+  62C3             
0331+  62C3             	
0332+  62C3 86 0F       	ldaA	00001111b ; player up lights
0333+  62C5 95 A7       	bitA	>flc(8)	; check if any player is flashing
0334+  62C7             	ifne ; any flashing -> playfield invalid
0334+  62C7             
0334+  62C7 27 FE       
0335+  62C9             swOuthole_save:
0336+  62C9 86 EF       		lampOff(5,8) ; tilt
0336+  62CB 94 0F       
0336+  62CD 97 0F       
0337+  62CF             		
0338+  62CF B6 22 03    		enablePf
0338+  62D2 8A 38       
0338+  62D4 B7 22 03    
0339+  62D7 C6 02       		fireSolenoid(OUTHOLE)
0339+  62D9 F7 01 44    
0340+  62DC             	else ; none flashing -> playfield valid -> end ball			
0340+  62DC             
0340+  62DC             
0340+  62DC             
0340+  62DC             
0340+  62C8             
0340+  62C8             
0340+  62C8             
0340+  62C8~            	else ; none flashing -> playfield valid -> end ball			
0340+  62C8~            	else ; none flashing -> playfield valid -> end ball			
0340+  62C8~            	else ; none flashing -> playfield valid -> end ball			
0340+  62C8~            	else ; none flashing -> playfield valid -> end ball			
0340+  62C8             
0340+  62C8~            	else ; none flashing -> playfield valid -> end ball			
0340+  62C8~            	else ; none flashing -> playfield valid -> end ball			
0340+  62C8~            	else ; none flashing -> playfield valid -> end ball			
0340+  62C8~            	else ; none flashing -> playfield valid -> end ball			
0340+  62C8             
0340+  62C8             
0340+  62C8 15          
0340+  62DC             
0340+  62DC 20 FE       
0340+  62DE             
0340+  62DE             
0340+  62DE             
0340+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0340+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0340+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0340+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0340+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0340+  62DE             
0340+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0340+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0340+  62DE             
0340+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0340+  62DE~            	else ; none flashing -> playfield valid -> end ball			
0340+  62DE             
0341+  62DE             swOuthole_bonusLoop:
0342+  62DE BD 7D BC    		score1000()
0343+  62E1 96 09       		ldaA	>lc(2) ; double bonus
0344+  62E3 85 04       		bitA	lr(3)
0345+  62E5             		ifne 
0345+  62E5             
0345+  62E5 27 FE       
0346+  62E7 86 0C       			delay(100)
0346+  62E9 BD 7D 6B    
0347+  62EC BD 7D BC    			score1000()
0348+  62EF             		endif
0348+  62EF             
0348+  62EF             
0348+  62EF             
0348+  62EF             
0348+  62EF             
0348+  62EF~            		endif
0348+  62EF~            		endif
0348+  62EF             
0348+  62EF~            		endif
0348+  62EF~            		endif
0348+  62EF             
0348+  62E6             
0348+  62E6 08          
0348+  62E7             
0348+  62E7             
0348+  62E7~            		endif
0348+  62E7~            		endif
0348+  62E7~            		endif
0348+  62E7             
0348+  62EF             
0348+  62EF~            		endif
0348+  62EF~            		endif
0348+  62EF             
0349+  62EF 7A 00 B0    		dec	p_Bonus
0350+  62F2 BD 60 C3    		jsr	bonusLights
0351+  62F5 86 19       		delay(200)
0351+  62F7 BD 7D 6B    
0352+  62FA 7D 00 B0    		tst	p_Bonus
0353+  62FD 26 DF       		bne	swOuthole_bonusLoop
0354+  62FF             	
0355+  62FF 86 0F       		ldaA	00001111b ; player up lights
0356+  6301 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0357+  6303 D6 0A       		ldaB	>lc(3) ; check shoot again light
0358+  6305 C5 01       		bitB	lr(1)
0359+  6307             		ifeq ; shoot again not lit
0359+  6307             
0359+  6307 26 FE       
0360+  6309             			; store player's data
0361+  6309 DE 12       			ldX	>curPlayer
0362+  630B D6 0B       			ldaB	>lc(4)
0363+  630D E7 B1       			staB	p_Ejects, X
0364+  630F D6 0A       			ldaB	>lc(3)
0365+  6311 C4 02       			andB	lr(2)
0366+  6313 DA 09       			oraB	>lc(2)
0367+  6315 E7 B6       			staB	p_LampCol2, X
0368+  6317 D6 AA       			ldaB	>dropsDown
0369+  6319 E7 BA       			staB	p_EachDropDown, X
0370+  631B             			
0371+  631B             		
0372+  631B             			; go to next player
0373+  631B 48          			aslA
0374+  631C 7C 00 13    			inc	curPlayer + 1
0375+  631F 95 0E       			bitA	>lc(7)	; is player count < player #
0376+  6321             			ifne ; last player
0376+  6321             
0376+  6321 27 FE       
0377+  6323 86 01       				ldaA	00000001b; ; back to player 1
0378+  6325 C6 00       				ldaB	0
0379+  6327 D7 13       				staB	curPlayer + 1
0380+  6329             				
0381+  6329             				; increase ball count
0382+  6329 D6 77       				ldaB	>ballCount
0383+  632B CB 10       				addB	$10
0384+  632D C1 40       				cmpB	$40
0385+  632F             				ifeq ; game over
0385+  632F             
0385+  632F 26 FE       
0386+  6331 86 20       					lampOn(6,8)
0386+  6333 9A 0F       
0386+  6335 97 0F       
0387+  6337 B6 22 03    					disablePf
0387+  633A 84 F7       
0387+  633C B7 22 03    
0388+  633F             					done(1)
0388+  633F~            					done(1)
0388+  633F~            					done(1)
0388+  633F~            					done(1)
0388+  633F~            					done(1)
0388+  633F             
0388+  633F 7E 79 82    
0389+  6342             				else
0389+  6342             
0389+  6342             
0389+  6342             
0389+  6342             
0389+  6330             
0389+  6330             
0389+  6330             
0389+  6330~            				else
0389+  6330~            				else
0389+  6330~            				else
0389+  6330~            				else
0389+  6330             
0389+  6330~            				else
0389+  6330~            				else
0389+  6330~            				else
0389+  6330~            				else
0389+  6330             
0389+  6330             
0389+  6330 13          
0389+  6342             
0389+  6342 20 FE       
0389+  6344             
0389+  6344             
0389+  6344             
0389+  6344~            				else
0389+  6344~            				else
0389+  6344~            				else
0389+  6344~            				else
0389+  6344~            				else
0389+  6344             
0389+  6344~            				else
0389+  6344~            				else
0389+  6344             
0389+  6344~            				else
0389+  6344~            				else
0389+  6344             
0390+  6344 D7 77       					staB	ballCount
0391+  6346             				endif		
0391+  6346             
0391+  6346             
0391+  6346             
0391+  6346             
0391+  6346             
0391+  6346~            				endif		
0391+  6346~            				endif		
0391+  6346             
0391+  6346~            				endif		
0391+  6346~            				endif		
0391+  6346             
0391+  6343             
0391+  6343 02          
0391+  6344             
0391+  6344             
0391+  6344~            				endif		
0391+  6344~            				endif		
0391+  6344~            				endif		
0391+  6344             
0391+  6346             
0391+  6346~            				endif		
0391+  6346~            				endif		
0391+  6346             
0392+  6346             			endif
0392+  6346             
0392+  6346             
0392+  6346             
0392+  6346             
0392+  6346             
0392+  6346~            			endif
0392+  6346~            			endif
0392+  6346             
0392+  6346~            			endif
0392+  6346~            			endif
0392+  6346             
0392+  6322             
0392+  6322 23          
0392+  6323             
0392+  6323             
0392+  6323~            			endif
0392+  6323~            			endif
0392+  6323~            			endif
0392+  6323             
0392+  6346             
0392+  6346~            			endif
0392+  6346~            			endif
0392+  6346             
0393+  6346             			
0394+  6346 97 0F       			staA	lc(8)
0395+  6348             		endif
0395+  6348             
0395+  6348             
0395+  6348             
0395+  6348             
0395+  6348             
0395+  6348~            		endif
0395+  6348~            		endif
0395+  6348             
0395+  6348~            		endif
0395+  6348~            		endif
0395+  6348             
0395+  6308             
0395+  6308 3F          
0395+  6309             
0395+  6309             
0395+  6309~            		endif
0395+  6309~            		endif
0395+  6309~            		endif
0395+  6309             
0395+  6348             
0395+  6348~            		endif
0395+  6348~            		endif
0395+  6348             
0396+  6348             		
0397+  6348 BD 60 F2    		jsr	startBall
0398+  634B             	endif	
0398+  634B             
0398+  634B             
0398+  634B             
0398+  634B             
0398+  634B             
0398+  634B~            	endif	
0398+  634B~            	endif	
0398+  634B             
0398+  634B~            	endif	
0398+  634B~            	endif	
0398+  634B             
0398+  62DD             
0398+  62DD 6D          
0398+  62DE             
0398+  62DE             
0398+  62DE~            	endif	
0398+  62DE~            	endif	
0398+  62DE~            	endif	
0398+  62DE             
0398+  634B             
0398+  634B~            	endif	
0398+  634B~            	endif	
0398+  634B             
0399+  634B             	done(0)
0399+  634B             
0399+  634B 86 02       
0399+  634D BA 01 6B    
0399+  6350 B7 01 6B    
0399+  6353             
0399+  6353 7E 79 82    
0400+  6356             	
0401+  6356             swLeftEject:
0402+  6356 96 0F       	ldaA	>lc(8)
0403+  6358 85 20       	bitA	lr(6)
0404+  635A             	ifne ; not in game
0404+  635A             
0404+  635A 27 FE       
0405+  635C C6 03       		fireSolenoid(LEFT_EJECT)
0405+  635E F7 01 43    
0406+  6361             		done(0)
0406+  6361             
0406+  6361 86 02       
0406+  6363 BA 01 6B    
0406+  6366 B7 01 6B    
0406+  6369             
0406+  6369 7E 79 82    
0407+  636C             	endif
0407+  636C             
0407+  636C             
0407+  636C             
0407+  636C             
0407+  636C             
0407+  636C~            	endif
0407+  636C~            	endif
0407+  636C             
0407+  636C~            	endif
0407+  636C~            	endif
0407+  636C             
0407+  635B             
0407+  635B 10          
0407+  635C             
0407+  635C             
0407+  635C~            	endif
0407+  635C~            	endif
0407+  635C~            	endif
0407+  635C             
0407+  636C             
0407+  636C~            	endif
0407+  636C~            	endif
0407+  636C             
0408+  636C             		
0409+  636C 7C 00 B0    	advBonus()
0410+  636F 86 04       	ldaA	lr(3) ; extra ball
0411+  6371 95 0A       	bitA	>lc(3)
0412+  6373             	ifne
0412+  6373             
0412+  6373 27 FE       
0413+  6375 C6 06       		fireSolenoid(KNOCKER)
0413+  6377 F7 01 4D    
0414+  637A 86 01       		lampOn(1,3) ; shoot again
0414+  637C 9A 0A       
0414+  637E 97 0A       
0415+  6380 86 40       		lampOn(7,8)
0415+  6382 9A 0F       
0415+  6384 97 0F       
0416+  6386 86 FB       		lampOff(3,3) ; extra ball
0416+  6388 94 0A       
0416+  638A 97 0A       
0417+  638C 86 3E       		delay(500)
0417+  638E BD 7D 6B    
0418+  6391             	else
0418+  6391             
0418+  6391             
0418+  6391             
0418+  6391             
0418+  6374             
0418+  6374             
0418+  6374             
0418+  6374~            	else
0418+  6374~            	else
0418+  6374~            	else
0418+  6374~            	else
0418+  6374             
0418+  6374~            	else
0418+  6374~            	else
0418+  6374~            	else
0418+  6374~            	else
0418+  6374             
0418+  6374             
0418+  6374 1E          
0418+  6391             
0418+  6391 20 FE       
0418+  6393             
0418+  6393             
0418+  6393             
0418+  6393~            	else
0418+  6393~            	else
0418+  6393~            	else
0418+  6393~            	else
0418+  6393~            	else
0418+  6393             
0418+  6393~            	else
0418+  6393~            	else
0418+  6393             
0418+  6393~            	else
0418+  6393~            	else
0418+  6393             
0419+  6393 BD 66 CC    		jsr	addCollect
0420+  6396             		score500()
0420+  6396 BD 7D AD    
0420+  6399 C6 02       
0420+  639B F7 01 49    
0420+  639E 86 0E       
0420+  63A0 BD 7D 6B    
0420+  63A3 BD 7D AD    
0420+  63A6 C6 02       
0420+  63A8 F7 01 49    
0420+  63AB 86 0E       
0420+  63AD BD 7D 6B    
0420+  63B0 BD 7D AD    
0420+  63B3 C6 02       
0420+  63B5 F7 01 49    
0420+  63B8 86 0E       
0420+  63BA BD 7D 6B    
0420+  63BD BD 7D AD    
0420+  63C0 C6 02       
0420+  63C2 F7 01 49    
0420+  63C5 86 0E       
0420+  63C7 BD 7D 6B    
0420+  63CA BD 7D AD    
0420+  63CD C6 02       
0420+  63CF F7 01 49    
0420+  63D2 86 0E       
0420+  63D4 BD 7D 6B    
0421+  63D7             	endif
0421+  63D7             
0421+  63D7             
0421+  63D7             
0421+  63D7             
0421+  63D7             
0421+  63D7~            	endif
0421+  63D7~            	endif
0421+  63D7             
0421+  63D7~            	endif
0421+  63D7~            	endif
0421+  63D7             
0421+  6392             
0421+  6392 44          
0421+  6393             
0421+  6393             
0421+  6393~            	endif
0421+  6393~            	endif
0421+  6393~            	endif
0421+  6393             
0421+  63D7             
0421+  63D7~            	endif
0421+  63D7~            	endif
0421+  63D7             
0422+  63D7 C6 03       	fireSolenoid(LEFT_EJECT)
0422+  63D9 F7 01 43    
0423+  63DC             	
0424+  63DC 86 32       	delay(400)
0424+  63DE BD 7D 6B    
0425+  63E1 86 C7       	ldaA	11000111b
0426+  63E3 94 A1       	andA	>flc(2)
0427+  63E5 97 A1       	staA	flc(2)
0428+  63E7             	done(1)
0428+  63E7~            	done(1)
0428+  63E7~            	done(1)
0428+  63E7~            	done(1)
0428+  63E7~            	done(1)
0428+  63E7             
0428+  63E7 7E 79 82    
0429+  63EA             	
0430+  63EA             swTopEject:
0431+  63EA 7C 00 B0    	advBonus()
0432+  63ED D6 0B       	ldaB	>lc(4)
0433+  63EF 57          	asrB
0434+  63F0             	ifeq ; 1k
0434+  63F0             
0434+  63F0 26 FE       
0435+  63F2 BD 7D BC    		score1000()
0436+  63F5 86 19       		delay(200)
0436+  63F7 BD 7D 6B    
0437+  63FA 7E 64 7E    		jmp	swTopEject_scored
0438+  63FD             	endif
0438+  63FD             
0438+  63FD             
0438+  63FD             
0438+  63FD             
0438+  63FD             
0438+  63FD~            	endif
0438+  63FD~            	endif
0438+  63FD             
0438+  63FD~            	endif
0438+  63FD~            	endif
0438+  63FD             
0438+  63F1             
0438+  63F1 0B          
0438+  63F2             
0438+  63F2             
0438+  63F2~            	endif
0438+  63F2~            	endif
0438+  63F2~            	endif
0438+  63F2             
0438+  63FD             
0438+  63FD~            	endif
0438+  63FD~            	endif
0438+  63FD             
0439+  63FD 57          	asrB
0440+  63FE             	ifeq  ; captive
0440+  63FE             
0440+  63FE 26 FE       
0441+  6400 86 40       		ldaA	lr(7)
0442+  6402 95 09       		bitA	>lc(2) ; captive ball
0443+  6404             		ifeq	; not lit
0443+  6404             
0443+  6404 26 FE       
0444+  6406 86 40       			lampOn(7,2)
0444+  6408 9A 09       
0444+  640A 97 09       
0445+  640C 86 40       			flashLamp(7,2)
0445+  640E 9A A1       
0445+  6410 97 A1       
0446+  6412             		else
0446+  6412             
0446+  6412             
0446+  6412             
0446+  6412             
0446+  6405             
0446+  6405             
0446+  6405             
0446+  6405~            		else
0446+  6405~            		else
0446+  6405~            		else
0446+  6405~            		else
0446+  6405             
0446+  6405~            		else
0446+  6405~            		else
0446+  6405~            		else
0446+  6405~            		else
0446+  6405             
0446+  6405             
0446+  6405 0E          
0446+  6412             
0446+  6412 20 FE       
0446+  6414             
0446+  6414             
0446+  6414             
0446+  6414~            		else
0446+  6414~            		else
0446+  6414~            		else
0446+  6414~            		else
0446+  6414~            		else
0446+  6414             
0446+  6414~            		else
0446+  6414~            		else
0446+  6414             
0446+  6414~            		else
0446+  6414~            		else
0446+  6414             
0447+  6414 86 BF       			lampOff(7,2)
0447+  6416 94 09       
0447+  6418 97 09       
0448+  641A             		endif
0448+  641A             
0448+  641A             
0448+  641A             
0448+  641A             
0448+  641A             
0448+  641A~            		endif
0448+  641A~            		endif
0448+  641A             
0448+  641A~            		endif
0448+  641A~            		endif
0448+  641A             
0448+  6413             
0448+  6413 06          
0448+  6414             
0448+  6414             
0448+  6414~            		endif
0448+  6414~            		endif
0448+  6414~            		endif
0448+  6414             
0448+  641A             
0448+  641A~            		endif
0448+  641A~            		endif
0448+  641A             
0449+  641A 7E 64 7E    		jmp	swTopEject_scored
0450+  641D             	endif
0450+  641D             
0450+  641D             
0450+  641D             
0450+  641D             
0450+  641D             
0450+  641D~            	endif
0450+  641D~            	endif
0450+  641D             
0450+  641D~            	endif
0450+  641D~            	endif
0450+  641D             
0450+  63FF             
0450+  63FF 1D          
0450+  6400             
0450+  6400             
0450+  6400~            	endif
0450+  6400~            	endif
0450+  6400~            	endif
0450+  6400             
0450+  641D             
0450+  641D~            	endif
0450+  641D~            	endif
0450+  641D             
0451+  641D 57          	asrB
0452+  641E             	ifne	
0452+  641E             
0452+  641E 27 FE       
0453+  6420 57          		asrB
0454+  6421             		ifeq ; double
0454+  6421             
0454+  6421 26 FE       
0455+  6423 86 04       			ldaA	lr(3)
0456+  6425 95 09       			bitA	>lc(2) ; double bonus
0457+  6427             			ifeq	; not lit
0457+  6427             
0457+  6427 26 FE       
0458+  6429 86 04       				lampOn(3,2)
0458+  642B 9A 09       
0458+  642D 97 09       
0459+  642F 86 04       				flashLamp(3,2)
0459+  6431 9A A1       
0459+  6433 97 A1       
0460+  6435             			else
0460+  6435             
0460+  6435             
0460+  6435             
0460+  6435             
0460+  6428             
0460+  6428             
0460+  6428             
0460+  6428~            			else
0460+  6428~            			else
0460+  6428~            			else
0460+  6428~            			else
0460+  6428             
0460+  6428~            			else
0460+  6428~            			else
0460+  6428~            			else
0460+  6428~            			else
0460+  6428             
0460+  6428             
0460+  6428 0E          
0460+  6435             
0460+  6435 20 FE       
0460+  6437             
0460+  6437             
0460+  6437             
0460+  6437~            			else
0460+  6437~            			else
0460+  6437~            			else
0460+  6437~            			else
0460+  6437~            			else
0460+  6437             
0460+  6437~            			else
0460+  6437~            			else
0460+  6437             
0460+  6437~            			else
0460+  6437~            			else
0460+  6437             
0461+  6437 86 FB       				lampOff(3,2)
0461+  6439 94 09       
0461+  643B 97 09       
0462+  643D             			endif
0462+  643D             
0462+  643D             
0462+  643D             
0462+  643D             
0462+  643D             
0462+  643D~            			endif
0462+  643D~            			endif
0462+  643D             
0462+  643D~            			endif
0462+  643D~            			endif
0462+  643D             
0462+  6436             
0462+  6436 06          
0462+  6437             
0462+  6437             
0462+  6437~            			endif
0462+  6437~            			endif
0462+  6437~            			endif
0462+  6437             
0462+  643D             
0462+  643D~            			endif
0462+  643D~            			endif
0462+  643D             
0463+  643D             		endif
0463+  643D             
0463+  643D             
0463+  643D             
0463+  643D             
0463+  643D             
0463+  643D~            		endif
0463+  643D~            		endif
0463+  643D             
0463+  643D~            		endif
0463+  643D~            		endif
0463+  643D             
0463+  6422             
0463+  6422 1A          
0463+  6423             
0463+  6423             
0463+  6423~            		endif
0463+  6423~            		endif
0463+  6423~            		endif
0463+  6423             
0463+  643D             
0463+  643D~            		endif
0463+  643D~            		endif
0463+  643D             
0464+  643D             	endif
0464+  643D             
0464+  643D             
0464+  643D             
0464+  643D             
0464+  643D             
0464+  643D~            	endif
0464+  643D~            	endif
0464+  643D             
0464+  643D~            	endif
0464+  643D~            	endif
0464+  643D             
0464+  641F             
0464+  641F 1D          
0464+  6420             
0464+  6420             
0464+  6420~            	endif
0464+  6420~            	endif
0464+  6420~            	endif
0464+  6420             
0464+  643D             
0464+  643D~            	endif
0464+  643D~            	endif
0464+  643D             
0465+  643D             	score500()
0465+  643D BD 7D AD    
0465+  6440 C6 02       
0465+  6442 F7 01 49    
0465+  6445 86 0E       
0465+  6447 BD 7D 6B    
0465+  644A BD 7D AD    
0465+  644D C6 02       
0465+  644F F7 01 49    
0465+  6452 86 0E       
0465+  6454 BD 7D 6B    
0465+  6457 BD 7D AD    
0465+  645A C6 02       
0465+  645C F7 01 49    
0465+  645F 86 0E       
0465+  6461 BD 7D 6B    
0465+  6464 BD 7D AD    
0465+  6467 C6 02       
0465+  6469 F7 01 49    
0465+  646C 86 0E       
0465+  646E BD 7D 6B    
0465+  6471 BD 7D AD    
0465+  6474 C6 02       
0465+  6476 F7 01 49    
0465+  6479 86 0E       
0465+  647B BD 7D 6B    
0466+  647E             swTopEject_scored:
0467+  647E 86 FB       	flashOff(3,2)
0467+  6480 94 A1       
0467+  6482 97 A1       
0468+  6484 86 BF       	flashOff(7,2)
0468+  6486 94 A1       
0468+  6488 97 A1       
0469+  648A C6 03       	fireSolenoid(TOP_EJECT)
0469+  648C F7 01 40    
0470+  648F             	done(1)
0470+  648F~            	done(1)
0470+  648F~            	done(1)
0470+  648F~            	done(1)
0470+  648F~            	done(1)
0470+  648F             
0470+  648F 7E 79 82    
0471+  6492             	
0472+  6492             swHotTip:
0473+  6492 7D 00 A9    	tst	dropResetTimer
0474+  6495             	ifne
0474+  6495             
0474+  6495 27 FE       
0475+  6497             		done(0)
0475+  6497             
0475+  6497 86 02       
0475+  6499 BA 01 6B    
0475+  649C B7 01 6B    
0475+  649F             
0475+  649F 7E 79 82    
0476+  64A2             	endif
0476+  64A2             
0476+  64A2             
0476+  64A2             
0476+  64A2             
0476+  64A2             
0476+  64A2~            	endif
0476+  64A2~            	endif
0476+  64A2             
0476+  64A2~            	endif
0476+  64A2~            	endif
0476+  64A2             
0476+  6496             
0476+  6496 0B          
0476+  6497             
0476+  6497             
0476+  6497~            	endif
0476+  6497~            	endif
0476+  6497~            	endif
0476+  6497             
0476+  64A2             
0476+  64A2~            	endif
0476+  64A2~            	endif
0476+  64A2             
0477+  64A2             	
0478+  64A2 BD 66 CC    	jsr	addCollect
0479+  64A5 86 00       	ldaA	0
0480+  64A7 97 B5       	staA	p_DropsDown
0481+  64A9 97 AA       	staA	dropsDown
0482+  64AB 86 41       	ldaA	65
0483+  64AD 97 A9       	staA	dropResetTimer
0484+  64AF 86 12       	delay(150)
0484+  64B1 BD 7D 6B    
0485+  64B4 C6 0C       	fireSolenoid(DROP_HOT)
0485+  64B6 F7 01 42    
0486+  64B9 86 12       	delay(150)
0486+  64BB BD 7D 6B    
0487+  64BE C6 0C       	fireSolenoid(DROP_TIP)
0487+  64C0 F7 01 41    
0488+  64C3 86 F7       	lampOff(4,3) ; spinner
0488+  64C5 94 0A       
0488+  64C7 97 0A       
0489+  64C9             	
0490+  64C9 86 70       	delay(900)
0490+  64CB BD 7D 6B    
0491+  64CE 86 C7       	ldaA	11000111b
0492+  64D0 94 A1       	andA	>flc(2)
0493+  64D2 97 A1       	staA	flc(2)
0494+  64D4             	
0495+  64D4             	done(1)
0495+  64D4~            	done(1)
0495+  64D4~            	done(1)
0495+  64D4~            	done(1)
0495+  64D4~            	done(1)
0495+  64D4             
0495+  64D4 7E 79 82    
0496+  64D7             swLeftOutlane:
0497+  64D7 86 02       	ldaA	lr(2) ; left special
0498+  64D9 95 0A       	bitA	>lc(3)
0499+  64DB             	ifne
0499+  64DB             
0499+  64DB 27 FE       
0500+  64DD 86 01       		lampOn(1,3) ; shoot again
0500+  64DF 9A 0A       
0500+  64E1 97 0A       
0501+  64E3 86 01       		flashLamp(1,3)
0501+  64E5 9A A2       
0501+  64E7 97 A2       
0502+  64E9 C6 0C       		fireSolenoid(BUZZER)
0502+  64EB F7 01 4E    
0503+  64EE 86 80       		flashLamp(8,2)
0503+  64F0 9A A1       
0503+  64F2 97 A1       
0504+  64F4             	endif
0504+  64F4             
0504+  64F4             
0504+  64F4             
0504+  64F4             
0504+  64F4             
0504+  64F4~            	endif
0504+  64F4~            	endif
0504+  64F4             
0504+  64F4~            	endif
0504+  64F4~            	endif
0504+  64F4             
0504+  64DC             
0504+  64DC 17          
0504+  64DD             
0504+  64DD             
0504+  64DD~            	endif
0504+  64DD~            	endif
0504+  64DD~            	endif
0504+  64DD             
0504+  64F4             
0504+  64F4~            	endif
0504+  64F4~            	endif
0504+  64F4             
0505+  64F4 7C 00 B0    	advBonus()
0506+  64F7 BD 7D BC    	score1000()
0507+  64FA             	done(1)
0507+  64FA~            	done(1)
0507+  64FA~            	done(1)
0507+  64FA~            	done(1)
0507+  64FA~            	done(1)
0507+  64FA             
0507+  64FA 7E 79 82    
0508+  64FD             	
0509+  64FD             swRightOutlane:
0510+  64FD 86 80       	ldaA	lr(8) ; right special
0511+  64FF 95 09       	bitA	>lc(2)
0512+  6501             	ifne
0512+  6501             
0512+  6501 27 FE       
0513+  6503 86 01       		lampOn(1,3) ; shoot again
0513+  6505 9A 0A       
0513+  6507 97 0A       
0514+  6509 86 01       		flashLamp(1,3)
0514+  650B 9A A2       
0514+  650D 97 A2       
0515+  650F C6 0C       		fireSolenoid(BUZZER)
0515+  6511 F7 01 4E    
0516+  6514 86 80       		flashLamp(8,2)
0516+  6516 9A A1       
0516+  6518 97 A1       
0517+  651A             	endif
0517+  651A             
0517+  651A             
0517+  651A             
0517+  651A             
0517+  651A             
0517+  651A~            	endif
0517+  651A~            	endif
0517+  651A             
0517+  651A~            	endif
0517+  651A~            	endif
0517+  651A             
0517+  6502             
0517+  6502 17          
0517+  6503             
0517+  6503             
0517+  6503~            	endif
0517+  6503~            	endif
0517+  6503~            	endif
0517+  6503             
0517+  651A             
0517+  651A~            	endif
0517+  651A~            	endif
0517+  651A             
0518+  651A 7C 00 B0    	advBonus()
0519+  651D BD 7D BC    	score1000()
0520+  6520             	done(1)
0520+  6520~            	done(1)
0520+  6520~            	done(1)
0520+  6520~            	done(1)
0520+  6520~            	done(1)
0520+  6520             
0520+  6520 7E 79 82    
0521+  6523             	
0522+  6523             swLeftInlane:
0523+  6523             swRightInlane:
0524+  6523 7C 00 B0    	advBonus()
0525+  6526 BD 7D BC    	score1000()
0526+  6529             	done(1)
0526+  6529~            	done(1)
0526+  6529~            	done(1)
0526+  6529~            	done(1)
0526+  6529~            	done(1)
0526+  6529             
0526+  6529 7E 79 82    
0527+  652C             sw10pt:
0528+  652C BD 7D 9F    	score10()
0529+  652F 77 00 0B    	asr	lc(4)
0530+  6532             	ifeq ; shifted off the edge
0530+  6532             
0530+  6532 26 FE       
0531+  6534 86 10       		ldaA	00010000b
0532+  6536 97 0B       		staA	lc(4)
0533+  6538             	endif
0533+  6538             
0533+  6538             
0533+  6538             
0533+  6538             
0533+  6538             
0533+  6538~            	endif
0533+  6538~            	endif
0533+  6538             
0533+  6538~            	endif
0533+  6538~            	endif
0533+  6538             
0533+  6533             
0533+  6533 04          
0533+  6534             
0533+  6534             
0533+  6534~            	endif
0533+  6534~            	endif
0533+  6534~            	endif
0533+  6534             
0533+  6538             
0533+  6538~            	endif
0533+  6538~            	endif
0533+  6538             
0534+  6538             	done(1)
0534+  6538~            	done(1)
0534+  6538~            	done(1)
0534+  6538~            	done(1)
0534+  6538~            	done(1)
0534+  6538             
0534+  6538 7E 79 82    
0535+  653B             sw100pt:
0536+  653B BD 7D AD    	score100()
0537+  653E             	done(1)
0537+  653E~            	done(1)
0537+  653E~            	done(1)
0537+  653E~            	done(1)
0537+  653E~            	done(1)
0537+  653E             
0537+  653E 7E 79 82    
0538+  6541             sw500pt:
0539+  6541 BD 66 A0    	jsr	alternate
0540+  6544             	score500()
0540+  6544 BD 7D AD    
0540+  6547 C6 02       
0540+  6549 F7 01 49    
0540+  654C 86 0E       
0540+  654E BD 7D 6B    
0540+  6551 BD 7D AD    
0540+  6554 C6 02       
0540+  6556 F7 01 49    
0540+  6559 86 0E       
0540+  655B BD 7D 6B    
0540+  655E BD 7D AD    
0540+  6561 C6 02       
0540+  6563 F7 01 49    
0540+  6566 86 0E       
0540+  6568 BD 7D 6B    
0540+  656B BD 7D AD    
0540+  656E C6 02       
0540+  6570 F7 01 49    
0540+  6573 86 0E       
0540+  6575 BD 7D 6B    
0540+  6578 BD 7D AD    
0540+  657B C6 02       
0540+  657D F7 01 49    
0540+  6580 86 0E       
0540+  6582 BD 7D 6B    
0541+  6585             	done(1)
0541+  6585~            	done(1)
0541+  6585~            	done(1)
0541+  6585~            	done(1)
0541+  6585~            	done(1)
0541+  6585             
0541+  6585 7E 79 82    
0542+  6588             swPop:
0543+  6588 BD 66 A0    	jsr	alternate
0544+  658B BD 7D AD    	score100()
0545+  658E             	done(1)
0545+  658E~            	done(1)
0545+  658E~            	done(1)
0545+  658E~            	done(1)
0545+  658E~            	done(1)
0545+  658E             
0545+  658E 7E 79 82    
0546+  6591             swDropTip:
0547+  6591 86 08       	ldaA	1<<3
0548+  6593 7E 65 AF    	jmp	swDrop
0549+  6596             swDropHot:
0550+  6596 86 01       	ldaA	1<<0
0551+  6598 7E 65 AF    	jmp	swDrop
0552+  659B             swDroptIp:
0553+  659B 86 10       	ldaA	1<<4
0554+  659D 7E 65 AF    	jmp	swDrop
0555+  65A0             swDrophOt:
0556+  65A0 86 02       	ldaA	1<<1
0557+  65A2 7E 65 AF    	jmp	swDrop
0558+  65A5             swDroptiP:
0559+  65A5 86 20       	ldaA	1<<5
0560+  65A7 7E 65 AF    	jmp	swDrop
0561+  65AA             swDrophoT:
0562+  65AA 86 04       	ldaA	1<<2
0563+  65AC 7E 65 AF    	jmp	swDrop
0564+  65AF             swDrop:
0565+  65AF 7D 00 A9    	tst	dropResetTimer
0566+  65B2             	ifeq
0566+  65B2             
0566+  65B2 26 FE       
0567+  65B4 95 AA       		bitA	>dropsDown
0568+  65B6             		ifne
0568+  65B6             
0568+  65B6 27 FE       
0569+  65B8             			done(0)
0569+  65B8             
0569+  65B8 86 02       
0569+  65BA BA 01 6B    
0569+  65BD B7 01 6B    
0569+  65C0             
0569+  65C0 7E 79 82    
0570+  65C3             		endif
0570+  65C3             
0570+  65C3             
0570+  65C3             
0570+  65C3             
0570+  65C3             
0570+  65C3~            		endif
0570+  65C3~            		endif
0570+  65C3             
0570+  65C3~            		endif
0570+  65C3~            		endif
0570+  65C3             
0570+  65B7             
0570+  65B7 0B          
0570+  65B8             
0570+  65B8             
0570+  65B8~            		endif
0570+  65B8~            		endif
0570+  65B8~            		endif
0570+  65B8             
0570+  65C3             
0570+  65C3~            		endif
0570+  65C3~            		endif
0570+  65C3             
0571+  65C3 9A AA       		oraA	>dropsDown
0572+  65C5             		
0573+  65C5 97 AA       		staA	dropsDown
0574+  65C7 7C 00 B5    		inc	p_DropsDown
0575+  65CA 86 04       		ldaA	4
0576+  65CC 91 B5       		cmpA	>p_DropsDown
0577+  65CE             		ifgt
0577+  65CE             
0577+  65CE 23 FE       
0578+  65D0 86 F7       			lampOff(4,3) ; spinner
0578+  65D2 94 0A       
0578+  65D4 97 0A       
0579+  65D6             		else
0579+  65D6             
0579+  65D6             
0579+  65D6             
0579+  65D6             
0579+  65CF             
0579+  65CF             
0579+  65CF             
0579+  65CF~            		else
0579+  65CF~            		else
0579+  65CF~            		else
0579+  65CF~            		else
0579+  65CF             
0579+  65CF~            		else
0579+  65CF~            		else
0579+  65CF~            		else
0579+  65CF~            		else
0579+  65CF             
0579+  65CF             
0579+  65CF 08          
0579+  65D6             
0579+  65D6 20 FE       
0579+  65D8             
0579+  65D8             
0579+  65D8             
0579+  65D8~            		else
0579+  65D8~            		else
0579+  65D8~            		else
0579+  65D8~            		else
0579+  65D8~            		else
0579+  65D8             
0579+  65D8~            		else
0579+  65D8~            		else
0579+  65D8             
0579+  65D8~            		else
0579+  65D8~            		else
0579+  65D8             
0580+  65D8 86 08       			lampOn(4,3)
0580+  65DA 9A 0A       
0580+  65DC 97 0A       
0581+  65DE             		endif
0581+  65DE             
0581+  65DE             
0581+  65DE             
0581+  65DE             
0581+  65DE             
0581+  65DE~            		endif
0581+  65DE~            		endif
0581+  65DE             
0581+  65DE~            		endif
0581+  65DE~            		endif
0581+  65DE             
0581+  65D7             
0581+  65D7 06          
0581+  65D8             
0581+  65D8             
0581+  65D8~            		endif
0581+  65D8~            		endif
0581+  65D8~            		endif
0581+  65D8             
0581+  65DE             
0581+  65DE~            		endif
0581+  65DE~            		endif
0581+  65DE             
0582+  65DE             		
0583+  65DE BD 7D 9F    		score10()
0584+  65E1 7C 00 B0    		advBonus()
0585+  65E4             		done(1)
0585+  65E4~            		done(1)
0585+  65E4~            		done(1)
0585+  65E4~            		done(1)
0585+  65E4~            		done(1)
0585+  65E4             
0585+  65E4 7E 79 82    
0586+  65E7             	else
0586+  65E7             
0586+  65E7             
0586+  65E7             
0586+  65E7             
0586+  65B3             
0586+  65B3             
0586+  65B3             
0586+  65B3~            	else
0586+  65B3~            	else
0586+  65B3~            	else
0586+  65B3~            	else
0586+  65B3             
0586+  65B3~            	else
0586+  65B3~            	else
0586+  65B3~            	else
0586+  65B3~            	else
0586+  65B3             
0586+  65B3             
0586+  65B3 35          
0586+  65E7             
0586+  65E7 20 FE       
0586+  65E9             
0586+  65E9             
0586+  65E9             
0586+  65E9~            	else
0586+  65E9~            	else
0586+  65E9~            	else
0586+  65E9~            	else
0586+  65E9~            	else
0586+  65E9             
0586+  65E9~            	else
0586+  65E9~            	else
0586+  65E9             
0586+  65E9~            	else
0586+  65E9~            	else
0586+  65E9             
0587+  65E9             		done(0)
0587+  65E9             
0587+  65E9 86 02       
0587+  65EB BA 01 6B    
0587+  65EE B7 01 6B    
0587+  65F1             
0587+  65F1 7E 79 82    
0588+  65F4             	endif
0588+  65F4             
0588+  65F4             
0588+  65F4             
0588+  65F4             
0588+  65F4             
0588+  65F4~            	endif
0588+  65F4~            	endif
0588+  65F4             
0588+  65F4~            	endif
0588+  65F4~            	endif
0588+  65F4             
0588+  65E8             
0588+  65E8 0B          
0588+  65E9             
0588+  65E9             
0588+  65E9~            	endif
0588+  65E9~            	endif
0588+  65E9~            	endif
0588+  65E9             
0588+  65F4             
0588+  65F4~            	endif
0588+  65F4~            	endif
0588+  65F4             
0589+  65F4             swAdvBonus:
0590+  65F4 7C 00 B0    	advBonus()
0591+  65F7 BD 7D BC    	score1000()
0592+  65FA             	done(1)
0592+  65FA~            	done(1)
0592+  65FA~            	done(1)
0592+  65FA~            	done(1)
0592+  65FA~            	done(1)
0592+  65FA             
0592+  65FA 7E 79 82    
0593+  65FD             swSpinner:
0594+  65FD             	;ldaA	>sc(4)
0595+  65FD             	;bitA	sr(6)
0596+  65FD             	;ifne
0597+  65FD             	;	score100()
0598+  65FD             	;	ldaA	$E
0599+  65FD             	;else
0600+  65FD             	;	noValidate
0601+  65FD             	;	ldaA	0
0602+  65FD             	;endif
0603+  65FD             	;staA	solenoid1 + CLICKER - 1
0604+  65FD             	
0605+  65FD 86 08       	ldaA	lr(4) ; spinner
0606+  65FF 95 0A       	bitA	>lc(3)
0607+  6601             	ifne ; spinner on
0607+  6601             
0607+  6601 27 FE       
0608+  6603 BD 7D AD    		score100()
0609+  6606 C6 01       		fireSolenoid(CLICKER)
0609+  6608 F7 01 4C    
0610+  660B             	else
0610+  660B             
0610+  660B             
0610+  660B             
0610+  660B             
0610+  6602             
0610+  6602             
0610+  6602             
0610+  6602~            	else
0610+  6602~            	else
0610+  6602~            	else
0610+  6602~            	else
0610+  6602             
0610+  6602~            	else
0610+  6602~            	else
0610+  6602~            	else
0610+  6602~            	else
0610+  6602             
0610+  6602             
0610+  6602 0A          
0610+  660B             
0610+  660B 20 FE       
0610+  660D             
0610+  660D             
0610+  660D             
0610+  660D~            	else
0610+  660D~            	else
0610+  660D~            	else
0610+  660D~            	else
0610+  660D~            	else
0610+  660D             
0610+  660D~            	else
0610+  660D~            	else
0610+  660D             
0610+  660D~            	else
0610+  660D~            	else
0610+  660D             
0611+  660D BD 7D 9F    		score10()
0612+  6610             	endif
0612+  6610             
0612+  6610             
0612+  6610             
0612+  6610             
0612+  6610             
0612+  6610~            	endif
0612+  6610~            	endif
0612+  6610             
0612+  6610~            	endif
0612+  6610~            	endif
0612+  6610             
0612+  660C             
0612+  660C 03          
0612+  660D             
0612+  660D             
0612+  660D~            	endif
0612+  660D~            	endif
0612+  660D~            	endif
0612+  660D             
0612+  6610             
0612+  6610~            	endif
0612+  6610~            	endif
0612+  6610             
0613+  6610             	done(1)
0613+  6610~            	done(1)
0613+  6610~            	done(1)
0613+  6610~            	done(1)
0613+  6610~            	done(1)
0613+  6610             
0613+  6610 7E 79 82    
0614+  6613             
0615+  6613             swCaptiveRollover:
0616+  6613 96 09       	ldaA	>lc(2)
0617+  6615 85 40       	bitA	lr(7)
0618+  6617             	ifeq ; light off
0618+  6617             
0618+  6617 26 FE       
0619+  6619 BD 7D 9F    		score10()
0620+  661C             	else
0620+  661C             
0620+  661C             
0620+  661C             
0620+  661C             
0620+  6618             
0620+  6618             
0620+  6618             
0620+  6618~            	else
0620+  6618~            	else
0620+  6618~            	else
0620+  6618~            	else
0620+  6618             
0620+  6618~            	else
0620+  6618~            	else
0620+  6618~            	else
0620+  6618~            	else
0620+  6618             
0620+  6618             
0620+  6618 05          
0620+  661C             
0620+  661C 20 FE       
0620+  661E             
0620+  661E             
0620+  661E             
0620+  661E~            	else
0620+  661E~            	else
0620+  661E~            	else
0620+  661E~            	else
0620+  661E~            	else
0620+  661E             
0620+  661E~            	else
0620+  661E~            	else
0620+  661E             
0620+  661E~            	else
0620+  661E~            	else
0620+  661E             
0621+  661E BD 7D BC    		score1000()
0622+  6621 86 0E       		ldaA	14 ; captive rollover switch number
0623+  6623 91 A8       		cmpA	>lastSwitch
0624+  6625             		ifne
0624+  6625             
0624+  6625 27 FE       
0625+  6627 BD 66 4A    			jsr	captiveAward
0626+  662A             		endif
0626+  662A             
0626+  662A             
0626+  662A             
0626+  662A             
0626+  662A             
0626+  662A~            		endif
0626+  662A~            		endif
0626+  662A             
0626+  662A~            		endif
0626+  662A~            		endif
0626+  662A             
0626+  6626             
0626+  6626 03          
0626+  6627             
0626+  6627             
0626+  6627~            		endif
0626+  6627~            		endif
0626+  6627~            		endif
0626+  6627             
0626+  662A             
0626+  662A~            		endif
0626+  662A~            		endif
0626+  662A             
0627+  662A             	endif
0627+  662A             
0627+  662A             
0627+  662A             
0627+  662A             
0627+  662A             
0627+  662A~            	endif
0627+  662A~            	endif
0627+  662A             
0627+  662A~            	endif
0627+  662A~            	endif
0627+  662A             
0627+  661D             
0627+  661D 0C          
0627+  661E             
0627+  661E             
0627+  661E~            	endif
0627+  661E~            	endif
0627+  661E~            	endif
0627+  661E             
0627+  662A             
0627+  662A~            	endif
0627+  662A~            	endif
0627+  662A             
0628+  662A             	done(1)
0628+  662A~            	done(1)
0628+  662A~            	done(1)
0628+  662A~            	done(1)
0628+  662A~            	done(1)
0628+  662A             
0628+  662A 7E 79 82    
0629+  662D             
0630+  662D             swCaptiveTarget:
0631+  662D 7C 00 B0    	advBonus()
0632+  6630 86 80       	lampOn(8,2) ; right special
0632+  6632 9A 09       
0632+  6634 97 09       
0633+  6636 96 09       	ldaA	>lc(2)
0634+  6638 85 40       	bitA	lr(7)
0635+  663A             	ifeq ; light off
0635+  663A             
0635+  663A 26 FE       
0636+  663C BD 7D 9F    		score10()
0637+  663F BD 66 4A    		jsr	captiveAward
0638+  6642             	else
0638+  6642             
0638+  6642             
0638+  6642             
0638+  6642             
0638+  663B             
0638+  663B             
0638+  663B             
0638+  663B~            	else
0638+  663B~            	else
0638+  663B~            	else
0638+  663B~            	else
0638+  663B             
0638+  663B~            	else
0638+  663B~            	else
0638+  663B~            	else
0638+  663B~            	else
0638+  663B             
0638+  663B             
0638+  663B 08          
0638+  6642             
0638+  6642 20 FE       
0638+  6644             
0638+  6644             
0638+  6644             
0638+  6644~            	else
0638+  6644~            	else
0638+  6644~            	else
0638+  6644~            	else
0638+  6644~            	else
0638+  6644             
0638+  6644~            	else
0638+  6644~            	else
0638+  6644             
0638+  6644~            	else
0638+  6644~            	else
0638+  6644             
0639+  6644 BD 7D BC    		score1000()
0640+  6647             	endif
0640+  6647             
0640+  6647             
0640+  6647             
0640+  6647             
0640+  6647             
0640+  6647~            	endif
0640+  6647~            	endif
0640+  6647             
0640+  6647~            	endif
0640+  6647~            	endif
0640+  6647             
0640+  6643             
0640+  6643 03          
0640+  6644             
0640+  6644             
0640+  6644~            	endif
0640+  6644~            	endif
0640+  6644~            	endif
0640+  6644             
0640+  6647             
0640+  6647~            	endif
0640+  6647~            	endif
0640+  6647             
0641+  6647             	done(1)
0641+  6647~            	done(1)
0641+  6647~            	done(1)
0641+  6647~            	done(1)
0641+  6647~            	done(1)
0641+  6647             
0641+  6647 7E 79 82    
0642+  664A             	
0643+  664A             captiveAward:
0644+  664A 96 09       	ldaA	>lc(2)
0645+  664C 85 08       	bitA	lr(4) ; shoe 1
0646+  664E             	ifeq
0646+  664E             
0646+  664E 26 FE       
0647+  6650 39          		rts
0648+  6651             	else
0648+  6651             
0648+  6651             
0648+  6651             
0648+  6651             
0648+  664F             
0648+  664F             
0648+  664F             
0648+  664F~            	else
0648+  664F~            	else
0648+  664F~            	else
0648+  664F~            	else
0648+  664F             
0648+  664F~            	else
0648+  664F~            	else
0648+  664F~            	else
0648+  664F~            	else
0648+  664F             
0648+  664F             
0648+  664F 03          
0648+  6651             
0648+  6651 20 FE       
0648+  6653             
0648+  6653             
0648+  6653             
0648+  6653~            	else
0648+  6653~            	else
0648+  6653~            	else
0648+  6653~            	else
0648+  6653~            	else
0648+  6653             
0648+  6653~            	else
0648+  6653~            	else
0648+  6653             
0648+  6653~            	else
0648+  6653~            	else
0648+  6653             
0649+  6653 85 20       		bitA	lr(6)
0650+  6655             		ifne
0650+  6655             
0650+  6655 27 FE       
0651+  6657 86 20       			flashLamp(6,2)
0651+  6659 9A A1       
0651+  665B 97 A1       
0652+  665D             		else
0652+  665D             
0652+  665D             
0652+  665D             
0652+  665D             
0652+  6656             
0652+  6656             
0652+  6656             
0652+  6656~            		else
0652+  6656~            		else
0652+  6656~            		else
0652+  6656~            		else
0652+  6656             
0652+  6656~            		else
0652+  6656~            		else
0652+  6656~            		else
0652+  6656~            		else
0652+  6656             
0652+  6656             
0652+  6656 08          
0652+  665D             
0652+  665D 20 FE       
0652+  665F             
0652+  665F             
0652+  665F             
0652+  665F~            		else
0652+  665F~            		else
0652+  665F~            		else
0652+  665F~            		else
0652+  665F~            		else
0652+  665F             
0652+  665F~            		else
0652+  665F~            		else
0652+  665F             
0652+  665F~            		else
0652+  665F~            		else
0652+  665F             
0653+  665F 85 10       			bitA	lr(5)
0654+  6661             			ifne
0654+  6661             
0654+  6661 27 FE       
0655+  6663 86 10       				flashLamp(5,2)
0655+  6665 9A A1       
0655+  6667 97 A1       
0656+  6669             			else
0656+  6669             
0656+  6669             
0656+  6669             
0656+  6669             
0656+  6662             
0656+  6662             
0656+  6662             
0656+  6662~            			else
0656+  6662~            			else
0656+  6662~            			else
0656+  6662~            			else
0656+  6662             
0656+  6662~            			else
0656+  6662~            			else
0656+  6662~            			else
0656+  6662~            			else
0656+  6662             
0656+  6662             
0656+  6662 08          
0656+  6669             
0656+  6669 20 FE       
0656+  666B             
0656+  666B             
0656+  666B             
0656+  666B~            			else
0656+  666B~            			else
0656+  666B~            			else
0656+  666B~            			else
0656+  666B~            			else
0656+  666B             
0656+  666B~            			else
0656+  666B~            			else
0656+  666B             
0656+  666B~            			else
0656+  666B~            			else
0656+  666B             
0657+  666B 86 08       				flashLamp(4,2)
0657+  666D 9A A1       
0657+  666F 97 A1       
0658+  6671             			endif
0658+  6671             
0658+  6671             
0658+  6671             
0658+  6671             
0658+  6671             
0658+  6671~            			endif
0658+  6671~            			endif
0658+  6671             
0658+  6671~            			endif
0658+  6671~            			endif
0658+  6671             
0658+  666A             
0658+  666A 06          
0658+  666B             
0658+  666B             
0658+  666B~            			endif
0658+  666B~            			endif
0658+  666B~            			endif
0658+  666B             
0658+  6671             
0658+  6671~            			endif
0658+  6671~            			endif
0658+  6671             
0659+  6671             		endif
0659+  6671             
0659+  6671             
0659+  6671             
0659+  6671             
0659+  6671             
0659+  6671~            		endif
0659+  6671~            		endif
0659+  6671             
0659+  6671~            		endif
0659+  6671~            		endif
0659+  6671             
0659+  665E             
0659+  665E 12          
0659+  665F             
0659+  665F             
0659+  665F~            		endif
0659+  665F~            		endif
0659+  665F~            		endif
0659+  665F             
0659+  6671             
0659+  6671~            		endif
0659+  6671~            		endif
0659+  6671             
0660+  6671             	endif
0660+  6671             
0660+  6671             
0660+  6671             
0660+  6671             
0660+  6671             
0660+  6671~            	endif
0660+  6671~            	endif
0660+  6671             
0660+  6671~            	endif
0660+  6671~            	endif
0660+  6671             
0660+  6652             
0660+  6652 1E          
0660+  6653             
0660+  6653             
0660+  6653~            	endif
0660+  6653~            	endif
0660+  6653~            	endif
0660+  6653             
0660+  6671             
0660+  6671~            	endif
0660+  6671~            	endif
0660+  6671             
0661+  6671             	
0662+  6671 86 04       	ldaA	lr(3)
0663+  6673 95 09       	bitA	>lc(2)
0664+  6675             	ifne ; double bonus
0664+  6675             
0664+  6675 27 FE       
0665+  6677 96 B0       		ldaA	>p_Bonus
0666+  6679             	else
0666+  6679             
0666+  6679             
0666+  6679             
0666+  6679             
0666+  6676             
0666+  6676             
0666+  6676             
0666+  6676~            	else
0666+  6676~            	else
0666+  6676~            	else
0666+  6676~            	else
0666+  6676             
0666+  6676~            	else
0666+  6676~            	else
0666+  6676~            	else
0666+  6676~            	else
0666+  6676             
0666+  6676             
0666+  6676 04          
0666+  6679             
0666+  6679 20 FE       
0666+  667B             
0666+  667B             
0666+  667B             
0666+  667B~            	else
0666+  667B~            	else
0666+  667B~            	else
0666+  667B~            	else
0666+  667B~            	else
0666+  667B             
0666+  667B~            	else
0666+  667B~            	else
0666+  667B             
0666+  667B~            	else
0666+  667B~            	else
0666+  667B             
0667+  667B 86 01       		ldaA	1
0668+  667D             	endif	
0668+  667D             
0668+  667D             
0668+  667D             
0668+  667D             
0668+  667D             
0668+  667D~            	endif	
0668+  667D~            	endif	
0668+  667D             
0668+  667D~            	endif	
0668+  667D~            	endif	
0668+  667D             
0668+  667A             
0668+  667A 02          
0668+  667B             
0668+  667B             
0668+  667B~            	endif	
0668+  667B~            	endif	
0668+  667B~            	endif	
0668+  667B             
0668+  667D             
0668+  667D~            	endif	
0668+  667D~            	endif	
0668+  667D             
0669+  667D 97 BE       	staA	p_BonusLeft
0670+  667F             	
0671+  667F             captiveAward_bonusLoop:
0672+  667F BD 7D BC    	score1000()
0673+  6682 7A 00 B0    	dec	p_Bonus
0674+  6685 BD 60 C3    	jsr	bonusLights
0675+  6688 86 19       	delay(200)
0675+  668A BD 7D 6B    
0676+  668D 7D 00 B0    	tst	p_Bonus
0677+  6690 26 ED       	bne	captiveAward_bonusLoop
0678+  6692             	
0679+  6692 86 38       	ldaA	00111000b
0680+  6694 94 A1       	andA	>flc(2)
0681+  6696 43          	comA
0682+  6697 94 09       	andA	>lc(2)
0683+  6699 97 09       	staA	lc(2)
0684+  669B             	
0685+  669B 96 BE       	ldaA	>p_BonusLeft
0686+  669D 97 B0       	staA	p_Bonus
0687+  669F             	
0688+  669F 39          	rts	
0689+  66A0             	
0690+  66A0             	
0691+  66A0             alternate:
0692+  66A0 C6 00       	ldaB	0 ; turn on left?
0693+  66A2 86 80       	ldaA	lr(8) ; right special
0694+  66A4 95 09       	bitA	>lc(2)
0695+  66A6             	ifne
0695+  66A6             
0695+  66A6 27 FE       
0696+  66A8 C6 01       		ldaB	1
0697+  66AA 86 7F       		lampOff(8,2) ; right special
0697+  66AC 94 09       
0697+  66AE 97 09       
0698+  66B0             	endif
0698+  66B0             
0698+  66B0             
0698+  66B0             
0698+  66B0             
0698+  66B0             
0698+  66B0~            	endif
0698+  66B0~            	endif
0698+  66B0             
0698+  66B0~            	endif
0698+  66B0~            	endif
0698+  66B0             
0698+  66A7             
0698+  66A7 08          
0698+  66A8             
0698+  66A8             
0698+  66A8~            	endif
0698+  66A8~            	endif
0698+  66A8~            	endif
0698+  66A8             
0698+  66B0             
0698+  66B0~            	endif
0698+  66B0~            	endif
0698+  66B0             
0699+  66B0 86 02       	ldaA	lr(2) ; left special
0700+  66B2 95 0A       	bitA	>lc(3)
0701+  66B4             	ifne
0701+  66B4             
0701+  66B4 27 FE       
0702+  66B6 86 80       		lampOn(8,2) ; right special
0702+  66B8 9A 09       
0702+  66BA 97 09       
0703+  66BC 86 FD       		lampOff(2,3) ; left special
0703+  66BE 94 0A       
0703+  66C0 97 0A       
0704+  66C2             	endif
0704+  66C2             
0704+  66C2             
0704+  66C2             
0704+  66C2             
0704+  66C2             
0704+  66C2~            	endif
0704+  66C2~            	endif
0704+  66C2             
0704+  66C2~            	endif
0704+  66C2~            	endif
0704+  66C2             
0704+  66B5             
0704+  66B5 0C          
0704+  66B6             
0704+  66B6             
0704+  66B6~            	endif
0704+  66B6~            	endif
0704+  66B6~            	endif
0704+  66B6             
0704+  66C2             
0704+  66C2~            	endif
0704+  66C2~            	endif
0704+  66C2             
0705+  66C2 5D          	tstB
0706+  66C3             	ifne
0706+  66C3             
0706+  66C3 27 FE       
0707+  66C5 86 02       		lampOn(2,3) ; left special
0707+  66C7 9A 0A       
0707+  66C9 97 0A       
0708+  66CB             	endif
0708+  66CB             
0708+  66CB             
0708+  66CB             
0708+  66CB             
0708+  66CB             
0708+  66CB~            	endif
0708+  66CB~            	endif
0708+  66CB             
0708+  66CB~            	endif
0708+  66CB~            	endif
0708+  66CB             
0708+  66C4             
0708+  66C4 06          
0708+  66C5             
0708+  66C5             
0708+  66C5~            	endif
0708+  66C5~            	endif
0708+  66C5~            	endif
0708+  66C5             
0708+  66CB             
0708+  66CB~            	endif
0708+  66CB~            	endif
0708+  66CB             
0709+  66CB 39          	rts
0710+  66CC             	
0711+  66CC             addCollect:
0712+  66CC 96 09       	ldaA	>lc(2)
0713+  66CE 85 08       	bitA	lr(4)
0714+  66D0             	ifeq
0714+  66D0             
0714+  66D0 26 FE       
0715+  66D2 86 08       		lampOn(4,2)
0715+  66D4 9A 09       
0715+  66D6 97 09       
0716+  66D8 86 08       		flashLamp(4,2)
0716+  66DA 9A A1       
0716+  66DC 97 A1       
0717+  66DE             	else
0717+  66DE             
0717+  66DE             
0717+  66DE             
0717+  66DE             
0717+  66D1             
0717+  66D1             
0717+  66D1             
0717+  66D1~            	else
0717+  66D1~            	else
0717+  66D1~            	else
0717+  66D1~            	else
0717+  66D1             
0717+  66D1~            	else
0717+  66D1~            	else
0717+  66D1~            	else
0717+  66D1~            	else
0717+  66D1             
0717+  66D1             
0717+  66D1 0E          
0717+  66DE             
0717+  66DE 20 FE       
0717+  66E0             
0717+  66E0             
0717+  66E0             
0717+  66E0~            	else
0717+  66E0~            	else
0717+  66E0~            	else
0717+  66E0~            	else
0717+  66E0~            	else
0717+  66E0             
0717+  66E0~            	else
0717+  66E0~            	else
0717+  66E0             
0717+  66E0~            	else
0717+  66E0~            	else
0717+  66E0             
0718+  66E0 85 10       		bitA	lr(5)
0719+  66E2             		ifeq
0719+  66E2             
0719+  66E2 26 FE       
0720+  66E4 86 10       			lampOn(5,2)
0720+  66E6 9A 09       
0720+  66E8 97 09       
0721+  66EA 86 10       			flashLamp(5,2)
0721+  66EC 9A A1       
0721+  66EE 97 A1       
0722+  66F0             		else
0722+  66F0             
0722+  66F0             
0722+  66F0             
0722+  66F0             
0722+  66E3             
0722+  66E3             
0722+  66E3             
0722+  66E3~            		else
0722+  66E3~            		else
0722+  66E3~            		else
0722+  66E3~            		else
0722+  66E3             
0722+  66E3~            		else
0722+  66E3~            		else
0722+  66E3~            		else
0722+  66E3~            		else
0722+  66E3             
0722+  66E3             
0722+  66E3 0E          
0722+  66F0             
0722+  66F0 20 FE       
0722+  66F2             
0722+  66F2             
0722+  66F2             
0722+  66F2~            		else
0722+  66F2~            		else
0722+  66F2~            		else
0722+  66F2~            		else
0722+  66F2~            		else
0722+  66F2             
0722+  66F2~            		else
0722+  66F2~            		else
0722+  66F2             
0722+  66F2~            		else
0722+  66F2~            		else
0722+  66F2             
0723+  66F2 85 20       			bitA	lr(6)
0724+  66F4             			ifeq
0724+  66F4             
0724+  66F4 26 FE       
0725+  66F6 86 20       				lampOn(6,2)
0725+  66F8 9A 09       
0725+  66FA 97 09       
0726+  66FC 86 20       				flashLamp(6,2)
0726+  66FE 9A A1       
0726+  6700 97 A1       
0727+  6702             			else
0727+  6702             
0727+  6702             
0727+  6702             
0727+  6702             
0727+  66F5             
0727+  66F5             
0727+  66F5             
0727+  66F5~            			else
0727+  66F5~            			else
0727+  66F5~            			else
0727+  66F5~            			else
0727+  66F5             
0727+  66F5~            			else
0727+  66F5~            			else
0727+  66F5~            			else
0727+  66F5~            			else
0727+  66F5             
0727+  66F5             
0727+  66F5 0E          
0727+  6702             
0727+  6702 20 FE       
0727+  6704             
0727+  6704             
0727+  6704             
0727+  6704~            			else
0727+  6704~            			else
0727+  6704~            			else
0727+  6704~            			else
0727+  6704~            			else
0727+  6704             
0727+  6704~            			else
0727+  6704~            			else
0727+  6704             
0727+  6704~            			else
0727+  6704~            			else
0727+  6704             
0728+  6704 BD 7D BC    				score1000()
0729+  6707 86 04       				lampOn(3,3)
0729+  6709 9A 0A       
0729+  670B 97 0A       
0730+  670D             			endif
0730+  670D             
0730+  670D             
0730+  670D             
0730+  670D             
0730+  670D             
0730+  670D~            			endif
0730+  670D~            			endif
0730+  670D             
0730+  670D~            			endif
0730+  670D~            			endif
0730+  670D             
0730+  6703             
0730+  6703 09          
0730+  6704             
0730+  6704             
0730+  6704~            			endif
0730+  6704~            			endif
0730+  6704~            			endif
0730+  6704             
0730+  670D             
0730+  670D~            			endif
0730+  670D~            			endif
0730+  670D             
0731+  670D             		endif
0731+  670D             
0731+  670D             
0731+  670D             
0731+  670D             
0731+  670D             
0731+  670D~            		endif
0731+  670D~            		endif
0731+  670D             
0731+  670D~            		endif
0731+  670D~            		endif
0731+  670D             
0731+  66F1             
0731+  66F1 1B          
0731+  66F2             
0731+  66F2             
0731+  66F2~            		endif
0731+  66F2~            		endif
0731+  66F2~            		endif
0731+  66F2             
0731+  670D             
0731+  670D~            		endif
0731+  670D~            		endif
0731+  670D             
0732+  670D             	endif
0732+  670D             
0732+  670D             
0732+  670D             
0732+  670D             
0732+  670D             
0732+  670D~            	endif
0732+  670D~            	endif
0732+  670D             
0732+  670D~            	endif
0732+  670D~            	endif
0732+  670D             
0732+  66DF             
0732+  66DF 2D          
0732+  66E0             
0732+  66E0             
0732+  66E0~            	endif
0732+  66E0~            	endif
0732+  66E0~            	endif
0732+  66E0             
0732+  670D             
0732+  670D~            	endif
0732+  670D~            	endif
0732+  670D             
0733+  670D 39          	rts
0734+  670E             	
0735+  670E             ; end callbacks
0736+  670E             	.msfirst
0737+  670E             ; needs to be on $**00 address
0738+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0739+  6000 62 29       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0739+  6002 62 29       
0739+  6004 62 42       
0739+  6006 60 C0       
0739+  6008 60 C0       
0739+  600A 60 C0       
0739+  600C 62 29       
0739+  600E 60 C0       
0740+  6010 62 79       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0740+  6012 62 29       
0740+  6014 64 FD       
0740+  6016 65 23       
0740+  6018 65 2C       
0740+  601A 65 41       
0740+  601C 66 13       
0740+  601E 66 2D       
0741+  6020 65 91       	.dw swDropTip	\.dw swDroptIp\.dw swDroptiP\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0741+  6022 65 9B       
0741+  6024 65 A5       
0741+  6026 65 F4       
0741+  6028 65 2C       
0741+  602A 63 EA       
0741+  602C 65 2C       
0741+  602E 60 C0       
0742+  6030 65 96       	.dw swDropHot	\.dw swDrophOt\.dw swDrophoT\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0742+  6032 65 A0       
0742+  6034 65 AA       
0742+  6036 65 2C       
0742+  6038 63 56       
0742+  603A 65 FD       
0742+  603C 65 88       
0742+  603E 65 41       
0743+  6040 64 D7       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0743+  6042 65 23       
0743+  6044 65 2C       
0743+  6046 60 C0       
0743+  6048 64 92       
0743+  604A 60 C0       
0743+  604C 60 C0       
0743+  604E 60 C0       
0744+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0744+  6052 60 C0       
0744+  6054 60 C0       
0744+  6056 60 C0       
0744+  6058 60 C0       
0744+  605A 60 C0       
0744+  605C 60 C0       
0744+  605E 60 C0       
0745+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0745+  6062 60 C0       
0745+  6064 60 C0       
0745+  6066 60 C0       
0745+  6068 60 C0       
0745+  606A 60 C0       
0745+  606C 60 C0       
0745+  606E 60 C0       
0746+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0746+  6072 60 C0       
0746+  6074 60 C0       
0746+  6076 60 C0       
0746+  6078 60 C0       
0746+  607A 60 C0       
0746+  607C 60 C0       
0746+  607E 60 C0       
0747+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0748+  6080             ; off = how many cycles it must be off for
0749+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0750+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0751+  6080             ; TRANSPOSED (?)
0752+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0753+  6080             settleTable: ; must be right after callbackTable
0754+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0754+  6081 87          
0754+  6082 C2          
0754+  6083 47          
0754+  6084 47          
0754+  6085 47          
0754+  6086 87          
0754+  6087 47          
0755+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0755+  6089 87          
0755+  608A 87          
0755+  608B 87          
0755+  608C 81          
0755+  608D 81          
0755+  608E 80          
0755+  608F 87          
0756+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,3,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0756+  6091 87          
0756+  6092 87          
0756+  6093 83          
0756+  6094 83          
0756+  6095 E1          
0756+  6096 81          
0756+  6097 80          
0757+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,1,1,0)
0757+  6099 87          
0757+  609A 87          
0757+  609B 81          
0757+  609C E1          
0757+  609D 80          
0757+  609E 80          
0757+  609F 81          
0758+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0758+  60A1 87          
0758+  60A2 81          
0758+  60A3 47          
0758+  60A4 80          
0758+  60A5 47          
0758+  60A6 47          
0758+  60A7 47          
0759+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0759+  60A9 47          
0759+  60AA 47          
0759+  60AB 47          
0759+  60AC 47          
0759+  60AD 47          
0759+  60AE 47          
0759+  60AF 47          
0760+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0760+  60B1 47          
0760+  60B2 47          
0760+  60B3 47          
0760+  60B4 47          
0760+  60B5 47          
0760+  60B6 47          
0760+  60B7 47          
0761+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0761+  60B9 47          
0761+  60BA 47          
0761+  60BB 47          
0761+  60BC 47          
0761+  60BD 47          
0761+  60BE 47          
0761+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 FF       	ldaA	$FF	
0102   78AF B7 28 00    	staA 	displayStrobe
0103   78B2             
0104   78B2 86 00       	ldaA	00
0105   78B4 97 07       	staA	strobe
0106   78B6 B7 01 6A    	staA	displayCol
0107   78B9             	
0108   78B9 CE 00 00    	ldX 	0
0109   78BC DF 50       	stX		curCol
0110   78BE             	
0111   78BE 86 00       	ldaA	0
0112   78C0 97 10       	staA	curSwitchRowLsb
0113   78C2             	
0114   78C2             ; fill solenoid status with off
0115   78C2 86 0F       	ldaA	$F
0116   78C4 CE 01 40    	ldX	solenoid1
0117   78C7             lSolDefault:
0118   78C7 A7 00       	staA	0, X
0119   78C9 08          	inX
0120   78CA 8C 01 4F    	cpX	solenoid16
0121   78CD 26 F8       	bne	lSolDefault
0122   78CF             	
0123   78CF             ; clear 8 banks
0124   78CF 86 00       	ldaA 	0
0125   78D1 CE 00 00    	ldX	0
0126   78D4             lClear8:
0127   78D4 A7 08       	staA	lampCol1, X
0128   78D6 A7 A0       	staA	flashLampCol1, X
0129   78D8 A7 80       	staA	waitLeft, X
0130   78DA 08          	inX
0131   78DB 8C 00 08    	cpX	8
0132   78DE 26 F4       	bne 	lClear8
0133   78E0             	
0134   78E0             ; empty settle
0135   78E0 86 00       	ldaA	$00
0136   78E2 CE 01 00    	ldX	settleRow1
0137   78E5             lSettleDefault:
0138   78E5 A7 00       	staA	0, X
0139   78E7 08          	inX
0140   78E8 8C 01 3F    	cpX	settleRow8End
0141   78EB 26 F8       	bne	lSettleDefault
0142   78ED             	
0143   78ED             ; empty queue
0144   78ED 86 FF       	ldaA	$FF
0145   78EF CE 00 60    	ldX	queue
0146   78F2             lEmptyQueue:
0147   78F2 A7 00       	staA	0, X
0148   78F4 08          	inX
0149   78F5 8C 00 6D    	cpX	queueEnd
0150   78F8 26 F8       	bne	lEmptyQueue
0151   78FA             	
0152   78FA 86 00       	ldaA	0
0153   78FC 97 54       	staA	queueHead + 0
0154   78FE 97 56       	staA	queueTail + 0
0155   7900 86 60       	ldaA	queue
0156   7902 97 55       	staA	queueHead + 1
0157   7904 97 57       	staA	queueTail + 1
0158   7906             	
0159   7906             ; test numbers
0160   7906 86 20       	lampOn(6,8) ; game over
0160   7908 9A 0F       
0160   790A 97 0F       
0161   790C             
0162   790C             	
0163   790C BD 7D 80    	jsr resetScores
0164   790F             	
0165   790F             ; setup complete
0166   790F 0E          	clI		; enable timer interrupt
0167   7910             	
0168   7910             	
0169   7910             end:
0170   7910 B6 01 6B    	ldaA	>state
0171   7913 85 04       	bitA	100b
0172   7915             	ifne
0172   7915             
0172   7915 27 FE       
0173   7917             		; dec wait timers
0174   7917 CE 00 7F    		ldX	waitLeft - 1
0175   791A             decWaitTimers:
0176   791A 08          		inX
0177   791B A6 00       		ldaA	0, X
0178   791D             		ifne
0178   791D             
0178   791D 27 FE       
0179   791F 4A          			decA
0180   7920 A7 00       			staA	0, X
0181   7922             			ifeq
0181   7922             
0181   7922 26 FE       
0182   7924 A6 08       				ldaA	waitMsb - waitLeft, X
0183   7926 97 58       				staA	tempQ
0184   7928 A6 10       				ldaA	waitLsb - waitLeft, X
0185   792A 97 59       				staA	tempQ + 1
0186   792C E6 18       				ldaB	waitReg - waitLeft, X
0187   792E DE 58       				ldX	>tempQ
0188   7930 6E 00       				jmp	0, X
0189   7932             			endif
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7923             
0189   7923 0E          
0189   7924             
0189   7924             
0189   7924~            			endif
0189   7924~            			endif
0189   7924~            			endif
0189   7924             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0190   7932             		endif
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   791E             
0190   791E 13          
0190   791F             
0190   791F             
0190   791F~            		endif
0190   791F~            		endif
0190   791F~            		endif
0190   791F             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0191   7932 8C 00 87    		cpX	waitLeftEnd
0192   7935 26 E3       		bne	decWaitTimers
0193   7937             		
0194   7937             		
0195   7937 7A 00 A9    		dec	dropResetTimer
0196   793A             		ifmi
0196   793A             
0196   793A 2A FE       
0197   793C 7C 00 A9    			inc	dropResetTimer
0198   793F             		endif
0198   793F             
0198   793F             
0198   793F             
0198   793F             
0198   793F             
0198   793F~            		endif
0198   793F~            		endif
0198   793F             
0198   793F~            		endif
0198   793F~            		endif
0198   793F             
0198   793B             
0198   793B 03          
0198   793C             
0198   793C             
0198   793C~            		endif
0198   793C~            		endif
0198   793C~            		endif
0198   793C             
0198   793F             
0198   793F~            		endif
0198   793F~            		endif
0198   793F             
0199   793F             		
0200   793F B6 01 6B    		ldaA	>state		; clear strobe reset bit
0201   7942 84 FB       		andA	11111011b
0202   7944 B7 01 6B    		staA	state
0203   7947             	endif
0203   7947             
0203   7947             
0203   7947             
0203   7947             
0203   7947             
0203   7947~            	endif
0203   7947~            	endif
0203   7947             
0203   7947~            	endif
0203   7947~            	endif
0203   7947             
0203   7916             
0203   7916 30          
0203   7917             
0203   7917             
0203   7917~            	endif
0203   7917~            	endif
0203   7917~            	endif
0203   7917             
0203   7947             
0203   7947~            	endif
0203   7947~            	endif
0203   7947             
0204   7947             
0205   7947             		
0206   7947             ; pop queue
0207   7947 D6 57       	ldaB	>queueTail + 1
0208   7949 D1 55       	cmpB	>queueHead + 1
0209   794B             	ifeq
0209   794B             
0209   794B 26 FE       
0210   794D 7E 79 E1    		jmp skipQueue
0211   7950             	endif
0211   7950             
0211   7950             
0211   7950             
0211   7950             
0211   7950             
0211   7950~            	endif
0211   7950~            	endif
0211   7950             
0211   7950~            	endif
0211   7950~            	endif
0211   7950             
0211   794C             
0211   794C 03          
0211   794D             
0211   794D             
0211   794D~            	endif
0211   794D~            	endif
0211   794D~            	endif
0211   794D             
0211   7950             
0211   7950~            	endif
0211   7950~            	endif
0211   7950             
0212   7950             	
0213   7950 DE 54       	ldX	>queueHead
0214   7952 A6 00       	ldaA	0, X	; A now contains the first queue item
0215   7954             	
0216   7954 16          	tAB
0217   7955 C4 3F       	andB	00111111b ; B = callback index
0218   7957             	
0219   7957 D7 59       	staB	tempQ + 1
0220   7959 C6 60       	ldaB	callbackTable >> 8
0221   795B D7 58       	staB	tempQ + 0	; callback address LSB / 2
0222   795D DE 58       	ldX	>tempQ
0223   795F             	
0224   795F E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0225   7961 C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0226   7963             	ifne ; if closure only
0226   7963             
0226   7963 27 FE       
0227   7965 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0228   7967 26 62       		bne	skipEvent
0229   7969             	endif
0229   7969             
0229   7969             
0229   7969             
0229   7969             
0229   7969             
0229   7969~            	endif
0229   7969~            	endif
0229   7969             
0229   7969~            	endif
0229   7969~            	endif
0229   7969             
0229   7964             
0229   7964 04          
0229   7965             
0229   7965             
0229   7965~            	endif
0229   7965~            	endif
0229   7965~            	endif
0229   7965             
0229   7969             
0229   7969~            	endif
0229   7969~            	endif
0229   7969             
0230   7969             	
0231   7969 C5 40       	bitB	01000000b ; B.7 = active in game over
0232   796B             	ifeq 	 ; not active in game over
0232   796B             
0232   796B 26 FE       
0233   796D D6 0F       		ldaB	>lc(8)	; gameover mask
0234   796F C5 20       		bitB	lr(6)
0235   7971 26 58       		bne	skipEvent
0236   7973 D6 0F       		ldaB	>lc(8) ; tilt bit
0237   7975 C5 10       		bitB	lr(5)
0238   7977 26 52       		bne	skipEvent
0239   7979             	endif
0239   7979             
0239   7979             
0239   7979             
0239   7979             
0239   7979             
0239   7979~            	endif
0239   7979~            	endif
0239   7979             
0239   7979~            	endif
0239   7979~            	endif
0239   7979             
0239   796C             
0239   796C 0C          
0239   796D             
0239   796D             
0239   796D~            	endif
0239   796D~            	endif
0239   796D~            	endif
0239   796D             
0239   7979             
0239   7979~            	endif
0239   7979~            	endif
0239   7979             
0240   7979             	
0241   7979             	; checked passed, do callback
0242   7979 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0243   797C DE 58       	ldX	>tempQ
0244   797E EE 00       	ldX	0, X
0245   7980 6E 00       	jmp	0, X
0246   7982             	; everything trashed
0247   7982             afterQueueEvent:
0248   7982 BD 60 C3    	jsr 	bonusLights
0249   7985             	
0250   7985             	; update last switch
0251   7985 96 59       	ldaA	> tempQ + 1
0252   7987 44          	lsrA 	; got doubled earlier
0253   7988 97 A8       	staA	lastSwitch
0254   798A             
0255   798A 86 02       	ldaA	10b ; no validate bit
0256   798C B5 01 6B    	bitA	>state
0257   798F             	ifeq ; validate pf
0257   798F             
0257   798F 26 FE       
0258   7991             		; check if playfield invalid
0259   7991 86 0F       		ldaA	00001111b ; player up
0260   7993 95 A7       		bitA	>flc(8)
0261   7995             		ifne ; any flashing -> pf invalid
0261   7995             
0261   7995 27 FE       
0262   7997 43          			comA	; turn off flashing
0263   7998 94 A7       			andA	>flc(8)
0264   799A 97 A7       			staA	flc(8)
0265   799C             			
0266   799C 86 01       			ldaA	lr(1) ; shoot again pf flashing
0267   799E 95 A2       			bitA	>flc(3)
0268   79A0             			ifne
0268   79A0             
0268   79A0 27 FE       
0269   79A2             				; turn off ball save
0270   79A2 86 FE       				flashOff(1,3)
0270   79A4 94 A2       
0270   79A6 97 A2       
0271   79A8 86 40       				ldaA	lr(7) ; shoot again backbox
0272   79AA 95 0F       				bitA	>lc(8)
0273   79AC             				ifeq
0273   79AC             
0273   79AC 26 FE       
0274   79AE 86 FE       					lampOff(1,3) ; shoot again pf
0274   79B0 94 0A       
0274   79B2 97 0A       
0275   79B4             				endif
0275   79B4             
0275   79B4             
0275   79B4             
0275   79B4             
0275   79B4             
0275   79B4~            				endif
0275   79B4~            				endif
0275   79B4             
0275   79B4~            				endif
0275   79B4~            				endif
0275   79B4             
0275   79AD             
0275   79AD 06          
0275   79AE             
0275   79AE             
0275   79AE~            				endif
0275   79AE~            				endif
0275   79AE~            				endif
0275   79AE             
0275   79B4             
0275   79B4~            				endif
0275   79B4~            				endif
0275   79B4             
0276   79B4             			else
0276   79B4             
0276   79B4             
0276   79B4             
0276   79B4             
0276   79A1             
0276   79A1             
0276   79A1             
0276   79A1~            			else
0276   79A1~            			else
0276   79A1~            			else
0276   79A1~            			else
0276   79A1             
0276   79A1~            			else
0276   79A1~            			else
0276   79A1~            			else
0276   79A1~            			else
0276   79A1             
0276   79A1             
0276   79A1 14          
0276   79B4             
0276   79B4 20 FE       
0276   79B6             
0276   79B6             
0276   79B6             
0276   79B6~            			else
0276   79B6~            			else
0276   79B6~            			else
0276   79B6~            			else
0276   79B6~            			else
0276   79B6             
0276   79B6~            			else
0276   79B6~            			else
0276   79B6             
0276   79B6~            			else
0276   79B6~            			else
0276   79B6             
0277   79B6 86 FE       				lampOff(1,3) ; shoot again
0277   79B8 94 0A       
0277   79BA 97 0A       
0278   79BC 86 BF       				lampOff(7,8)
0278   79BE 94 0F       
0278   79C0 97 0F       
0279   79C2             			endif
0279   79C2             
0279   79C2             
0279   79C2             
0279   79C2             
0279   79C2             
0279   79C2~            			endif
0279   79C2~            			endif
0279   79C2             
0279   79C2~            			endif
0279   79C2~            			endif
0279   79C2             
0279   79B5             
0279   79B5 0C          
0279   79B6             
0279   79B6             
0279   79B6~            			endif
0279   79B6~            			endif
0279   79B6~            			endif
0279   79B6             
0279   79C2             
0279   79C2~            			endif
0279   79C2~            			endif
0279   79C2             
0280   79C2             		endif
0280   79C2             
0280   79C2             
0280   79C2             
0280   79C2             
0280   79C2             
0280   79C2~            		endif
0280   79C2~            		endif
0280   79C2             
0280   79C2~            		endif
0280   79C2~            		endif
0280   79C2             
0280   7996             
0280   7996 2B          
0280   7997             
0280   7997             
0280   7997~            		endif
0280   7997~            		endif
0280   7997~            		endif
0280   7997             
0280   79C2             
0280   79C2~            		endif
0280   79C2~            		endif
0280   79C2             
0281   79C2             	else
0281   79C2             
0281   79C2             
0281   79C2             
0281   79C2             
0281   7990             
0281   7990             
0281   7990             
0281   7990~            	else
0281   7990~            	else
0281   7990~            	else
0281   7990~            	else
0281   7990             
0281   7990~            	else
0281   7990~            	else
0281   7990~            	else
0281   7990~            	else
0281   7990             
0281   7990             
0281   7990 33          
0281   79C2             
0281   79C2 20 FE       
0281   79C4             
0281   79C4             
0281   79C4             
0281   79C4~            	else
0281   79C4~            	else
0281   79C4~            	else
0281   79C4~            	else
0281   79C4~            	else
0281   79C4             
0281   79C4~            	else
0281   79C4~            	else
0281   79C4             
0281   79C4~            	else
0281   79C4~            	else
0281   79C4             
0282   79C4             		; clear don't validate bit
0283   79C4 43          		comA
0284   79C5 B4 01 6B    		andA	>state
0285   79C8 B7 01 6B    		staA	state
0286   79CB             	endif
0286   79CB             
0286   79CB             
0286   79CB             
0286   79CB             
0286   79CB             
0286   79CB~            	endif
0286   79CB~            	endif
0286   79CB             
0286   79CB~            	endif
0286   79CB~            	endif
0286   79CB             
0286   79C3             
0286   79C3 07          
0286   79C4             
0286   79C4             
0286   79C4~            	endif
0286   79C4~            	endif
0286   79C4~            	endif
0286   79C4             
0286   79CB             
0286   79CB~            	endif
0286   79CB~            	endif
0286   79CB             
0287   79CB             	
0288   79CB             skipEvent:
0289   79CB B6 01 6B    	ldaA	>state
0290   79CE 85 04       	bitA	100b
0291   79D0             	ifeq	; don't process queue if still finishing timers
0291   79D0             
0291   79D0 26 FE       
0292   79D2 C6 6D       		ldaB	queueEnd
0293   79D4 D1 55       		cmpB	>queueHead + 1
0294   79D6             		ifeq
0294   79D6             
0294   79D6 26 FE       
0295   79D8 C6 60       			ldaB	queue
0296   79DA D7 55       			staB	queueHead + 1
0297   79DC             		else
0297   79DC             
0297   79DC             
0297   79DC             
0297   79DC             
0297   79D7             
0297   79D7             
0297   79D7             
0297   79D7~            		else
0297   79D7~            		else
0297   79D7~            		else
0297   79D7~            		else
0297   79D7             
0297   79D7~            		else
0297   79D7~            		else
0297   79D7~            		else
0297   79D7~            		else
0297   79D7             
0297   79D7             
0297   79D7 06          
0297   79DC             
0297   79DC 20 FE       
0297   79DE             
0297   79DE             
0297   79DE             
0297   79DE~            		else
0297   79DE~            		else
0297   79DE~            		else
0297   79DE~            		else
0297   79DE~            		else
0297   79DE             
0297   79DE~            		else
0297   79DE~            		else
0297   79DE             
0297   79DE~            		else
0297   79DE~            		else
0297   79DE             
0298   79DE 7C 00 55    			inc	queueHead + 1
0299   79E1             		endif
0299   79E1             
0299   79E1             
0299   79E1             
0299   79E1             
0299   79E1             
0299   79E1~            		endif
0299   79E1~            		endif
0299   79E1             
0299   79E1~            		endif
0299   79E1~            		endif
0299   79E1             
0299   79DD             
0299   79DD 03          
0299   79DE             
0299   79DE             
0299   79DE~            		endif
0299   79DE~            		endif
0299   79DE~            		endif
0299   79DE             
0299   79E1             
0299   79E1~            		endif
0299   79E1~            		endif
0299   79E1             
0300   79E1             	endif
0300   79E1             
0300   79E1             
0300   79E1             
0300   79E1             
0300   79E1             
0300   79E1~            	endif
0300   79E1~            	endif
0300   79E1             
0300   79E1~            	endif
0300   79E1~            	endif
0300   79E1             
0300   79D1             
0300   79D1 0F          
0300   79D2             
0300   79D2             
0300   79D2~            	endif
0300   79D2~            	endif
0300   79D2~            	endif
0300   79D2             
0300   79E1             
0300   79E1~            	endif
0300   79E1~            	endif
0300   79E1             
0301   79E1             				
0302   79E1             skipQueue:
0303   79E1             				
0304   79E1             	
0305   79E1             				
0306   79E1 7E 79 10    	jmp		end
0307   79E4 00 00       	.dw 0
0308   79E6 00 00       	.dw 0
0309   79E8 00 00       	.dw 0
0310   79EA 00 00       	.dw 0
0311   79EC 00 00       	.dw 0
0312   79EE             		
0313   79EE             interrupt:	
0314   79EE 7C 00 02    	inc	counter
0315   79F1 86 00       	ldaA	0
0316   79F3 91 02       	cmpA	>counter
0317   79F5 26 21       	bne	counterHandled
0318   79F7 7C 00 03    	inc 	counter2
0319   79FA 86 04       	ldaA	4
0320   79FC 91 03       	cmpA	>counter2
0321   79FE 26 18       	bne	counterHandled
0322   7A00             	
0323   7A00 86 00       	ldaA	0
0324   7A02 97 03       	staA	counter2
0325   7A04 86 77       	ldaA	01110111b
0326   7A06 91 7E       	cmpA	>displayBcd1 + 14
0327   7A08 27 08       	beq	on
0328   7A0A             	
0329   7A0A 86 F0       	ldaA	$F0
0330   7A0C             	;staA	lampRow1
0331   7A0C 86 77       	ldaA	01110111b
0332   7A0E 97 7E       	staA	displayBcd1	 + 14
0333   7A10 20 06       	bra	counterHandled
0334   7A12             on:
0335   7A12 86 0F       	ldaA	$0F
0336   7A14             	;staA	lampRow1
0337   7A14 86 33       	ldaA	00110011b
0338   7A16 97 7E       	staA	displayBcd1	 + 14
0339   7A18             
0340   7A18             counterHandled:
0341   7A18             ; move switch column
0342   7A18 96 07       	ldaA	>strobe
0343   7A1A B7 30 02    	staA	switchStrobe
0344   7A1D             	
0345   7A1D             ; update display 
0346   7A1D             	
0347   7A1D 96 BF       	ldaA	>$BF
0348   7A1F 97 7F       	staA	displayBcd1 + 15
0349   7A21 96 6F       	ldaA	>$6F
0350   7A23 97 76       	staA	displayBcd1 + 6
0351   7A25             	
0352   7A25 DE 50       	ldX	>curCol
0353   7A27 B6 01 6A    	ldaA	>displayCol
0354   7A2A 84 0F       	andA	1111b
0355   7A2C C6 FF       	ldaB 	$FF
0356   7A2E F7 28 02    	staB	displayBcd
0357   7A31 B7 28 00    	staA	displayStrobe
0358   7A34 85 08       	bitA	00001000b
0359   7A36             	ifeq
0359   7A36             
0359   7A36 26 FE       
0360   7A38 E6 70       		ldaB	displayBcd1, X
0361   7A3A             	else
0361   7A3A             
0361   7A3A             
0361   7A3A             
0361   7A3A             
0361   7A37             
0361   7A37             
0361   7A37             
0361   7A37~            	else
0361   7A37~            	else
0361   7A37~            	else
0361   7A37~            	else
0361   7A37             
0361   7A37~            	else
0361   7A37~            	else
0361   7A37~            	else
0361   7A37~            	else
0361   7A37             
0361   7A37             
0361   7A37 04          
0361   7A3A             
0361   7A3A 20 FE       
0361   7A3C             
0361   7A3C             
0361   7A3C             
0361   7A3C~            	else
0361   7A3C~            	else
0361   7A3C~            	else
0361   7A3C~            	else
0361   7A3C~            	else
0361   7A3C             
0361   7A3C~            	else
0361   7A3C~            	else
0361   7A3C             
0361   7A3C~            	else
0361   7A3C~            	else
0361   7A3C             
0362   7A3C E6 78       		ldaB	displayBcd1 + 8, X
0363   7A3E             	endif
0363   7A3E             
0363   7A3E             
0363   7A3E             
0363   7A3E             
0363   7A3E             
0363   7A3E~            	endif
0363   7A3E~            	endif
0363   7A3E             
0363   7A3E~            	endif
0363   7A3E~            	endif
0363   7A3E             
0363   7A3B             
0363   7A3B 02          
0363   7A3C             
0363   7A3C             
0363   7A3C~            	endif
0363   7A3C~            	endif
0363   7A3C~            	endif
0363   7A3C             
0363   7A3E             
0363   7A3E~            	endif
0363   7A3E~            	endif
0363   7A3E             
0364   7A3E F7 28 02    	staB	displayBcd
0365   7A41             	
0366   7A41             ; read switches
0367   7A41             	;jmp updateLamps
0368   7A41 DE 50       	ldX	>curCol
0369   7A43 B6 30 00    	ldaA	>switchRow
0370   7A46 16          	tab
0371   7A47 A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0372   7A49             	
0373   7A49 D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0374   7A4B D7 01       	staB	temp + 1 			; temp = switch / 2
0375   7A4D D7 53       	staB	tempX + 1			; tempX = cRAM
0376   7A4F C6 60       	ldaB	callbackTable >> 8
0377   7A51 D7 00       	staB	temp
0378   7A53 C6 01       	ldaB	cRAM >> 8
0379   7A55 D7 52       	staB	tempX
0380   7A57             	
0381   7A57 C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0382   7A59             	
0383   7A59             	; temp now contains the beginning of the row in the callbackTable
0384   7A59             swNext:
0385   7A59 85 01       	bitA	00000001b	 ; Z set if switch not different
0386   7A5B             	ifne		; if bit set, switch different
0386   7A5B             
0386   7A5B 27 FE       
0387   7A5D 36          		pshA ; store changed switches left
0388   7A5E DE 52       		ldX	>tempX
0389   7A60 86 18       		ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0390   7A62             				; but checking 'multiple of 8' would miss 7/8 switch
0391   7A62             				; columns completely since they're in sync
0392   7A62             				; so instead the lowest bits are empty (so that it'll
0393   7A62             				; get all switch cols) and instead it skips 7/8 groups 
0394   7A62             				; of 8 IRQs
0395   7A62 95 02       		bitA	>counter
0396   7A64 27 08       		beq checkSettled ; counter not multiple of 8, skip settling (multiplies settle time by 8)
0397   7A66             			; just check if this is the beginning of the settle
0398   7A66             			;  (want to react right away when a switch closes)
0399   7A66 A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0400   7A68 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0401   7A6A 27 33       			beq 	notSettled; A=0 -> was settled, so can begin
0402   7A6C 20 4B       			bra settledEnd
0403   7A6E             checkSettled:
0404   7A6E A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0405   7A70 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0406   7A72 27 2B       		beq 	notSettled; A=0 -> settled
0407   7A74             		; else A > 0 -> settling
0408   7A74 4A          			decA
0409   7A75 A7 00       			staA	0, X	; sets Z if now A = 0
0410   7A77             			ifeq ; A=0 -> now settled, fire event
0410   7A77             
0410   7A77 26 FE       
0411   7A79             settled:		
0412   7A79 DE 50       				ldX	>curCol
0413   7A7B 17          				tBA	; A now the bit in row
0414   7A7C A8 20       				eorA	switchRow1, X ; toggle bit in row
0415   7A7E A7 20       				staA	switchRow1, X ; A now state of row
0416   7A80             				
0417   7A80 F5 30 00    				bitB	>switchRow
0418   7A83             				ifne ; switch now on
0418   7A83             
0418   7A83 27 FE       
0419   7A85 86 40       					ldaA	01000000b
0420   7A87             				else
0420   7A87             
0420   7A87             
0420   7A87             
0420   7A87             
0420   7A84             
0420   7A84             
0420   7A84             
0420   7A84~            				else
0420   7A84~            				else
0420   7A84~            				else
0420   7A84~            				else
0420   7A84             
0420   7A84~            				else
0420   7A84~            				else
0420   7A84~            				else
0420   7A84~            				else
0420   7A84             
0420   7A84             
0420   7A84 04          
0420   7A87             
0420   7A87 20 FE       
0420   7A89             
0420   7A89             
0420   7A89             
0420   7A89~            				else
0420   7A89~            				else
0420   7A89~            				else
0420   7A89~            				else
0420   7A89~            				else
0420   7A89             
0420   7A89~            				else
0420   7A89~            				else
0420   7A89             
0420   7A89~            				else
0420   7A89~            				else
0420   7A89             
0421   7A89 86 C0       					ldaA	11000000b
0422   7A8B             				endif
0422   7A8B             
0422   7A8B             
0422   7A8B             
0422   7A8B             
0422   7A8B             
0422   7A8B~            				endif
0422   7A8B~            				endif
0422   7A8B             
0422   7A8B~            				endif
0422   7A8B~            				endif
0422   7A8B             
0422   7A88             
0422   7A88 02          
0422   7A89             
0422   7A89             
0422   7A89~            				endif
0422   7A89~            				endif
0422   7A89~            				endif
0422   7A89             
0422   7A8B             
0422   7A8B~            				endif
0422   7A8B~            				endif
0422   7A8B             
0423   7A8B 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0424   7A8D             				
0425   7A8D             				; store event
0426   7A8D DE 56       				ldX	>queueTail
0427   7A8F A7 00       				staA	0, X
0428   7A91 7C 00 57    				inc	queueTail + 1
0429   7A94             				
0430   7A94             				; wrap queueTail if necessary
0431   7A94 8C 00 6D    				cpX	queueEnd 
0432   7A97             				ifeq
0432   7A97             
0432   7A97 26 FE       
0433   7A99 86 60       					ldaA	queue 
0434   7A9B 97 57       					staA	queueTail + 1
0435   7A9D             				endif
0435   7A9D             
0435   7A9D             
0435   7A9D             
0435   7A9D             
0435   7A9D             
0435   7A9D~            				endif
0435   7A9D~            				endif
0435   7A9D             
0435   7A9D~            				endif
0435   7A9D~            				endif
0435   7A9D             
0435   7A98             
0435   7A98 04          
0435   7A99             
0435   7A99             
0435   7A99~            				endif
0435   7A99~            				endif
0435   7A99~            				endif
0435   7A99             
0435   7A9D             
0435   7A9D~            				endif
0435   7A9D~            				endif
0435   7A9D             
0436   7A9D             			endif
0436   7A9D             
0436   7A9D             
0436   7A9D             
0436   7A9D             
0436   7A9D             
0436   7A9D~            			endif
0436   7A9D~            			endif
0436   7A9D             
0436   7A9D~            			endif
0436   7A9D~            			endif
0436   7A9D             
0436   7A78             
0436   7A78 24          
0436   7A79             
0436   7A79             
0436   7A79~            			endif
0436   7A79~            			endif
0436   7A79~            			endif
0436   7A79             
0436   7A9D             
0436   7A9D~            			endif
0436   7A9D~            			endif
0436   7A9D             
0437   7A9D 20 1A       		bra settledEnd
0438   7A9F             notSettled: ; =0 -> was settled, so now it's not
0439   7A9F             			; get the settle time
0440   7A9F 96 53       			ldaA	>tempX + 1
0441   7AA1 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0442   7AA3 DE 00       			ldX	>temp
0443   7AA5             			
0444   7AA5             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0445   7AA5 A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0446   7AA7             			
0447   7AA7             			; need to get correct 3 bits from switch settings
0448   7AA7 F5 30 00    			bitB	>switchRow
0449   7AAA             			ifne ; switch just turned on
0449   7AAA             
0449   7AAA 27 FE       
0450   7AAC 44          				lsrA
0451   7AAD 44          				lsrA
0452   7AAE             			else
0452   7AAE             
0452   7AAE             
0452   7AAE             
0452   7AAE             
0452   7AAB             
0452   7AAB             
0452   7AAB             
0452   7AAB~            			else
0452   7AAB~            			else
0452   7AAB~            			else
0452   7AAB~            			else
0452   7AAB             
0452   7AAB~            			else
0452   7AAB~            			else
0452   7AAB~            			else
0452   7AAB~            			else
0452   7AAB             
0452   7AAB             
0452   7AAB 04          
0452   7AAE             
0452   7AAE 20 FE       
0452   7AB0             
0452   7AB0             
0452   7AB0             
0452   7AB0~            			else
0452   7AB0~            			else
0452   7AB0~            			else
0452   7AB0~            			else
0452   7AB0~            			else
0452   7AB0             
0452   7AB0~            			else
0452   7AB0~            			else
0452   7AB0             
0452   7AB0~            			else
0452   7AB0~            			else
0452   7AB0             
0453   7AB0 48          				aslA
0454   7AB1             			endif
0454   7AB1             
0454   7AB1             
0454   7AB1             
0454   7AB1             
0454   7AB1             
0454   7AB1~            			endif
0454   7AB1~            			endif
0454   7AB1             
0454   7AB1~            			endif
0454   7AB1~            			endif
0454   7AB1             
0454   7AAF             
0454   7AAF 01          
0454   7AB0             
0454   7AB0             
0454   7AB0~            			endif
0454   7AB0~            			endif
0454   7AB0~            			endif
0454   7AB0             
0454   7AB1             
0454   7AB1~            			endif
0454   7AB1~            			endif
0454   7AB1             
0455   7AB1 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0456   7AB3             						
0457   7AB3 DE 52       			ldX	>tempX
0458   7AB5 A7 00       			staA	0, X		; start settling	
0459   7AB7 27 C0       			beq	settled		; quick out for 0 settle
0460   7AB9             settledEnd:
0461   7AB9             			
0462   7AB9 32          		pulA
0463   7ABA             	endif
0463   7ABA             
0463   7ABA             
0463   7ABA             
0463   7ABA             
0463   7ABA             
0463   7ABA~            	endif
0463   7ABA~            	endif
0463   7ABA             
0463   7ABA~            	endif
0463   7ABA~            	endif
0463   7ABA             
0463   7A5C             
0463   7A5C 5D          
0463   7A5D             
0463   7A5D             
0463   7A5D~            	endif
0463   7A5D~            	endif
0463   7A5D~            	endif
0463   7A5D             
0463   7ABA             
0463   7ABA~            	endif
0463   7ABA~            	endif
0463   7ABA             
0464   7ABA 7C 00 53    	inc tempX + 1
0465   7ABD 58          	aslB
0466   7ABE 44          	lsrA			; pop lowest bit off, set Z if A is empty
0467   7ABF 26 98       	bne		swNext 	; more 'switched' bits, keep processing 
0468   7AC1             	
0469   7AC1             	
0470   7AC1             ; update lamps
0471   7AC1             updateLamps:
0472   7AC1             	;jmp updateStrobe
0473   7AC1             
0474   7AC1 DE 50       	ldX	>curCol
0475   7AC3             	
0476   7AC3 86 FF       	ldaA	$FF	;lamp row is inverted
0477   7AC5 B7 24 00    	staA	lampCol
0478   7AC8 96 07       	ldaA	>strobe
0479   7ACA B7 24 02    	staA	lampStrobe
0480   7ACD             	
0481   7ACD D6 02       	ldaB	>counter
0482   7ACF A6 08       	ldaA	lampCol1, X
0483   7AD1 C5 80       	bitB	10000000b 
0484   7AD3             	ifeq
0484   7AD3             
0484   7AD3 26 FE       
0485   7AD5 A8 A0       		eorA	flashLampCol1, X
0486   7AD7 A4 08       		andA	lampCol1, X
0487   7AD9             	endif
0487   7AD9             
0487   7AD9             
0487   7AD9             
0487   7AD9             
0487   7AD9             
0487   7AD9~            	endif
0487   7AD9~            	endif
0487   7AD9             
0487   7AD9~            	endif
0487   7AD9~            	endif
0487   7AD9             
0487   7AD4             
0487   7AD4 04          
0487   7AD5             
0487   7AD5             
0487   7AD5~            	endif
0487   7AD5~            	endif
0487   7AD5~            	endif
0487   7AD5             
0487   7AD9             
0487   7AD9~            	endif
0487   7AD9~            	endif
0487   7AD9             
0488   7AD9 43          	comA	; inverted
0489   7ADA             	
0490   7ADA B7 24 00    	staA	lampCol
0491   7ADD 86 00       	ldaA	00
0492   7ADF             
0493   7ADF             ; update solenoids
0494   7ADF             	; if a solenoid is set to <254, --
0495   7ADF             	; if =255, off, otherwise on
0496   7ADF             	; else leave it at 254
0497   7ADF             	
0498   7ADF 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0499   7AE2 86 FE       	ldaA	254
0500   7AE4 DE 50       	ldX	>curCol
0501   7AE6             	; update solenoid in current 'column' (1-8) 
0502   7AE6 A1 40       	cmpA	solenoid1 - cRAM, X
0503   7AE8             	ifge 	; solenoid <=254, turn on
0503   7AE8             
0503   7AE8 25 FE       
0504   7AEA             		ifgt	; solenoid < 254, decrement
0504   7AEA             
0504   7AEA 23 FE       
0505   7AEC 6A 40       			dec	solenoid1 - cRAM, X
0506   7AEE             		endif
0506   7AEE             
0506   7AEE             
0506   7AEE             
0506   7AEE             
0506   7AEE             
0506   7AEE~            		endif
0506   7AEE~            		endif
0506   7AEE             
0506   7AEE~            		endif
0506   7AEE~            		endif
0506   7AEE             
0506   7AEB             
0506   7AEB 02          
0506   7AEC             
0506   7AEC             
0506   7AEC~            		endif
0506   7AEC~            		endif
0506   7AEC~            		endif
0506   7AEC             
0506   7AEE             
0506   7AEE~            		endif
0506   7AEE~            		endif
0506   7AEE             
0507   7AEE 0D          		sec
0508   7AEF             	else
0508   7AEF             
0508   7AEF             
0508   7AEF             
0508   7AEF             
0508   7AE9             
0508   7AE9             
0508   7AE9             
0508   7AE9~            	else
0508   7AE9~            	else
0508   7AE9~            	else
0508   7AE9~            	else
0508   7AE9             
0508   7AE9~            	else
0508   7AE9~            	else
0508   7AE9~            	else
0508   7AE9~            	else
0508   7AE9             
0508   7AE9             
0508   7AE9 07          
0508   7AEF             
0508   7AEF 20 FE       
0508   7AF1             
0508   7AF1             
0508   7AF1             
0508   7AF1~            	else
0508   7AF1~            	else
0508   7AF1~            	else
0508   7AF1~            	else
0508   7AF1~            	else
0508   7AF1             
0508   7AF1~            	else
0508   7AF1~            	else
0508   7AF1             
0508   7AF1~            	else
0508   7AF1~            	else
0508   7AF1             
0509   7AF1 0C          		clc
0510   7AF2             	endif
0510   7AF2             
0510   7AF2             
0510   7AF2             
0510   7AF2             
0510   7AF2             
0510   7AF2~            	endif
0510   7AF2~            	endif
0510   7AF2             
0510   7AF2~            	endif
0510   7AF2~            	endif
0510   7AF2             
0510   7AF0             
0510   7AF0 01          
0510   7AF1             
0510   7AF1             
0510   7AF1~            	endif
0510   7AF1~            	endif
0510   7AF1~            	endif
0510   7AF1             
0510   7AF2             
0510   7AF2~            	endif
0510   7AF2~            	endif
0510   7AF2             
0511   7AF2 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0512   7AF5             	; repeat above for second bank
0513   7AF5 A1 48       	cmpA	solenoid9 - cRAM, X
0514   7AF7             	ifge 	; solenoid <=254, turn on
0514   7AF7             
0514   7AF7 25 FE       
0515   7AF9             		ifgt	; solenoid < 254, decrement
0515   7AF9             
0515   7AF9 23 FE       
0516   7AFB 6A 48       			dec	solenoid9 - cRAM, X
0517   7AFD             		endif
0517   7AFD             
0517   7AFD             
0517   7AFD             
0517   7AFD             
0517   7AFD             
0517   7AFD~            		endif
0517   7AFD~            		endif
0517   7AFD             
0517   7AFD~            		endif
0517   7AFD~            		endif
0517   7AFD             
0517   7AFA             
0517   7AFA 02          
0517   7AFB             
0517   7AFB             
0517   7AFB~            		endif
0517   7AFB~            		endif
0517   7AFB~            		endif
0517   7AFB             
0517   7AFD             
0517   7AFD~            		endif
0517   7AFD~            		endif
0517   7AFD             
0518   7AFD 0D          		sec
0519   7AFE             	else
0519   7AFE             
0519   7AFE             
0519   7AFE             
0519   7AFE             
0519   7AF8             
0519   7AF8             
0519   7AF8             
0519   7AF8~            	else
0519   7AF8~            	else
0519   7AF8~            	else
0519   7AF8~            	else
0519   7AF8             
0519   7AF8~            	else
0519   7AF8~            	else
0519   7AF8~            	else
0519   7AF8~            	else
0519   7AF8             
0519   7AF8             
0519   7AF8 07          
0519   7AFE             
0519   7AFE 20 FE       
0519   7B00             
0519   7B00             
0519   7B00             
0519   7B00~            	else
0519   7B00~            	else
0519   7B00~            	else
0519   7B00~            	else
0519   7B00~            	else
0519   7B00             
0519   7B00~            	else
0519   7B00~            	else
0519   7B00             
0519   7B00~            	else
0519   7B00~            	else
0519   7B00             
0520   7B00 0C          		clc
0521   7B01             	endif
0521   7B01             
0521   7B01             
0521   7B01             
0521   7B01             
0521   7B01             
0521   7B01~            	endif
0521   7B01~            	endif
0521   7B01             
0521   7B01~            	endif
0521   7B01~            	endif
0521   7B01             
0521   7AFF             
0521   7AFF 01          
0521   7B00             
0521   7B00             
0521   7B00~            	endif
0521   7B00~            	endif
0521   7B00~            	endif
0521   7B00             
0521   7B01             
0521   7B01~            	endif
0521   7B01~            	endif
0521   7B01             
0522   7B01 76 00 29    	ror		solBStatus	
0523   7B04 7A 00 50    	dec		curCol ; undo inc
0524   7B07             	
0525   7B07             ; update strobe	
0526   7B07             updateStrobe:
0527   7B07             	;ldX		curCol
0528   7B07             	;inX 	
0529   7B07 86 08       	ldaA	8 	; pitch
0530   7B09 9B 10       	addA	>curSwitchRowLsb
0531   7B0B 97 10       	staA	curSwitchRowLsb
0532   7B0D 78 00 07    	asl	strobe
0533   7B10 7C 01 6A    	inc	displayCol
0534   7B13 86 00       	ldaA	0
0535   7B15 91 07       	cmpA	>strobe ; strobe done?  reset
0536   7B17             	ifeq		
0536   7B17             
0536   7B17 26 FE       
0537   7B19 96 28       		ldaA	>solAStatus
0538   7B1B B7 22 00    		staA	solenoidA
0539   7B1E 96 29       		ldaA	>solBStatus
0540   7B20 B7 22 02    		staA	solenoidB
0541   7B23             	
0542   7B23 86 01       		ldaA	00000001b
0543   7B25 97 07       		staA	strobe
0544   7B27             		
0545   7B27             		;ldX 	#0
0546   7B27             		
0547   7B27 86 00       		ldaA	0
0548   7B29 97 50       		staA	curCol
0549   7B2B 97 51       		staA	curCol + 1
0550   7B2D 97 10       		staA	curSwitchRowLsb
0551   7B2F 97 28       		staA	solAStatus
0552   7B31 97 29       		staA	solBStatus
0553   7B33             		
0554   7B33 F6 01 6A    		ldaB	>displayCol	; reset display col only if it's > 7 
0555   7B36 CA F0       		oraB	11110000b
0556   7B38 C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0557   7B3A             		ifgt
0557   7B3A             
0557   7B3A 23 FE       
0558   7B3C B7 01 6A    			staA	displayCol
0559   7B3F             		endif
0559   7B3F             
0559   7B3F             
0559   7B3F             
0559   7B3F             
0559   7B3F             
0559   7B3F~            		endif
0559   7B3F~            		endif
0559   7B3F             
0559   7B3F~            		endif
0559   7B3F~            		endif
0559   7B3F             
0559   7B3B             
0559   7B3B 03          
0559   7B3C             
0559   7B3C             
0559   7B3C~            		endif
0559   7B3C~            		endif
0559   7B3C~            		endif
0559   7B3C             
0559   7B3F             
0559   7B3F~            		endif
0559   7B3F~            		endif
0559   7B3F             
0560   7B3F             	
0561   7B3F B6 01 6B    		ldaA	>state
0562   7B42 8A 04       		oraA	100b
0563   7B44 B7 01 6B    		staA	state
0564   7B47             	else
0564   7B47             
0564   7B47             
0564   7B47             
0564   7B47             
0564   7B18             
0564   7B18             
0564   7B18             
0564   7B18~            	else
0564   7B18~            	else
0564   7B18~            	else
0564   7B18~            	else
0564   7B18             
0564   7B18~            	else
0564   7B18~            	else
0564   7B18~            	else
0564   7B18~            	else
0564   7B18             
0564   7B18             
0564   7B18 30          
0564   7B47             
0564   7B47 20 FE       
0564   7B49             
0564   7B49             
0564   7B49             
0564   7B49~            	else
0564   7B49~            	else
0564   7B49~            	else
0564   7B49~            	else
0564   7B49~            	else
0564   7B49             
0564   7B49~            	else
0564   7B49~            	else
0564   7B49             
0564   7B49~            	else
0564   7B49~            	else
0564   7B49             
0565   7B49 7C 00 51    		inc	curCol + 1
0566   7B4C             	endif
0566   7B4C             
0566   7B4C             
0566   7B4C             
0566   7B4C             
0566   7B4C             
0566   7B4C~            	endif
0566   7B4C~            	endif
0566   7B4C             
0566   7B4C~            	endif
0566   7B4C~            	endif
0566   7B4C             
0566   7B48             
0566   7B48 03          
0566   7B49             
0566   7B49             
0566   7B49~            	endif
0566   7B49~            	endif
0566   7B49~            	endif
0566   7B49             
0566   7B4C             
0566   7B4C~            	endif
0566   7B4C~            	endif
0566   7B4C             
0567   7B4C             	
0568   7B4C 3B          	rti
0569   7B4D             afterInterrupt:
0570   7B4D             
0571   7FF8             pointers: 	.org $7FF8  	
0572   7FF8             	.msfirst
0573   7FF8 79 EE       	.dw interrupt			
0574   7FFA 79 EE       	.dw interrupt			
0575   7FFC 79 EE       	.dw interrupt			
0576   7FFE 78 00       	.dw main
0577   8000             	
0578   8000             	
0579   8000             	.endtasm: Number of errors = 0
