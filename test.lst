0001   0000             #include "680xlogic.asm"
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             
0008+  0000             var1_		.equ	$00
0009+  0000             var2_		.equ	$00
0010+  0000             var3_		.equ	$00
0011+  0000             var4_		.equ	$00
0012+  0000             
0013+  0000             #define     FLAG_IF    	0
0014+  0000             #define     FLAG_ELSE 	1
0015+  0000             #define	FLAG_BEGIN 	2
0016+  0000             
0017+  0000             ;*******************************************************************
0018+  0000             ;* Locate: Pushes two Words                                        *
0019+  0000             ;*                                                                 *
0020+  0000             ;*            Word 1 - address of branch location                  *
0021+  0000             ;*            Word 2 - Type of Operation                           *
0022+  0000             ;*                     0 - Standard ENDIF                          *
0023+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0024+  0000             ;*                     2 - Loop                                    *
0025+  0000             ;*******************************************************************
0026+  0000             #define	logic_loc(type)	     \ .push  *, type
0027+  0000             
0028+  0000             ;*******************************************************************
0029+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0030+  0000             ;*       be of type 0.                                             *
0031+  0000             ;*******************************************************************
0032+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0033+  0000             
0034+  0000             ;*******************************************************************
0035+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0036+  0000             ;*        an 'xxend' statement.                                    *
0037+  0000             ;******************************************************************* 
0038+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0039+  0000             
0040+  0000             ;*******************************************************************
0041+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0042+  0000             ;*            pulls the pc location of the beginning of the loop   *
0043+  0000             ;*            and verifies that the 'type' is correct.             *
0044+  0000             ;*******************************************************************
0045+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0046+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0047+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0048+  0000             #defcont						\ y	*+5
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLO)
0145+  0000             #define	ifgt	logic_ifxx(BLS)
0146+  0000             
0147+  0000             #define	else  	logic_else(0,0)
0148+  0000             #define	else_eq	logic_else(1,BEQ)
0149+  0000             #define	else_ne	logic_else(1,BNE)
0150+  0000             #define	else_pl	logic_else(1,BPL)
0151+  0000             #define	else_mi	logic_else(1,BMI)
0152+  0000             #define	else_cc	logic_else(1,BCC)
0153+  0000             #define	else_cs	logic_else(1,BCS)
0154+  0000             
0155+  0000             #define 	endif		logic_end
0156+  0000             
0157+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0158+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0159+  0000             #define	plend	logic_loopend(BMI,BPL)
0160+  0000             #define	miend	logic_loopend(BPL,BMI)
0161+  0000             #define	csend	logic_loopend(BCC,BCS)
0162+  0000             #define	ccend	logic_loopend(BCS,BCC)
0163+  0000             #define	vcend	logic_loopend(BVS,BVC)
0164+  0000             #define	vsend	logic_loopend(BVC,BVS)
0165+  0000             
0166+  0000             #define	loopend	logic_loopend(BRA,BRA)
0167+  0000             
0168+  0000             #define	lsb(x)	x&$FF
0169+  0000             
0170+  0000             #define	msb(x)	(x>>8)&$FF0002   0000             
0003   0000             #include "decls.asm"
0001+  0000             
0002+  0000             displayStrobe: 	.equ $2800 ;		CB2=1 special solenoid 6
0003+  0000             displayBcd: 	.equ $2802
0004+  0000             displayStrobeC:	.equ $2801
0005+  0000             displayBcdC:	.equ $2803
0006+  0000             lampCol:		.equ $2400 ;		CA2=1 special solenoid 2
0007+  0000             lampColC:		.equ $2401 ; 		CB2=1 special solenoid 1
0008+  0000             lampStrobe:		.equ $2402
0009+  0000             lampStrobeC:	.equ $2403
0010+  0000             switchStrobe:	.equ $3002
0011+  0000             switchStrobeC:	.equ $3003
0012+  0000             switchRow:		.equ $3000 ; 		CB2=1 special solenoid 3
0013+  0000             switchRowC:		.equ $3001 ;		CA2=1 special solenoid 4
0014+  0000             solenoidA:		.equ $2200 ; todo: 	CB2=1 enable special solenoids, flippers
0015+  0000             solenoidAC		.equ $2201 ;      	CA2=1 special solenoid 5
0016+  0000             solenoidB:		.equ $2202
0017+  0000             solenoidBC:		.equ $2203
0018+  0000             
0019+  0000             RAM:			.equ $0000
0020+  0000             cRAM:			.equ $0100
0021+  0000             RAMEnd:			.equ $01FF
0022+  0000             temp:			.equ RAM + $00 ; 01
0023+  0000             counter:		.equ RAM + $02
0024+  0000             counter2:		.equ RAM + $03
0025+  0000             strobe:			.equ RAM + $07
0026+  0000             lampCol1:		.equ RAM + $08
0027+  0000             lampCol8:		.equ lampCol1 + 7 
0028+  0000             #DEFINE lc(x) 		lampCol1 + (x-1)
0029+  0000             #DEFINE lr(x)		((1 << (x-1))
0030+  0000             curSwitchRowLsb:	.equ RAM + $10 
0031+  0000             ; 
0032+  0000             curPlayer:		.equ RAM + $12 ; + 0-3
0033+  0000             ;;;
0034+  0000             switchRow1:		.equ RAM + $20
0035+  0000             switchRow8:		.equ switchRow1 + 7 
0036+  0000             #DEFINE sc(x) 		switchRow1 + x - 1
0037+  0000             #DEFINE sr(x)		(1 << (x-1))
0038+  0000             solAStatus:		.equ RAM + $28 ; solenoid PIA is updated once every 8 IRQ
0039+  0000             solBStatus:		.equ RAM + $29 ; one solenoid bit is generated per IRQ and pushed on
0040+  0000             curCol:			.equ RAM + $50 ; +
0041+  0000             tempX:			.equ RAM + $52 ; +
0042+  0000             queueHead:		.equ RAM + $54 ; +
0043+  0000             queueTail:		.equ RAM + $56 ; +
0044+  0000             tempQ:			.equ RAM + $58 ; +
0045+  0000             queue:			.equ RAM + $60	; opened | switch? | number#6
0046+  0000             queueEnd:		.equ RAM + $67
0047+  0000             ;
0048+  0000             displayBcd1:	.equ RAM + $70
0049+  0000             displayBcd16:	.equ RAM + $7F
0050+  0000             ballCount:		.equ displayBcd1 + 7
0051+  0000             waitLeft: 		.equ RAM + $80 ; dec every 16ms
0052+  0000             waitLeftEnd:		.equ RAM + $87
0053+  0000             waitMsb:		.equ RAM + $88 ; -> 8F
0054+  0000             waitLsb:		.equ RAM + $90 ; -> 97
0055+  0000             waitReg:		.equ RAM + $98 ; -> 9F
0056+  0000             flashLampCol1:		.equ RAM + $A0
0057+  0000             flashLampCol8:		.equ RAM + $A7
0058+  0000             #DEFINE flc(x) 		flashLampCol1 + (x - 1)
0059+  0000             lastSwitch:		.equ RAM + $A8
0060+  0000             dropResetTimer:		.equ RAM + $A9
0061+  0000             p_Bonus:		.equ RAM + $B0
0062+  0000             p_Ejects:		.equ RAM + $B1 ; -> B4
0063+  0000             p_DropsDown:		.equ RAM + $B5
0064+  0000             
0065+  0000             
0066+  0000             
0067+  0000             settleRow1:		.equ cRAM + $00 ;must be at 0
0068+  0000             settleRow8End:		.equ settleRow1+  (8*8)-1
0069+  0000             solenoid1:		.equ cRAM + $40		; set to E to turn solenoid on permanently
0070+  0000             solenoid8:		.equ solenoid1 + 7	; otherwise (<E), decremented every 8ms till reaches 0
0071+  0000             solenoid9:		.equ solenoid1 + 8	; F = solenoid off, otherwise on
0072+  0000             solenoid16:		.equ solenoid1 + 15 ; set to pulse time / 8ms to fire solenoid (5-7 reccomended)
0073+  0000             #DEFINE s(n) 		(0 + n)
0074+  0000             pA_1m:			.equ cRAM + $50	; note reverse order to match displays
0075+  0000             pA_10:			.equ pA_1m + 5
0076+  0000             pB_1m:			.equ pA_10 + 1
0077+  0000             pB_10:			.equ pB_1m + 5
0078+  0000             pC_1m:			.equ pB_10 + 1
0079+  0000             pC_10:			.equ pC_1m + 5
0080+  0000             pD_1m:			.equ pC_10 + 1
0081+  0000             pD_10:			.equ pD_1m + 5  
0082+  0000             displayCol:		.equ cRAM + $68
0083+  0000             state:			.equ cRAM + $69	; ? | strobe reset | don't validate | ?
0084+  0000             
0085+  0000             instant:		.equ 4
0086+  0000             debounce:		.equ 1
0087+  0000             slow:			.equ 2
0088+  0000             
0089+  0000             switchSettle:	.equ cRAM + $30
0090+  0000             ; through $7F ?0004   0000             
0005   0000             #include "util.asm"
0001+  7C00             utils:	.org $7800 + $400
0002+  7C00             
0003+  7C00             ; copy players' scores to display 
0004+  7C00             copyScores13:
0005+  7C00 CE 00 70    	ldX	displayBcd1
0006+  7C03 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0007+  7C05             copy13Loop:
0008+  7C05 A6 E0       	ldaA	pA_1m - displayBcd1, X
0009+  7C07 84 0F       	andA	$0F
0010+  7C09 81 00       	cmpA	$00 
0011+  7C0B             	ifeq ; if pA score = 0?
0011+  7C0B             
0011+  7C0B 26 FE       
0012+  7C0D 8C 00 74    		cpX	displayBcd1 + 4
0013+  7C10             		ifeq
0013+  7C10             
0013+  7C10 26 FE       
0014+  7C12 C4 0F       			andB	00001111b 
0015+  7C14 86 0F       			ldaA	$0F
0016+  7C16             		else
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C16             
0016+  7C11             
0016+  7C11             
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11~            		else
0016+  7C11             
0016+  7C11             
0016+  7C11 06          
0016+  7C16             
0016+  7C16 20 FE       
0016+  7C18             
0016+  7C18             
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0016+  7C18~            		else
0016+  7C18~            		else
0016+  7C18             
0017+  7C18 17          			tBA	; replace 0 with blank/0
0018+  7C19             		endif
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0018+  7C17             
0018+  7C17 01          
0018+  7C18             
0018+  7C18             
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18~            		endif
0018+  7C18             
0018+  7C19             
0018+  7C19~            		endif
0018+  7C19~            		endif
0018+  7C19             
0019+  7C19             	else
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C19             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C~            	else
0019+  7C0C             
0019+  7C0C             
0019+  7C0C 0E          
0019+  7C19             
0019+  7C19 20 FE       
0019+  7C1B             
0019+  7C1B             
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0019+  7C1B~            	else
0019+  7C1B~            	else
0019+  7C1B             
0020+  7C1B 48          		aslA
0021+  7C1C 48          		aslA
0022+  7C1D 48          		aslA
0023+  7C1E 48          		aslA
0024+  7C1F C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0025+  7C21 8A 0F       		oraA	00001111b
0026+  7C23             	endif
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0026+  7C1A             
0026+  7C1A 08          
0026+  7C1B             
0026+  7C1B             
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B~            	endif
0026+  7C1B             
0026+  7C23             
0026+  7C23~            	endif
0026+  7C23~            	endif
0026+  7C23             
0027+  7C23 A4 EC       	andA	pC_1m - displayBcd1, X
0028+  7C25             	
0029+  7C25             	;andA	$F0
0030+  7C25 85 0F       	bitA	00001111b
0031+  7C27             	ifeq ; pC is 0
0031+  7C27             
0031+  7C27 26 FE       
0032+  7C29 C5 0F       		bitB	1111b
0033+  7C2B             		ifne
0033+  7C2B             
0033+  7C2B 27 FE       
0034+  7C2D 8C 00 74    			cpX	displayBcd1 + 4
0035+  7C30             			ifeq
0035+  7C30             
0035+  7C30 26 FE       
0036+  7C32 C4 F0       				andB	11110000b
0037+  7C34             			else
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C34             
0037+  7C31             
0037+  7C31             
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31~            			else
0037+  7C31             
0037+  7C31             
0037+  7C31 04          
0037+  7C34             
0037+  7C34 20 FE       
0037+  7C36             
0037+  7C36             
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0037+  7C36~            			else
0037+  7C36~            			else
0037+  7C36             
0038+  7C36 8A 0F       				oraA	$F
0039+  7C38             			endif
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0039+  7C35             
0039+  7C35 02          
0039+  7C36             
0039+  7C36             
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36~            			endif
0039+  7C36             
0039+  7C38             
0039+  7C38~            			endif
0039+  7C38~            			endif
0039+  7C38             
0040+  7C38             		endif
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0040+  7C2C             
0040+  7C2C 0B          
0040+  7C2D             
0040+  7C2D             
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D~            		endif
0040+  7C2D             
0040+  7C38             
0040+  7C38~            		endif
0040+  7C38~            		endif
0040+  7C38             
0041+  7C38             	else
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C38             
0041+  7C28             
0041+  7C28             
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28~            	else
0041+  7C28             
0041+  7C28             
0041+  7C28 11          
0041+  7C38             
0041+  7C38 20 FE       
0041+  7C3A             
0041+  7C3A             
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0041+  7C3A~            	else
0041+  7C3A~            	else
0041+  7C3A             
0042+  7C3A C4 F0       		andB	11110000b
0043+  7C3C             	endif
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0043+  7C39             
0043+  7C39 02          
0043+  7C3A             
0043+  7C3A             
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A~            	endif
0043+  7C3A             
0043+  7C3C             
0043+  7C3C~            	endif
0043+  7C3C~            	endif
0043+  7C3C             
0044+  7C3C A7 00       	staA	0, X
0045+  7C3E             	
0046+  7C3E 08          	inX
0047+  7C3F 8C 00 76    	cpX	displayBcd1 + 6
0048+  7C42 26 C1       	bne 	copy13Loop
0049+  7C44             	
0050+  7C44 39          	rts
0051+  7C45             
0052+  7C45             copyScores24:
0053+  7C45 CE 00 78    	ldX	displayBcd1 + 8
0054+  7C48 C6 FF       	ldaB	$FF	; blank(F) until a number >0 is found then 0
0055+  7C4A             copy24Loop:
0056+  7C4A A6 DE       	ldaA	pB_1m - (displayBcd1 + 8), X
0057+  7C4C 84 0F       	andA	$0F
0058+  7C4E 81 00       	cmpA	$00 ; is pA score 0?
0059+  7C50             	ifeq ; if pA score = 0?
0059+  7C50             
0059+  7C50 26 FE       
0060+  7C52 8C 00 7C    		cpX	displayBcd1 + 8 + 4
0061+  7C55             		ifeq
0061+  7C55             
0061+  7C55 26 FE       
0062+  7C57 C4 0F       			andB	00001111b 
0063+  7C59 86 0F       			ldaA	$0F
0064+  7C5B             		else
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C5B             
0064+  7C56             
0064+  7C56             
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56~            		else
0064+  7C56             
0064+  7C56             
0064+  7C56 06          
0064+  7C5B             
0064+  7C5B 20 FE       
0064+  7C5D             
0064+  7C5D             
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0064+  7C5D~            		else
0064+  7C5D~            		else
0064+  7C5D             
0065+  7C5D 17          			tBA	; replace 0 with blank/0
0066+  7C5E             		endif
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0066+  7C5C             
0066+  7C5C 01          
0066+  7C5D             
0066+  7C5D             
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D~            		endif
0066+  7C5D             
0066+  7C5E             
0066+  7C5E~            		endif
0066+  7C5E~            		endif
0066+  7C5E             
0067+  7C5E             	else
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C5E             
0067+  7C51             
0067+  7C51             
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51~            	else
0067+  7C51             
0067+  7C51             
0067+  7C51 0E          
0067+  7C5E             
0067+  7C5E 20 FE       
0067+  7C60             
0067+  7C60             
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0067+  7C60~            	else
0067+  7C60~            	else
0067+  7C60             
0068+  7C60 48          		aslA
0069+  7C61 48          		aslA
0070+  7C62 48          		aslA
0071+  7C63 48          		aslA
0072+  7C64 C4 0F       		andB	00001111b ; mark upper half of B as 0 since number found
0073+  7C66 8A 0F       		oraA	00001111b
0074+  7C68             	endif
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0074+  7C5F             
0074+  7C5F 08          
0074+  7C60             
0074+  7C60             
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60~            	endif
0074+  7C60             
0074+  7C68             
0074+  7C68~            	endif
0074+  7C68~            	endif
0074+  7C68             
0075+  7C68 A4 EA       	andA	pD_1m - (displayBcd1 + 8), X
0076+  7C6A             	;andA	$F0
0077+  7C6A 85 0F       	bitA	00001111b
0078+  7C6C             	ifeq ; pC is 0
0078+  7C6C             
0078+  7C6C 26 FE       
0079+  7C6E C5 0F       		bitB	1111b
0080+  7C70             		ifne
0080+  7C70             
0080+  7C70 27 FE       
0081+  7C72 8C 00 7C    			cpX	displayBcd1 + 8 + 4
0082+  7C75             			ifeq
0082+  7C75             
0082+  7C75 26 FE       
0083+  7C77 C4 F0       				andB	11110000b
0084+  7C79             			else
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C79             
0084+  7C76             
0084+  7C76             
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76~            			else
0084+  7C76             
0084+  7C76             
0084+  7C76 04          
0084+  7C79             
0084+  7C79 20 FE       
0084+  7C7B             
0084+  7C7B             
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0084+  7C7B~            			else
0084+  7C7B~            			else
0084+  7C7B             
0085+  7C7B 8A 0F       				oraA	$F
0086+  7C7D             			endif
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0086+  7C7A             
0086+  7C7A 02          
0086+  7C7B             
0086+  7C7B             
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B~            			endif
0086+  7C7B             
0086+  7C7D             
0086+  7C7D~            			endif
0086+  7C7D~            			endif
0086+  7C7D             
0087+  7C7D             		endif
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0087+  7C71             
0087+  7C71 0B          
0087+  7C72             
0087+  7C72             
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72~            		endif
0087+  7C72             
0087+  7C7D             
0087+  7C7D~            		endif
0087+  7C7D~            		endif
0087+  7C7D             
0088+  7C7D             	else
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C7D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D~            	else
0088+  7C6D             
0088+  7C6D             
0088+  7C6D 11          
0088+  7C7D             
0088+  7C7D 20 FE       
0088+  7C7F             
0088+  7C7F             
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0088+  7C7F~            	else
0088+  7C7F~            	else
0088+  7C7F             
0089+  7C7F C4 F0       		andB	11110000b
0090+  7C81             	endif
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0090+  7C7E             
0090+  7C7E 02          
0090+  7C7F             
0090+  7C7F             
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F~            	endif
0090+  7C7F             
0090+  7C81             
0090+  7C81~            	endif
0090+  7C81~            	endif
0090+  7C81             
0091+  7C81 A7 00       	staA  0, X 
0092+  7C83             	
0093+  7C83 08          	inX
0094+  7C84 8C 00 7E    	cpX	displayBcd1 + 14
0095+  7C87 26 C1       	bne copy24Loop	
0096+  7C89             	
0097+  7C89 39          	rts
0098+  7C8A             	
0099+  7C8A             blankNonPlayerScores:
0100+  7C8A D6 0E       	ldaB	>lc(7)
0101+  7C8C C5 02       	bitB	lr(2)
0102+  7C8E 26 1A       	bne	blankP2
0103+  7C90 C5 04       	bitB	lr(3)
0104+  7C92 26 22       	bne	blankP3
0105+  7C94 C5 08       	bitB	lr(4)
0106+  7C96 26 2A       	bne	blankP4
0107+  7C98 C5 10       	bitB	lr(5)
0108+  7C9A 26 32       	bne	blankDone
0109+  7C9C 20 00       	bra	blankP1
0110+  7C9E             blankP1:
0111+  7C9E 86 F0       	ldaA	$F0
0112+  7CA0 9A 74       	oraA	>displayBcd1 + 4
0113+  7CA2 97 74       	staA	displayBcd1 + 4
0114+  7CA4 86 F0       	ldaA	$F0
0115+  7CA6 9A 75       	oraA	>displayBcd1 + 5
0116+  7CA8 97 75       	staA	displayBcd1 + 5
0117+  7CAA             blankP2:
0118+  7CAA 86 F0       	ldaA	$F0
0119+  7CAC 9A 7C       	oraA	>displayBcd1 + 12
0120+  7CAE 97 7C       	staA	displayBcd1 + 12
0121+  7CB0 86 F0       	ldaA	$F0
0122+  7CB2 9A 7D       	oraA	>displayBcd1 + 13
0123+  7CB4 97 7D       	staA	displayBcd1 + 13
0124+  7CB6             blankP3:
0125+  7CB6 86 0F       	ldaA	$0F
0126+  7CB8 9A 74       	oraA	>displayBcd1 + 4
0127+  7CBA 97 74       	staA	displayBcd1 + 4
0128+  7CBC 86 0F       	ldaA	$0F
0129+  7CBE 9A 75       	oraA	>displayBcd1 + 5
0130+  7CC0 97 75       	staA	displayBcd1 + 5
0131+  7CC2             blankP4:
0132+  7CC2 86 0F       	ldaA	$0F
0133+  7CC4 9A 7C       	oraA	>displayBcd1 + 12
0134+  7CC6 97 7C       	staA	displayBcd1 + 12
0135+  7CC8 86 0F       	ldaA	$0F
0136+  7CCA 9A 7D       	oraA	>displayBcd1 + 13
0137+  7CCC 97 7D       	staA	displayBcd1 + 13
0138+  7CCE             blankDone:
0139+  7CCE 39          	rts
0140+  7CCF             	
0141+  7CCF             refreshPlayerScores:
0142+  7CCF BD 7C 00    	jsr copyScores13
0143+  7CD2 BD 7C 45    	jsr copyScores24
0144+  7CD5 BD 7C 8A    	jsr blankNonPlayerScores
0145+  7CD8 39          	rts
0146+  7CD9             	
0147+  7CD9             ; add score instantly
0148+  7CD9             ; X = place in p*_1* to add the score to
0149+  7CD9             ; A = amount to add (max 9)
0150+  7CD9             ; tail call
0151+  7CD9             _addScoreI:
0152+  7CD9 AB 00       	addA	0, X
0153+  7CDB             	ifcs ; overflowed, need to increment next number
0153+  7CDB             
0153+  7CDB 24 FE       
0154+  7CDD 8B 06       		addA	6	; adjust A back into BCD
0155+  7CDF A7 00       		staA	0, X
0156+  7CE1             addScore_carryOver:		; loop to propagate carry
0157+  7CE1 09          		deX	; go to next decimal place
0158+  7CE2 A6 00       		ldaA	0, X	
0159+  7CE4 81 F9       		cmpA	$F9
0160+  7CE6             		ifeq			; if it's already a 9, reset it and carry again
0160+  7CE6             
0160+  7CE6 26 FE       
0161+  7CE8 6F 00       			clr	0, X
0162+  7CEA 27 F5       			beq addScore_carryOver
0163+  7CEC             		else			; otherwise ++ it and done
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CEC             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7~            		else			; otherwise ++ it and done
0163+  7CE7             
0163+  7CE7             
0163+  7CE7 06          
0163+  7CEC             
0163+  7CEC 20 FE       
0163+  7CEE             
0163+  7CEE             
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE~            		else			; otherwise ++ it and done
0163+  7CEE             
0164+  7CEE 6C 00       			inc	0, X
0165+  7CF0             		endif	
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0165+  7CED             
0165+  7CED 02          
0165+  7CEE             
0165+  7CEE             
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE~            		endif	
0165+  7CEE             
0165+  7CF0             
0165+  7CF0~            		endif	
0165+  7CF0~            		endif	
0165+  7CF0             
0166+  7CF0             	else
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CF0             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC~            	else
0166+  7CDC             
0166+  7CDC             
0166+  7CDC 15          
0166+  7CF0             
0166+  7CF0 20 FE       
0166+  7CF2             
0166+  7CF2             
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0166+  7CF2~            	else
0166+  7CF2~            	else
0166+  7CF2             
0167+  7CF2 81 F9       		cmpA	$F9
0168+  7CF4             		ifgt ; >9 -> need to adjust back into BCD
0168+  7CF4             
0168+  7CF4 23 FE       
0169+  7CF6 8B 06       			addA	6
0170+  7CF8 A7 00       			staA	0, X
0171+  7CFA             addScore_carryDa:
0172+  7CFA 09          			deX
0173+  7CFB A6 00       			ldaA	0, X
0174+  7CFD 81 F9       			cmpA	$F9
0175+  7CFF             			ifeq
0175+  7CFF             
0175+  7CFF 26 FE       
0176+  7D01 6F 00       				clr	0, X
0177+  7D03 27 F5       				beq 	addScore_carryDa
0178+  7D05             			else
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D05             
0178+  7D00             
0178+  7D00             
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00~            			else
0178+  7D00             
0178+  7D00             
0178+  7D00 06          
0178+  7D05             
0178+  7D05 20 FE       
0178+  7D07             
0178+  7D07             
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0178+  7D07~            			else
0178+  7D07~            			else
0178+  7D07             
0179+  7D07 6C 00       				inc	0, X
0180+  7D09             			endif	
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0180+  7D06             
0180+  7D06 02          
0180+  7D07             
0180+  7D07             
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07~            			endif	
0180+  7D07             
0180+  7D09             
0180+  7D09~            			endif	
0180+  7D09~            			endif	
0180+  7D09             
0181+  7D09             		else
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7D09             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5~            		else
0181+  7CF5             
0181+  7CF5             
0181+  7CF5 15          
0181+  7D09             
0181+  7D09 20 FE       
0181+  7D0B             
0181+  7D0B             
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0181+  7D0B~            		else
0181+  7D0B~            		else
0181+  7D0B             
0182+  7D0B A7 00       			staA	0, X
0183+  7D0D             		endif
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0183+  7D0A             
0183+  7D0A 02          
0183+  7D0B             
0183+  7D0B             
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B~            		endif
0183+  7D0B             
0183+  7D0D             
0183+  7D0D~            		endif
0183+  7D0D~            		endif
0183+  7D0D             
0184+  7D0D             	endif
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0184+  7CF1             
0184+  7CF1 1B          
0184+  7CF2             
0184+  7CF2             
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2~            	endif
0184+  7CF2             
0184+  7D0D             
0184+  7D0D~            	endif
0184+  7D0D~            	endif
0184+  7D0D             
0185+  7D0D             
0186+  7D0D 7E 7C CF    	jmp refreshPlayerScores
0187+  7D10             	
0188+  7D10 39          	rts
0189+  7D11             	
0190+  7D11             ; t A,X
0191+  7D11             setXToCurPlayer10:
0192+  7D11 96 0F       	ldaA	>lc(8)
0193+  7D13 85 01       	bitA	0001b
0194+  7D15 27 04       	beq	_addScore10N_p2
0195+  7D17 CE 01 55    	ldX	pA_10
0196+  7D1A 39          	rts
0197+  7D1B             _addScore10N_p2:
0198+  7D1B 85 02       	bitA	0010b
0199+  7D1D 27 04       	beq	_addScore10N_p3
0200+  7D1F CE 01 5B    	ldX	pB_10
0201+  7D22 39          	rts
0202+  7D23             _addScore10N_p3:
0203+  7D23 85 04       	bitA	0100b
0204+  7D25 27 04       	beq	_addScore10N_p4
0205+  7D27 CE 01 61    	ldX	pC_10
0206+  7D2A 39          	rts
0207+  7D2B             _addScore10N_p4:
0208+  7D2B CE 01 67    	ldX	pD_10
0209+  7D2E 39          	rts
0210+  7D2F             
0211+  7D2F             ; suspends execution for A ms and returns to queue processor
0212+  7D2F             ; should only be called from switch callbacks
0213+  7D2F             ; trashes everything but B
0214+  7D2F             _delay:	
0215+  7D2F CE 00 7F    	ldX	waitLeft - 1
0216+  7D32             findEmptyLoop:
0217+  7D32 08          	inX
0218+  7D33 6D 00       	tst	0, X
0219+  7D35 26 FB       	bne 	findEmptyLoop 
0220+  7D37             	
0221+  7D37             	; X = first waitLeft that = 0
0222+  7D37 E7 18       	staB	waitReg - waitLeft, X
0223+  7D39 33          	pulB	; A = MSB of PC
0224+  7D3A E7 08       	staB	waitMsb - waitLeft, X
0225+  7D3C 33          	pulB	; A = LSB of PC
0226+  7D3D E7 10       	staB	waitLsb - waitLeft, X
0227+  7D3F A7 00       	staA	0, X
0228+  7D41             	; time and add stored
0229+  7D41 7E 79 CB    	jmp skipEvent
0230+  7D44             	
0231+  7D44             resetScores:
0232+  7D44 86 00       	ldaA	00
0233+  7D46 CE 01 55    	ldX	pA_10
0234+  7D49             _zeroScores:
0235+  7D49 A7 00       	staA	0, X
0236+  7D4B 08          	inX
0237+  7D4C 8C 01 63    	cpX	pD_1m + 1
0238+  7D4F 26 F8       	bne	_zeroScores
0239+  7D51             	
0240+  7D51 86 00       	ldaA	0
0241+  7D53 97 12       	staA	curPlayer
0242+  7D55 97 13       	staA	curPlayer + 1
0243+  7D57 86 FF       	ldaA	$FF
0244+  7D59 97 76       	staA	displayBcd1 + 6
0245+  7D5B 97 7E       	staA	displayBcd1 + 14
0246+  7D5D 97 7F       	staA	displayBcd1 + 15
0247+  7D5F             	
0248+  7D5F BD 7C CF    	jsr	refreshPlayerScores
0249+  7D62 39          	rts
0250+  7D63             
0251+  7D63             ; trash ~B
0252+  7D63             ; delay for ms (8-2000)
0253+  7D63             #DEFINE delay(ms) ldaA ms/8\ jsr _delay
0254+  7D63             	
0255+  7D63             ; trashes B (max 104ms)
0256+  7D63             #DEFINE fireSolenoid(s)	ldaB (s&$FF)/8\ staB solenoid1+(s>>8)-1 
0257+  7D63             #DEFINE fireSolenoidA(s)	ldaA (s&$FF)/8\ staA solenoid1+(s>>8)-1 
0258+  7D63             
0259+  7D63             ; trashes AX
0260+  7D63             ; place: 1-5 = 10s thru 100ks
0261+  7D63             ; amount: 1-9
0262+  7D63             #DEFINE addScoreI(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreI
0263+  7D63             #DEFINE addScoreI_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreI
0264+  7D63             #DEFINE addScore(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScore
0265+  7D63             #DEFINE addScore_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScore
0266+  7D63             #DEFINE addScoreN(place,amount)		ldX pB_10-place+1\ ldaA 0+amount\ jsr _addScoreN
0267+  7D63             #DEFINE addScoreN_T(place,amount)	ldX pB_10-place+1\ ldaA 0+amount\ jmp _addScoreN
0268+  7D63             
0269+  7D63             #define disablePf ldaA 	>solenoidBC\ andA 11110111b\ staA solenoidBC
0270+  7D63             #define enablePf ldaA 	>solenoidBC\ oraA 00111000b\ staA solenoidBC
0271+  7D63             
0272+  7D63             #define lampOn(r,c) ldaA lr(r)\ oraA >lc(c)\ staA lc(c)
0273+  7D63             #define flashLamp(r,c) ldaA lr(r)\ oraA >flc(c)\ staA flc(c)
0274+  7D63             #define lampOff(r,c) ldaA ~lr(r)\ andA >lc(c)\ staA lc(c)
0275+  7D63             #define flashOff(r,c) ldaA ~lr(r)\ andA >flc(c)\ staA flc(c)
0006   7D63             
0007   7D63             #include "game.asm"
0001+  7D63             ; Laser Ball solenoids
0002+  7D63             ;#DEFINE KICKOUT 		01
0003+  7D63             ;#DEFINE LEFT_KICKER 	02
0004+  7D63             ;#DEFINE DROP_LA			03
0005+  7D63             ;#DEFINE DROP_SER		04
0006+  7D63             ;#DEFINE EJECT_HOLE		05
0007+  7D63             ;#DEFINE DROP_BA			06
0008+  7D63             ;#DEFINE DROP_LL			07
0009+  7D63             ;#DEFINE RIGHT_KICKER	08
0010+  7D63             ;#DEFINE SOUND1			09 ; thru 13
0011+  7D63             ;#DEFINE KNOCKER			14
0012+  7D63             ;#DEFINE	FLASHERS		15
0013+  7D63             ;#DEFINE COIN_LOCKOUT	16
0014+  7D63             
0015+  7D63             ; Hot Tip solenoids
0016+  7D63             #DEFINE SOL(n,t)	(n<<8)|t
0017+  7D63             #DEFINE TOP_EJECT 	SOL(01, 24)
0018+  7D63             #DEFINE DROP_TIP	SOL(02, 100)
0019+  7D63             #DEFINE DROP_HOT	SOL(03, 100)
0020+  7D63             #DEFINE LEFT_EJECT	SOL(04, 24)
0021+  7D63             #DEFINE OUTHOLE		SOL(05, 20)
0022+  7D63             #DEFINE CHIME_10	SOL(09, 16)
0023+  7D63             #DEFINE CHIME_100	SOL(10, 16)
0024+  7D63             #DEFINE CHIME_1000	SOL(11, 16)
0025+  7D63             #DEFINE CHIME_10k	SOL(12, 16)
0026+  7D63             #DEFINE CLICKER		SOL(13, 8)
0027+  7D63             #DEFINE	KNOCKER		SOL(14, 50)
0028+  7D63             #DEFINE BUZZER		SOL(15, 100)
0029+  7D63             #DEFINE SHORT_PAUSE 	115
0030+  7D63             
0031+  7D63             #DEFINE noValidate ldaA 10b\ oraA >state\ staA state
0032+  7D63             #DEFINE done(v)	\
0033+  7D63             #DEFCONT	#IF (v==0)
0034+  7D63             #DEFCONT		\ ldaA 10b
0035+  7D63             #DEFCONT		\ oraA >state
0036+  7D63             #DEFCONT		\ staA state
0037+  7D63             #DEFCONT	\#ENDIF
0038+  7D63             #DEFCONT	\ jmp afterQueueEvent
0039+  7D63             	
0040+  7D63             	
0041+  7D63             _addScore10N:
0042+  7D63 BD 7D 11    	jsr setXToCurPlayer10
0043+  7D66 86 01       	ldaA	1
0044+  7D68 BD 7C D9    	jsr _addScoreI
0045+  7D6B 86 02       	fireSolenoidA(CHIME_10)
0045+  7D6D B7 01 48    
0046+  7D70 39          	rts
0047+  7D71             _addScore100N:
0048+  7D71 BD 7D 11    	jsr setXToCurPlayer10
0049+  7D74 09          	deX
0050+  7D75 86 01       	ldaA	1
0051+  7D77 BD 7C D9    	jsr _addScoreI
0052+  7D7A 86 02       	fireSolenoidA(CHIME_100)	
0052+  7D7C B7 01 49    
0053+  7D7F 39          	rts
0054+  7D80             _addScore1000N:
0055+  7D80 BD 7D 11    	jsr setXToCurPlayer10
0056+  7D83 09          	deX
0057+  7D84 09          	deX
0058+  7D85 86 01       	ldaA	1
0059+  7D87 BD 7C D9    	jsr _addScoreI
0060+  7D8A 86 02       	fireSolenoidA(CHIME_1000)
0060+  7D8C B7 01 4A    
0061+  7D8F 39          	rts
0062+  7D90             #DEFINE score10() jsr _addScore10N
0063+  7D90             #DEFINE score100() jsr _addScore100N
0064+  7D90             #DEFINE score1000() jsr _addScore1000N
0065+  7D90             #DEFINE score500() \ jsr _addScore100N
0066+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0067+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0068+  7D90             #DEFCONT	\ jsr _addScore100N
0069+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0070+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0071+  7D90             #DEFCONT	\ jsr _addScore100N
0072+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0073+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0074+  7D90             #DEFCONT	\ jsr _addScore100N
0075+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0076+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0077+  7D90             #DEFCONT	\ jsr _addScore100N
0078+  7D90             #DEFCONT	\ fireSolenoid(CHIME_100)	
0079+  7D90             #DEFCONT	\ delay(SHORT_PAUSE)
0080+  7D90             
0081+  7D90             #DEFINE advBonus()	inc p_Bonus
0082+  7D90             	
0083+  7D90             ; switch callbacks:
0084+  7D90             
0085+  60C0             none:	.org $6000 + 192 ; size of callback table
0086+  60C0             	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0~            	done(1)
0086+  60C0             
0086+  60C0 7E 79 82    
0087+  60C3             	
0088+  60C3             bonusLights:
0089+  60C3 86 00       	ldaA	0
0090+  60C5 97 0C       	staA	lc(5)
0091+  60C7 97 0D       	staA	lc(6)
0092+  60C9 7D 00 B0    	tst	p_Bonus
0093+  60CC 27 11       	beq	bonusLights_done
0094+  60CE             	
0095+  60CE 86 80       	lampOn(8,5) ; 1k
0095+  60D0 9A 0C       
0095+  60D2 97 0C       
0096+  60D4             	
0097+  60D4 96 B0       	ldaA	>p_Bonus
0098+  60D6             bonusLights_loop:
0099+  60D6 4A          	decA
0100+  60D7 27 06       	beq 	bonusLights_done
0101+  60D9 0D          	seC
0102+  60DA 79 00 0D    	rol	lc(6)
0103+  60DD 20 F7       	bra	bonusLights_loop
0104+  60DF             	
0105+  60DF             bonusLights_done
0106+  60DF             
0107+  60DF 86 09       	ldaA	9
0108+  60E1 91 B0       	cmpA	>p_Bonus
0109+  60E3             	ifge	
0109+  60E3             
0109+  60E3 25 FE       
0110+  60E5             	else	; bonus >= 10?
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E5             
0110+  60E4             
0110+  60E4             
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4~            	else	; bonus >= 10?
0110+  60E4             
0110+  60E4             
0110+  60E4 02          
0110+  60E5             
0110+  60E5 20 FE       
0110+  60E7             
0110+  60E7             
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7~            	else	; bonus >= 10?
0110+  60E7             
0111+  60E7 86 0A       		ldaA	10
0112+  60E9 97 B0       		staA	p_Bonus
0113+  60EB 86 40       		lampOn(7,5) ; 10k light
0113+  60ED 9A 0C       
0113+  60EF 97 0C       
0114+  60F1             	endif
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0114+  60E6             
0114+  60E6 0A          
0114+  60E7             
0114+  60E7             
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7~            	endif
0114+  60E7             
0114+  60F1             
0114+  60F1~            	endif
0114+  60F1~            	endif
0114+  60F1             
0115+  60F1             	
0116+  60F1 39          	rts
0117+  60F2             	
0118+  60F2             	
0119+  60F2             startBall:
0120+  60F2 86 01       	ldaA	1
0121+  60F4 97 B0       	staA	p_Bonus
0122+  60F6 B6 22 03    	enablePf
0122+  60F9 8A 38       
0122+  60FB B7 22 03    
0123+  60FE             	
0124+  60FE 86 00       	ldaA	0
0125+  6100 97 B5       	staA	p_DropsDown
0126+  6102 86 10       	ldaA	16
0127+  6104 97 A9       	staA	dropResetTimer
0128+  6106 C6 0C       	fireSolenoid(DROP_TIP)
0128+  6108 F7 01 41    
0129+  610B 86 09       	delay(75)
0129+  610D BD 7D 2F    
0130+  6110 C6 0C       	fireSolenoid(DROP_HOT)
0130+  6112 F7 01 42    
0131+  6115 86 0F       	delay(125)
0131+  6117 BD 7D 2F    
0132+  611A             	
0133+  611A 86 FF       	ldaA	$FF
0134+  611C 97 A8       	staA	lastSwitch
0135+  611E             	
0136+  611E             	; clear lights
0137+  611E CE 00 08    	ldX	lampCol1
0138+  6121 86 00       	ldaA	0b
0139+  6123             lClearLights:
0140+  6123 A7 00       	staA	0, X
0141+  6125 A7 98       	staA	flashLampCol1 - lampCol1, X
0142+  6127 08          	inX
0143+  6128 8C 00 0E    	cpX	lc(6) + 1
0144+  612B 26 F6       	bne	lClearLights
0145+  612D             	;
0146+  612D             	
0147+  612D             	; init lights for player data
0148+  612D DE 12       	ldX	>curPlayer
0149+  612F A6 B1       	ldaA	p_Ejects, X
0150+  6131 97 0B       	staA	lc(4)
0151+  6133             	
0152+  6133 86 40       	ldaA	lr(7) ; shoot again
0153+  6135 95 0F       	bitA	>lc(8)
0154+  6137             	ifne
0154+  6137             
0154+  6137 27 FE       
0155+  6139 86 01       		lampOn(1,3) ; shoot again
0155+  613B 9A 0A       
0155+  613D 97 0A       
0156+  613F             	endif
0156+  613F             
0156+  613F             
0156+  613F             
0156+  613F             
0156+  613F             
0156+  613F~            	endif
0156+  613F~            	endif
0156+  613F             
0156+  613F~            	endif
0156+  613F~            	endif
0156+  613F             
0156+  6138             
0156+  6138 06          
0156+  6139             
0156+  6139             
0156+  6139~            	endif
0156+  6139~            	endif
0156+  6139~            	endif
0156+  6139             
0156+  613F             
0156+  613F~            	endif
0156+  613F~            	endif
0156+  613F             
0157+  613F             	
0158+  613F             	; flash player light
0159+  613F 86 0F       	ldaA	00001111b ; player up lights
0160+  6141 9A A7       	oraA	>flc(8)
0161+  6143 97 A7       	staA	flc(8)
0162+  6145             	
0163+  6145 86 01       	ldaA	sr(1) ; check outhole
0164+  6147 95 21       	bitA	>sc(2)
0165+  6149             	ifne ; ball in hole
0165+  6149             
0165+  6149 27 FE       
0166+  614B C6 02       		fireSolenoid(OUTHOLE)
0166+  614D F7 01 44    
0167+  6150             	endif
0167+  6150             
0167+  6150             
0167+  6150             
0167+  6150             
0167+  6150             
0167+  6150~            	endif
0167+  6150~            	endif
0167+  6150             
0167+  6150~            	endif
0167+  6150~            	endif
0167+  6150             
0167+  614A             
0167+  614A 05          
0167+  614B             
0167+  614B             
0167+  614B~            	endif
0167+  614B~            	endif
0167+  614B~            	endif
0167+  614B             
0167+  6150             
0167+  6150~            	endif
0167+  6150~            	endif
0167+  6150             
0168+  6150             	
0169+  6150 39          	rts
0170+  6151             	
0171+  6151             	
0172+  6151             startGame:
0173+  6151             	
0174+  6151 C6 02       	fireSolenoid(CHIME_10)
0174+  6153 F7 01 48    
0175+  6156 86 0E       	delay(SHORT_PAUSE)
0175+  6158 BD 7D 2F    
0176+  615B C6 02       	fireSolenoid(CHIME_10)
0176+  615D F7 01 48    
0177+  6160 86 0E       	delay(SHORT_PAUSE)
0177+  6162 BD 7D 2F    
0178+  6165 C6 02       	fireSolenoid(CHIME_10)
0178+  6167 F7 01 48    
0179+  616A 86 19       	delay(200)
0179+  616C BD 7D 2F    
0180+  616F             	
0181+  616F C6 02       	fireSolenoid(CHIME_10)
0181+  6171 F7 01 48    
0182+  6174 86 0E       	delay(SHORT_PAUSE)
0182+  6176 BD 7D 2F    
0183+  6179 C6 02       	fireSolenoid(CHIME_10)
0183+  617B F7 01 48    
0184+  617E 86 0E       	delay(SHORT_PAUSE)
0184+  6180 BD 7D 2F    
0185+  6183 C6 02       	fireSolenoid(CHIME_10)
0185+  6185 F7 01 48    
0186+  6188 86 19       	delay(200)
0186+  618A BD 7D 2F    
0187+  618D             	
0188+  618D C6 02       	fireSolenoid(CHIME_10)
0188+  618F F7 01 48    
0189+  6192 86 0E       	delay(SHORT_PAUSE)
0189+  6194 BD 7D 2F    
0190+  6197 C6 02       	fireSolenoid(CHIME_10)
0190+  6199 F7 01 48    
0191+  619C 86 0E       	delay(SHORT_PAUSE)
0191+  619E BD 7D 2F    
0192+  61A1 C6 02       	fireSolenoid(CHIME_100)
0192+  61A3 F7 01 49    
0193+  61A6 86 19       	delay(200)
0193+  61A8 BD 7D 2F    
0194+  61AB C6 02       	fireSolenoid(CHIME_1000)
0194+  61AD F7 01 4A    
0195+  61B0 86 19       	delay(200)
0195+  61B2 BD 7D 2F    
0196+  61B5 C6 02       	fireSolenoid(CHIME_10k)
0196+  61B7 F7 01 4B    
0197+  61BA 86 12       	delay(150)
0197+  61BC BD 7D 2F    
0198+  61BF             	
0199+  61BF             	; reset scores
0200+  61BF BD 7D 44    	jsr 	resetScores
0201+  61C2             	
0202+  61C2             	; reset ball count
0203+  61C2 86 10       	ldaA	$10
0204+  61C4 97 77       	staA	ballCount	
0205+  61C6             
0206+  61C6 C6 00       	ldaB	0
0207+  61C8 D7 13       	staB	curPlayer + 1
0208+  61CA             	
0209+  61CA D7 0E       	staB	lc(7)
0210+  61CC D7 0F       	staB	lc(8)
0211+  61CE D7 A6       	staB	flc(7)
0212+  61D0 D7 A7       	staB	flc(8)
0213+  61D2             	
0214+  61D2 CE 00 00    	ldX	0
0215+  61D5             lInitPlayers:
0216+  61D5 C6 01       	ldaB	lr(1)
0217+  61D7 E7 B1       	staB	p_Ejects, X
0218+  61D9 08          	inX
0219+  61DA 8C 00 04    	cpX	4
0220+  61DD 26 F6       	bne	lInitPlayers
0221+  61DF             	
0222+  61DF BD 60 F2    	jsr	startBall
0223+  61E2             	
0224+  61E2             	; invalidate playfield
0225+  61E2 86 01       	ldaA	lr(1)
0226+  61E4 9A 0F       	oraA	>lc(8)
0227+  61E6 97 0F       	staA	lc(8)
0228+  61E8             	
0229+  61E8 86 02       	lampOn(2,7) ; one player
0229+  61EA 9A 0E       
0229+  61EC 97 0E       
0230+  61EE             	
0231+  61EE 86 DF       	lampOff(6,8) ; game over
0231+  61F0 94 0F       
0231+  61F2 97 0F       
0232+  61F4             	
0233+  61F4 39          	rts
0234+  61F5             	
0235+  61F5             
0236+  61F5             	
0237+  61F5             swTilt: 
0238+  61F5 86 10       	lampOn(5,8) ; tilt
0238+  61F7 9A 0F       
0238+  61F9 97 0F       
0239+  61FB B6 22 03    	disablePf
0239+  61FE 84 F7       
0239+  6200 B7 22 03    
0240+  6203             	done(0)
0240+  6203             
0240+  6203 86 02       
0240+  6205 BA 01 69    
0240+  6208 B7 01 69    
0240+  620B             
0240+  620B 7E 79 82    
0241+  620E             	
0242+  620E             swStart: 
0243+  620E 96 0F       	ldaA >lc(8)
0244+  6210 85 20       	bitA lr(6)
0245+  6212             	ifne ; in game over
0245+  6212             
0245+  6212 27 FE       
0246+  6214 BD 61 51    		jsr startGame
0247+  6217             	else 
0247+  6217             
0247+  6217             
0247+  6217             
0247+  6217             
0247+  6213             
0247+  6213             
0247+  6213             
0247+  6213~            	else 
0247+  6213~            	else 
0247+  6213~            	else 
0247+  6213~            	else 
0247+  6213             
0247+  6213~            	else 
0247+  6213~            	else 
0247+  6213~            	else 
0247+  6213~            	else 
0247+  6213             
0247+  6213             
0247+  6213 05          
0247+  6217             
0247+  6217 20 FE       
0247+  6219             
0247+  6219             
0247+  6219             
0247+  6219~            	else 
0247+  6219~            	else 
0247+  6219~            	else 
0247+  6219~            	else 
0247+  6219~            	else 
0247+  6219             
0247+  6219~            	else 
0247+  6219~            	else 
0247+  6219             
0247+  6219~            	else 
0247+  6219~            	else 
0247+  6219             
0248+  6219 86 10       		ldaA	$10
0249+  621B 91 77       		cmpA	>ballCount
0250+  621D             		ifeq ; add player
0250+  621D             
0250+  621D 26 FE       
0251+  621F 86 1E       			ldaA	00011110b
0252+  6221 94 0E       			andA	>lc(7) ; player count lights
0253+  6223 85 10       			bitA	lr(5)
0254+  6225             			ifeq	; if not on P4 already, add player
0254+  6225             
0254+  6225 26 FE       
0255+  6227 48          				aslA
0256+  6228 C6 E1       				ldaB	11100001b
0257+  622A D4 0E       				andB	>lc(7)
0258+  622C D7 0E       				staB	lc(7)
0259+  622E 9A 0E       				oraA	>lc(7)
0260+  6230 97 0E       				staA	lc(7)
0261+  6232             			endif
0261+  6232             
0261+  6232             
0261+  6232             
0261+  6232             
0261+  6232             
0261+  6232~            			endif
0261+  6232~            			endif
0261+  6232             
0261+  6232~            			endif
0261+  6232~            			endif
0261+  6232             
0261+  6226             
0261+  6226 0B          
0261+  6227             
0261+  6227             
0261+  6227~            			endif
0261+  6227~            			endif
0261+  6227~            			endif
0261+  6227             
0261+  6232             
0261+  6232~            			endif
0261+  6232~            			endif
0261+  6232             
0262+  6232             		else ; restart game
0262+  6232             
0262+  6232             
0262+  6232             
0262+  6232             
0262+  621E             
0262+  621E             
0262+  621E             
0262+  621E~            		else ; restart game
0262+  621E~            		else ; restart game
0262+  621E~            		else ; restart game
0262+  621E~            		else ; restart game
0262+  621E             
0262+  621E~            		else ; restart game
0262+  621E~            		else ; restart game
0262+  621E~            		else ; restart game
0262+  621E~            		else ; restart game
0262+  621E             
0262+  621E             
0262+  621E 15          
0262+  6232             
0262+  6232 20 FE       
0262+  6234             
0262+  6234             
0262+  6234             
0262+  6234~            		else ; restart game
0262+  6234~            		else ; restart game
0262+  6234~            		else ; restart game
0262+  6234~            		else ; restart game
0262+  6234~            		else ; restart game
0262+  6234             
0262+  6234~            		else ; restart game
0262+  6234~            		else ; restart game
0262+  6234             
0262+  6234~            		else ; restart game
0262+  6234~            		else ; restart game
0262+  6234             
0263+  6234 BD 61 51    			jsr startGame
0264+  6237             		endif		
0264+  6237             
0264+  6237             
0264+  6237             
0264+  6237             
0264+  6237             
0264+  6237~            		endif		
0264+  6237~            		endif		
0264+  6237             
0264+  6237~            		endif		
0264+  6237~            		endif		
0264+  6237             
0264+  6233             
0264+  6233 03          
0264+  6234             
0264+  6234             
0264+  6234~            		endif		
0264+  6234~            		endif		
0264+  6234~            		endif		
0264+  6234             
0264+  6237             
0264+  6237~            		endif		
0264+  6237~            		endif		
0264+  6237             
0265+  6237             	endif
0265+  6237             
0265+  6237             
0265+  6237             
0265+  6237             
0265+  6237             
0265+  6237~            	endif
0265+  6237~            	endif
0265+  6237             
0265+  6237~            	endif
0265+  6237~            	endif
0265+  6237             
0265+  6218             
0265+  6218 1E          
0265+  6219             
0265+  6219             
0265+  6219~            	endif
0265+  6219~            	endif
0265+  6219~            	endif
0265+  6219             
0265+  6237             
0265+  6237~            	endif
0265+  6237~            	endif
0265+  6237             
0266+  6237             	
0267+  6237 BD 7C CF    	jsr refreshPlayerScores
0268+  623A             	
0269+  623A             	done(0)
0269+  623A             
0269+  623A 86 02       
0269+  623C BA 01 69    
0269+  623F B7 01 69    
0269+  6242             
0269+  6242 7E 79 82    
0270+  6245             	
0271+  6245             swOuthole: 
0272+  6245 86 4B       	delay(600)
0272+  6247 BD 7D 2F    
0273+  624A 96 0F       	ldaA	>lc(8) ; !game over
0274+  624C 85 20       	bitA	lr(6)
0275+  624E             	ifne ; game over
0275+  624E             
0275+  624E 27 FE       
0276+  6250             		done(0)
0276+  6250             
0276+  6250 86 02       
0276+  6252 BA 01 69    
0276+  6255 B7 01 69    
0276+  6258             
0276+  6258 7E 79 82    
0277+  625B             	endif
0277+  625B             
0277+  625B             
0277+  625B             
0277+  625B             
0277+  625B             
0277+  625B~            	endif
0277+  625B~            	endif
0277+  625B             
0277+  625B~            	endif
0277+  625B~            	endif
0277+  625B             
0277+  624F             
0277+  624F 0B          
0277+  6250             
0277+  6250             
0277+  6250~            	endif
0277+  6250~            	endif
0277+  6250~            	endif
0277+  6250             
0277+  625B             
0277+  625B~            	endif
0277+  625B~            	endif
0277+  625B             
0278+  625B             	
0279+  625B             	; check ballsave
0280+  625B 86 01       	ldaA	lr(1)
0281+  625D 95 0A       	bitA	>lc(3)
0282+  625F             	ifne	; shoot again on
0282+  625F             
0282+  625F 27 FE       
0283+  6261 95 A2       		bitA	>flc(3)
0284+  6263             		ifne ; shoot again flashing
0284+  6263             
0284+  6263 27 FE       
0285+  6265             			; turn off used special
0286+  6265 86 80       			ldaA	lr(8) ; right special
0287+  6267 95 09       			bitA	>lc(2)
0288+  6269             			ifne
0288+  6269             
0288+  6269 27 FE       
0289+  626B 86 7F       				lampOff(8,2)
0289+  626D 94 09       
0289+  626F 97 09       
0290+  6271 86 7F       				flashOff(8,2)
0290+  6273 94 A1       
0290+  6275 97 A1       
0291+  6277             			endif
0291+  6277             
0291+  6277             
0291+  6277             
0291+  6277             
0291+  6277             
0291+  6277~            			endif
0291+  6277~            			endif
0291+  6277             
0291+  6277~            			endif
0291+  6277~            			endif
0291+  6277             
0291+  626A             
0291+  626A 0C          
0291+  626B             
0291+  626B             
0291+  626B~            			endif
0291+  626B~            			endif
0291+  626B~            			endif
0291+  626B             
0291+  6277             
0291+  6277~            			endif
0291+  6277~            			endif
0291+  6277             
0292+  6277 86 02       			ldaA	lr(2) ; right special
0293+  6279 95 0A       			bitA	>lc(3)
0294+  627B             			ifne
0294+  627B             
0294+  627B 27 FE       
0295+  627D 86 FD       				lampOff(2,3)
0295+  627F 94 0A       
0295+  6281 97 0A       
0296+  6283 86 FD       				flashOff(2,3)
0296+  6285 94 A2       
0296+  6287 97 A2       
0297+  6289             			endif
0297+  6289             
0297+  6289             
0297+  6289             
0297+  6289             
0297+  6289             
0297+  6289~            			endif
0297+  6289~            			endif
0297+  6289             
0297+  6289~            			endif
0297+  6289~            			endif
0297+  6289             
0297+  627C             
0297+  627C 0C          
0297+  627D             
0297+  627D             
0297+  627D~            			endif
0297+  627D~            			endif
0297+  627D~            			endif
0297+  627D             
0297+  6289             
0297+  6289~            			endif
0297+  6289~            			endif
0297+  6289             
0298+  6289             			
0299+  6289             			; flash player light
0300+  6289 86 0F       			ldaA	00001111b ; player up lights
0301+  628B 9A A7       			oraA	>flc(8)
0302+  628D 97 A7       			staA	flc(8)
0303+  628F             		endif
0303+  628F             
0303+  628F             
0303+  628F             
0303+  628F             
0303+  628F             
0303+  628F~            		endif
0303+  628F~            		endif
0303+  628F             
0303+  628F~            		endif
0303+  628F~            		endif
0303+  628F             
0303+  6264             
0303+  6264 2A          
0303+  6265             
0303+  6265             
0303+  6265~            		endif
0303+  6265~            		endif
0303+  6265~            		endif
0303+  6265             
0303+  628F             
0303+  628F~            		endif
0303+  628F~            		endif
0303+  628F             
0304+  628F             	endif
0304+  628F             
0304+  628F             
0304+  628F             
0304+  628F             
0304+  628F             
0304+  628F~            	endif
0304+  628F~            	endif
0304+  628F             
0304+  628F~            	endif
0304+  628F~            	endif
0304+  628F             
0304+  6260             
0304+  6260 2E          
0304+  6261             
0304+  6261             
0304+  6261~            	endif
0304+  6261~            	endif
0304+  6261~            	endif
0304+  6261             
0304+  628F             
0304+  628F~            	endif
0304+  628F~            	endif
0304+  628F             
0305+  628F             	
0306+  628F 86 0F       	ldaA	00001111b ; player up lights
0307+  6291 95 A7       	bitA	>flc(8)	; check if any player is flashing
0308+  6293             	ifne ; any flashing -> playfield invalid
0308+  6293             
0308+  6293 27 FE       
0309+  6295             swOuthole_save:
0310+  6295 86 EF       		lampOff(5,8) ; tilt
0310+  6297 94 0F       
0310+  6299 97 0F       
0311+  629B             		
0312+  629B B6 22 03    		enablePf
0312+  629E 8A 38       
0312+  62A0 B7 22 03    
0313+  62A3 C6 02       		fireSolenoid(OUTHOLE)
0313+  62A5 F7 01 44    
0314+  62A8             	else ; none flashing -> playfield valid -> end ball			
0314+  62A8             
0314+  62A8             
0314+  62A8             
0314+  62A8             
0314+  6294             
0314+  6294             
0314+  6294             
0314+  6294~            	else ; none flashing -> playfield valid -> end ball			
0314+  6294~            	else ; none flashing -> playfield valid -> end ball			
0314+  6294~            	else ; none flashing -> playfield valid -> end ball			
0314+  6294~            	else ; none flashing -> playfield valid -> end ball			
0314+  6294             
0314+  6294~            	else ; none flashing -> playfield valid -> end ball			
0314+  6294~            	else ; none flashing -> playfield valid -> end ball			
0314+  6294~            	else ; none flashing -> playfield valid -> end ball			
0314+  6294~            	else ; none flashing -> playfield valid -> end ball			
0314+  6294             
0314+  6294             
0314+  6294 15          
0314+  62A8             
0314+  62A8 20 FE       
0314+  62AA             
0314+  62AA             
0314+  62AA             
0314+  62AA~            	else ; none flashing -> playfield valid -> end ball			
0314+  62AA~            	else ; none flashing -> playfield valid -> end ball			
0314+  62AA~            	else ; none flashing -> playfield valid -> end ball			
0314+  62AA~            	else ; none flashing -> playfield valid -> end ball			
0314+  62AA~            	else ; none flashing -> playfield valid -> end ball			
0314+  62AA             
0314+  62AA~            	else ; none flashing -> playfield valid -> end ball			
0314+  62AA~            	else ; none flashing -> playfield valid -> end ball			
0314+  62AA             
0314+  62AA~            	else ; none flashing -> playfield valid -> end ball			
0314+  62AA~            	else ; none flashing -> playfield valid -> end ball			
0314+  62AA             
0315+  62AA             swOuthole_bonusLoop:
0316+  62AA BD 7D 80    		score1000()
0317+  62AD 96 09       		ldaA	>lc(2) ; double bonus
0318+  62AF 85 04       		bitA	lr(3)
0319+  62B1             		ifne 
0319+  62B1             
0319+  62B1 27 FE       
0320+  62B3 86 0C       			delay(100)
0320+  62B5 BD 7D 2F    
0321+  62B8 BD 7D 80    			score1000()
0322+  62BB             		endif
0322+  62BB             
0322+  62BB             
0322+  62BB             
0322+  62BB             
0322+  62BB             
0322+  62BB~            		endif
0322+  62BB~            		endif
0322+  62BB             
0322+  62BB~            		endif
0322+  62BB~            		endif
0322+  62BB             
0322+  62B2             
0322+  62B2 08          
0322+  62B3             
0322+  62B3             
0322+  62B3~            		endif
0322+  62B3~            		endif
0322+  62B3~            		endif
0322+  62B3             
0322+  62BB             
0322+  62BB~            		endif
0322+  62BB~            		endif
0322+  62BB             
0323+  62BB 7A 00 B0    		dec	p_Bonus
0324+  62BE             		;jsr	bonusLights
0325+  62BE 86 19       		delay(200)
0325+  62C0 BD 7D 2F    
0326+  62C3 7D 00 B0    		tst	p_Bonus
0327+  62C6 26 E2       		bne	swOuthole_bonusLoop
0328+  62C8             	
0329+  62C8 86 0F       		ldaA	00001111b ; player up lights
0330+  62CA 94 0F       		andA	>lc(8) ; remove non-player up lights from col 8 for processing
0331+  62CC D6 0A       		ldaB	>lc(3) ; check shoot again light
0332+  62CE C5 01       		bitB	lr(1)
0333+  62D0             		ifeq ; shoot again not lit
0333+  62D0             
0333+  62D0 26 FE       
0334+  62D2             			; store player's data
0335+  62D2 DE 12       			ldX	>curPlayer
0336+  62D4 D6 0B       			ldaB	>lc(4)
0337+  62D6 E7 B1       			staB	p_Ejects, X
0338+  62D8             		
0339+  62D8             			; go to next player
0340+  62D8 48          			aslA
0341+  62D9 7C 00 13    			inc	curPlayer + 1
0342+  62DC 95 0E       			bitA	>lc(7)	; is player count < player #
0343+  62DE             			ifne ; last player
0343+  62DE             
0343+  62DE 27 FE       
0344+  62E0 86 01       				ldaA	00000001b; ; back to player 1
0345+  62E2 C6 00       				ldaB	0
0346+  62E4 D7 13       				staB	curPlayer + 1
0347+  62E6             				
0348+  62E6             				; increase ball count
0349+  62E6 D6 77       				ldaB	>ballCount
0350+  62E8 CB 10       				addB	$10
0351+  62EA C1 40       				cmpB	$40
0352+  62EC             				ifeq ; game over
0352+  62EC             
0352+  62EC 26 FE       
0353+  62EE 86 20       					lampOn(6,8)
0353+  62F0 9A 0F       
0353+  62F2 97 0F       
0354+  62F4 B6 22 03    					disablePf
0354+  62F7 84 F7       
0354+  62F9 B7 22 03    
0355+  62FC             					done(1)
0355+  62FC~            					done(1)
0355+  62FC~            					done(1)
0355+  62FC~            					done(1)
0355+  62FC~            					done(1)
0355+  62FC             
0355+  62FC 7E 79 82    
0356+  62FF             				else
0356+  62FF             
0356+  62FF             
0356+  62FF             
0356+  62FF             
0356+  62ED             
0356+  62ED             
0356+  62ED             
0356+  62ED~            				else
0356+  62ED~            				else
0356+  62ED~            				else
0356+  62ED~            				else
0356+  62ED             
0356+  62ED~            				else
0356+  62ED~            				else
0356+  62ED~            				else
0356+  62ED~            				else
0356+  62ED             
0356+  62ED             
0356+  62ED 13          
0356+  62FF             
0356+  62FF 20 FE       
0356+  6301             
0356+  6301             
0356+  6301             
0356+  6301~            				else
0356+  6301~            				else
0356+  6301~            				else
0356+  6301~            				else
0356+  6301~            				else
0356+  6301             
0356+  6301~            				else
0356+  6301~            				else
0356+  6301             
0356+  6301~            				else
0356+  6301~            				else
0356+  6301             
0357+  6301 D7 77       					staB	ballCount
0358+  6303             				endif		
0358+  6303             
0358+  6303             
0358+  6303             
0358+  6303             
0358+  6303             
0358+  6303~            				endif		
0358+  6303~            				endif		
0358+  6303             
0358+  6303~            				endif		
0358+  6303~            				endif		
0358+  6303             
0358+  6300             
0358+  6300 02          
0358+  6301             
0358+  6301             
0358+  6301~            				endif		
0358+  6301~            				endif		
0358+  6301~            				endif		
0358+  6301             
0358+  6303             
0358+  6303~            				endif		
0358+  6303~            				endif		
0358+  6303             
0359+  6303             			endif
0359+  6303             
0359+  6303             
0359+  6303             
0359+  6303             
0359+  6303             
0359+  6303~            			endif
0359+  6303~            			endif
0359+  6303             
0359+  6303~            			endif
0359+  6303~            			endif
0359+  6303             
0359+  62DF             
0359+  62DF 23          
0359+  62E0             
0359+  62E0             
0359+  62E0~            			endif
0359+  62E0~            			endif
0359+  62E0~            			endif
0359+  62E0             
0359+  6303             
0359+  6303~            			endif
0359+  6303~            			endif
0359+  6303             
0360+  6303             			
0361+  6303 97 0F       			staA	lc(8)
0362+  6305             		endif
0362+  6305             
0362+  6305             
0362+  6305             
0362+  6305             
0362+  6305             
0362+  6305~            		endif
0362+  6305~            		endif
0362+  6305             
0362+  6305~            		endif
0362+  6305~            		endif
0362+  6305             
0362+  62D1             
0362+  62D1 33          
0362+  62D2             
0362+  62D2             
0362+  62D2~            		endif
0362+  62D2~            		endif
0362+  62D2~            		endif
0362+  62D2             
0362+  6305             
0362+  6305~            		endif
0362+  6305~            		endif
0362+  6305             
0363+  6305             		
0364+  6305 BD 60 F2    		jsr	startBall
0365+  6308             	endif	
0365+  6308             
0365+  6308             
0365+  6308             
0365+  6308             
0365+  6308             
0365+  6308~            	endif	
0365+  6308~            	endif	
0365+  6308             
0365+  6308~            	endif	
0365+  6308~            	endif	
0365+  6308             
0365+  62A9             
0365+  62A9 5E          
0365+  62AA             
0365+  62AA             
0365+  62AA~            	endif	
0365+  62AA~            	endif	
0365+  62AA~            	endif	
0365+  62AA             
0365+  6308             
0365+  6308~            	endif	
0365+  6308~            	endif	
0365+  6308             
0366+  6308             	done(0)
0366+  6308             
0366+  6308 86 02       
0366+  630A BA 01 69    
0366+  630D B7 01 69    
0366+  6310             
0366+  6310 7E 79 82    
0367+  6313             	
0368+  6313             swLeftEject:
0369+  6313 7C 00 B0    	advBonus()
0370+  6316 C6 06       	fireSolenoid(KNOCKER)
0370+  6318 F7 01 4D    
0371+  631B 96 0F       	ldaA	>lc(8)
0372+  631D 85 20       	bitA	lr(6)
0373+  631F             	ifeq ; in game
0373+  631F             
0373+  631F 26 FE       
0374+  6321 86 01       		lampOn(1,3)
0374+  6323 9A 0A       
0374+  6325 97 0A       
0375+  6327 86 40       		lampOn(7,8)
0375+  6329 9A 0F       
0375+  632B 97 0F       
0376+  632D             	endif
0376+  632D             
0376+  632D             
0376+  632D             
0376+  632D             
0376+  632D             
0376+  632D~            	endif
0376+  632D~            	endif
0376+  632D             
0376+  632D~            	endif
0376+  632D~            	endif
0376+  632D             
0376+  6320             
0376+  6320 0C          
0376+  6321             
0376+  6321             
0376+  6321~            	endif
0376+  6321~            	endif
0376+  6321~            	endif
0376+  6321             
0376+  632D             
0376+  632D~            	endif
0376+  632D~            	endif
0376+  632D             
0377+  632D             	score500()
0377+  632D BD 7D 71    
0377+  6330 C6 02       
0377+  6332 F7 01 49    
0377+  6335 86 0E       
0377+  6337 BD 7D 2F    
0377+  633A BD 7D 71    
0377+  633D C6 02       
0377+  633F F7 01 49    
0377+  6342 86 0E       
0377+  6344 BD 7D 2F    
0377+  6347 BD 7D 71    
0377+  634A C6 02       
0377+  634C F7 01 49    
0377+  634F 86 0E       
0377+  6351 BD 7D 2F    
0377+  6354 BD 7D 71    
0377+  6357 C6 02       
0377+  6359 F7 01 49    
0377+  635C 86 0E       
0377+  635E BD 7D 2F    
0377+  6361 BD 7D 71    
0377+  6364 C6 02       
0377+  6366 F7 01 49    
0377+  6369 86 0E       
0377+  636B BD 7D 2F    
0378+  636E C6 03       	fireSolenoid(LEFT_EJECT)
0378+  6370 F7 01 43    
0379+  6373             	done(1)
0379+  6373~            	done(1)
0379+  6373~            	done(1)
0379+  6373~            	done(1)
0379+  6373~            	done(1)
0379+  6373             
0379+  6373 7E 79 82    
0380+  6376             	
0381+  6376             swTopEject:
0382+  6376 7C 00 B0    	advBonus()
0383+  6379 D6 0B       	ldaB	>lc(4)
0384+  637B 57          	asrB
0385+  637C             	ifeq ; 1k
0385+  637C             
0385+  637C 26 FE       
0386+  637E BD 7D 80    		score1000()
0387+  6381 7E 64 3E    		jmp	swTopEject_scored
0388+  6384             	endif
0388+  6384             
0388+  6384             
0388+  6384             
0388+  6384             
0388+  6384             
0388+  6384~            	endif
0388+  6384~            	endif
0388+  6384             
0388+  6384~            	endif
0388+  6384~            	endif
0388+  6384             
0388+  637D             
0388+  637D 06          
0388+  637E             
0388+  637E             
0388+  637E~            	endif
0388+  637E~            	endif
0388+  637E~            	endif
0388+  637E             
0388+  6384             
0388+  6384~            	endif
0388+  6384~            	endif
0388+  6384             
0389+  6384 57          	asrB
0390+  6385             	ifeq  ; captive
0390+  6385             
0390+  6385 26 FE       
0391+  6387 86 40       		ldaA	lr(7)
0392+  6389 95 09       		bitA	>lc(2) ; captive ball
0393+  638B             		ifeq	; not lit
0393+  638B             
0393+  638B 26 FE       
0394+  638D 86 40       			lampOn(7,2)
0394+  638F 9A 09       
0394+  6391 97 09       
0395+  6393             		else
0395+  6393             
0395+  6393             
0395+  6393             
0395+  6393             
0395+  638C             
0395+  638C             
0395+  638C             
0395+  638C~            		else
0395+  638C~            		else
0395+  638C~            		else
0395+  638C~            		else
0395+  638C             
0395+  638C~            		else
0395+  638C~            		else
0395+  638C~            		else
0395+  638C~            		else
0395+  638C             
0395+  638C             
0395+  638C 08          
0395+  6393             
0395+  6393 20 FE       
0395+  6395             
0395+  6395             
0395+  6395             
0395+  6395~            		else
0395+  6395~            		else
0395+  6395~            		else
0395+  6395~            		else
0395+  6395~            		else
0395+  6395             
0395+  6395~            		else
0395+  6395~            		else
0395+  6395             
0395+  6395~            		else
0395+  6395~            		else
0395+  6395             
0396+  6395 86 BF       			lampOff(7,2)
0396+  6397 94 09       
0396+  6399 97 09       
0397+  639B             		endif
0397+  639B             
0397+  639B             
0397+  639B             
0397+  639B             
0397+  639B             
0397+  639B~            		endif
0397+  639B~            		endif
0397+  639B             
0397+  639B~            		endif
0397+  639B~            		endif
0397+  639B             
0397+  6394             
0397+  6394 06          
0397+  6395             
0397+  6395             
0397+  6395~            		endif
0397+  6395~            		endif
0397+  6395~            		endif
0397+  6395             
0397+  639B             
0397+  639B~            		endif
0397+  639B~            		endif
0397+  639B             
0398+  639B 7E 64 3E    		jmp	swTopEject_scored
0399+  639E             	endif
0399+  639E             
0399+  639E             
0399+  639E             
0399+  639E             
0399+  639E             
0399+  639E~            	endif
0399+  639E~            	endif
0399+  639E             
0399+  639E~            	endif
0399+  639E~            	endif
0399+  639E             
0399+  6386             
0399+  6386 17          
0399+  6387             
0399+  6387             
0399+  6387~            	endif
0399+  6387~            	endif
0399+  6387~            	endif
0399+  6387             
0399+  639E             
0399+  639E~            	endif
0399+  639E~            	endif
0399+  639E             
0400+  639E 57          	asrB
0401+  639F             	ifeq
0401+  639F             
0401+  639F 26 FE       
0402+  63A1             		score500()
0402+  63A1 BD 7D 71    
0402+  63A4 C6 02       
0402+  63A6 F7 01 49    
0402+  63A9 86 0E       
0402+  63AB BD 7D 2F    
0402+  63AE BD 7D 71    
0402+  63B1 C6 02       
0402+  63B3 F7 01 49    
0402+  63B6 86 0E       
0402+  63B8 BD 7D 2F    
0402+  63BB BD 7D 71    
0402+  63BE C6 02       
0402+  63C0 F7 01 49    
0402+  63C3 86 0E       
0402+  63C5 BD 7D 2F    
0402+  63C8 BD 7D 71    
0402+  63CB C6 02       
0402+  63CD F7 01 49    
0402+  63D0 86 0E       
0402+  63D2 BD 7D 2F    
0402+  63D5 BD 7D 71    
0402+  63D8 C6 02       
0402+  63DA F7 01 49    
0402+  63DD 86 0E       
0402+  63DF BD 7D 2F    
0403+  63E2 20 5A       		bra	swTopEject_scored
0404+  63E4             	endif
0404+  63E4             
0404+  63E4             
0404+  63E4             
0404+  63E4             
0404+  63E4             
0404+  63E4~            	endif
0404+  63E4~            	endif
0404+  63E4             
0404+  63E4~            	endif
0404+  63E4~            	endif
0404+  63E4             
0404+  63A0             
0404+  63A0 43          
0404+  63A1             
0404+  63A1             
0404+  63A1~            	endif
0404+  63A1~            	endif
0404+  63A1~            	endif
0404+  63A1             
0404+  63E4             
0404+  63E4~            	endif
0404+  63E4~            	endif
0404+  63E4             
0405+  63E4 57          	asrB
0406+  63E5             	ifeq ; double
0406+  63E5             
0406+  63E5 26 FE       
0407+  63E7 86 04       		ldaA	lr(3)
0408+  63E9 95 09       		bitA	>lc(2) ; double bonus
0409+  63EB             		ifeq	; not lit
0409+  63EB             
0409+  63EB 26 FE       
0410+  63ED 86 04       			lampOn(3,2)
0410+  63EF 9A 09       
0410+  63F1 97 09       
0411+  63F3             		else
0411+  63F3             
0411+  63F3             
0411+  63F3             
0411+  63F3             
0411+  63EC             
0411+  63EC             
0411+  63EC             
0411+  63EC~            		else
0411+  63EC~            		else
0411+  63EC~            		else
0411+  63EC~            		else
0411+  63EC             
0411+  63EC~            		else
0411+  63EC~            		else
0411+  63EC~            		else
0411+  63EC~            		else
0411+  63EC             
0411+  63EC             
0411+  63EC 08          
0411+  63F3             
0411+  63F3 20 FE       
0411+  63F5             
0411+  63F5             
0411+  63F5             
0411+  63F5~            		else
0411+  63F5~            		else
0411+  63F5~            		else
0411+  63F5~            		else
0411+  63F5~            		else
0411+  63F5             
0411+  63F5~            		else
0411+  63F5~            		else
0411+  63F5             
0411+  63F5~            		else
0411+  63F5~            		else
0411+  63F5             
0412+  63F5 86 FB       			lampOff(3,2)
0412+  63F7 94 09       
0412+  63F9 97 09       
0413+  63FB             		endif
0413+  63FB             
0413+  63FB             
0413+  63FB             
0413+  63FB             
0413+  63FB             
0413+  63FB~            		endif
0413+  63FB~            		endif
0413+  63FB             
0413+  63FB~            		endif
0413+  63FB~            		endif
0413+  63FB             
0413+  63F4             
0413+  63F4 06          
0413+  63F5             
0413+  63F5             
0413+  63F5~            		endif
0413+  63F5~            		endif
0413+  63F5~            		endif
0413+  63F5             
0413+  63FB             
0413+  63FB~            		endif
0413+  63FB~            		endif
0413+  63FB             
0414+  63FB             	else
0414+  63FB             
0414+  63FB             
0414+  63FB             
0414+  63FB             
0414+  63E6             
0414+  63E6             
0414+  63E6             
0414+  63E6~            	else
0414+  63E6~            	else
0414+  63E6~            	else
0414+  63E6~            	else
0414+  63E6             
0414+  63E6~            	else
0414+  63E6~            	else
0414+  63E6~            	else
0414+  63E6~            	else
0414+  63E6             
0414+  63E6             
0414+  63E6 16          
0414+  63FB             
0414+  63FB 20 FE       
0414+  63FD             
0414+  63FD             
0414+  63FD             
0414+  63FD~            	else
0414+  63FD~            	else
0414+  63FD~            	else
0414+  63FD~            	else
0414+  63FD~            	else
0414+  63FD             
0414+  63FD~            	else
0414+  63FD~            	else
0414+  63FD             
0414+  63FD~            	else
0414+  63FD~            	else
0414+  63FD             
0415+  63FD             		score500()
0415+  63FD BD 7D 71    
0415+  6400 C6 02       
0415+  6402 F7 01 49    
0415+  6405 86 0E       
0415+  6407 BD 7D 2F    
0415+  640A BD 7D 71    
0415+  640D C6 02       
0415+  640F F7 01 49    
0415+  6412 86 0E       
0415+  6414 BD 7D 2F    
0415+  6417 BD 7D 71    
0415+  641A C6 02       
0415+  641C F7 01 49    
0415+  641F 86 0E       
0415+  6421 BD 7D 2F    
0415+  6424 BD 7D 71    
0415+  6427 C6 02       
0415+  6429 F7 01 49    
0415+  642C 86 0E       
0415+  642E BD 7D 2F    
0415+  6431 BD 7D 71    
0415+  6434 C6 02       
0415+  6436 F7 01 49    
0415+  6439 86 0E       
0415+  643B BD 7D 2F    
0416+  643E             	endif
0416+  643E             
0416+  643E             
0416+  643E             
0416+  643E             
0416+  643E             
0416+  643E~            	endif
0416+  643E~            	endif
0416+  643E             
0416+  643E~            	endif
0416+  643E~            	endif
0416+  643E             
0416+  63FC             
0416+  63FC 41          
0416+  63FD             
0416+  63FD             
0416+  63FD~            	endif
0416+  63FD~            	endif
0416+  63FD~            	endif
0416+  63FD             
0416+  643E             
0416+  643E~            	endif
0416+  643E~            	endif
0416+  643E             
0417+  643E             swTopEject_scored:
0418+  643E             		
0419+  643E C6 03       	fireSolenoid(TOP_EJECT)
0419+  6440 F7 01 40    
0420+  6443             	done(1)
0420+  6443~            	done(1)
0420+  6443~            	done(1)
0420+  6443~            	done(1)
0420+  6443~            	done(1)
0420+  6443             
0420+  6443 7E 79 82    
0421+  6446             	
0422+  6446             swHotTip:
0423+  6446 86 00       	ldaA	0
0424+  6448 97 B5       	staA	p_DropsDown
0425+  644A 86 10       	ldaA	16
0426+  644C 97 A9       	staA	dropResetTimer
0427+  644E 86 09       	delay(75)
0427+  6450 BD 7D 2F    
0428+  6453 C6 0C       	fireSolenoid(DROP_HOT)
0428+  6455 F7 01 42    
0429+  6458 86 09       	delay(75)
0429+  645A BD 7D 2F    
0430+  645D C6 0C       	fireSolenoid(DROP_TIP)
0430+  645F F7 01 41    
0431+  6462 86 F7       	lampOff(4,3) ; spinner
0431+  6464 94 0A       
0431+  6466 97 0A       
0432+  6468             	done(1)
0432+  6468~            	done(1)
0432+  6468~            	done(1)
0432+  6468~            	done(1)
0432+  6468~            	done(1)
0432+  6468             
0432+  6468 7E 79 82    
0433+  646B             swLeftOutlane:
0434+  646B 86 02       	ldaA	lr(2) ; left special
0435+  646D 95 0A       	bitA	>lc(3)
0436+  646F             	ifne
0436+  646F             
0436+  646F 27 FE       
0437+  6471 86 01       		lampOn(1,3) ; shoot again
0437+  6473 9A 0A       
0437+  6475 97 0A       
0438+  6477 86 01       		flashLamp(1,3)
0438+  6479 9A A2       
0438+  647B 97 A2       
0439+  647D C6 0C       		fireSolenoid(BUZZER)
0439+  647F F7 01 4E    
0440+  6482 86 80       		flashLamp(8,2)
0440+  6484 9A A1       
0440+  6486 97 A1       
0441+  6488             	endif
0441+  6488             
0441+  6488             
0441+  6488             
0441+  6488             
0441+  6488             
0441+  6488~            	endif
0441+  6488~            	endif
0441+  6488             
0441+  6488~            	endif
0441+  6488~            	endif
0441+  6488             
0441+  6470             
0441+  6470 17          
0441+  6471             
0441+  6471             
0441+  6471~            	endif
0441+  6471~            	endif
0441+  6471~            	endif
0441+  6471             
0441+  6488             
0441+  6488~            	endif
0441+  6488~            	endif
0441+  6488             
0442+  6488             	done(1)
0442+  6488~            	done(1)
0442+  6488~            	done(1)
0442+  6488~            	done(1)
0442+  6488~            	done(1)
0442+  6488             
0442+  6488 7E 79 82    
0443+  648B             	
0444+  648B             swRightOutlane:
0445+  648B 86 80       	ldaA	lr(8) ; right special
0446+  648D 95 09       	bitA	>lc(2)
0447+  648F             	ifne
0447+  648F             
0447+  648F 27 FE       
0448+  6491 86 01       		lampOn(1,3) ; shoot again
0448+  6493 9A 0A       
0448+  6495 97 0A       
0449+  6497 86 01       		flashLamp(1,3)
0449+  6499 9A A2       
0449+  649B 97 A2       
0450+  649D C6 0C       		fireSolenoid(BUZZER)
0450+  649F F7 01 4E    
0451+  64A2 86 80       		flashLamp(8,2)
0451+  64A4 9A A1       
0451+  64A6 97 A1       
0452+  64A8             	endif
0452+  64A8             
0452+  64A8             
0452+  64A8             
0452+  64A8             
0452+  64A8             
0452+  64A8~            	endif
0452+  64A8~            	endif
0452+  64A8             
0452+  64A8~            	endif
0452+  64A8~            	endif
0452+  64A8             
0452+  6490             
0452+  6490 17          
0452+  6491             
0452+  6491             
0452+  6491~            	endif
0452+  6491~            	endif
0452+  6491~            	endif
0452+  6491             
0452+  64A8             
0452+  64A8~            	endif
0452+  64A8~            	endif
0452+  64A8             
0453+  64A8             	done(1)
0453+  64A8~            	done(1)
0453+  64A8~            	done(1)
0453+  64A8~            	done(1)
0453+  64A8~            	done(1)
0453+  64A8             
0453+  64A8 7E 79 82    
0454+  64AB             	
0455+  64AB             swLeftInlane:
0456+  64AB             swRightInlane:
0457+  64AB 7C 00 B0    	advBonus()
0458+  64AE BD 7D 80    	score1000()
0459+  64B1             	done(1)
0459+  64B1~            	done(1)
0459+  64B1~            	done(1)
0459+  64B1~            	done(1)
0459+  64B1~            	done(1)
0459+  64B1             
0459+  64B1 7E 79 82    
0460+  64B4             sw10pt:
0461+  64B4 BD 7D 63    	score10()
0462+  64B7 77 00 0B    	asr	lc(4)
0463+  64BA             	ifeq ; shifted off the edge
0463+  64BA             
0463+  64BA 26 FE       
0464+  64BC 86 10       		ldaA	00010000b
0465+  64BE 97 0B       		staA	lc(4)
0466+  64C0             	endif
0466+  64C0             
0466+  64C0             
0466+  64C0             
0466+  64C0             
0466+  64C0             
0466+  64C0~            	endif
0466+  64C0~            	endif
0466+  64C0             
0466+  64C0~            	endif
0466+  64C0~            	endif
0466+  64C0             
0466+  64BB             
0466+  64BB 04          
0466+  64BC             
0466+  64BC             
0466+  64BC~            	endif
0466+  64BC~            	endif
0466+  64BC~            	endif
0466+  64BC             
0466+  64C0             
0466+  64C0~            	endif
0466+  64C0~            	endif
0466+  64C0             
0467+  64C0             	done(1)
0467+  64C0~            	done(1)
0467+  64C0~            	done(1)
0467+  64C0~            	done(1)
0467+  64C0~            	done(1)
0467+  64C0             
0467+  64C0 7E 79 82    
0468+  64C3             sw100pt:
0469+  64C3 BD 7D 71    	score100()
0470+  64C6             	done(1)
0470+  64C6~            	done(1)
0470+  64C6~            	done(1)
0470+  64C6~            	done(1)
0470+  64C6~            	done(1)
0470+  64C6             
0470+  64C6 7E 79 82    
0471+  64C9             sw500pt:
0472+  64C9 BD 65 A2    	jsr	alternate
0473+  64CC             	score500()
0473+  64CC BD 7D 71    
0473+  64CF C6 02       
0473+  64D1 F7 01 49    
0473+  64D4 86 0E       
0473+  64D6 BD 7D 2F    
0473+  64D9 BD 7D 71    
0473+  64DC C6 02       
0473+  64DE F7 01 49    
0473+  64E1 86 0E       
0473+  64E3 BD 7D 2F    
0473+  64E6 BD 7D 71    
0473+  64E9 C6 02       
0473+  64EB F7 01 49    
0473+  64EE 86 0E       
0473+  64F0 BD 7D 2F    
0473+  64F3 BD 7D 71    
0473+  64F6 C6 02       
0473+  64F8 F7 01 49    
0473+  64FB 86 0E       
0473+  64FD BD 7D 2F    
0473+  6500 BD 7D 71    
0473+  6503 C6 02       
0473+  6505 F7 01 49    
0473+  6508 86 0E       
0473+  650A BD 7D 2F    
0474+  650D             	done(1)
0474+  650D~            	done(1)
0474+  650D~            	done(1)
0474+  650D~            	done(1)
0474+  650D~            	done(1)
0474+  650D             
0474+  650D 7E 79 82    
0475+  6510             swPop:
0476+  6510 BD 65 A2    	jsr	alternate
0477+  6513 BD 7D 71    	score100()
0478+  6516             	done(1)
0478+  6516~            	done(1)
0478+  6516~            	done(1)
0478+  6516~            	done(1)
0478+  6516~            	done(1)
0478+  6516             
0478+  6516 7E 79 82    
0479+  6519             swDropTip:
0480+  6519 BD 65 1F    	jsr	swDrop
0481+  651C             swDropHot:
0482+  651C BD 65 1F    	jsr	swDrop
0483+  651F             swDrop:
0484+  651F 7D 00 A9    	tst	dropResetTimer
0485+  6522             	ifeq
0485+  6522             
0485+  6522 26 FE       
0486+  6524 7C 00 B5    		inc	p_DropsDown
0487+  6527 86 04       		ldaA	4
0488+  6529 91 B5       		cmpA	>p_DropsDown
0489+  652B             		ifgt
0489+  652B             
0489+  652B 23 FE       
0490+  652D 86 F7       			lampOff(4,3) ; spinner
0490+  652F 94 0A       
0490+  6531 97 0A       
0491+  6533             		else
0491+  6533             
0491+  6533             
0491+  6533             
0491+  6533             
0491+  652C             
0491+  652C             
0491+  652C             
0491+  652C~            		else
0491+  652C~            		else
0491+  652C~            		else
0491+  652C~            		else
0491+  652C             
0491+  652C~            		else
0491+  652C~            		else
0491+  652C~            		else
0491+  652C~            		else
0491+  652C             
0491+  652C             
0491+  652C 08          
0491+  6533             
0491+  6533 20 FE       
0491+  6535             
0491+  6535             
0491+  6535             
0491+  6535~            		else
0491+  6535~            		else
0491+  6535~            		else
0491+  6535~            		else
0491+  6535~            		else
0491+  6535             
0491+  6535~            		else
0491+  6535~            		else
0491+  6535             
0491+  6535~            		else
0491+  6535~            		else
0491+  6535             
0492+  6535 86 08       			lampOn(4,3)
0492+  6537 9A 0A       
0492+  6539 97 0A       
0493+  653B             		endif
0493+  653B             
0493+  653B             
0493+  653B             
0493+  653B             
0493+  653B             
0493+  653B~            		endif
0493+  653B~            		endif
0493+  653B             
0493+  653B~            		endif
0493+  653B~            		endif
0493+  653B             
0493+  6534             
0493+  6534 06          
0493+  6535             
0493+  6535             
0493+  6535~            		endif
0493+  6535~            		endif
0493+  6535~            		endif
0493+  6535             
0493+  653B             
0493+  653B~            		endif
0493+  653B~            		endif
0493+  653B             
0494+  653B             		
0495+  653B BD 7D 63    		score10()
0496+  653E             		done(1)
0496+  653E~            		done(1)
0496+  653E~            		done(1)
0496+  653E~            		done(1)
0496+  653E~            		done(1)
0496+  653E             
0496+  653E 7E 79 82    
0497+  6541             	else
0497+  6541             
0497+  6541             
0497+  6541             
0497+  6541             
0497+  6523             
0497+  6523             
0497+  6523             
0497+  6523~            	else
0497+  6523~            	else
0497+  6523~            	else
0497+  6523~            	else
0497+  6523             
0497+  6523~            	else
0497+  6523~            	else
0497+  6523~            	else
0497+  6523~            	else
0497+  6523             
0497+  6523             
0497+  6523 1F          
0497+  6541             
0497+  6541 20 FE       
0497+  6543             
0497+  6543             
0497+  6543             
0497+  6543~            	else
0497+  6543~            	else
0497+  6543~            	else
0497+  6543~            	else
0497+  6543~            	else
0497+  6543             
0497+  6543~            	else
0497+  6543~            	else
0497+  6543             
0497+  6543~            	else
0497+  6543~            	else
0497+  6543             
0498+  6543             		done(0)
0498+  6543             
0498+  6543 86 02       
0498+  6545 BA 01 69    
0498+  6548 B7 01 69    
0498+  654B             
0498+  654B 7E 79 82    
0499+  654E             	endif
0499+  654E             
0499+  654E             
0499+  654E             
0499+  654E             
0499+  654E             
0499+  654E~            	endif
0499+  654E~            	endif
0499+  654E             
0499+  654E~            	endif
0499+  654E~            	endif
0499+  654E             
0499+  6542             
0499+  6542 0B          
0499+  6543             
0499+  6543             
0499+  6543~            	endif
0499+  6543~            	endif
0499+  6543~            	endif
0499+  6543             
0499+  654E             
0499+  654E~            	endif
0499+  654E~            	endif
0499+  654E             
0500+  654E             swAdvBonus:
0501+  654E 7C 00 B0    	advBonus()
0502+  6551             	done(1)
0502+  6551~            	done(1)
0502+  6551~            	done(1)
0502+  6551~            	done(1)
0502+  6551~            	done(1)
0502+  6551             
0502+  6551 7E 79 82    
0503+  6554             swSpinner:
0504+  6554             	;ldaA	>sc(4)
0505+  6554             	;bitA	sr(6)
0506+  6554             	;ifne
0507+  6554             	;	score100()
0508+  6554             	;	ldaA	$E
0509+  6554             	;else
0510+  6554             	;	noValidate
0511+  6554             	;	ldaA	0
0512+  6554             	;endif
0513+  6554             	;staA	solenoid1 + CLICKER - 1
0514+  6554             	
0515+  6554 86 08       	ldaA	lr(4) ; spinner
0516+  6556 95 0A       	bitA	>lc(3)
0517+  6558             	ifne ; spinner on
0517+  6558             
0517+  6558 27 FE       
0518+  655A BD 7D 71    		score100()
0519+  655D C6 01       		fireSolenoid(CLICKER)
0519+  655F F7 01 4C    
0520+  6562             	else
0520+  6562             
0520+  6562             
0520+  6562             
0520+  6562             
0520+  6559             
0520+  6559             
0520+  6559             
0520+  6559~            	else
0520+  6559~            	else
0520+  6559~            	else
0520+  6559~            	else
0520+  6559             
0520+  6559~            	else
0520+  6559~            	else
0520+  6559~            	else
0520+  6559~            	else
0520+  6559             
0520+  6559             
0520+  6559 0A          
0520+  6562             
0520+  6562 20 FE       
0520+  6564             
0520+  6564             
0520+  6564             
0520+  6564~            	else
0520+  6564~            	else
0520+  6564~            	else
0520+  6564~            	else
0520+  6564~            	else
0520+  6564             
0520+  6564~            	else
0520+  6564~            	else
0520+  6564             
0520+  6564~            	else
0520+  6564~            	else
0520+  6564             
0521+  6564 BD 7D 63    		score10()
0522+  6567             	endif
0522+  6567             
0522+  6567             
0522+  6567             
0522+  6567             
0522+  6567             
0522+  6567~            	endif
0522+  6567~            	endif
0522+  6567             
0522+  6567~            	endif
0522+  6567~            	endif
0522+  6567             
0522+  6563             
0522+  6563 03          
0522+  6564             
0522+  6564             
0522+  6564~            	endif
0522+  6564~            	endif
0522+  6564~            	endif
0522+  6564             
0522+  6567             
0522+  6567~            	endif
0522+  6567~            	endif
0522+  6567             
0523+  6567             	done(1)
0523+  6567~            	done(1)
0523+  6567~            	done(1)
0523+  6567~            	done(1)
0523+  6567~            	done(1)
0523+  6567             
0523+  6567 7E 79 82    
0524+  656A             
0525+  656A             swCaptiveRollover:
0526+  656A 96 09       	ldaA	>lc(2)
0527+  656C 85 40       	bitA	lr(7)
0528+  656E             	ifeq ; light off
0528+  656E             
0528+  656E 26 FE       
0529+  6570 BD 7D 63    		score10()
0530+  6573             	else
0530+  6573             
0530+  6573             
0530+  6573             
0530+  6573             
0530+  656F             
0530+  656F             
0530+  656F             
0530+  656F~            	else
0530+  656F~            	else
0530+  656F~            	else
0530+  656F~            	else
0530+  656F             
0530+  656F~            	else
0530+  656F~            	else
0530+  656F~            	else
0530+  656F~            	else
0530+  656F             
0530+  656F             
0530+  656F 05          
0530+  6573             
0530+  6573 20 FE       
0530+  6575             
0530+  6575             
0530+  6575             
0530+  6575~            	else
0530+  6575~            	else
0530+  6575~            	else
0530+  6575~            	else
0530+  6575~            	else
0530+  6575             
0530+  6575~            	else
0530+  6575~            	else
0530+  6575             
0530+  6575~            	else
0530+  6575~            	else
0530+  6575             
0531+  6575 BD 7D 80    		score1000()
0532+  6578 86 0E       		ldaA	14 ; captive rollover switch number
0533+  657A 91 A8       		cmpA	>lastSwitch
0534+  657C             		ifne
0534+  657C             
0534+  657C 27 FE       
0535+  657E BD 65 9B    			jsr	captiveAward
0536+  6581             		endif
0536+  6581             
0536+  6581             
0536+  6581             
0536+  6581             
0536+  6581             
0536+  6581~            		endif
0536+  6581~            		endif
0536+  6581             
0536+  6581~            		endif
0536+  6581~            		endif
0536+  6581             
0536+  657D             
0536+  657D 03          
0536+  657E             
0536+  657E             
0536+  657E~            		endif
0536+  657E~            		endif
0536+  657E~            		endif
0536+  657E             
0536+  6581             
0536+  6581~            		endif
0536+  6581~            		endif
0536+  6581             
0537+  6581             	endif
0537+  6581             
0537+  6581             
0537+  6581             
0537+  6581             
0537+  6581             
0537+  6581~            	endif
0537+  6581~            	endif
0537+  6581             
0537+  6581~            	endif
0537+  6581~            	endif
0537+  6581             
0537+  6574             
0537+  6574 0C          
0537+  6575             
0537+  6575             
0537+  6575~            	endif
0537+  6575~            	endif
0537+  6575~            	endif
0537+  6575             
0537+  6581             
0537+  6581~            	endif
0537+  6581~            	endif
0537+  6581             
0538+  6581             	done(1)
0538+  6581~            	done(1)
0538+  6581~            	done(1)
0538+  6581~            	done(1)
0538+  6581~            	done(1)
0538+  6581             
0538+  6581 7E 79 82    
0539+  6584             
0540+  6584             swCaptiveTarget:
0541+  6584 7C 00 B0    	advBonus()
0542+  6587 96 09       	ldaA	>lc(2)
0543+  6589 85 40       	bitA	lr(7)
0544+  658B             	ifeq ; light off
0544+  658B             
0544+  658B 26 FE       
0545+  658D BD 7D 63    		score10()
0546+  6590 BD 65 9B    		jsr	captiveAward
0547+  6593             	else
0547+  6593             
0547+  6593             
0547+  6593             
0547+  6593             
0547+  658C             
0547+  658C             
0547+  658C             
0547+  658C~            	else
0547+  658C~            	else
0547+  658C~            	else
0547+  658C~            	else
0547+  658C             
0547+  658C~            	else
0547+  658C~            	else
0547+  658C~            	else
0547+  658C~            	else
0547+  658C             
0547+  658C             
0547+  658C 08          
0547+  6593             
0547+  6593 20 FE       
0547+  6595             
0547+  6595             
0547+  6595             
0547+  6595~            	else
0547+  6595~            	else
0547+  6595~            	else
0547+  6595~            	else
0547+  6595~            	else
0547+  6595             
0547+  6595~            	else
0547+  6595~            	else
0547+  6595             
0547+  6595~            	else
0547+  6595~            	else
0547+  6595             
0548+  6595 BD 7D 80    		score1000()
0549+  6598             	endif
0549+  6598             
0549+  6598             
0549+  6598             
0549+  6598             
0549+  6598             
0549+  6598~            	endif
0549+  6598~            	endif
0549+  6598             
0549+  6598~            	endif
0549+  6598~            	endif
0549+  6598             
0549+  6594             
0549+  6594 03          
0549+  6595             
0549+  6595             
0549+  6595~            	endif
0549+  6595~            	endif
0549+  6595~            	endif
0549+  6595             
0549+  6598             
0549+  6598~            	endif
0549+  6598~            	endif
0549+  6598             
0550+  6598             	done(1)
0550+  6598~            	done(1)
0550+  6598~            	done(1)
0550+  6598~            	done(1)
0550+  6598~            	done(1)
0550+  6598             
0550+  6598 7E 79 82    
0551+  659B             	
0552+  659B             captiveAward:
0553+  659B 86 80       	lampOn(8,2) ; right special
0553+  659D 9A 09       
0553+  659F 97 09       
0554+  65A1             	
0555+  65A1 39          	rts
0556+  65A2             	
0557+  65A2             alternate:
0558+  65A2 C6 00       	ldaB	0 ; turn on left?
0559+  65A4 86 80       	ldaA	lr(8) ; right special
0560+  65A6 95 09       	bitA	>lc(2)
0561+  65A8             	ifne
0561+  65A8             
0561+  65A8 27 FE       
0562+  65AA C6 01       		ldaB	1
0563+  65AC 86 7F       		lampOff(8,2) ; right special
0563+  65AE 94 09       
0563+  65B0 97 09       
0564+  65B2             	endif
0564+  65B2             
0564+  65B2             
0564+  65B2             
0564+  65B2             
0564+  65B2             
0564+  65B2~            	endif
0564+  65B2~            	endif
0564+  65B2             
0564+  65B2~            	endif
0564+  65B2~            	endif
0564+  65B2             
0564+  65A9             
0564+  65A9 08          
0564+  65AA             
0564+  65AA             
0564+  65AA~            	endif
0564+  65AA~            	endif
0564+  65AA~            	endif
0564+  65AA             
0564+  65B2             
0564+  65B2~            	endif
0564+  65B2~            	endif
0564+  65B2             
0565+  65B2 86 02       	ldaA	lr(2) ; left special
0566+  65B4 95 0A       	bitA	>lc(3)
0567+  65B6             	ifne
0567+  65B6             
0567+  65B6 27 FE       
0568+  65B8 86 80       		lampOn(8,2) ; right special
0568+  65BA 9A 09       
0568+  65BC 97 09       
0569+  65BE 86 FD       		lampOff(2,3) ; left special
0569+  65C0 94 0A       
0569+  65C2 97 0A       
0570+  65C4             	endif
0570+  65C4             
0570+  65C4             
0570+  65C4             
0570+  65C4             
0570+  65C4             
0570+  65C4~            	endif
0570+  65C4~            	endif
0570+  65C4             
0570+  65C4~            	endif
0570+  65C4~            	endif
0570+  65C4             
0570+  65B7             
0570+  65B7 0C          
0570+  65B8             
0570+  65B8             
0570+  65B8~            	endif
0570+  65B8~            	endif
0570+  65B8~            	endif
0570+  65B8             
0570+  65C4             
0570+  65C4~            	endif
0570+  65C4~            	endif
0570+  65C4             
0571+  65C4 5D          	tstB
0572+  65C5             	ifne
0572+  65C5             
0572+  65C5 27 FE       
0573+  65C7 86 02       		lampOn(2,3) ; left special
0573+  65C9 9A 0A       
0573+  65CB 97 0A       
0574+  65CD             	endif
0574+  65CD             
0574+  65CD             
0574+  65CD             
0574+  65CD             
0574+  65CD             
0574+  65CD~            	endif
0574+  65CD~            	endif
0574+  65CD             
0574+  65CD~            	endif
0574+  65CD~            	endif
0574+  65CD             
0574+  65C6             
0574+  65C6 06          
0574+  65C7             
0574+  65C7             
0574+  65C7~            	endif
0574+  65C7~            	endif
0574+  65C7~            	endif
0574+  65C7             
0574+  65CD             
0574+  65CD~            	endif
0574+  65CD~            	endif
0574+  65CD             
0575+  65CD 39          	rts
0576+  65CE             	
0577+  65CE             	
0578+  65CE             ; end callbacks
0579+  65CE             	.msfirst
0580+  65CE             ; needs to be on $**00 address
0581+  6000             callbackTable: 	.org $6000 ; note: TRANSPOSED
0582+  6000 61 F5       	.dw swTilt	\.dw swTilt\.dw swStart	\.dw none\.dw none\.dw none\.dw swTilt\.dw none
0582+  6002 61 F5       
0582+  6004 62 0E       
0582+  6006 60 C0       
0582+  6008 60 C0       
0582+  600A 60 C0       
0582+  600C 61 F5       
0582+  600E 60 C0       
0583+  6010 62 45       	.dw swOuthole	\.dw swTilt\.dw swRightOutlane\.dw swRightInlane\.dw sw10pt\.dw sw500pt\.dw swCaptiveRollover\.dw swCaptiveTarget
0583+  6012 61 F5       
0583+  6014 64 8B       
0583+  6016 64 AB       
0583+  6018 64 B4       
0583+  601A 64 C9       
0583+  601C 65 6A       
0583+  601E 65 84       
0584+  6020 65 19       	.dw swDropTip	\.dw swDropTip\.dw swDropTip\.dw swAdvBonus\.dw sw10pt\.dw swTopEject\.dw sw10pt\.dw none
0584+  6022 65 19       
0584+  6024 65 19       
0584+  6026 65 4E       
0584+  6028 64 B4       
0584+  602A 63 76       
0584+  602C 64 B4       
0584+  602E 60 C0       
0585+  6030 65 1C       	.dw swDropHot	\.dw swDropHot\.dw swDropHot\.dw sw10pt\.dw swLeftEject\.dw swSpinner\.dw swPop\.dw sw500pt
0585+  6032 65 1C       
0585+  6034 65 1C       
0585+  6036 64 B4       
0585+  6038 63 13       
0585+  603A 65 54       
0585+  603C 65 10       
0585+  603E 64 C9       
0586+  6040 64 6B       	.dw swLeftOutlane\.dw swLeftInlane\.dw sw10pt\.dw none\.dw swHotTip\.dw none\.dw none\.dw none
0586+  6042 64 AB       
0586+  6044 64 B4       
0586+  6046 60 C0       
0586+  6048 64 46       
0586+  604A 60 C0       
0586+  604C 60 C0       
0586+  604E 60 C0       
0587+  6050 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0587+  6052 60 C0       
0587+  6054 60 C0       
0587+  6056 60 C0       
0587+  6058 60 C0       
0587+  605A 60 C0       
0587+  605C 60 C0       
0587+  605E 60 C0       
0588+  6060 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0588+  6062 60 C0       
0588+  6064 60 C0       
0588+  6066 60 C0       
0588+  6068 60 C0       
0588+  606A 60 C0       
0588+  606C 60 C0       
0588+  606E 60 C0       
0589+  6070 60 C0       	.dw none	\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none\.dw none
0589+  6072 60 C0       
0589+  6074 60 C0       
0589+  6076 60 C0       
0589+  6078 60 C0       
0589+  607A 60 C0       
0589+  607C 60 C0       
0589+  607E 60 C0       
0590+  6080             ; on = how many cycles it must be on for before registering (1 cycle = 64ms (?)) (max 7)
0591+  6080             ; off = how many cycles it must be off for
0592+  6080             ; onOnly = if true, don't notify of an off event (also set off = 0 for efficiency)
0593+  6080             ; gameover = whether the switch is active in gameover + tilt mode (these callbacks must check whether in game over when triggered if they want to act different)
0594+  6080             ; TRANSPOSED (?)
0595+  6080             #define SW(on,off,onOnly,gameover) .db (onOnly<<7)|(gameover<<6)|(on<<3)|(off) 
0596+  6080             settleTable: ; must be right after callbackTable
0597+  6080 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,2,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,1,0)\SW(0,7,0,1)
0597+  6081 87          
0597+  6082 C2          
0597+  6083 47          
0597+  6084 47          
0597+  6085 47          
0597+  6086 87          
0597+  6087 47          
0598+  6088 F9          	SW(7,1,1,1)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,1,1,0)\SW(0,0,1,0)\SW(0,7,1,0)
0598+  6089 87          
0598+  608A 87          
0598+  608B 87          
0598+  608C 81          
0598+  608D 81          
0598+  608E 80          
0598+  608F 87          
0599+  6090 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,3,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,1,1,0)\SW(0,0,1,0)
0599+  6091 87          
0599+  6092 87          
0599+  6093 83          
0599+  6094 81          
0599+  6095 E1          
0599+  6096 81          
0599+  6097 80          
0600+  6098 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(4,1,1,1)\SW(0,0,1,0)\SW(0,0,1,0)\SW(0,1,1,0)
0600+  6099 87          
0600+  609A 87          
0600+  609B 81          
0600+  609C E1          
0600+  609D 80          
0600+  609E 80          
0600+  609F 81          
0601+  60A0 87          	SW(0,7,1,0)\SW(0,7,1,0)\SW(0,1,1,0)\SW(0,7,0,1)\SW(0,0,1,0)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0601+  60A1 87          
0601+  60A2 81          
0601+  60A3 47          
0601+  60A4 80          
0601+  60A5 47          
0601+  60A6 47          
0601+  60A7 47          
0602+  60A8 FF          	SW(7,7,1,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0602+  60A9 47          
0602+  60AA 47          
0602+  60AB 47          
0602+  60AC 47          
0602+  60AD 47          
0602+  60AE 47          
0602+  60AF 47          
0603+  60B0 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)
0603+  60B1 47          
0603+  60B2 47          
0603+  60B3 47          
0603+  60B4 47          
0603+  60B5 47          
0603+  60B6 47          
0603+  60B7 47          
0604+  60B8 47          	SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)\SW(0,7,0,1)0604+  60B9 47          
0604+  60BA 47          
0604+  60BB 47          
0604+  60BC 47          
0604+  60BD 47          
0604+  60BE 47          
0604+  60BF 47          
0008   60C0             	
0009   7800             main:		.org $7800
0010   7800             
0011   7800             test:
0012   7800             	
0013   7800             piaSetup:
0014   7800 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0015   7802 B7 28 01    	staA 	displayStrobeC
0016   7805 86 3F       	ldaA 	00111111b	;set LED pins to outputs
0017   7807 B7 28 00    	staA 	displayStrobe
0018   780A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0019   780C B7 28 01    	staA 	displayStrobeC
0020   780F 86 00       	ldaA	00000000b
0021   7811 B7 28 00    	staA	displayStrobe
0022   7814             	
0023   7814 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0024   7816 B7 28 03    	staA 	displayBcdC
0025   7819 86 FF       	ldaA 	11111111b	;set display BCD to output
0026   781B B7 28 02    	staA 	displayBcd
0027   781E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0028   7820 B7 28 03    	staA 	displayBcdC
0029   7823 86 00       	ldaA	00000000b
0030   7825 B7 28 02    	staA	displayBcd
0031   7828             	
0032   7828 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0033   782A B7 24 01    	staA 	lampColC
0034   782D 86 FF       	ldaA 	11111111b	;set to output
0035   782F B7 24 00    	staA 	lampCol
0036   7832 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0037   7834 B7 24 01    	staA 	lampColC
0038   7837 86 00       	ldaA	00000000b
0039   7839 B7 24 00    	staA	lampCol
0040   783C             	
0041   783C 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0042   783E B7 24 03    	staA 	lampStrobeC
0043   7841 86 FF       	ldaA 	11111111b	;set to output
0044   7843 B7 24 02    	staA 	lampStrobe
0045   7846 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0046   7848 B7 24 03    	staA 	lampStrobeC
0047   784B 86 00       	ldaA	00000000b
0048   784D B7 24 02    	staA	lampStrobe
0049   7850             	
0050   7850 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0051   7852 B7 30 03    	staA 	switchStrobeC
0052   7855 86 FF       	ldaA 	11111111b	;set to output
0053   7857 B7 30 02    	staA 	switchStrobe
0054   785A 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0055   785C B7 30 03    	staA 	switchStrobeC
0056   785F 86 00       	ldaA	00000000b
0057   7861 B7 30 02    	staA	switchStrobe
0058   7864             	
0059   7864 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0060   7866 B7 30 01    	staA 	switchRowC
0061   7869 86 00       	ldaA 	00000000b	;set to input
0062   786B B7 30 00    	staA 	switchRow
0063   786E 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0064   7870 B7 30 01    	staA 	switchRowC
0065   7873 86 00       	ldaA	00000000b
0066   7875 B7 30 00    	staA	switchRow
0067   7878             	
0068   7878 86 00       	ldaA	00000000b	;select direction (3rd bit = 0)
0069   787A B7 22 01    	staA 	solenoidAC
0070   787D B7 22 03    	staA	solenoidBC
0071   7880 86 FF       	ldaA 	11111111b	;set to output
0072   7882 B7 22 00    	staA 	solenoidA
0073   7885 B7 22 02    	staA 	solenoidB
0074   7888 86 04       	ldaA 	00000100b 	;select data (3rb bit = 1)
0075   788A B7 22 01    	staA 	solenoidAC
0076   788D 86 34       	ldaA 	00110100b 	;select data (3rb bit = 1), enable CB2 output low
0077   788F B7 22 03    	staA 	solenoidBC
0078   7892             	
0079   7892             
0080   7892             resetRam:
0081   7892 CE 00 00    	ldX	RAM
0082   7895 86 00       	ldaA	0
0083   7897             resetRamLoop:
0084   7897 A7 00       	staA	0, X
0085   7899 08          	inX
0086   789A 8C 02 00    	cpX	RAMEnd + 1
0087   789D 26 F8       	bne	resetRamLoop
0088   789F             	
0089   789F             	
0090   789F 86 00       	ldaA 	0
0091   78A1 97 00       	staA	temp
0092   78A3 86 FF       	ldaA	$FF
0093   78A5 97 01       	staA	temp + 1
0094   78A7 9E 00       	ldS	>temp
0095   78A9             	
0096   78A9             ;
0097   78A9             
0098   78A9 86 00       	ldaA	00
0099   78AB D7 70       	staB	displayBcd1
0100   78AD             	
0101   78AD 86 FF       	ldaA	$FF	
0102   78AF B7 28 00    	staA 	displayStrobe
0103   78B2             
0104   78B2 86 00       	ldaA	00
0105   78B4 97 07       	staA	strobe
0106   78B6 B7 01 68    	staA	displayCol
0107   78B9             	
0108   78B9 CE 00 00    	ldX 	0
0109   78BC DF 50       	stX		curCol
0110   78BE             	
0111   78BE 86 00       	ldaA	0
0112   78C0 97 10       	staA	curSwitchRowLsb
0113   78C2             	
0114   78C2             ; fill solenoid status with off
0115   78C2 86 0F       	ldaA	$F
0116   78C4 CE 01 40    	ldX	solenoid1
0117   78C7             lSolDefault:
0118   78C7 A7 00       	staA	0, X
0119   78C9 08          	inX
0120   78CA 8C 01 4F    	cpX	solenoid16
0121   78CD 26 F8       	bne	lSolDefault
0122   78CF             	
0123   78CF             ; clear 8 banks
0124   78CF 86 00       	ldaA 	0
0125   78D1 CE 00 00    	ldX	0
0126   78D4             lClear8:
0127   78D4 A7 08       	staA	lampCol1, X
0128   78D6 A7 A0       	staA	flashLampCol1, X
0129   78D8 A7 80       	staA	waitLeft, X
0130   78DA 08          	inX
0131   78DB 8C 00 08    	cpX	8
0132   78DE 26 F4       	bne 	lClear8
0133   78E0             	
0134   78E0             ; empty settle
0135   78E0 86 00       	ldaA	$00
0136   78E2 CE 01 00    	ldX	settleRow1
0137   78E5             lSettleDefault:
0138   78E5 A7 00       	staA	0, X
0139   78E7 08          	inX
0140   78E8 8C 01 3F    	cpX	settleRow8End
0141   78EB 26 F8       	bne	lSettleDefault
0142   78ED             	
0143   78ED             ; empty queue
0144   78ED 86 FF       	ldaA	$FF
0145   78EF CE 00 60    	ldX	queue
0146   78F2             lEmptyQueue:
0147   78F2 A7 00       	staA	0, X
0148   78F4 08          	inX
0149   78F5 8C 00 67    	cpX	queueEnd
0150   78F8 26 F8       	bne	lEmptyQueue
0151   78FA             	
0152   78FA 86 00       	ldaA	0
0153   78FC 97 54       	staA	queueHead + 0
0154   78FE 97 56       	staA	queueTail + 0
0155   7900 86 60       	ldaA	queue
0156   7902 97 55       	staA	queueHead + 1
0157   7904 97 57       	staA	queueTail + 1
0158   7906             	
0159   7906             ; test numbers
0160   7906 86 20       	lampOn(6,8) ; game over
0160   7908 9A 0F       
0160   790A 97 0F       
0161   790C             
0162   790C             	
0163   790C BD 7D 44    	jsr resetScores
0164   790F             	
0165   790F             ; setup complete
0166   790F 0E          	clI		; enable timer interrupt
0167   7910             	
0168   7910             	
0169   7910             end:
0170   7910 B6 01 69    	ldaA	>state
0171   7913 85 04       	bitA	100b
0172   7915             	ifne
0172   7915             
0172   7915 27 FE       
0173   7917             		; dec wait timers
0174   7917 CE 00 7F    		ldX	waitLeft - 1
0175   791A             decWaitTimers:
0176   791A 08          		inX
0177   791B A6 00       		ldaA	0, X
0178   791D             		ifne
0178   791D             
0178   791D 27 FE       
0179   791F 4A          			decA
0180   7920 A7 00       			staA	0, X
0181   7922             			ifeq
0181   7922             
0181   7922 26 FE       
0182   7924 A6 08       				ldaA	waitMsb - waitLeft, X
0183   7926 97 58       				staA	tempQ
0184   7928 A6 10       				ldaA	waitLsb - waitLeft, X
0185   792A 97 59       				staA	tempQ + 1
0186   792C E6 18       				ldaB	waitReg - waitLeft, X
0187   792E DE 58       				ldX	>tempQ
0188   7930 6E 00       				jmp	0, X
0189   7932             			endif
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0189   7923             
0189   7923 0E          
0189   7924             
0189   7924             
0189   7924~            			endif
0189   7924~            			endif
0189   7924~            			endif
0189   7924             
0189   7932             
0189   7932~            			endif
0189   7932~            			endif
0189   7932             
0190   7932             		endif
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0190   791E             
0190   791E 13          
0190   791F             
0190   791F             
0190   791F~            		endif
0190   791F~            		endif
0190   791F~            		endif
0190   791F             
0190   7932             
0190   7932~            		endif
0190   7932~            		endif
0190   7932             
0191   7932 8C 00 87    		cpX	waitLeftEnd
0192   7935 26 E3       		bne	decWaitTimers
0193   7937             		
0194   7937 7A 00 A9    		dec	dropResetTimer
0195   793A             		ifmi
0195   793A             
0195   793A 2A FE       
0196   793C 7C 00 A9    			inc	dropResetTimer
0197   793F             		endif
0197   793F             
0197   793F             
0197   793F             
0197   793F             
0197   793F             
0197   793F~            		endif
0197   793F~            		endif
0197   793F             
0197   793F~            		endif
0197   793F~            		endif
0197   793F             
0197   793B             
0197   793B 03          
0197   793C             
0197   793C             
0197   793C~            		endif
0197   793C~            		endif
0197   793C~            		endif
0197   793C             
0197   793F             
0197   793F~            		endif
0197   793F~            		endif
0197   793F             
0198   793F             		
0199   793F B6 01 69    		ldaA	>state		; clear strobe reset bit
0200   7942 84 FB       		andA	11111011b
0201   7944 B7 01 69    		staA	state
0202   7947             	endif
0202   7947             
0202   7947             
0202   7947             
0202   7947             
0202   7947             
0202   7947~            	endif
0202   7947~            	endif
0202   7947             
0202   7947~            	endif
0202   7947~            	endif
0202   7947             
0202   7916             
0202   7916 30          
0202   7917             
0202   7917             
0202   7917~            	endif
0202   7917~            	endif
0202   7917~            	endif
0202   7917             
0202   7947             
0202   7947~            	endif
0202   7947~            	endif
0202   7947             
0203   7947             
0204   7947             		
0205   7947             ; pop queue
0206   7947 D6 57       	ldaB	>queueTail + 1
0207   7949 D1 55       	cmpB	>queueHead + 1
0208   794B             	ifeq
0208   794B             
0208   794B 26 FE       
0209   794D 7E 79 E1    		jmp skipQueue
0210   7950             	endif
0210   7950             
0210   7950             
0210   7950             
0210   7950             
0210   7950             
0210   7950~            	endif
0210   7950~            	endif
0210   7950             
0210   7950~            	endif
0210   7950~            	endif
0210   7950             
0210   794C             
0210   794C 03          
0210   794D             
0210   794D             
0210   794D~            	endif
0210   794D~            	endif
0210   794D~            	endif
0210   794D             
0210   7950             
0210   7950~            	endif
0210   7950~            	endif
0210   7950             
0211   7950             	
0212   7950 DE 54       	ldX	>queueHead
0213   7952 A6 00       	ldaA	0, X	; A now contains the first queue item
0214   7954             	
0215   7954 16          	tAB
0216   7955 C4 3F       	andB	00111111b ; B = callback index
0217   7957             	
0218   7957 D7 59       	staB	tempQ + 1
0219   7959 C6 60       	ldaB	callbackTable >> 8
0220   795B D7 58       	staB	tempQ + 0	; callback address LSB / 2
0221   795D DE 58       	ldX	>tempQ
0222   795F             	
0223   795F E6 80       	ldaB	settleTable - callbackTable, X ; B has settle settings
0224   7961 C5 80       	bitB 	10000000b ; B.8 set if switch limited to closures
0225   7963             	ifne ; if closure only
0225   7963             
0225   7963 27 FE       
0226   7965 85 80       		bitA	10000000b ; A.8 set if item was a switch opening
0227   7967 26 62       		bne	skipEvent
0228   7969             	endif
0228   7969             
0228   7969             
0228   7969             
0228   7969             
0228   7969             
0228   7969~            	endif
0228   7969~            	endif
0228   7969             
0228   7969~            	endif
0228   7969~            	endif
0228   7969             
0228   7964             
0228   7964 04          
0228   7965             
0228   7965             
0228   7965~            	endif
0228   7965~            	endif
0228   7965~            	endif
0228   7965             
0228   7969             
0228   7969~            	endif
0228   7969~            	endif
0228   7969             
0229   7969             	
0230   7969 C5 40       	bitB	01000000b ; B.7 = active in game over
0231   796B             	ifeq 	 ; not active in game over
0231   796B             
0231   796B 26 FE       
0232   796D D6 0F       		ldaB	>lc(8)	; gameover mask
0233   796F C5 20       		bitB	lr(6)
0234   7971 26 58       		bne	skipEvent
0235   7973 D6 0F       		ldaB	>lc(8) ; tilt bit
0236   7975 C5 10       		bitB	lr(5)
0237   7977 26 52       		bne	skipEvent
0238   7979             	endif
0238   7979             
0238   7979             
0238   7979             
0238   7979             
0238   7979             
0238   7979~            	endif
0238   7979~            	endif
0238   7979             
0238   7979~            	endif
0238   7979~            	endif
0238   7979             
0238   796C             
0238   796C 0C          
0238   796D             
0238   796D             
0238   796D~            	endif
0238   796D~            	endif
0238   796D~            	endif
0238   796D             
0238   7979             
0238   7979~            	endif
0238   7979~            	endif
0238   7979             
0239   7979             	
0240   7979             	; checked passed, do callback
0241   7979 78 00 59    	lsl	tempQ + 1 ; double LSB because callback table is 2b wide
0242   797C DE 58       	ldX	>tempQ
0243   797E EE 00       	ldX	0, X
0244   7980 6E 00       	jmp	0, X
0245   7982             	; everything trashed
0246   7982             afterQueueEvent:
0247   7982 BD 60 C3    	jsr 	bonusLights
0248   7985             	
0249   7985             	; update last switch
0250   7985 96 59       	ldaA	> tempQ + 1
0251   7987 44          	lsrA 	; got doubled earlier
0252   7988 97 A8       	staA	lastSwitch
0253   798A             
0254   798A 86 02       	ldaA	10b ; no validate bit
0255   798C B5 01 69    	bitA	>state
0256   798F             	ifeq ; validate pf
0256   798F             
0256   798F 26 FE       
0257   7991             		; check if playfield invalid
0258   7991 86 0F       		ldaA	00001111b ; player up
0259   7993 95 A7       		bitA	>flc(8)
0260   7995             		ifne ; any flashing -> pf invalid
0260   7995             
0260   7995 27 FE       
0261   7997 43          			comA	; turn off flashing
0262   7998 94 A7       			andA	>flc(8)
0263   799A 97 A7       			staA	flc(8)
0264   799C             			
0265   799C 86 01       			ldaA	lr(1) ; shoot again pf flashing
0266   799E 95 A2       			bitA	>flc(3)
0267   79A0             			ifne
0267   79A0             
0267   79A0 27 FE       
0268   79A2             				; turn off ball save
0269   79A2 86 FE       				flashOff(1,3)
0269   79A4 94 A2       
0269   79A6 97 A2       
0270   79A8 86 40       				ldaA	lr(7) ; shoot again backbox
0271   79AA 95 0F       				bitA	>lc(8)
0272   79AC             				ifeq
0272   79AC             
0272   79AC 26 FE       
0273   79AE 86 FE       					lampOff(1,3) ; shoot again pf
0273   79B0 94 0A       
0273   79B2 97 0A       
0274   79B4             				endif
0274   79B4             
0274   79B4             
0274   79B4             
0274   79B4             
0274   79B4             
0274   79B4~            				endif
0274   79B4~            				endif
0274   79B4             
0274   79B4~            				endif
0274   79B4~            				endif
0274   79B4             
0274   79AD             
0274   79AD 06          
0274   79AE             
0274   79AE             
0274   79AE~            				endif
0274   79AE~            				endif
0274   79AE~            				endif
0274   79AE             
0274   79B4             
0274   79B4~            				endif
0274   79B4~            				endif
0274   79B4             
0275   79B4             			else
0275   79B4             
0275   79B4             
0275   79B4             
0275   79B4             
0275   79A1             
0275   79A1             
0275   79A1             
0275   79A1~            			else
0275   79A1~            			else
0275   79A1~            			else
0275   79A1~            			else
0275   79A1             
0275   79A1~            			else
0275   79A1~            			else
0275   79A1~            			else
0275   79A1~            			else
0275   79A1             
0275   79A1             
0275   79A1 14          
0275   79B4             
0275   79B4 20 FE       
0275   79B6             
0275   79B6             
0275   79B6             
0275   79B6~            			else
0275   79B6~            			else
0275   79B6~            			else
0275   79B6~            			else
0275   79B6~            			else
0275   79B6             
0275   79B6~            			else
0275   79B6~            			else
0275   79B6             
0275   79B6~            			else
0275   79B6~            			else
0275   79B6             
0276   79B6 86 FE       				lampOff(1,3) ; shoot again
0276   79B8 94 0A       
0276   79BA 97 0A       
0277   79BC 86 BF       				lampOff(7,8)
0277   79BE 94 0F       
0277   79C0 97 0F       
0278   79C2             			endif
0278   79C2             
0278   79C2             
0278   79C2             
0278   79C2             
0278   79C2             
0278   79C2~            			endif
0278   79C2~            			endif
0278   79C2             
0278   79C2~            			endif
0278   79C2~            			endif
0278   79C2             
0278   79B5             
0278   79B5 0C          
0278   79B6             
0278   79B6             
0278   79B6~            			endif
0278   79B6~            			endif
0278   79B6~            			endif
0278   79B6             
0278   79C2             
0278   79C2~            			endif
0278   79C2~            			endif
0278   79C2             
0279   79C2             		endif
0279   79C2             
0279   79C2             
0279   79C2             
0279   79C2             
0279   79C2             
0279   79C2~            		endif
0279   79C2~            		endif
0279   79C2             
0279   79C2~            		endif
0279   79C2~            		endif
0279   79C2             
0279   7996             
0279   7996 2B          
0279   7997             
0279   7997             
0279   7997~            		endif
0279   7997~            		endif
0279   7997~            		endif
0279   7997             
0279   79C2             
0279   79C2~            		endif
0279   79C2~            		endif
0279   79C2             
0280   79C2             	else
0280   79C2             
0280   79C2             
0280   79C2             
0280   79C2             
0280   7990             
0280   7990             
0280   7990             
0280   7990~            	else
0280   7990~            	else
0280   7990~            	else
0280   7990~            	else
0280   7990             
0280   7990~            	else
0280   7990~            	else
0280   7990~            	else
0280   7990~            	else
0280   7990             
0280   7990             
0280   7990 33          
0280   79C2             
0280   79C2 20 FE       
0280   79C4             
0280   79C4             
0280   79C4             
0280   79C4~            	else
0280   79C4~            	else
0280   79C4~            	else
0280   79C4~            	else
0280   79C4~            	else
0280   79C4             
0280   79C4~            	else
0280   79C4~            	else
0280   79C4             
0280   79C4~            	else
0280   79C4~            	else
0280   79C4             
0281   79C4             		; clear don't validate bit
0282   79C4 43          		comA
0283   79C5 B4 01 69    		andA	>state
0284   79C8 B7 01 69    		staA	>state
0285   79CB             	endif
0285   79CB             
0285   79CB             
0285   79CB             
0285   79CB             
0285   79CB             
0285   79CB~            	endif
0285   79CB~            	endif
0285   79CB             
0285   79CB~            	endif
0285   79CB~            	endif
0285   79CB             
0285   79C3             
0285   79C3 07          
0285   79C4             
0285   79C4             
0285   79C4~            	endif
0285   79C4~            	endif
0285   79C4~            	endif
0285   79C4             
0285   79CB             
0285   79CB~            	endif
0285   79CB~            	endif
0285   79CB             
0286   79CB             	
0287   79CB             skipEvent:
0288   79CB B6 01 69    	ldaA	>state
0289   79CE 85 04       	bitA	100b
0290   79D0             	ifeq	; don't process queue if still finishing timers
0290   79D0             
0290   79D0 26 FE       
0291   79D2 C6 67       		ldaB	queueEnd
0292   79D4 D1 55       		cmpB	>queueHead + 1
0293   79D6             		ifeq
0293   79D6             
0293   79D6 26 FE       
0294   79D8 C6 60       			ldaB	queue
0295   79DA D7 55       			staB	queueHead + 1
0296   79DC             		else
0296   79DC             
0296   79DC             
0296   79DC             
0296   79DC             
0296   79D7             
0296   79D7             
0296   79D7             
0296   79D7~            		else
0296   79D7~            		else
0296   79D7~            		else
0296   79D7~            		else
0296   79D7             
0296   79D7~            		else
0296   79D7~            		else
0296   79D7~            		else
0296   79D7~            		else
0296   79D7             
0296   79D7             
0296   79D7 06          
0296   79DC             
0296   79DC 20 FE       
0296   79DE             
0296   79DE             
0296   79DE             
0296   79DE~            		else
0296   79DE~            		else
0296   79DE~            		else
0296   79DE~            		else
0296   79DE~            		else
0296   79DE             
0296   79DE~            		else
0296   79DE~            		else
0296   79DE             
0296   79DE~            		else
0296   79DE~            		else
0296   79DE             
0297   79DE 7C 00 55    			inc	queueHead + 1
0298   79E1             		endif
0298   79E1             
0298   79E1             
0298   79E1             
0298   79E1             
0298   79E1             
0298   79E1~            		endif
0298   79E1~            		endif
0298   79E1             
0298   79E1~            		endif
0298   79E1~            		endif
0298   79E1             
0298   79DD             
0298   79DD 03          
0298   79DE             
0298   79DE             
0298   79DE~            		endif
0298   79DE~            		endif
0298   79DE~            		endif
0298   79DE             
0298   79E1             
0298   79E1~            		endif
0298   79E1~            		endif
0298   79E1             
0299   79E1             	endif
0299   79E1             
0299   79E1             
0299   79E1             
0299   79E1             
0299   79E1             
0299   79E1~            	endif
0299   79E1~            	endif
0299   79E1             
0299   79E1~            	endif
0299   79E1~            	endif
0299   79E1             
0299   79D1             
0299   79D1 0F          
0299   79D2             
0299   79D2             
0299   79D2~            	endif
0299   79D2~            	endif
0299   79D2~            	endif
0299   79D2             
0299   79E1             
0299   79E1~            	endif
0299   79E1~            	endif
0299   79E1             
0300   79E1             				
0301   79E1             skipQueue:
0302   79E1             				
0303   79E1             	
0304   79E1             				
0305   79E1 7E 79 10    	jmp		end
0306   79E4 00 00       	.dw 0
0307   79E6 00 00       	.dw 0
0308   79E8 00 00       	.dw 0
0309   79EA 00 00       	.dw 0
0310   79EC 00 00       	.dw 0
0311   79EE             		
0312   79EE             interrupt:	
0313   79EE 7C 00 02    	inc	counter
0314   79F1 86 00       	ldaA	0
0315   79F3 91 02       	cmpA	>counter
0316   79F5 26 21       	bne	counterHandled
0317   79F7 7C 00 03    	inc 	counter2
0318   79FA 86 04       	ldaA	4
0319   79FC 91 03       	cmpA	>counter2
0320   79FE 26 18       	bne	counterHandled
0321   7A00             	
0322   7A00 86 00       	ldaA	0
0323   7A02 97 03       	staA	counter2
0324   7A04 86 77       	ldaA	01110111b
0325   7A06 91 70       	cmpA	>displayBcd1
0326   7A08 27 08       	beq	on
0327   7A0A             	
0328   7A0A 86 F0       	ldaA	$F0
0329   7A0C             	;staA	lampRow1
0330   7A0C 86 77       	ldaA	01110111b
0331   7A0E 97 70       	staA	displayBcd1	
0332   7A10 20 06       	bra	counterHandled
0333   7A12             on:
0334   7A12 86 0F       	ldaA	$0F
0335   7A14             	;staA	lampRow1
0336   7A14 86 33       	ldaA	00110011b
0337   7A16 97 70       	staA	displayBcd1	
0338   7A18             
0339   7A18             counterHandled:
0340   7A18             ; move switch column
0341   7A18 96 07       	ldaA	>strobe
0342   7A1A B7 30 02    	staA	switchStrobe
0343   7A1D             	
0344   7A1D             ; update display 
0345   7A1D             	
0346   7A1D DE 50       	ldX	>curCol
0347   7A1F B6 01 68    	ldaA	>displayCol
0348   7A22 C6 FF       	ldaB 	$FF
0349   7A24 F7 28 02    	staB	displayBcd
0350   7A27 B7 28 00    	staA	displayStrobe
0351   7A2A 85 08       	bitA	00001000b
0352   7A2C             	ifeq
0352   7A2C             
0352   7A2C 26 FE       
0353   7A2E E6 70       		ldaB	displayBcd1, X
0354   7A30             	else
0354   7A30             
0354   7A30             
0354   7A30             
0354   7A30             
0354   7A2D             
0354   7A2D             
0354   7A2D             
0354   7A2D~            	else
0354   7A2D~            	else
0354   7A2D~            	else
0354   7A2D~            	else
0354   7A2D             
0354   7A2D~            	else
0354   7A2D~            	else
0354   7A2D~            	else
0354   7A2D~            	else
0354   7A2D             
0354   7A2D             
0354   7A2D 04          
0354   7A30             
0354   7A30 20 FE       
0354   7A32             
0354   7A32             
0354   7A32             
0354   7A32~            	else
0354   7A32~            	else
0354   7A32~            	else
0354   7A32~            	else
0354   7A32~            	else
0354   7A32             
0354   7A32~            	else
0354   7A32~            	else
0354   7A32             
0354   7A32~            	else
0354   7A32~            	else
0354   7A32             
0355   7A32 E6 78       		ldaB	displayBcd1 + 8, X
0356   7A34             	endif
0356   7A34             
0356   7A34             
0356   7A34             
0356   7A34             
0356   7A34             
0356   7A34~            	endif
0356   7A34~            	endif
0356   7A34             
0356   7A34~            	endif
0356   7A34~            	endif
0356   7A34             
0356   7A31             
0356   7A31 02          
0356   7A32             
0356   7A32             
0356   7A32~            	endif
0356   7A32~            	endif
0356   7A32~            	endif
0356   7A32             
0356   7A34             
0356   7A34~            	endif
0356   7A34~            	endif
0356   7A34             
0357   7A34 F7 28 02    	staB	displayBcd
0358   7A37             	
0359   7A37             ; read switches
0360   7A37             	;jmp updateLamps
0361   7A37 DE 50       	ldX	>curCol
0362   7A39 B6 30 00    	ldaA	>switchRow
0363   7A3C 16          	tab
0364   7A3D A8 20       	eorA	switchRow1, X ; A contains any switches that have changed state
0365   7A3F             	
0366   7A3F D6 10       	ldaB	>curSwitchRowLsb 	;	B now contains LSB of callbackTable row addr
0367   7A41 D7 01       	staB	temp + 1 			; temp = switch / 2
0368   7A43 D7 53       	staB	tempX + 1			; tempX = cRAM
0369   7A45 C6 60       	ldaB	callbackTable >> 8
0370   7A47 D7 00       	staB	temp
0371   7A49 C6 01       	ldaB	cRAM >> 8
0372   7A4B D7 52       	staB	tempX
0373   7A4D             	
0374   7A4D C6 01       	ldaB	00000001b ; B is the bit of the current switch in row
0375   7A4F             	
0376   7A4F             	; temp now contains the beginning of the row in the callbackTable
0377   7A4F             swNext:
0378   7A4F 85 01       	bitA	00000001b	 ; Z set if switch not different
0379   7A51             	ifne		; if bit set, switch different
0379   7A51             
0379   7A51 27 FE       
0380   7A53 36          		pshA ; store changed switches left
0381   7A54 DE 52       		ldX	>tempX
0382   7A56 86 18       		ldaA	11000b ; want to skip decrementing settle counter 7/8 IRQs
0383   7A58             				; but checking 'multiple of 8' would miss 7/8 switch
0384   7A58             				; columns completely since they're in sync
0385   7A58             				; so instead the lowest bits are empty (so that it'll
0386   7A58             				; get all switch cols) and instead it skips 7/8 groups 
0387   7A58             				; of 8 IRQs
0388   7A58 95 02       		bitA	>counter
0389   7A5A 27 08       		beq checkSettled ; counter not multiple of 8, skip settling (multiplies settle time by 8)
0390   7A5C             			; just check if this is the beginning of the settle
0391   7A5C             			;  (want to react right away when a switch closes)
0392   7A5C A6 00       			ldaA	0, X ; A now how long the switch has left to settle
0393   7A5E 84 0F       			andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0394   7A60 27 33       			beq 	notSettled; A=0 -> was settled, so can begin
0395   7A62 20 4B       			bra settledEnd
0396   7A64             checkSettled:
0397   7A64 A6 00       		ldaA	0, X ; A now how long the switch has left to settle
0398   7A66 84 0F       		andA	00001111b ; need to remove upper F ( sets Z if A = 0)
0399   7A68 27 2B       		beq 	notSettled; A=0 -> settled
0400   7A6A             		; else A > 0 -> settling
0401   7A6A 4A          			decA
0402   7A6B A7 00       			staA	0, X	; sets Z if now A = 0
0403   7A6D             			ifeq ; A=0 -> now settled, fire event
0403   7A6D             
0403   7A6D 26 FE       
0404   7A6F             settled:		
0405   7A6F DE 50       				ldX	>curCol
0406   7A71 17          				tBA	; A now the bit in row
0407   7A72 A8 20       				eorA	switchRow1, X ; toggle bit in row
0408   7A74 A7 20       				staA	switchRow1, X ; A now state of row
0409   7A76             				
0410   7A76 F5 30 00    				bitB	>switchRow
0411   7A79             				ifne ; switch now on
0411   7A79             
0411   7A79 27 FE       
0412   7A7B 86 40       					ldaA	01000000b
0413   7A7D             				else
0413   7A7D             
0413   7A7D             
0413   7A7D             
0413   7A7D             
0413   7A7A             
0413   7A7A             
0413   7A7A             
0413   7A7A~            				else
0413   7A7A~            				else
0413   7A7A~            				else
0413   7A7A~            				else
0413   7A7A             
0413   7A7A~            				else
0413   7A7A~            				else
0413   7A7A~            				else
0413   7A7A~            				else
0413   7A7A             
0413   7A7A             
0413   7A7A 04          
0413   7A7D             
0413   7A7D 20 FE       
0413   7A7F             
0413   7A7F             
0413   7A7F             
0413   7A7F~            				else
0413   7A7F~            				else
0413   7A7F~            				else
0413   7A7F~            				else
0413   7A7F~            				else
0413   7A7F             
0413   7A7F~            				else
0413   7A7F~            				else
0413   7A7F             
0413   7A7F~            				else
0413   7A7F~            				else
0413   7A7F             
0414   7A7F 86 C0       					ldaA	11000000b
0415   7A81             				endif
0415   7A81             
0415   7A81             
0415   7A81             
0415   7A81             
0415   7A81             
0415   7A81~            				endif
0415   7A81~            				endif
0415   7A81             
0415   7A81~            				endif
0415   7A81~            				endif
0415   7A81             
0415   7A7E             
0415   7A7E 02          
0415   7A7F             
0415   7A7F             
0415   7A7F~            				endif
0415   7A7F~            				endif
0415   7A7F~            				endif
0415   7A7F             
0415   7A81             
0415   7A81~            				endif
0415   7A81~            				endif
0415   7A81             
0416   7A81 9A 53       				oraA	>tempX + 1 ; A now contains the event per queue schema
0417   7A83             				
0418   7A83             				; store event
0419   7A83 DE 56       				ldX	>queueTail
0420   7A85 A7 00       				staA	0, X
0421   7A87 7C 00 57    				inc	queueTail + 1
0422   7A8A             				
0423   7A8A             				; wrap queueTail if necessary
0424   7A8A 8C 00 67    				cpX	queueEnd 
0425   7A8D             				ifeq
0425   7A8D             
0425   7A8D 26 FE       
0426   7A8F 86 60       					ldaA	queue 
0427   7A91 97 57       					staA	queueTail + 1
0428   7A93             				endif
0428   7A93             
0428   7A93             
0428   7A93             
0428   7A93             
0428   7A93             
0428   7A93~            				endif
0428   7A93~            				endif
0428   7A93             
0428   7A93~            				endif
0428   7A93~            				endif
0428   7A93             
0428   7A8E             
0428   7A8E 04          
0428   7A8F             
0428   7A8F             
0428   7A8F~            				endif
0428   7A8F~            				endif
0428   7A8F~            				endif
0428   7A8F             
0428   7A93             
0428   7A93~            				endif
0428   7A93~            				endif
0428   7A93             
0429   7A93             			endif
0429   7A93             
0429   7A93             
0429   7A93             
0429   7A93             
0429   7A93             
0429   7A93~            			endif
0429   7A93~            			endif
0429   7A93             
0429   7A93~            			endif
0429   7A93~            			endif
0429   7A93             
0429   7A6E             
0429   7A6E 24          
0429   7A6F             
0429   7A6F             
0429   7A6F~            			endif
0429   7A6F~            			endif
0429   7A6F~            			endif
0429   7A6F             
0429   7A93             
0429   7A93~            			endif
0429   7A93~            			endif
0429   7A93             
0430   7A93 20 1A       		bra settledEnd
0431   7A95             notSettled: ; =0 -> was settled, so now it's not
0432   7A95             			; get the settle time
0433   7A95 96 53       			ldaA	>tempX + 1
0434   7A97 97 01       			staA	temp + 1 	; get temp in sync with tempX LSB
0435   7A99 DE 00       			ldX	>temp
0436   7A9B             			
0437   7A9B             			; temp contains half the address of the callback, so add diff between settleTable and callbackTable
0438   7A9B A6 80       			ldaA	settleTable - callbackTable, X ; A has settle settings
0439   7A9D             			
0440   7A9D             			; need to get correct 3 bits from switch settings
0441   7A9D F5 30 00    			bitB	>switchRow
0442   7AA0             			ifne ; switch just turned on
0442   7AA0             
0442   7AA0 27 FE       
0443   7AA2 44          				lsrA
0444   7AA3 44          				lsrA
0445   7AA4             			else
0445   7AA4             
0445   7AA4             
0445   7AA4             
0445   7AA4             
0445   7AA1             
0445   7AA1             
0445   7AA1             
0445   7AA1~            			else
0445   7AA1~            			else
0445   7AA1~            			else
0445   7AA1~            			else
0445   7AA1             
0445   7AA1~            			else
0445   7AA1~            			else
0445   7AA1~            			else
0445   7AA1~            			else
0445   7AA1             
0445   7AA1             
0445   7AA1 04          
0445   7AA4             
0445   7AA4 20 FE       
0445   7AA6             
0445   7AA6             
0445   7AA6             
0445   7AA6~            			else
0445   7AA6~            			else
0445   7AA6~            			else
0445   7AA6~            			else
0445   7AA6~            			else
0445   7AA6             
0445   7AA6~            			else
0445   7AA6~            			else
0445   7AA6             
0445   7AA6~            			else
0445   7AA6~            			else
0445   7AA6             
0446   7AA6 48          				aslA
0447   7AA7             			endif
0447   7AA7             
0447   7AA7             
0447   7AA7             
0447   7AA7             
0447   7AA7             
0447   7AA7~            			endif
0447   7AA7~            			endif
0447   7AA7             
0447   7AA7~            			endif
0447   7AA7~            			endif
0447   7AA7             
0447   7AA5             
0447   7AA5 01          
0447   7AA6             
0447   7AA6             
0447   7AA6~            			endif
0447   7AA6~            			endif
0447   7AA6~            			endif
0447   7AA6             
0447   7AA7             
0447   7AA7~            			endif
0447   7AA7~            			endif
0447   7AA7             
0448   7AA7 84 0E       			andA	1110b ; A now has 3 bit settle time * 2
0449   7AA9             						
0450   7AA9 DE 52       			ldX	>tempX
0451   7AAB A7 00       			staA	0, X		; start settling	
0452   7AAD 27 C0       			beq	settled		; quick out for 0 settle
0453   7AAF             settledEnd:
0454   7AAF             			
0455   7AAF 32          		pulA
0456   7AB0             	endif
0456   7AB0             
0456   7AB0             
0456   7AB0             
0456   7AB0             
0456   7AB0             
0456   7AB0~            	endif
0456   7AB0~            	endif
0456   7AB0             
0456   7AB0~            	endif
0456   7AB0~            	endif
0456   7AB0             
0456   7A52             
0456   7A52 5D          
0456   7A53             
0456   7A53             
0456   7A53~            	endif
0456   7A53~            	endif
0456   7A53~            	endif
0456   7A53             
0456   7AB0             
0456   7AB0~            	endif
0456   7AB0~            	endif
0456   7AB0             
0457   7AB0 7C 00 53    	inc tempX + 1
0458   7AB3 58          	aslB
0459   7AB4 44          	lsrA			; pop lowest bit off, set Z if A is empty
0460   7AB5 26 98       	bne		swNext 	; more 'switched' bits, keep processing 
0461   7AB7             	
0462   7AB7             	
0463   7AB7             ; update lamps
0464   7AB7             updateLamps:
0465   7AB7             	;jmp updateStrobe
0466   7AB7             
0467   7AB7 DE 50       	ldX	>curCol
0468   7AB9             	
0469   7AB9 86 FF       	ldaA	$FF	;lamp row is inverted
0470   7ABB B7 24 00    	staA	lampCol
0471   7ABE 96 07       	ldaA	>strobe
0472   7AC0 B7 24 02    	staA	lampStrobe
0473   7AC3             	
0474   7AC3 D6 02       	ldaB	>counter
0475   7AC5 A6 08       	ldaA	lampCol1, X
0476   7AC7 C5 80       	bitB	10000000b 
0477   7AC9             	ifeq
0477   7AC9             
0477   7AC9 26 FE       
0478   7ACB A8 A0       		eorA	flashLampCol1, X
0479   7ACD A4 08       		andA	lampCol1, X
0480   7ACF             	endif
0480   7ACF             
0480   7ACF             
0480   7ACF             
0480   7ACF             
0480   7ACF             
0480   7ACF~            	endif
0480   7ACF~            	endif
0480   7ACF             
0480   7ACF~            	endif
0480   7ACF~            	endif
0480   7ACF             
0480   7ACA             
0480   7ACA 04          
0480   7ACB             
0480   7ACB             
0480   7ACB~            	endif
0480   7ACB~            	endif
0480   7ACB~            	endif
0480   7ACB             
0480   7ACF             
0480   7ACF~            	endif
0480   7ACF~            	endif
0480   7ACF             
0481   7ACF 43          	comA	; inverted
0482   7AD0             	
0483   7AD0 B7 24 00    	staA	lampCol
0484   7AD3 86 00       	ldaA	00
0485   7AD5             
0486   7AD5             ; update solenoids
0487   7AD5             	; if a solenoid is set to <254, --
0488   7AD5             	; if =255, off, otherwise on
0489   7AD5             	; else leave it at 254
0490   7AD5             	
0491   7AD5 7C 00 50    	inc	curCol	; indexed can't use base >255, so temp inc X by 255 (1 MSB)
0492   7AD8 86 FE       	ldaA	254
0493   7ADA DE 50       	ldX	>curCol
0494   7ADC             	; update solenoid in current 'column' (1-8) 
0495   7ADC A1 40       	cmpA	solenoid1 - cRAM, X
0496   7ADE             	ifge 	; solenoid <=254, turn on
0496   7ADE             
0496   7ADE 25 FE       
0497   7AE0             		ifgt	; solenoid < 254, decrement
0497   7AE0             
0497   7AE0 23 FE       
0498   7AE2 6A 40       			dec	solenoid1 - cRAM, X
0499   7AE4             		endif
0499   7AE4             
0499   7AE4             
0499   7AE4             
0499   7AE4             
0499   7AE4             
0499   7AE4~            		endif
0499   7AE4~            		endif
0499   7AE4             
0499   7AE4~            		endif
0499   7AE4~            		endif
0499   7AE4             
0499   7AE1             
0499   7AE1 02          
0499   7AE2             
0499   7AE2             
0499   7AE2~            		endif
0499   7AE2~            		endif
0499   7AE2~            		endif
0499   7AE2             
0499   7AE4             
0499   7AE4~            		endif
0499   7AE4~            		endif
0499   7AE4             
0500   7AE4 0D          		sec
0501   7AE5             	else
0501   7AE5             
0501   7AE5             
0501   7AE5             
0501   7AE5             
0501   7ADF             
0501   7ADF             
0501   7ADF             
0501   7ADF~            	else
0501   7ADF~            	else
0501   7ADF~            	else
0501   7ADF~            	else
0501   7ADF             
0501   7ADF~            	else
0501   7ADF~            	else
0501   7ADF~            	else
0501   7ADF~            	else
0501   7ADF             
0501   7ADF             
0501   7ADF 07          
0501   7AE5             
0501   7AE5 20 FE       
0501   7AE7             
0501   7AE7             
0501   7AE7             
0501   7AE7~            	else
0501   7AE7~            	else
0501   7AE7~            	else
0501   7AE7~            	else
0501   7AE7~            	else
0501   7AE7             
0501   7AE7~            	else
0501   7AE7~            	else
0501   7AE7             
0501   7AE7~            	else
0501   7AE7~            	else
0501   7AE7             
0502   7AE7 0C          		clc
0503   7AE8             	endif
0503   7AE8             
0503   7AE8             
0503   7AE8             
0503   7AE8             
0503   7AE8             
0503   7AE8~            	endif
0503   7AE8~            	endif
0503   7AE8             
0503   7AE8~            	endif
0503   7AE8~            	endif
0503   7AE8             
0503   7AE6             
0503   7AE6 01          
0503   7AE7             
0503   7AE7             
0503   7AE7~            	endif
0503   7AE7~            	endif
0503   7AE7~            	endif
0503   7AE7             
0503   7AE8             
0503   7AE8~            	endif
0503   7AE8~            	endif
0503   7AE8             
0504   7AE8 76 00 28    	ror	solAStatus ; pushes carry bit (set prev) onto status
0505   7AEB             	; repeat above for second bank
0506   7AEB A1 48       	cmpA	solenoid9 - cRAM, X
0507   7AED             	ifge 	; solenoid <=254, turn on
0507   7AED             
0507   7AED 25 FE       
0508   7AEF             		ifgt	; solenoid < 254, decrement
0508   7AEF             
0508   7AEF 23 FE       
0509   7AF1 6A 48       			dec	solenoid9 - cRAM, X
0510   7AF3             		endif
0510   7AF3             
0510   7AF3             
0510   7AF3             
0510   7AF3             
0510   7AF3             
0510   7AF3~            		endif
0510   7AF3~            		endif
0510   7AF3             
0510   7AF3~            		endif
0510   7AF3~            		endif
0510   7AF3             
0510   7AF0             
0510   7AF0 02          
0510   7AF1             
0510   7AF1             
0510   7AF1~            		endif
0510   7AF1~            		endif
0510   7AF1~            		endif
0510   7AF1             
0510   7AF3             
0510   7AF3~            		endif
0510   7AF3~            		endif
0510   7AF3             
0511   7AF3 0D          		sec
0512   7AF4             	else
0512   7AF4             
0512   7AF4             
0512   7AF4             
0512   7AF4             
0512   7AEE             
0512   7AEE             
0512   7AEE             
0512   7AEE~            	else
0512   7AEE~            	else
0512   7AEE~            	else
0512   7AEE~            	else
0512   7AEE             
0512   7AEE~            	else
0512   7AEE~            	else
0512   7AEE~            	else
0512   7AEE~            	else
0512   7AEE             
0512   7AEE             
0512   7AEE 07          
0512   7AF4             
0512   7AF4 20 FE       
0512   7AF6             
0512   7AF6             
0512   7AF6             
0512   7AF6~            	else
0512   7AF6~            	else
0512   7AF6~            	else
0512   7AF6~            	else
0512   7AF6~            	else
0512   7AF6             
0512   7AF6~            	else
0512   7AF6~            	else
0512   7AF6             
0512   7AF6~            	else
0512   7AF6~            	else
0512   7AF6             
0513   7AF6 0C          		clc
0514   7AF7             	endif
0514   7AF7             
0514   7AF7             
0514   7AF7             
0514   7AF7             
0514   7AF7             
0514   7AF7~            	endif
0514   7AF7~            	endif
0514   7AF7             
0514   7AF7~            	endif
0514   7AF7~            	endif
0514   7AF7             
0514   7AF5             
0514   7AF5 01          
0514   7AF6             
0514   7AF6             
0514   7AF6~            	endif
0514   7AF6~            	endif
0514   7AF6~            	endif
0514   7AF6             
0514   7AF7             
0514   7AF7~            	endif
0514   7AF7~            	endif
0514   7AF7             
0515   7AF7 76 00 29    	ror		solBStatus	
0516   7AFA 7A 00 50    	dec		curCol ; undo inc
0517   7AFD             	
0518   7AFD             ; update strobe	
0519   7AFD             updateStrobe:
0520   7AFD             	;ldX		curCol
0521   7AFD             	;inX 	
0522   7AFD 86 08       	ldaA	8 	; pitch
0523   7AFF 9B 10       	addA	>curSwitchRowLsb
0524   7B01 97 10       	staA	curSwitchRowLsb
0525   7B03 78 00 07    	asl	strobe
0526   7B06 7C 01 68    	inc	displayCol
0527   7B09 86 00       	ldaA	0
0528   7B0B 91 07       	cmpA	>strobe ; strobe done?  reset
0529   7B0D             	ifeq		
0529   7B0D             
0529   7B0D 26 FE       
0530   7B0F 96 28       		ldaA	>solAStatus
0531   7B11 B7 22 00    		staA	solenoidA
0532   7B14 96 29       		ldaA	>solBStatus
0533   7B16 B7 22 02    		staA	solenoidB
0534   7B19             	
0535   7B19 86 01       		ldaA	00000001b
0536   7B1B 97 07       		staA	strobe
0537   7B1D             		
0538   7B1D             		;ldX 	#0
0539   7B1D             		
0540   7B1D 86 00       		ldaA	0
0541   7B1F 97 50       		staA	curCol
0542   7B21 97 51       		staA	curCol + 1
0543   7B23 97 10       		staA	curSwitchRowLsb
0544   7B25 97 28       		staA	solAStatus
0545   7B27 97 29       		staA	solBStatus
0546   7B29             		
0547   7B29 F6 01 68    		ldaB	>displayCol	; reset display col only if it's > 7 
0548   7B2C C1 F8       		cmpB	$F8	; since it needs to count to 15 instead of 7
0549   7B2E             		ifgt
0549   7B2E             
0549   7B2E 23 FE       
0550   7B30 B7 01 68    			staA	displayCol
0551   7B33             		endif
0551   7B33             
0551   7B33             
0551   7B33             
0551   7B33             
0551   7B33             
0551   7B33~            		endif
0551   7B33~            		endif
0551   7B33             
0551   7B33~            		endif
0551   7B33~            		endif
0551   7B33             
0551   7B2F             
0551   7B2F 03          
0551   7B30             
0551   7B30             
0551   7B30~            		endif
0551   7B30~            		endif
0551   7B30~            		endif
0551   7B30             
0551   7B33             
0551   7B33~            		endif
0551   7B33~            		endif
0551   7B33             
0552   7B33             	
0553   7B33 B6 01 69    		ldaA	>state
0554   7B36 8A 04       		oraA	100b
0555   7B38 B7 01 69    		staA	state
0556   7B3B             	else
0556   7B3B             
0556   7B3B             
0556   7B3B             
0556   7B3B             
0556   7B0E             
0556   7B0E             
0556   7B0E             
0556   7B0E~            	else
0556   7B0E~            	else
0556   7B0E~            	else
0556   7B0E~            	else
0556   7B0E             
0556   7B0E~            	else
0556   7B0E~            	else
0556   7B0E~            	else
0556   7B0E~            	else
0556   7B0E             
0556   7B0E             
0556   7B0E 2E          
0556   7B3B             
0556   7B3B 20 FE       
0556   7B3D             
0556   7B3D             
0556   7B3D             
0556   7B3D~            	else
0556   7B3D~            	else
0556   7B3D~            	else
0556   7B3D~            	else
0556   7B3D~            	else
0556   7B3D             
0556   7B3D~            	else
0556   7B3D~            	else
0556   7B3D             
0556   7B3D~            	else
0556   7B3D~            	else
0556   7B3D             
0557   7B3D 7C 00 51    		inc	curCol + 1
0558   7B40             	endif
0558   7B40             
0558   7B40             
0558   7B40             
0558   7B40             
0558   7B40             
0558   7B40~            	endif
0558   7B40~            	endif
0558   7B40             
0558   7B40~            	endif
0558   7B40~            	endif
0558   7B40             
0558   7B3C             
0558   7B3C 03          
0558   7B3D             
0558   7B3D             
0558   7B3D~            	endif
0558   7B3D~            	endif
0558   7B3D~            	endif
0558   7B3D             
0558   7B40             
0558   7B40~            	endif
0558   7B40~            	endif
0558   7B40             
0559   7B40             	
0560   7B40 3B          	rti
0561   7B41             afterInterrupt:
0562   7B41             
0563   7FF8             pointers: 	.org $7FF8  	
0564   7FF8             	.msfirst
0565   7FF8 79 EE       	.dw interrupt			
0566   7FFA 79 EE       	.dw interrupt			
0567   7FFC 79 EE       	.dw interrupt			
0568   7FFE 78 00       	.dw main
0569   8000             	
0570   8000             	
0571   8000             	.endtasm: Number of errors = 0
